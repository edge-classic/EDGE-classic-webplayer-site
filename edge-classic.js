var createEdgeModule = (() => {
  var _scriptName = typeof document != 'undefined' ? document.currentScript?.src : undefined;
  return (
async function(moduleArg = {}) {
  var moduleRtn;

// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(moduleArg) => Promise<Module>
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = moduleArg;

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
var readyPromise = new Promise((resolve, reject) => {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// include: /home/dasho/Desktop/EDGE-classic/web/site/edge-classic-data.js

  var Module = typeof Module != 'undefined' ? Module : {};

  Module['expectedDataFileDownloads'] ??= 0;
  Module['expectedDataFileDownloads']++;
  (() => {
    // Do not attempt to redownload the virtual filesystem data when in a pthread or a Wasm Worker context.
    var isPthread = typeof ENVIRONMENT_IS_PTHREAD != 'undefined' && ENVIRONMENT_IS_PTHREAD;
    var isWasmWorker = typeof ENVIRONMENT_IS_WASM_WORKER != 'undefined' && ENVIRONMENT_IS_WASM_WORKER;
    if (isPthread || isWasmWorker) return;
    function loadPackage(metadata) {

      var PACKAGE_PATH = '';
      if (typeof window === 'object') {
        PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/')) + '/');
      } else if (typeof process === 'undefined' && typeof location !== 'undefined') {
        // web worker
        PACKAGE_PATH = encodeURIComponent(location.pathname.substring(0, location.pathname.lastIndexOf('/')) + '/');
      }
      var PACKAGE_NAME = '/home/dasho/Desktop/EDGE-classic/web/site/edge-classic.data';
      var REMOTE_PACKAGE_BASE = 'edge-classic.data';
      var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
var REMOTE_PACKAGE_SIZE = metadata['remote_package_size'];

      function fetchRemotePackage(packageName, packageSize, callback, errback) {
        
        Module['dataFileDownloads'] ??= {};
        fetch(packageName)
          .catch((cause) => Promise.reject(new Error(`Network Error: ${packageName}`, {cause}))) // If fetch fails, rewrite the error to include the failing URL & the cause.
          .then((response) => {
            if (!response.ok) {
              return Promise.reject(new Error(`${response.status}: ${response.url}`));
            }

            if (!response.body && response.arrayBuffer) { // If we're using the polyfill, readers won't be available...
              return response.arrayBuffer().then(callback);
            }

            const reader = response.body.getReader();
            const iterate = () => reader.read().then(handleChunk).catch((cause) => {
              return Promise.reject(new Error(`Unexpected error while handling : ${response.url} ${cause}`, {cause}));
            });

            const chunks = [];
            const headers = response.headers;
            const total = Number(headers.get('Content-Length') ?? packageSize);
            let loaded = 0;

            const handleChunk = ({done, value}) => {
              if (!done) {
                chunks.push(value);
                loaded += value.length;
                Module['dataFileDownloads'][packageName] = {loaded, total};

                let totalLoaded = 0;
                let totalSize = 0;

                for (const download of Object.values(Module['dataFileDownloads'])) {
                  totalLoaded += download.loaded;
                  totalSize += download.total;
                }

                Module['setStatus']?.(`Downloading data... (${totalLoaded}/${totalSize})`);
                return iterate();
              } else {
                const packageData = new Uint8Array(chunks.map((c) => c.length).reduce((a, b) => a + b, 0));
                let offset = 0;
                for (const chunk of chunks) {
                  packageData.set(chunk, offset);
                  offset += chunk.length;
                }
                callback(packageData.buffer);
              }
            };

            Module['setStatus']?.('Downloading data...');
            return iterate();
          });
      };

      function handleError(error) {
        console.error('package error:', error);
      };

    function runWithFS(Module) {

      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
Module['FS_createPath']("/", "crosshairs", true, true);
Module['FS_createPath']("/", "edge_base", true, true);
Module['FS_createPath']("/edge_base", "blasphemer", true, true);
Module['FS_createPath']("/edge_base/blasphemer", "graphics", true, true);
Module['FS_createPath']("/edge_base/blasphemer/graphics", "tome", true, true);
Module['FS_createPath']("/edge_base/blasphemer", "scripts", true, true);
Module['FS_createPath']("/edge_base/blasphemer/scripts", "lua", true, true);
Module['FS_createPath']("/edge_base", "chex1", true, true);
Module['FS_createPath']("/edge_base/chex1", "graphics", true, true);
Module['FS_createPath']("/edge_base/chex1/graphics", "chex_font", true, true);
Module['FS_createPath']("/edge_base/chex1", "scripts", true, true);
Module['FS_createPath']("/edge_base/chex1", "sprites", true, true);
Module['FS_createPath']("/edge_base", "chex3v", true, true);
Module['FS_createPath']("/edge_base/chex3v", "graphics", true, true);
Module['FS_createPath']("/edge_base/chex3v/graphics", "chex_font", true, true);
Module['FS_createPath']("/edge_base/chex3v", "scripts", true, true);
Module['FS_createPath']("/edge_base", "chex3vm", true, true);
Module['FS_createPath']("/edge_base/chex3vm", "graphics", true, true);
Module['FS_createPath']("/edge_base/chex3vm/graphics", "chex_font", true, true);
Module['FS_createPath']("/edge_base/chex3vm", "scripts", true, true);
Module['FS_createPath']("/edge_base", "doom", true, true);
Module['FS_createPath']("/edge_base/doom", "graphics", true, true);
Module['FS_createPath']("/edge_base/doom", "scripts", true, true);
Module['FS_createPath']("/edge_base/doom", "textures", true, true);
Module['FS_createPath']("/edge_base", "doom1", true, true);
Module['FS_createPath']("/edge_base/doom1", "graphics", true, true);
Module['FS_createPath']("/edge_base/doom1", "scripts", true, true);
Module['FS_createPath']("/edge_base/doom1", "textures", true, true);
Module['FS_createPath']("/edge_base", "doom2", true, true);
Module['FS_createPath']("/edge_base/doom2", "graphics", true, true);
Module['FS_createPath']("/edge_base/doom2", "scripts", true, true);
Module['FS_createPath']("/edge_base/doom2", "textures", true, true);
Module['FS_createPath']("/edge_base", "freedoom1", true, true);
Module['FS_createPath']("/edge_base/freedoom1", "graphics", true, true);
Module['FS_createPath']("/edge_base/freedoom1/graphics", "freedoom_font", true, true);
Module['FS_createPath']("/edge_base/freedoom1", "scripts", true, true);
Module['FS_createPath']("/edge_base", "freedoom2", true, true);
Module['FS_createPath']("/edge_base/freedoom2", "graphics", true, true);
Module['FS_createPath']("/edge_base/freedoom2/graphics", "freedoom_font", true, true);
Module['FS_createPath']("/edge_base/freedoom2", "scripts", true, true);
Module['FS_createPath']("/edge_base", "hacx", true, true);
Module['FS_createPath']("/edge_base/hacx", "graphics", true, true);
Module['FS_createPath']("/edge_base/hacx", "scripts", true, true);
Module['FS_createPath']("/edge_base/hacx", "sprites", true, true);
Module['FS_createPath']("/edge_base", "harmony", true, true);
Module['FS_createPath']("/edge_base/harmony", "graphics", true, true);
Module['FS_createPath']("/edge_base/harmony", "scripts", true, true);
Module['FS_createPath']("/edge_base/harmony/scripts", "lua", true, true);
Module['FS_createPath']("/edge_base/harmony", "sprites", true, true);
Module['FS_createPath']("/edge_base", "harmonyc", true, true);
Module['FS_createPath']("/edge_base/harmonyc", "graphics", true, true);
Module['FS_createPath']("/edge_base/harmonyc", "scripts", true, true);
Module['FS_createPath']("/edge_base/harmonyc/scripts", "lua", true, true);
Module['FS_createPath']("/edge_base", "heretic", true, true);
Module['FS_createPath']("/edge_base/heretic", "graphics", true, true);
Module['FS_createPath']("/edge_base/heretic/graphics", "skull", true, true);
Module['FS_createPath']("/edge_base/heretic/graphics", "tome", true, true);
Module['FS_createPath']("/edge_base/heretic/graphics", "wings", true, true);
Module['FS_createPath']("/edge_base/heretic", "scripts", true, true);
Module['FS_createPath']("/edge_base/heretic/scripts", "lua", true, true);
Module['FS_createPath']("/edge_base/heretic", "sprites", true, true);
Module['FS_createPath']("/edge_base", "plutonia", true, true);
Module['FS_createPath']("/edge_base/plutonia", "graphics", true, true);
Module['FS_createPath']("/edge_base/plutonia", "scripts", true, true);
Module['FS_createPath']("/edge_base/plutonia", "textures", true, true);
Module['FS_createPath']("/edge_base", "rekkr", true, true);
Module['FS_createPath']("/edge_base/rekkr", "graphics", true, true);
Module['FS_createPath']("/edge_base/rekkr", "scripts", true, true);
Module['FS_createPath']("/edge_base/rekkr", "sprites", true, true);
Module['FS_createPath']("/edge_base", "strife", true, true);
Module['FS_createPath']("/edge_base", "tnt", true, true);
Module['FS_createPath']("/edge_base/tnt", "graphics", true, true);
Module['FS_createPath']("/edge_base/tnt", "scripts", true, true);
Module['FS_createPath']("/edge_base/tnt", "textures", true, true);
Module['FS_createPath']("/", "edge_defs", true, true);
Module['FS_createPath']("/edge_defs", "colormaps", true, true);
Module['FS_createPath']("/edge_defs", "graphics", true, true);
Module['FS_createPath']("/edge_defs/graphics", "edge1_font", true, true);
Module['FS_createPath']("/edge_defs", "movies", true, true);
Module['FS_createPath']("/edge_defs", "scripts", true, true);
Module['FS_createPath']("/edge_defs/scripts", "lua", true, true);
Module['FS_createPath']("/edge_defs/scripts/lua", "core", true, true);
Module['FS_createPath']("/edge_defs", "sounds", true, true);
Module['FS_createPath']("/edge_defs", "sprites", true, true);
Module['FS_createPath']("/edge_defs/sprites", "mbf_dog", true, true);
Module['FS_createPath']("/edge_defs", "textures", true, true);
Module['FS_createPath']("/edge_defs", "ttf", true, true);
Module['FS_createPath']("/", "overlays", true, true);
Module['FS_createPath']("/", "soundfont", true, true);

        var PACKAGE_UUID = metadata['package_uuid'];
        var IDB_RO = "readonly";
        var IDB_RW = "readwrite";
        var DB_NAME = "EM_PRELOAD_CACHE";
        var DB_VERSION = 1;
        var METADATA_STORE_NAME = 'METADATA';
        var PACKAGE_STORE_NAME = 'PACKAGES';
        function openDatabase(callback, errback) {
          var indexedDB;
          if (typeof window === 'object') {
            indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
          } else if (typeof location !== 'undefined') {
            // worker
            indexedDB = self.indexedDB;
          } else {
            throw 'using IndexedDB to cache data can only be done on a web page or in a web worker';
          }
          try {
            var openRequest = indexedDB.open(DB_NAME, DB_VERSION);
          } catch (e) {
            return errback(e);
          }
          openRequest.onupgradeneeded = (event) => {
            var db = /** @type {IDBDatabase} */ (event.target.result);

            if (db.objectStoreNames.contains(PACKAGE_STORE_NAME)) {
              db.deleteObjectStore(PACKAGE_STORE_NAME);
            }
            var packages = db.createObjectStore(PACKAGE_STORE_NAME);

            if (db.objectStoreNames.contains(METADATA_STORE_NAME)) {
              db.deleteObjectStore(METADATA_STORE_NAME);
            }
            var metadata = db.createObjectStore(METADATA_STORE_NAME);
          };
          openRequest.onsuccess = (event) => {
            var db = /** @type {IDBDatabase} */ (event.target.result);
            callback(db);
          };
          openRequest.onerror = (error) => errback(error);
        };

        // This is needed as chromium has a limit on per-entry files in IndexedDB
        // https://cs.chromium.org/chromium/src/content/renderer/indexed_db/webidbdatabase_impl.cc?type=cs&sq=package:chromium&g=0&l=177
        // https://cs.chromium.org/chromium/src/out/Debug/gen/third_party/blink/public/mojom/indexeddb/indexeddb.mojom.h?type=cs&sq=package:chromium&g=0&l=60
        // We set the chunk size to 64MB to stay well-below the limit
        var CHUNK_SIZE = 64 * 1024 * 1024;

        function cacheRemotePackage(
          db,
          packageName,
          packageData,
          packageMeta,
          callback,
          errback
        ) {
          var transactionPackages = db.transaction([PACKAGE_STORE_NAME], IDB_RW);
          var packages = transactionPackages.objectStore(PACKAGE_STORE_NAME);
          var chunkSliceStart = 0;
          var nextChunkSliceStart = 0;
          var chunkCount = Math.ceil(packageData.byteLength / CHUNK_SIZE);
          var finishedChunks = 0;
          for (var chunkId = 0; chunkId < chunkCount; chunkId++) {
            nextChunkSliceStart += CHUNK_SIZE;
            var putPackageRequest = packages.put(
              packageData.slice(chunkSliceStart, nextChunkSliceStart),
              `package/${packageName}/${chunkId}`
            );
            chunkSliceStart = nextChunkSliceStart;
            putPackageRequest.onsuccess = (event) => {
              finishedChunks++;
              if (finishedChunks == chunkCount) {
                var transaction_metadata = db.transaction(
                  [METADATA_STORE_NAME],
                  IDB_RW
                );
                var metadata = transaction_metadata.objectStore(METADATA_STORE_NAME);
                var putMetadataRequest = metadata.put(
                  {
                    'uuid': packageMeta.uuid,
                    'chunkCount': chunkCount
                  },
                  `metadata/${packageName}`
                );
                putMetadataRequest.onsuccess = (event) =>  callback(packageData);
                putMetadataRequest.onerror = (error) => errback(error);
              }
            };
            putPackageRequest.onerror = (error) => errback(error);
          }
        }

        /* Check if there's a cached package, and if so whether it's the latest available */
        function checkCachedPackage(db, packageName, callback, errback) {
          var transaction = db.transaction([METADATA_STORE_NAME], IDB_RO);
          var metadata = transaction.objectStore(METADATA_STORE_NAME);
          var getRequest = metadata.get(`metadata/${packageName}`);
          getRequest.onsuccess = (event) => {
            var result = event.target.result;
            if (!result) {
              return callback(false, null);
            } else {
              return callback(PACKAGE_UUID === result['uuid'], result);
            }
          };
          getRequest.onerror = (error) => errback(error);
        }

        function fetchCachedPackage(db, packageName, metadata, callback, errback) {
          var transaction = db.transaction([PACKAGE_STORE_NAME], IDB_RO);
          var packages = transaction.objectStore(PACKAGE_STORE_NAME);

          var chunksDone = 0;
          var totalSize = 0;
          var chunkCount = metadata['chunkCount'];
          var chunks = new Array(chunkCount);

          for (var chunkId = 0; chunkId < chunkCount; chunkId++) {
            var getRequest = packages.get(`package/${packageName}/${chunkId}`);
            getRequest.onsuccess = (event) => {
              if (!event.target.result) {
                errback(new Error(`CachedPackageNotFound for: ${packageName}`));
                return;
              }
              // If there's only 1 chunk, there's nothing to concatenate it with so we can just return it now
              if (chunkCount == 1) {
                callback(event.target.result);
              } else {
                chunksDone++;
                totalSize += event.target.result.byteLength;
                chunks.push(event.target.result);
                if (chunksDone == chunkCount) {
                  if (chunksDone == 1) {
                    callback(event.target.result);
                  } else {
                    var tempTyped = new Uint8Array(totalSize);
                    var byteOffset = 0;
                    for (var chunkId in chunks) {
                      var buffer = chunks[chunkId];
                      tempTyped.set(new Uint8Array(buffer), byteOffset);
                      byteOffset += buffer.byteLength;
                      buffer = undefined;
                    }
                    chunks = undefined;
                    callback(tempTyped.buffer);
                    tempTyped = undefined;
                  }
                }
              }
            };
            getRequest.onerror = (error) => errback(error);
          }
        }

      function processPackageData(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file failed.');
        assert(arrayBuffer.constructor.name === ArrayBuffer.name, 'bad input to processPackageData');
        var byteArray = new Uint8Array(arrayBuffer);
        var curr;
        var compressedData = {"data":null,"cachedOffset":51536900,"cachedIndexes":[-1,-1],"cachedChunks":[null,null],"offsets":[0,1641,3123,4598,6082,7575,9057,10533,12016,13496,14972,16446,17922,19399,20880,22354,23846,25307,26785,28261,29745,31222,32717,34199,35677,37164,38649,39781,40340,40906,41609,41980,42578,42887,43420,43930,44396,44846,45440,45939,46344,46564,46870,47122,47372,47635,47908,48128,48444,48766,49011,49162,49300,49529,49669,49766,49856,50222,50718,51073,51342,51663,51907,52438,52889,53310,53548,53877,54323,54822,55268,55838,56027,56413,56961,57577,57900,58046,58338,58794,59114,59387,59691,60041,60297,60596,60906,60988,61073,61179,61447,61705,61939,62464,62979,63389,63689,63795,64139,64515,64809,65168,65643,66022,66313,66707,67197,67713,68161,68614,70666,72686,74734,76790,78821,80849,82903,84956,86778,88498,90222,91959,93657,95386,97108,98831,100552,102252,103959,105678,107397,109095,110793,112497,114174,115874,117611,119246,120917,122592,124286,126018,127737,129470,131200,132940,134664,136316,138053,139770,141507,143252,144978,146701,148406,150195,152243,154291,156339,158387,160435,162434,164168,165869,167555,169273,171021,172852,174625,176486,178136,179887,181674,183360,185110,186813,188504,190177,191769,193473,195151,196868,198544,200165,201860,203605,205295,206974,208700,210427,212198,213818,215475,217124,218859,220617,222352,224064,225798,227435,229191,230883,232596,233318,233765,234332,234973,236049,236874,237755,238612,239589,240610,241685,243128,244952,246822,248659,250533,252392,254263,255820,257298,258799,260254,261701,263143,264585,266027,267458,268899,270335,271811,273281,274744,276192,277663,279119,280594,282065,283531,285014,286480,287954,289377,290829,292302,293776,295247,296707,298186,299627,301082,302536,304005,305471,306940,308415,309893,311354,312815,314267,315737,317204,318650,320099,321555,323009,324455,325912,327393,328855,330329,331776,333250,334713,336160,337629,339090,340561,342035,343513,345000,346464,347942,349417,350876,352340,353803,355245,356683,358138,359597,361066,362533,363492,364086,364542,365081,365443,365774,366130,366517,366990,367516,368045,368473,369020,369547,369945,370404,370862,371336,371782,372230,372708,373139,373576,374159,374755,375238,375678,376288,376846,377202,377721,378358,378814,379407,380040,380506,380971,381321,381745,382129,382558,383034,383426,383847,384319,384708,385131,385439,385640,385891,386429,386922,387317,387680,388283,388724,389184,389738,390304,390925,391500,391997,392465,393012,393484,393987,394465,394936,395431,395828,396362,396737,397081,397411,397921,398404,398855,399366,399955,400586,401059,401552,402096,402467,402972,403487,404022,404360,404947,405545,406117,406717,407303,407884,408484,408975,409487,409947,410477,410938,411382,411826,412301,412865,413316,413852,414398,414895,415493,415947,416493,417028,417618,418231,418718,419209,419662,420121,420586,420965,421393,421736,422233,422684,423180,423649,424086,424492,424963,425441,425993,426606,427171,427658,428026,428445,428794,429358,429861,430484,430827,431036,431204,431310,431515,431880,432333,432599,432869,433176,433648,434057,434471,434885,435272,435703,436144,436492,436941,437489,438078,438478,439001,439518,439964,440377,440868,441377,441881,442417,443033,443632,444297,444921,445537,446116,446653,447140,447698,448270,448841,449258,449840,450380,450896,451414,451958,452481,452895,453412,453963,454462,454914,455414,455935,456450,456927,457507,458069,458481,458890,459332,459847,460479,461001,461486,461961,462427,462885,463203,463693,463927,464292,464741,465004,465350,465747,466090,466478,466983,467390,467730,468221,468730,469248,469761,470254,470789,471255,471711,472216,472675,473140,473609,474059,474487,474911,475320,475759,476216,476673,477128,477555,477978,478439,478748,479105,479537,479978,480358,480724,481125,481632,482035,482452,482886,483263,483711,484045,484484,485001,485460,485923,486448,488139,490084,492109,494096,496095,498094,500016,501998,504048,506094,508148,510190,512207,514234,516260,518290,520345,522400,524448,526327,528053,529776,531478,533200,534914,536628,538360,540081,541786,543523,545246,546939,548648,550348,552061,553781,555485,557181,558866,560571,562294,563985,565660,567359,569026,570711,572390,574087,575774,577469,579176,580875,582557,584250,585940,587628,589306,591007,592735,594439,596170,597897,599604,601270,602950,604650,606388,608114,609831,611525,613178,614858,616522,618219,619906,621601,623284,624968,626663,628392,630144,631869,633534,635194,636892,638605,640322,642024,643729,645429,647124,648832,650521,652218,653932,655629,657339,659040,660729,662425,664147,665847,667548,669241,670939,672633,674353,676033,677743,679483,681226,682975,684724,686487,688220,689987,691723,693394,695068,696729,698418,700122,701803,703486,705159,706834,708564,710304,712036,713771,715459,717129,718796,720485,722323,724371,726419,728467,730515,732563,734611,736659,738707,740755,742803,744851,746899,748947,750995,752714,754466,756172,757921,759727,761415,763132,764886,766524,768305,770049,771711,773448,775195,776935,778631,780220,781890,783580,785201,786828,788512,790065,791635,793218,794854,796462,798131,799754,801391,803030,804652,806305,808032,809759,811454,813231,814948,816696,818345,820153,822039,823882,825628,827335,828986,830630,832365,834104,835818,837467,839241,841091,842964,844623,846294,847937,849454,850975,852508,853987,855479,857019,858627,860287,861953,863507,865027,866660,868327,869961,871644,873328,875040,876618,878145,879805,881337,883106,884950,886746,888540,890332,892111,893890,895726,897521,899207,900861,902539,904238,905912,907560,909272,911044,912815,914565,916291,917904,919583,921210,921692,922168,922723,923238,923822,924523,925171,925781,926368,926837,927175,927793,928459,929078,929837,930441,930958,931671,932311,932931,933476,933914,934423,934970,935543,936106,936238,936379,936814,937340,937619,937859,937989,938737,939383,939928,940236,940692,941250,941638,942235,942593,943015,943159,943275,943423,943570,943780,944149,944791,945536,946211,946828,947379,947891,948604,949426,950206,951181,952233,953261,954132,954921,955676,956525,956823,957137,957573,957915,958276,958410,958544,958698,959161,959567,959817,960062,960287,960491,960802,961208,961460,962212,962711,962989,963484,963903,964140,964343,964567,964979,965394,965660,966002,966270,966580,966837,967458,967938,968409,969066,969586,970094,970736,971549,972466,973242,973990,974851,975755,976501,977182,977910,978664,979338,980044,980853,981543,982179,982684,983201,983695,984224,984756,985257,985799,986420,987250,988059,988880,989679,990471,991255,991834,992519,993485,994292,995186,995728,996511,997517,998454,999258,1000191,1001157,1002013,1002942,1003811,1004672,1005484,1006204,1006895,1007825,1008625,1009374,1010160,1010933,1011584,1012351,1013201,1013580,1013755,1013880,1013994,1014247,1015215,1016211,1017192,1018199,1019271,1020186,1021149,1022107,1023049,1023966,1024736,1025527,1026202,1026757,1027269,1028118,1028959,1029726,1030467,1031311,1032018,1032583,1033055,1033613,1034447,1035448,1036487,1037567,1038622,1039719,1040695,1041790,1042909,1044051,1045144,1046031,1046752,1047255,1047676,1048059,1048425,1048777,1049118,1049713,1050557,1051504,1052519,1053466,1054292,1055027,1055552,1056220,1057000,1057890,1058669,1059403,1060214,1061018,1061925,1062859,1063842,1064838,1065627,1066462,1067504,1068569,1069673,1070856,1071980,1072999,1074135,1075216,1076056,1076926,1077985,1079050,1080245,1081492,1082544,1083519,1084698,1085886,1086989,1087970,1089008,1090024,1090846,1091890,1093146,1094330,1096116,1097722,1099567,1101441,1103275,1105151,1107042,1108881,1110709,1112580,1114517,1116498,1118427,1120319,1122205,1124156,1126112,1127969,1129667,1131260,1132900,1134388,1135874,1137378,1138871,1140388,1141895,1143390,1144890,1146393,1147917,1149397,1150894,1152404,1153884,1155372,1156866,1158341,1159830,1161340,1162800,1164291,1165785,1167276,1168795,1170320,1171809,1173304,1174808,1176260,1177730,1179228,1180732,1182236,1183746,1185246,1186763,1188266,1189409,1189941,1190452,1191033,1191474,1192020,1192520,1193054,1193620,1194130,1194703,1195238,1195874,1196474,1197076,1197698,1198109,1198727,1199351,1199855,1200374,1200963,1201495,1202042,1202608,1203316,1203929,1204446,1204939,1205389,1205932,1206365,1206929,1207520,1208130,1208718,1209341,1209971,1210548,1211030,1211524,1211944,1212397,1212883,1213442,1214004,1214580,1215115,1215683,1216216,1216689,1217043,1217637,1218000,1218198,1218540,1218775,1219263,1219733,1220143,1220759,1221065,1221674,1222209,1222630,1223196,1223684,1224137,1224539,1224975,1225518,1226033,1226543,1226999,1227320,1227693,1228199,1228871,1229332,1229980,1230578,1231032,1231455,1231952,1232362,1232768,1233008,1233053,1233215,1233539,1233867,1234156,1234579,1234837,1235088,1235443,1235828,1236112,1236434,1236879,1237194,1237599,1237915,1238505,1239056,1239629,1240155,1240575,1240918,1241269,1241758,1242113,1242688,1243228,1243760,1244287,1244778,1245336,1245734,1246302,1246774,1247108,1247533,1248020,1248487,1248989,1249495,1250083,1250616,1251071,1251770,1253792,1255810,1257849,1259866,1261859,1263883,1265869,1267923,1269968,1272010,1273972,1275670,1277351,1279076,1280766,1282411,1284103,1285820,1287516,1289188,1290894,1292602,1294321,1296048,1297763,1299489,1301199,1302910,1304626,1306353,1308057,1309778,1311481,1313177,1314880,1316572,1318286,1319994,1321707,1323416,1325103,1326804,1328474,1330175,1331887,1333605,1335311,1337036,1338743,1340482,1342195,1343921,1345651,1347380,1349099,1350820,1352531,1354261,1355984,1357714,1359442,1361083,1362763,1364476,1366188,1367903,1369606,1371594,1373642,1375690,1377738,1379786,1381834,1383871,1385514,1387197,1388850,1390559,1392327,1394003,1395675,1397472,1399206,1400947,1402668,1404455,1406247,1408047,1409876,1411640,1413403,1415183,1416915,1418600,1420344,1422048,1423756,1425532,1427233,1429005,1430714,1432399,1434128,1435882,1437652,1439364,1441151,1442936,1444715,1446488,1448271,1450052,1451808,1453567,1455326,1457129,1458741,1460457,1462220,1463869,1464984,1465740,1466572,1467467,1468364,1469279,1470009,1470953,1472132,1473573,1474837,1475774,1476885,1478054,1479330,1480435,1481558,1482643,1483580,1484493,1485559,1486692,1487596,1488689,1489762,1490882,1492816,1494803,1496810,1498819,1500812,1502819,1504811,1506407,1508003,1509510,1510971,1512430,1513868,1515367,1516844,1518305,1519320,1519941,1520339,1520800,1521373,1521860,1522464,1523077,1523660,1524217,1524767,1525268,1525764,1526190,1526674,1526799,1527369,1527707,1528296,1528744,1529303,1529843,1531473,1533490,1535242,1536951,1538662,1540370,1542071,1543791,1545500,1547214,1548923,1550700,1552749,1554540,1556327,1558224,1560042,1561772,1563510,1565009,1565643,1566230,1566606,1566631,1566656,1566681,1568611,1569624,1571043,1572487,1573895,1575278,1576787,1578283,1579742,1581196,1582661,1584119,1585560,1587005,1588486,1589925,1591395,1592867,1594339,1595800,1597262,1598751,1599499,1599848,1600274,1600630,1600963,1601456,1601870,1602373,1602826,1603091,1603508,1603823,1604322,1604661,1605313,1605874,1606509,1607060,1607595,1608177,1608539,1609033,1609542,1610072,1610577,1611060,1611564,1612124,1612566,1613108,1613559,1614001,1614513,1614933,1615424,1615921,1616405,1616913,1617270,1617773,1618246,1618640,1619137,1619577,1619909,1620319,1620594,1620880,1621322,1621695,1622240,1624296,1626248,1628252,1630223,1631950,1633668,1635354,1637078,1638799,1640484,1642142,1643829,1645519,1647173,1648857,1650526,1652173,1653843,1655515,1657212,1658923,1660649,1662327,1663993,1665680,1667353,1669371,1671419,1673387,1675240,1677050,1678766,1680565,1682270,1683887,1685536,1687264,1689050,1690702,1692417,1694124,1695906,1697726,1699480,1701054,1702727,1704104,1704855,1705416,1706044,1706651,1707424,1708121,1709005,1709950,1711001,1712389,1713657,1714946,1716155,1717589,1719147,1720037,1721047,1722179,1722938,1723569,1724750,1726289,1728103,1729860,1731605,1733319,1734920,1736493,1737978,1739465,1740940,1742419,1743886,1745346,1746835,1748330,1749811,1751294,1752779,1754271,1755749,1757206,1758689,1760131,1761608,1763079,1764560,1766030,1767506,1768979,1770459,1771941,1773421,1774925,1776407,1777894,1779362,1780273,1780666,1781287,1781868,1782329,1782867,1783304,1783777,1784328,1784695,1784889,1785314,1785715,1786217,1786594,1787151,1787590,1787799,1788271,1788921,1789492,1790165,1790662,1791196,1791745,1792134,1792655,1793109,1793617,1794245,1794688,1795200,1795634,1796031,1796485,1796901,1797540,1798000,1798398,1798551,1798748,1799060,1799487,1800047,1800425,1800970,1801469,1802075,1802612,1803150,1803672,1803921,1804352,1804798,1804929,1805300,1805596,1805925,1806279,1806750,1807174,1807554,1808073,1808591,1809064,1809608,1810139,1810713,1811259,1811802,1812328,1812849,1813140,1813429,1813936,1814499,1814990,1815546,1816098,1816577,1817040,1817521,1817967,1818413,1818877,1819320,1819890,1820263,1820734,1821165,1821641,1822075,1822563,1823046,1823451,1823921,1824362,1824751,1826601,1828644,1830687,1832689,1834743,1836795,1838835,1840740,1842426,1844110,1845823,1847532,1849260,1850937,1852654,1854383,1856106,1857805,1859500,1861203,1862919,1864627,1866342,1868064,1869767,1871472,1873137,1874857,1876509,1878194,1879895,1881548,1883251,1884911,1886611,1888310,1890002,1891681,1893340,1895035,1896729,1898422,1900120,1901837,1903552,1905232,1906878,1908603,1910286,1912197,1914245,1916293,1918341,1920356,1921990,1923538,1925224,1926947,1928749,1930533,1932347,1934268,1935958,1937731,1939596,1941360,1943077,1944952,1946667,1948472,1950014,1951768,1953512,1955159,1956943,1958666,1960340,1962043,1963762,1965451,1967251,1968994,1970634,1972339,1974042,1974794,1975614,1976509,1977318,1978092,1978697,1979248,1979776,1980236,1980442,1980852,1981386,1982180,1982797,1983317,1983670,1984124,1984899,1985575,1986254,1986991,1987708,1988283,1988912,1989390,1989826,1990318,1990978,1991808,1992570,1993104,1993851,1994624,1995383,1996069,1996794,1997603,1998284,1999013,1999607,2000123,2000303,2000645,2000967,2001250,2001640,2001874,2002054,2002340,2002999,2003637,2004252,2005112,2005771,2006411,2007041,2007672,2008446,2009266,2009887,2010514,2011044,2011742,2012355,2012988,2013917,2015233,2016723,2018315,2020139,2021833,2023515,2025230,2026949,2028654,2030383,2032082,2033636,2034855,2036293,2037738,2039207,2040680,2042156,2043626,2045120,2046591,2048078,2049566,2051053,2052538,2054016,2055505,2056985,2058442,2059915,2061388,2062874,2064350,2065855,2067335,2068315,2068506,2068790,2069106,2069503,2069957,2070343,2070549,2070834,2071066,2071369,2071597,2072006,2072656,2073050,2073610,2074040,2074586,2074980,2075569,2076027,2076192,2076394,2076859,2077445,2077990,2078398,2078897,2079488,2079990,2080449,2081056,2081497,2082136,2082530,2082778,2082834,2083187,2083684,2084090,2084556,2084733,2084932,2085348,2085870,2086267,2086469,2086663,2086856,2087051,2087239,2087434,2087637,2087835,2088024,2088218,2088409,2088923,2089199,2089563,2089739,2089996,2090306,2090551,2091058,2091518,2092028,2092437,2092911,2094489,2096405,2098315,2100201,2102109,2104146,2106111,2107766,2109442,2111146,2112818,2114483,2116184,2117921,2119574,2121237,2122938,2124627,2126308,2127962,2129632,2131326,2132992,2134638,2136317,2138006,2139695,2141345,2143003,2144646,2146294,2147957,2149601,2151264,2152928,2154589,2156270,2157945,2159612,2161608,2163656,2165704,2167635,2169313,2171058,2172671,2174361,2176226,2177906,2179576,2181330,2183028,2184627,2186431,2188032,2189646,2191246,2192952,2194610,2196239,2197850,2199456,2201084,2202741,2204458,2206100,2207280,2208112,2208852,2209454,2209642,2210128,2210957,2211886,2212766,2213791,2214698,2215516,2216504,2217518,2218433,2219277,2219838,2220540,2221228,2221837,2223553,2225077,2226872,2228686,2230519,2232262,2234069,2235811,2237371,2238913,2240389,2241875,2243364,2244848,2246307,2247805,2249261,2250752,2252222,2253707,2255201,2256700,2257565,2258116,2258728,2259276,2259768,2260149,2260583,2260868,2261247,2261798,2262055,2262614,2263150,2263710,2264132,2264701,2265245,2265834,2266396,2266908,2267449,2267800,2268016,2268494,2268942,2269426,2269950,2270550,2271098,2271656,2271997,2272139,2272256,2272643,2272954,2274099,2276103,2278153,2280185,2281882,2283565,2285279,2286982,2288682,2290343,2292038,2293722,2295452,2297130,2298837,2300549,2302255,2303941,2305641,2307394,2309442,2311421,2313213,2315021,2316860,2318634,2320323,2322074,2323843,2325597,2327419,2329233,2331037,2332789,2333648,2334543,2335285,2336198,2337275,2338362,2339239,2340263,2341025,2342489,2343748,2345329,2347011,2348674,2350237,2351758,2353220,2354787,2356261,2357742,2359205,2360696,2362174,2363654,2365123,2366611,2368077,2369560,2370803,2371324,2371940,2372476,2373006,2373611,2374108,2374711,2374969,2375475,2375864,2376344,2376653,2377126,2377451,2377606,2377868,2378441,2378620,2379098,2379356,2379824,2380332,2380616,2381054,2381497,2382108,2382614,2383216,2383700,2384136,2384358,2384643,2385151,2385747,2386256,2387845,2389766,2391790,2393673,2395342,2397038,2398711,2400361,2402013,2403663,2405323,2407019,2408689,2410342,2412009,2413704,2415437,2417140,2418873,2420873,2422912,2424587,2426283,2427958,2429637,2431285,2432954,2434581,2436310,2438011,2439882,2441778,2443514,2444287,2445120,2445886,2446582,2447242,2447874,2448793,2449740,2450321,2451877,2453439,2454942,2456527,2458171,2459686,2461176,2462642,2464117,2465597,2467083,2468542,2470031,2471515,2472997,2474475,2475523,2475960,2476218,2476533,2476896,2477250,2477533,2477804,2478194,2478669,2479168,2479537,2480016,2480404,2480648,2480983,2481336,2481737,2482039,2482378,2482622,2482792,2483092,2483359,2483723,2484072,2484518,2485086,2485499,2485804,2486200,2486591,2486865,2487204,2487442,2487685,2488018,2488202,2488623,2490020,2492068,2494114,2496162,2497878,2499597,2501301,2503030,2504765,2506482,2508214,2509952,2511685,2513408,2515145,2516872,2518544,2520275,2521988,2523709,2525414,2527348,2529396,2531408,2533223,2535038,2536817,2538668,2540442,2542267,2544094,2545881,2547721,2549574,2551390,2553157,2554827,2556599,2558454,2560278,2562078,2563030,2563985,2565331,2567151,2569000,2570747,2572251,2573657,2575120,2576586,2578042,2579521,2581002,2582464,2583937,2585442,2586931,2588398,2589879,2591369,2592856,2594332,2595818,2597312,2598795,2600282,2601757,2603260,2604718,2606198,2607667,2608991,2609171,2609448,2609658,2609911,2610400,2610881,2611429,2611722,2612086,2612431,2612748,2613224,2613593,2613911,2614280,2614564,2614977,2615435,2615674,2615969,2616326,2616771,2617102,2617531,2617927,2618220,2618417,2618641,2618925,2619339,2619701,2619994,2620335,2620730,2621174,2621535,2621827,2622318,2622576,2622940,2623218,2623642,2624118,2624301,2624490,2624569,2624825,2625051,2625603,2625802,2626201,2626553,2626856,2627211,2627677,2628059,2628612,2628997,2629064,2629126,2629592,2629907,2630292,2630631,2631094,2631527,2631882,2632232,2632564,2632962,2633334,2633787,2634308,2634684,2635073,2636715,2638631,2640571,2642518,2644435,2646377,2648343,2650051,2651739,2653428,2655120,2656817,2658515,2660222,2661915,2663616,2665305,2666995,2668716,2670420,2672134,2673831,2675537,2677242,2678928,2680647,2682349,2684054,2685766,2687468,2689171,2690891,2692598,2694295,2696009,2697708,2699418,2701114,2702825,2704500,2706338,2708386,2710434,2712482,2714330,2715903,2717596,2719316,2721046,2722733,2724442,2726155,2727814,2729468,2731200,2732867,2734608,2736344,2738048,2739838,2741603,2743361,2745010,2746833,2748547,2750332,2751971,2753669,2755342,2757038,2758681,2760383,2762081,2762966,2763763,2764629,2765499,2765928,2765953,2765978,2766003,2766028,2766053,2766078,2766103,2768099,2769686,2771397,2773158,2774943,2776631,2778464,2780240,2781707,2783062,2784525,2786174,2787738,2789250,2790771,2792276,2793783,2795306,2796827,2798334,2799798,2801286,2802775,2804239,2805732,2807209,2808684,2810141,2811577,2813066,2814547,2816028,2817508,2818972,2820440,2821929,2823390,2824861,2826346,2827840,2829120,2829779,2830397,2831041,2831638,2832245,2832868,2833559,2834175,2834882,2835562,2836217,2836922,2837605,2838236,2838868,2839454,2840173,2840881,2841500,2842223,2842882,2843488,2844194,2844907,2845562,2846157,2846680,2847242,2847836,2848502,2849086,2849634,2850242,2850716,2851330,2851869,2852513,2853098,2853625,2854112,2854644,2855191,2855780,2856277,2856814,2857420,2858056,2858622,2859276,2859819,2860374,2861042,2861644,2862310,2862863,2863325,2863903,2864382,2864828,2865246,2865663,2866143,2866712,2867149,2867612,2868088,2868694,2869048,2869590,2870199,2870641,2871129,2871553,2871895,2872389,2872950,2873573,2874124,2874656,2875110,2875679,2876258,2876846,2877162,2877656,2878169,2878699,2879293,2879767,2879943,2880318,2880788,2881262,2881726,2882136,2882524,2882920,2883522,2884099,2884663,2885198,2885639,2887667,2889711,2891735,2893754,2895702,2897720,2899771,2901679,2903390,2905084,2906786,2908500,2910177,2911847,2913564,2915317,2916986,2918667,2920363,2922108,2923836,2925490,2927119,2928830,2930567,2932289,2934002,2935708,2937422,2939116,2940808,2942502,2944207,2945956,2947690,2949393,2951115,2952855,2954580,2956275,2958015,2959736,2961423,2963117,2964821,2966509,2968222,2969944,2971681,2973365,2975058,2976755,2978796,2980844,2982892,2984940,2986988,2988972,2990694,2992398,2994196,2995810,2997464,2999248,3001045,3002661,3004395,3006145,3007983,3009672,3011264,3013041,3014854,3016593,3018292,3020036,3021715,3023397,3025110,3026885,3028692,3030444,3032237,3033948,3035796,3037484,3039263,3040986,3042687,3044405,3046284,3048077,3049880,3051667,3053378,3055127,3056175,3056792,3057572,3058202,3058773,3059422,3060039,3060645,3061177,3061658,3063048,3064547,3066031,3067494,3069075,3070650,3072288,3073858,3075394,3076528,3077683,3079206,3080680,3082265,3083662,3085270,3086838,3088315,3089911,3091335,3092738,3094064,3095475,3096865,3098216,3099129,3100151,3101431,3102308,3103055,3104277,3105637,3107067,3108686,3110294,3112023,3113434,3115269,3116911,3118325,3119927,3121620,3123319,3125011,3126705,3128348,3130025,3131662,3133335,3134901,3136476,3138034,3139627,3141065,3142545,3144024,3145478,3146956,3148419,3149881,3151377,3152862,3154314,3155789,3157274,3158717,3160157,3161616,3163069,3164523,3166004,3167469,3168951,3170447,3171916,3173382,3174845,3176317,3177781,3179238,3180699,3182169,3183646,3185118,3186583,3188056,3189512,3190979,3192470,3193932,3195427,3196878,3198350,3199847,3201302,3202745,3204249,3205720,3207209,3208697,3210162,3211649,3212188,3212647,3213186,3213692,3214153,3214532,3214918,3215347,3215767,3216249,3216730,3217089,3217541,3218034,3218522,3218924,3219275,3219839,3220297,3220558,3220832,3221175,3221456,3221873,3222189,3222555,3222848,3223107,3223622,3224088,3224558,3225043,3225513,3225916,3226206,3226664,3226950,3227357,3227887,3228287,3228658,3229029,3229382,3229952,3230469,3230951,3231420,3231841,3232182,3232388,3232726,3233259,3233571,3233877,3234284,3234790,3235271,3235749,3236088,3236310,3236738,3237272,3237697,3238220,3238651,3239054,3239310,3239490,3239962,3240449,3240875,3241331,3241742,3242170,3242555,3242924,3243337,3243790,3244268,3244784,3245275,3245686,3246032,3246338,3246805,3247140,3247571,3247832,3248256,3248485,3248817,3249185,3249496,3249690,3250007,3250481,3250799,3251076,3251385,3251566,3251952,3252258,3252622,3252974,3253398,3253653,3253998,3254409,3254768,3255103,3255526,3255927,3256417,3256946,3257456,3257916,3258197,3258546,3258739,3259101,3259565,3259875,3260359,3260558,3261021,3261463,3261916,3262230,3262651,3262919,3263342,3263673,3263960,3264381,3264793,3265267,3265654,3265894,3266056,3266557,3267057,3267532,3267968,3268330,3268823,3269630,3271636,3273632,3275594,3277571,3279527,3281481,3283505,3285446,3287422,3289347,3291354,3293402,3295225,3296919,3298561,3300221,3301875,3303568,3305210,3306899,3308597,3310255,3311910,3313595,3315289,3316961,3318666,3320326,3321999,3323705,3325389,3327058,3328732,3330423,3332109,3333822,3335503,3337166,3338857,3340549,3342244,3343925,3345614,3347289,3348963,3350639,3352345,3354049,3355751,3357426,3359103,3360789,3362470,3364145,3365855,3367555,3369240,3370945,3372666,3374334,3375979,3377662,3379351,3381075,3382766,3384440,3386123,3387800,3389478,3391161,3392845,3394516,3396206,3397887,3399571,3401320,3403368,3405416,3407464,3409512,3411560,3413608,3415258,3416954,3418573,3420233,3421835,3423532,3425212,3426861,3428554,3430276,3432015,3433639,3435442,3437095,3438812,3440569,3442314,3444006,3445761,3447548,3449297,3451013,3452713,3454478,3456246,3457989,3459673,3461381,3463134,3464835,3466531,3468389,3470074,3471746,3473547,3475346,3477150,3478851,3480497,3482219,3484012,3485736,3487473,3489024,3490004,3490844,3491635,3492467,3493254,3494005,3494917,3495575,3496474,3497329,3498026,3498677,3499090,3499554,3499883,3500300,3500651,3501067,3501303,3501858,3502344,3502877,3503324,3503662,3503927,3504503,3504953,3505452,3505950,3506560,3507237,3507580,3507796,3508267,3508730,3509124,3509897,3510481,3510983,3511313,3511782,3512111,3512564,3512715,3513066,3513502,3513921,3514433,3514840,3515202,3515684,3516483,3518104,3519733,3521179,3521866,3522802,3524428,3526055,3527694,3529377,3531058,3532772,3534510,3536320,3538043,3539806,3541549,3543296,3544988,3546721,3548410,3549999,3551542,3553091,3554588,3556054,3557521,3559013,3560488,3561988,3563472,3564956,3566450,3567962,3569460,3570974,3572464,3573932,3575401,3576028,3576449,3576642,3577059,3577658,3578110,3578185,3578260,3578518,3578867,3579476,3580071,3580518,3581018,3581451,3582033,3582510,3582949,3583490,3584092,3584567,3584958,3585375,3585881,3586435,3586791,3587343,3587859,3588193,3588673,3589059,3589465,3589894,3590235,3590537,3590757,3591112,3591439,3591953,3592447,3592999,3593443,3594036,3594303,3595829,3597841,3599802,3601757,3603632,3605334,3607055,3608794,3610516,3612243,3613988,3615715,3617452,3619180,3620911,3622635,3624345,3626083,3627804,3629517,3631215,3632930,3634662,3636363,3638070,3640085,3642133,3644114,3645837,3647576,3649355,3651107,3652895,3654598,3656316,3658067,3659814,3661546,3663289,3665067,3666808,3668571,3670360,3672111,3673659,3674468,3675402,3676218,3677141,3677540,3677565,3677590,3677615,3677640,3677665,3677690,3677715,3679321,3680976,3682527,3684217,3685912,3687387,3688723,3689805,3691000,3692605,3694131,3695691,3697178,3698664,3700173,3701671,3703154,3704656,3706149,3707647,3709140,3710625,3712093,3713543,3715003,3716480,3717914,3719423,3720110,3720767,3721233,3721826,3722316,3722739,3723202,3723655,3724125,3724656,3725173,3725620,3726169,3726727,3727163,3727611,3727807,3728171,3728420,3728771,3729171,3729746,3730007,3730552,3731044,3731567,3732249,3732746,3733189,3733638,3734022,3734524,3735126,3735516,3735935,3736458,3736975,3737502,3738066,3738539,3739122,3739828,3740531,3741061,3741464,3741954,3742199,3743684,3745687,3747740,3749759,3751781,3753498,3755213,3756936,3758645,3760356,3762020,3763678,3765374,3767100,3768826,3770535,3772205,3773904,3775620,3777350,3779054,3780763,3782487,3784179,3785844,3787656,3789704,3791752,3793688,3795487,3797271,3799083,3800931,3802617,3804372,3806222,3808014,3809858,3811705,3813515,3815369,3817207,3818968,3820839,3822629,3824387,3826124,3826900,3827537,3828512,3829324,3830002,3830727,3831506,3832032,3832846,3833694,3834447,3835201,3836070,3836942,3837299,3837987,3838942,3840410,3841520,3842363,3843916,3845386,3846913,3848539,3850138,3851753,3853325,3854743,3856119,3857598,3859022,3860387,3861842,3863263,3864734,3866211,3867659,3869133,3870613,3872110,3873589,3875058,3876556,3878054,3879541,3881034,3882518,3884001,3885487,3886982,3888469,3889937,3891435,3892898,3894388,3895887,3897364,3898863,3900358,3901880,3903393,3904864,3906342,3907844,3909333,3910819,3912298,3913751,3915225,3916718,3918059,3918548,3919072,3919671,3920140,3920608,3921154,3921422,3921987,3922540,3923123,3923313,3923872,3924412,3925076,3925737,3926313,3926871,3927432,3928015,3928573,3929094,3929618,3930110,3930489,3930691,3931183,3931737,3932248,3932819,3933350,3933800,3934314,3934857,3935423,3936071,3936641,3937039,3937552,3938072,3938691,3939194,3939769,3940261,3940755,3941231,3941828,3942380,3942952,3943501,3944107,3944663,3945172,3945540,3945993,3946521,3946971,3947451,3948068,3948575,3949033,3949588,3950047,3950502,3950985,3951226,3951543,3952067,3952513,3953016,3953302,3953765,3954291,3954818,3955358,3955822,3956225,3956299,3956390,3956575,3956699,3956881,3957156,3957359,3957753,3958094,3958531,3959088,3959413,3959874,3960095,3960366,3960524,3960657,3961014,3961480,3962160,3962646,3963138,3963665,3964220,3964729,3965277,3965803,3966390,3966871,3967351,3967616,3968162,3968708,3969136,3969632,3970098,3970589,3971089,3971504,3971987,3972425,3972938,3973486,3974089,3974615,3975106,3975534,3976039,3976443,3976865,3977389,3977836,3978231,3978751,3979201,3979387,3979757,3980267,3980606,3981204,3983211,3985196,3987216,3989261,3991248,3993273,3995237,3997285,3999333,4001382,4003368,4005019,4006652,4008275,4009921,4011649,4013364,4015057,4016743,4018401,4020072,4021771,4023475,4025153,4026863,4028598,4030327,4032042,4033768,4035421,4037115,4038856,4040554,4042281,4043967,4045658,4047403,4049147,4050882,4052627,4054324,4056016,4057659,4059359,4061106,4062855,4064592,4066331,4068066,4069802,4071521,4073257,4074982,4076719,4078450,4080188,4081874,4083530,4085214,4086919,4088595,4090302,4092029,4093771,4095507,4097229,4098954,4100610,4102286,4104002,4105722,4107731,4109779,4111827,4113875,4115923,4117971,4120019,4121948,4123447,4124877,4126492,4128208,4129942,4131632,4133227,4134883,4136530,4138264,4140010,4141821,4143579,4145295,4146921,4148618,4150331,4152056,4153797,4155379,4157232,4159108,4160884,4162632,4164362,4165947,4167745,4169562,4171330,4173088,4174875,4176644,4178393,4180217,4181977,4183719,4185492,4187218,4189027,4190744,4192376,4193994,4195648,4197384,4199108,4200899,4202639,4204383,4206127,4207634,4209276,4211075,4212424,4212995,4213641,4214325,4214932,4215438,4215861,4216524,4217234,4217709,4218322,4218674,4220082,4221479,4222877,4224534,4225743,4227065,4228545,4230037,4231719,4232901,4234039,4235376,4236781,4238018,4239390,4240640,4241790,4243109,4244769,4245484,4246835,4248231,4249691,4250588,4252057,4253685,4254493,4255689,4256902,4258333,4259700,4261085,4262526,4264096,4264905,4265803,4266368,4267621,4269329,4270911,4271798,4272789,4274224,4275619,4276937,4278254,4279623,4280945,4282552,4284193,4284842,4285810,4286240,4287090,4288342,4289515,4290334,4291190,4292725,4294354,4296064,4297834,4299635,4301472,4303255,4305003,4306737,4308606,4310411,4311824,4313260,4314619,4315933,4317397,4318833,4320194,4321525,4322967,4324476,4325963,4327416,4328884,4330342,4331792,4333260,4334702,4336179,4337674,4339161,4340655,4342152,4343641,4345122,4346612,4348096,4349582,4351084,4352564,4354017,4355485,4356974,4358459,4359936,4361419,4362889,4364370,4365803,4367295,4368793,4370258,4371716,4373162,4374649,4376136,4377597,4379090,4380583,4382070,4383558,4385027,4386511,4387996,4389471,4390957,4392448,4393911,4395373,4396837,4398342,4399817,4401287,4402769,4404255,4405721,4407206,4408699,4410162,4411669,4413151,4414629,4416102,4417595,4419072,4420520,4421985,4423454,4424924,4426406,4427892,4429379,4430846,4432338,4433834,4435321,4436810,4438279,4439313,4439678,4440255,4440844,4441504,4442025,4442615,4443170,4443717,4444338,4444966,4445553,4446219,4446840,4447430,4448036,4448601,4448978,4449490,4450018,4450573,4451066,4451457,4452067,4452683,4453263,4453882,4454499,4454746,4455305,4455891,4456467,4456937,4457683,4458353,4458854,4459500,4460134,4460773,4461247,4461753,4462231,4462771,4463255,4463866,4464419,4465065,4465630,4466254,4466858,4467456,4467953,4468412,4468832,4469322,4469820,4470333,4470894,4471346,4471811,4472262,4472731,4473228,4473772,4474283,4474848,4475406,4476050,4476595,4477179,4477774,4478391,4479007,4479576,4480162,4480759,4481409,4481936,4482541,4483166,4483687,4484208,4484668,4485185,4485692,4485986,4486386,4486859,4487373,4487901,4488414,4488946,4489488,4490052,4490631,4491266,4491822,4492422,4492997,4493577,4494202,4494744,4495326,4495853,4496352,4496946,4497298,4497597,4498140,4498727,4499263,4499785,4500241,4500781,4501259,4501700,4502139,4502475,4502957,4503277,4503655,4504108,4504621,4505172,4505685,4506202,4506775,4507257,4507618,4507779,4508226,4508758,4509150,4509569,4510038,4510456,4510889,4511353,4511715,4512174,4512687,4513143,4513630,4514000,4514431,4515016,4515762,4516388,4516816,4517366,4517859,4518411,4518961,4519435,4519985,4520579,4521100,4521670,4522201,4522819,4523137,4523656,4524031,4524513,4524982,4525498,4526032,4526536,4527014,4527550,4528100,4528681,4529184,4529513,4529988,4530459,4530893,4531445,4531952,4532500,4533069,4533671,4534209,4534665,4535050,4535657,4536103,4536592,4537046,4537558,4538027,4538305,4538734,4539208,4539768,4540332,4540937,4541398,4541885,4542383,4542849,4543279,4543774,4544293,4544917,4545260,4545725,4546063,4546571,4546891,4547376,4547778,4548240,4548703,4549198,4549551,4549902,4550204,4550425,4550606,4550862,4551180,4551488,4551721,4552135,4552524,4552794,4553259,4553465,4553616,4553916,4554222,4554459,4555092,4555700,4556392,4556919,4557436,4558033,4558487,4559118,4559584,4560121,4560716,4561362,4561778,4562161,4562662,4563081,4563655,4564187,4564752,4565305,4565963,4566595,4567203,4567818,4568414,4568839,4569348,4569916,4570486,4570845,4571363,4571817,4572344,4572829,4573398,4573872,4574421,4574855,4575080,4575351,4575681,4576001,4576386,4576918,4577303,4577857,4578379,4579010,4579577,4580600,4582626,4584637,4586556,4588555,4590546,4592576,4594580,4596595,4598629,4600644,4602648,4604669,4606628,4608668,4610656,4612662,4614693,4616721,4618776,4620651,4622381,4624092,4625751,4627437,4629130,4630833,4632556,4634286,4636023,4637743,4639482,4641199,4642895,4644593,4646259,4647975,4649674,4651364,4653039,4654740,4656466,4658181,4659896,4661607,4663274,4665000,4666708,4668418,4670135,4671847,4673555,4675261,4676979,4678659,4680325,4682018,4683703,4685370,4687052,4688741,4690392,4692064,4693752,4695437,4697139,4698837,4700525,4702230,4703916,4705601,4707286,4708980,4710673,4712348,4714029,4715715,4717424,4719107,4720800,4722487,4724169,4725845,4727519,4729225,4730919,4732599,4734288,4735984,4737676,4739385,4741083,4742802,4744512,4746210,4747874,4749603,4751310,4752987,4754669,4756342,4758051,4759761,4761441,4763140,4764837,4766488,4768153,4769855,4771576,4773266,4774959,4776636,4778294,4779948,4781601,4783271,4784922,4786592,4788300,4789980,4791689,4793380,4795098,4796774,4798459,4800160,4801854,4803572,4805308,4807016,4808717,4810449,4812114,4813824,4815502,4817182,4818866,4820525,4822223,4824072,4826120,4828168,4830216,4832264,4834312,4836360,4838408,4840456,4842504,4844552,4846600,4848648,4850696,4852579,4854345,4856008,4857684,4859377,4861047,4862797,4864517,4866219,4867936,4869699,4871342,4872990,4874669,4876378,4878093,4879673,4881429,4883192,4884859,4886560,4888230,4890042,4891744,4893494,4895341,4897036,4898748,4900369,4901980,4903605,4905265,4906985,4908618,4910246,4911919,4913582,4915239,4916894,4918561,4920243,4921921,4923552,4925086,4926703,4928408,4930149,4931828,4933599,4935280,4936982,4938600,4940182,4941844,4943486,4945066,4946662,4948342,4950089,4951877,4953635,4955364,4957111,4958930,4960614,4962281,4963955,4965752,4967382,4969053,4970710,4972314,4974051,4975711,4977401,4978957,4980551,4982134,4983642,4985309,4986898,4988630,4990299,4992010,4993644,4995374,4996982,4998746,5000555,5002310,5004122,5005937,5007652,5009289,5010920,5012608,5014276,5016015,5017032,5017663,5018280,5018899,5019254,5019728,5019847,5020449,5021155,5021740,5022412,5023027,5023539,5024230,5024969,5025570,5026248,5027036,5027669,5028282,5028887,5029487,5030114,5030797,5031562,5032107,5032722,5033930,5035394,5036758,5038039,5039683,5041282,5042775,5044240,5045843,5047499,5048828,5049898,5051315,5052411,5053427,5054573,5055584,5056445,5057401,5058528,5059082,5060226,5061202,5061921,5063039,5063952,5064909,5065827,5066859,5068102,5069508,5071187,5072809,5074432,5076020,5077427,5079140,5080828,5082414,5084022,5085712,5087328,5088859,5090476,5092050,5093598,5094910,5096354,5097902,5099556,5101256,5102892,5104435,5106005,5107427,5108891,5110230,5111746,5113174,5114471,5116068,5117311,5118911,5120520,5122068,5123474,5124863,5126189,5127711,5129236,5130694,5132111,5133719,5135343,5136967,5138555,5139970,5140875,5142180,5143429,5144242,5144651,5145538,5146714,5147916,5149132,5150148,5151205,5152207,5153168,5154228,5155219,5156088,5157047,5157845,5158559,5159208,5159649,5159810,5159928,5160543,5161155,5161713,5162277,5162684,5163257,5164436,5165964,5167280,5168573,5169745,5171007,5172191,5173785,5175365,5176952,5178402,5179905,5181316,5182729,5184147,5185301,5185972,5186735,5187795,5189079,5190539,5192059,5193600,5194748,5196365,5197640,5199115,5200504,5202080,5203324,5203986,5205233,5206729,5208218,5209608,5211019,5212565,5214026,5215647,5217170,5218759,5220264,5221185,5222157,5223088,5223639,5224895,5226317,5227451,5227849,5228631,5229173,5229657,5230495,5231656,5232504,5233596,5234753,5235625,5236221,5237417,5238346,5239819,5241183,5241810,5242269,5243751,5245177,5246485,5247503,5248715,5250006,5250949,5251758,5252326,5252963,5254063,5254551,5255242,5255494,5256109,5257046,5257770,5258415,5259222,5259698,5260137,5261475,5262995,5264542,5265826,5267410,5269080,5270658,5272095,5273734,5275309,5276597,5277115,5277892,5279289,5280719,5282131,5283272,5284162,5285706,5286847,5287738,5289126,5290424,5291445,5292799,5293568,5294069,5294645,5294989,5295385,5295774,5296231,5296723,5297089,5297506,5297851,5298272,5298737,5299092,5299420,5299867,5300416,5301182,5302014,5302688,5303198,5303698,5304100,5304523,5305233,5305452,5305828,5306215,5306503,5307190,5308056,5308421,5309234,5310087,5310700,5311055,5311659,5312262,5312668,5313060,5313428,5313843,5314206,5315022,5316595,5318117,5319700,5321316,5322955,5324577,5325930,5326510,5327109,5327328,5327539,5327782,5328244,5329406,5331004,5332883,5334799,5336246,5337160,5338785,5340546,5342233,5343871,5345609,5347352,5349098,5350867,5352683,5354435,5356247,5357986,5359780,5361600,5363402,5365214,5367045,5368854,5370652,5372469,5374319,5376109,5377843,5379582,5381159,5382580,5384072,5385534,5387017,5388495,5389969,5391400,5392878,5394374,5395850,5397289,5398771,5400240,5401710,5402145,5402663,5403096,5403471,5403934,5404407,5404901,5405259,5405759,5406138,5406573,5407123,5407518,5407920,5408198,5408506,5408852,5409195,5409510,5409794,5410062,5410616,5411048,5411382,5411967,5412401,5412900,5413359,5413846,5414234,5414760,5415105,5415628,5416131,5416621,5417128,5417569,5418021,5418378,5418725,5419340,5421313,5423272,5425180,5426905,5428569,5430239,5431911,5433593,5435265,5436933,5438587,5440252,5441916,5443580,5445275,5446959,5448647,5450342,5452017,5453698,5455604,5457652,5459473,5461142,5462769,5464449,5466171,5467849,5469560,5471268,5473014,5474760,5476580,5478167,5479757,5480943,5481365,5481744,5482292,5482404,5483334,5484313,5485399,5486372,5487377,5488461,5489327,5490404,5491437,5492096,5493216,5494475,5496142,5497897,5499628,5501271,5502535,5504015,5505485,5506959,5508450,5509931,5511421,5512906,5513321,5513546,5514152,5514809,5515424,5515853,5516430,5516984,5517464,5518013,5518428,5518866,5519272,5519702,5520159,5520489,5521021,5521265,5521702,5522014,5522524,5522972,5523436,5523753,5524325,5526372,5528346,5530004,5531679,5533400,5535114,5536804,5538471,5540126,5541793,5543445,5545079,5546738,5548706,5550638,5552356,5554158,5556048,5557847,5559552,5561315,5563079,5564765,5566064,5566618,5567009,5567758,5568872,5569821,5570828,5571668,5572737,5573725,5575173,5576668,5578363,5579917,5581518,5582996,5584463,5585949,5587447,5588923,5590387,5591839,5593330,5594580,5595164,5595750,5596296,5596642,5596970,5597342,5597829,5598221,5598733,5599288,5599674,5600141,5600624,5601106,5601558,5601997,5602462,5602884,5603460,5603922,5604390,5604964,5605381,5605896,5606392,5606795,5607325,5607863,5609349,5611348,5613255,5614948,5616653,5618342,5620025,5621733,5623431,5625121,5626795,5628515,5630225,5631918,5633597,5635627,5637543,5639325,5641085,5642760,5644513,5646283,5647957,5649765,5651523,5653197,5654085,5654759,5655350,5656467,5658112,5659237,5660590,5662026,5663849,5665503,5667058,5668428,5669923,5671406,5672885,5674390,5675920,5677417,5678902,5680394,5680864,5681403,5681921,5682452,5682985,5683293,5683678,5684185,5684726,5685220,5685816,5686377,5687042,5687627,5687749,5687908,5688318,5688778,5689306,5689883,5690433,5690998,5691740,5693769,5695716,5697404,5699097,5700779,5702455,5704133,5705816,5707489,5709159,5710822,5712601,5714609,5716348,5718067,5719795,5721486,5723194,5724836,5726458,5727211,5727972,5729113,5730698,5731918,5733178,5734622,5736260,5737882,5739313,5740701,5742139,5743677,5745144,5746642,5748118,5749555,5751036,5752518,5753988,5755459,5756962,5758478,5759971,5760570,5760934,5761260,5761657,5761984,5762199,5762625,5763105,5763461,5763942,5764296,5764643,5764943,5765192,5765490,5765918,5766358,5766549,5767060,5767514,5767694,5768079,5768433,5768691,5769109,5769486,5769902,5770512,5770954,5771389,5771781,5772007,5772278,5772770,5773132,5773625,5773974,5774661,5776653,5778647,5780648,5782427,5784117,5785790,5787447,5789154,5790850,5792525,5794204,5795911,5797625,5799336,5801043,5802760,5804455,5806159,5807851,5809539,5811409,5813457,5815435,5817048,5818676,5820409,5822149,5823849,5825658,5827514,5829322,5831203,5833007,5834758,5836464,5838162,5839609,5840173,5840863,5841597,5842462,5843670,5844374,5845315,5846163,5846969,5847524,5848044,5849751,5850946,5852281,5853837,5855373,5856846,5858391,5859862,5861336,5862879,5864375,5865858,5867349,5868831,5870314,5871787,5873290,5874537,5874859,5875381,5876000,5876563,5877066,5877539,5878004,5878604,5879145,5879619,5879957,5880531,5881110,5881621,5882152,5882684,5883348,5883993,5884592,5884987,5885366,5885660,5887388,5889338,5891130,5892821,5894514,5896218,5897924,5899595,5901277,5902957,5904645,5906314,5908351,5910052,5911759,5913517,5915246,5916989,5918739,5920456,5921541,5922255,5923320,5924868,5926424,5927917,5929396,5930930,5932490,5933948,5935505,5937018,5938534,5940080,5941581,5943101,5944584,5946064,5947552,5949055,5950542,5952017,5953515,5955001,5956483,5957937,5959422,5960931,5962425,5963897,5965366,5966859,5968341,5969824,5971294,5972799,5973781,5974417,5975046,5975645,5976313,5976834,5977036,5977494,5977774,5978100,5978669,5978906,5979280,5979888,5980410,5981056,5981600,5982074,5982664,5983277,5983713,5984279,5984708,5985399,5986023,5986603,5987151,5987708,5988390,5988994,5989638,5990307,5990889,5991445,5991930,5992476,5992913,5993325,5993854,5994332,5994960,5995512,5996009,5996425,5996950,5997561,5998083,5998708,5999295,5999805,6000286,6000409,6000548,6000837,6001268,6001800,6002113,6002462,6002900,6003418,6004031,6004627,6005058,6005637,6006224,6006618,6006932,6007177,6007760,6008314,6009018,6009513,6009992,6011947,6013953,6015963,6017982,6019966,6021993,6023620,6025326,6027023,6028721,6030423,6032134,6033811,6035507,6037223,6038923,6040613,6042310,6044004,6045710,6047388,6049070,6050798,6052478,6054166,6055846,6057518,6059216,6060906,6062595,6064290,6065990,6067660,6069358,6071041,6072710,6074396,6076214,6078262,6080310,6082358,6084151,6085928,6087656,6089355,6091175,6092896,6094655,6096547,6098255,6100031,6101791,6103558,6105275,6107031,6108789,6110501,6112225,6113955,6115635,6117422,6119210,6120960,6122743,6124467,6126257,6128133,6128930,6129655,6130262,6130973,6131614,6132289,6132829,6133580,6134098,6134694,6135132,6135737,6136297,6137036,6137998,6138880,6139774,6140671,6141608,6142309,6142811,6143101,6143704,6144386,6144953,6145364,6146030,6146413,6146726,6147036,6147708,6148628,6149494,6150374,6150958,6152235,6153193,6153827,6154126,6155368,6156971,6158619,6160243,6161864,6163666,6165381,6167066,6168698,6170226,6171693,6173273,6174799,6176254,6177739,6179224,6180673,6182148,6183628,6185101,6186574,6188049,6189506,6190968,6192471,6193956,6195433,6196886,6197502,6198015,6198525,6198966,6199407,6199975,6200266,6200778,6201221,6201817,6201966,6202260,6202851,6203345,6203885,6204207,6204773,6205343,6205947,6206433,6206818,6207430,6207678,6207853,6208357,6208911,6209210,6209472,6209638,6209970,6210455,6211007,6211503,6212021,6212521,6212769,6213154,6213556,6213958,6214465,6215000,6215413,6215729,6216079,6216611,6217147,6217760,6219776,6221824,6223825,6225854,6227665,6229377,6231094,6232796,6234513,6236243,6237912,6239617,6241315,6243056,6244722,6246436,6248119,6249802,6251500,6253229,6254947,6256624,6258313,6259993,6261645,6263618,6265666,6267695,6269562,6271431,6273141,6274942,6276691,6278482,6280265,6282193,6284015,6285825,6287607,6289449,6291335,6293205,6294934,6296735,6298371,6299661,6300351,6301160,6301826,6302589,6303297,6304172,6305180,6305896,6306811,6307749,6308721,6309514,6310405,6311225,6312193,6312938,6313573,6314105,6315218,6316675,6317278,6318038,6319558,6321120,6322725,6324340,6325947,6327484,6328986,6330458,6331500,6332110,6332736,6333220,6333600,6335093,6336758,6338445,6340286,6342090,6343156,6344344,6345857,6347266,6348766,6350250,6351722,6353214,6354713,6356194,6357658,6359071,6359623,6360186,6360744,6361325,6361884,6362215,6362610,6363132,6363541,6364083,6364612,6364973,6365387,6365561,6365953,6366448,6366879,6367148,6367491,6367810,6368098,6368381,6368776,6369247,6369757,6370124,6371123,6373055,6374933,6376583,6378245,6379900,6381597,6383269,6384919,6386602,6388299,6389975,6391674,6393350,6395347,6397076,6398606,6400239,6401966,6403698,6405444,6407143,6408866,6410468,6411063,6411692,6412152,6413841,6415240,6416268,6417484,6418715,6420337,6421991,6423615,6424641,6425132,6426252,6427993,6429450,6430826,6431350,6432052,6433742,6435275,6436886,6438377,6439896,6441320,6442776,6444252,6445751,6447233,6448696,6450184,6451660,6453144,6454627,6456127,6457617,6459093,6460575,6462068,6463586,6465049,6466563,6468030,6469509,6470973,6472454,6473926,6475410,6476885,6478358,6479861,6480675,6481286,6481879,6482409,6483031,6483636,6484212,6484817,6485319,6485762,6486293,6486913,6487517,6487915,6488358,6488752,6489191,6489766,6490400,6490873,6491357,6491891,6492401,6492610,6493163,6493743,6494147,6494385,6494772,6495313,6495907,6496466,6497059,6497658,6498025,6498504,6498986,6499466,6499895,6500349,6500834,6501322,6501619,6502093,6502589,6502879,6503260,6503578,6503994,6504491,6504958,6505499,6505975,6506421,6506831,6507423,6507991,6508606,6509105,6509659,6510169,6510587,6511056,6511577,6512080,6512660,6513148,6513644,6513940,6514426,6514898,6515384,6515840,6516225,6516844,6517384,6517755,6518169,6518579,6519014,6519275,6519616,6520069,6520343,6520882,6521282,6521714,6522290,6522672,6523096,6524977,6527007,6529061,6531117,6533133,6535150,6537194,6539043,6540767,6542494,6544227,6545934,6547673,6549400,6551129,6552872,6554595,6556349,6558086,6559831,6561564,6563312,6565055,6566752,6568494,6570215,6571920,6573657,6575372,6577062,6578715,6580394,6582071,6583750,6585431,6587114,6588811,6590521,6592249,6593967,6595685,6597401,6599126,6600842,6602485,6604139,6605889,6607937,6609985,6612033,6614081,6616076,6617909,6619713,6621519,6623337,6625143,6626969,6628763,6630569,6632347,6634127,6635937,6637760,6639616,6641484,6643377,6645177,6646989,6648797,6650589,6652441,6654152,6655793,6657510,6659188,6660896,6662686,6664460,6666243,6667996,6669808,6671589,6673403,6675039,6676658,6677429,6678078,6678892,6679605,6680150,6680680,6681540,6682843,6684075,6685074,6686074,6686893,6688021,6688958,6689956,6691111,6692206,6693094,6694073,6695190,6696063,6696755,6697437,6698410,6699619,6701335,6702851,6704177,6705846,6707449,6709138,6710777,6712447,6714060,6715722,6717460,6719145,6720525,6721061,6721759,6723451,6724978,6726482,6727128,6727528,6729158,6730799,6732304,6733206,6733639,6734968,6736733,6738179,6739391,6739936,6740811,6742530,6744022,6745541,6746085,6746531,6748252,6749829,6751331,6752123,6752543,6754005,6755790,6757204,6758252,6758758,6759811,6761538,6763011,6764430,6764965,6765604,6767303,6768836,6770326,6771006,6771410,6773006,6774679,6776166,6777122,6777583,6778850,6780607,6782049,6783330,6783900,6784725,6786433,6787939,6789451,6790042,6790448,6792163,6793750,6795260,6796077,6796482,6797910,6799691,6801093,6802190,6802719,6803733,6805452,6806938,6808377,6808916,6809510,6811220,6812766,6814330,6815804,6817265,6818743,6820224,6821681,6822642,6823092,6823490,6823708,6823934,6824138,6824486,6824960,6825309,6825793,6826337,6826733,6827135,6827542,6827820,6828062,6828462,6828799,6829155,6831058,6832935,6834581,6836215,6837867,6839537,6841219,6842861,6844505,6846134,6847914,6849693,6851213,6852812,6854434,6856027,6857675,6858978,6859358,6859529,6860358,6861349,6862480,6862964,6864656,6866324,6867587,6868133,6868964,6870674,6872176,6873406,6874889,6876353,6877830,6879266,6880713,6881743,6882293,6882697,6883102,6883569,6884027,6884532,6885276,6885842,6886353,6886835,6887226,6887596,6887968,6888429,6888871,6889418,6891084,6892858,6894518,6896173,6897854,6899472,6901123,6902793,6904697,6906269,6907859,6909461,6910621,6911065,6911601,6912063,6912302,6912830,6913714,6914954,6916525,6918196,6919098,6919785,6920531,6921227,6921837,6922591,6923332,6924074,6924812,6925436,6926100,6926886,6927641,6928805,6930654,6932711,6934751,6936799,6938856,6940040,6941506,6942948,6944215,6945581,6947067,6948527,6949964,6951475,6953027,6954542,6956031,6957490,6958928,6960272,6961653,6963133,6964511,6966069,6967488,6968828,6970165,6971616,6973026,6974343,6975937,6977476,6978862,6980213,6981631,6983176,6984597,6986159,6987656,6989022,6990524,6991530,6991938,6991984,6992056,6992432,6992788,6993135,6993552,6994126,6994551,6995006,6995544,6996168,6997144,6998295,6999380,7000439,7001485,7002729,7003968,7005186,7005868,7006427,7006997,7007523,7008057,7008690,7009392,7009830,7010145,7010576,7011044,7011502,7012286,7013812,7015324,7016775,7018208,7019680,7021220,7022813,7024378,7025925,7027501,7029074,7030614,7032264,7033699,7035208,7036762,7038367,7040053,7041664,7043266,7044958,7046635,7048242,7049734,7051350,7052839,7054354,7055914,7057512,7058918,7060191,7061124,7062092,7063072,7064112,7065270,7066397,7067560,7068786,7070001,7071138,7072347,7073797,7075229,7076686,7078039,7079477,7080891,7082469,7083785,7084947,7086119,7087327,7088498,7089812,7091088,7092445,7093899,7095226,7096640,7098050,7099424,7100557,7101947,7103263,7104277,7105384,7106504,7107637,7108804,7110024,7111513,7112905,7114104,7115378,7116956,7118379,7119700,7121334,7122804,7124548,7125608,7126904,7128091,7129281,7130948,7132136,7133291,7134462,7135612,7136811,7137978,7139100,7140402,7141958,7143482,7144894,7146344,7147837,7149408,7151020,7152581,7154143,7155752,7157317,7158866,7160497,7161979,7163441,7165040,7166663,7168363,7169934,7171594,7173285,7174948,7176513,7177977,7179583,7181061,7182565,7184133,7185722,7187074,7188844,7190895,7192943,7194970,7197018,7198897,7200354,7201926,7203403,7204863,7206315,7207843,7209443,7211017,7212540,7214121,7215719,7217286,7218904,7220402,7221947,7223432,7225052,7226729,7228343,7229918,7231616,7233290,7234887,7236415,7237961,7239513,7241015,7242570,7244139,7245623,7246906,7247992,7249366,7250650,7251672,7252759,7253916,7255039,7256192,7257408,7258885,7260304,7261532,7262836,7264434,7265799,7267146,7268755,7270236,7271983,7273079,7274383,7275597,7276764,7278433,7279663,7280822,7282004,7283152,7284324,7285474,7286608,7287258,7287738,7288125,7288949,7289704,7290521,7291253,7292101,7292858,7293705,7294467,7295116,7295743,7296600,7297179,7297879,7298462,7299225,7300041,7300844,7301361,7302139,7302860,7303609,7304428,7305355,7306090,7306779,7307141,7307505,7308316,7308914,7309622,7310243,7311062,7311892,7313223,7314752,7316132,7317138,7318036,7318844,7319635,7320729,7321917,7323056,7324150,7325277,7326280,7327339,7328374,7329456,7330527,7331645,7332768,7333863,7334932,7336050,7337120,7338151,7339223,7340301,7341360,7342455,7343547,7344558,7345612,7346636,7347636,7348589,7349853,7350934,7351771,7352937,7354149,7355657,7356807,7357707,7358561,7359421,7360281,7361316,7362503,7364032,7366082,7368137,7370193,7372054,7373510,7374966,7377022,7379070,7381118,7383166,7385214,7387262,7389319,7391375,7393423,7395465,7397420,7399456,7401504,7403105,7405022,7406444,7408233,7410101,7411896,7413706,7415574,7417392,7419222,7421080,7422906,7424699,7426571,7428379,7430377,7431995,7433350,7435268,7436587,7438367,7439392,7441143,7443022,7444638,7446289,7447406,7449128,7449873,7450937,7452166,7453998,7455781,7457658,7459460,7461161,7462789,7464297,7465757,7467195,7468552,7470484,7472413,7474189,7475838,7477366,7478801,7480133,7481419,7482631,7483843,7484991,7486392,7488041,7489718,7491557,7493526,7495463,7497426,7499432,7501310,7503222,7505107,7507121,7508925,7510440,7511899,7513947,7515568,7517337,7519161,7520676,7521705,7523546,7525601,7527381,7527723,7528840,7530614,7531860,7533866,7535264,7535926,7537968,7540016,7542064,7543281,7544679,7546727,7548564,7549595,7550018,7551849,7553575,7554205,7556124,7558181,7560229,7562277,7563949,7564542,7566452,7568500,7570464,7571639,7571765,7572942,7574990,7577047,7579095,7580598,7581747,7583800,7585848,7587896,7589944,7591678,7592883,7593624,7594348,7594980,7596982,7599030,7601078,7603132,7605136,7606920,7608472,7609792,7610872,7611892,7612805,7614853,7616675,7618545,7620600,7622593,7624517,7626090,7626694,7627078,7628699,7629711,7630782,7631685,7631974,7633977,7636025,7638073,7640121,7642027,7642464,7643515,7645563,7647620,7649654,7651022,7652240,7654109,7656157,7658205,7660261,7662309,7664204,7665426,7666329,7667001,7669050,7670668,7672716,7674686,7676734,7678595,7680613,7682503,7684069,7685285,7686168,7687564,7689621,7691669,7693717,7695765,7697820,7699868,7701921,7703863,7705912,7707961,7710015,7712037,7714085,7716142,7718190,7720242,7722290,7724140,7725611,7726738,7727624,7728527,7729148,7729431,7731480,7733445,7735202,7736658,7738046,7738968,7739966,7742014,7744068,7746116,7747507,7748838,7750672,7752578,7754493,7756463,7758462,7760417,7762454,7764469,7766441,7768439,7770237,7771458,7773100,7775044,7777091,7779139,7781187,7783235,7785283,7787331,7789379,7791427,7793475,7795523,7797580,7799628,7801612,7803474,7805168,7806680,7808028,7809129,7809756,7810810,7812514,7814227,7816275,7818323,7820252,7821997,7824054,7826102,7828150,7830198,7832246,7834294,7836342,7838390,7840438,7842486,7844534,7846582,7848630,7850678,7852726,7854774,7856831,7858879,7860927,7862984,7864819,7865957,7867856,7869904,7871952,7874000,7876048,7878096,7880144,7882192,7884240,7886283,7888176,7889822,7891158,7892026,7892855,7893089,7893967,7896015,7898063,7900111,7902159,7904207,7906255,7907697,7908241,7908700,7910418,7912392,7914365,7916402,7918450,7920498,7922554,7924602,7926650,7928698,7930746,7932794,7934842,7936890,7938938,7940987,7943034,7945087,7947142,7949190,7951235,7953286,7955342,7957394,7959428,7961391,7963241,7964937,7966460,7967782,7969031,7970573,7972621,7974678,7976416,7977671,7979639,7981051,7982210,7983208,7983413,7983438,7983463,7983488,7983513,7984378,7986003,7987897,7989820,7991868,7993847,7995571,7996572,7997007,7999055,8001103,8003151,8004882,8006534,8008099,8010147,8012199,8014232,8016192,8018130,8019454,8020969,8023017,8025065,8027113,8028540,8030527,8032528,8034576,8036624,8038672,8040719,8042662,8044586,8046429,8048252,8049864,8051157,8052219,8053089,8054922,8056970,8059018,8061066,8063114,8065167,8066793,8068841,8070889,8072937,8074202,8076031,8078048,8080096,8082144,8084192,8086240,8088259,8090019,8091525,8092683,8094716,8095919,8097669,8099671,8101608,8103454,8105059,8106431,8107846,8109408,8111050,8112319,8114156,8116065,8118113,8120168,8122216,8123862,8124107,8125067,8127115,8129172,8131021,8132550,8133927,8135196,8136276,8137331,8138391,8140220,8142275,8144100,8145388,8146485,8147253,8147938,8148633,8149336,8150488,8152536,8154551,8155742,8156382,8157653,8159708,8161756,8163804,8165852,8167900,8169948,8171996,8174044,8176092,8178100,8179816,8181249,8182399,8183790,8185838,8187886,8189926,8190569,8192395,8194452,8196500,8198556,8200303,8200612,8200712,8202112,8203824,8205859,8207907,8209964,8212012,8213782,8215830,8217878,8219926,8221983,8224031,8225596,8227232,8229072,8230540,8232596,8234644,8236692,8238740,8240768,8242013,8243844,8245895,8247950,8249998,8252054,8254102,8256159,8258190,8260180,8262144,8263956,8265565,8266629,8267523,8269114,8271153,8273181,8274955,8277003,8279051,8281108,8283156,8285204,8287192,8288600,8289522,8291570,8293618,8295674,8297722,8299770,8301818,8303866,8305914,8307962,8310010,8312058,8314106,8316154,8318202,8320250,8322307,8324305,8326111,8327656,8328748,8330740,8332788,8334845,8336893,8338941,8340989,8343037,8345085,8346963,8348170,8348950,8349306,8349809,8351857,8353905,8355953,8358001,8360049,8361952,8363552,8365116,8366777,8368626,8370222,8371238,8371836,8373776,8375827,8377883,8379940,8381997,8384045,8386093,8388141,8390198,8392254,8394280,8396195,8397838,8399241,8400123,8400596,8401029,8401604,8402129,8402641,8404651,8406699,8408709,8410559,8412168,8413618,8414878,8416018,8417696,8419653,8421246,8422615,8424604,8426433,8428040,8429489,8430686,8431521,8432007,8433292,8435243,8436995,8438461,8439593,8441576,8443468,8445020,8447071,8449119,8449972,8452020,8453747,8455795,8457597,8458007,8459756,8461804,8463852,8465900,8467807,8469273,8469556,8470892,8472940,8474290,8474315,8475349,8477406,8479463,8481511,8483559,8485607,8487655,8489703,8491751,8493799,8495853,8497908,8499627,8500803,8502851,8504736,8505638,8507370,8509418,8511466,8513514,8515562,8517610,8519658,8521692,8523175,8523924,8525972,8528020,8530068,8532116,8534172,8536224,8537971,8539296,8541344,8543392,8545440,8547488,8549536,8551584,8553632,8555680,8557728,8559776,8561833,8563350,8563805,8564673,8566721,8568737,8570784,8572837,8574885,8576933,8578981,8581029,8583082,8585130,8587178,8589226,8591242,8592855,8594114,8594960,8595280,8596097,8597998,8599840,8601851,8603907,8605955,8608004,8609790,8610760,8612517,8614245,8615030,8616494,8618542,8620590,8622638,8624688,8626284,8627387,8628080,8628783,8629640,8631688,8633736,8635784,8637832,8639883,8641931,8643979,8646027,8648075,8650132,8652011,8653580,8654743,8655558,8656670,8658718,8660766,8662814,8664862,8666750,8668155,8669368,8670026,8671401,8673456,8675504,8676365,8678413,8680452,8682500,8684548,8686596,8688577,8690612,8692016,8693405,8694363,8694947,8695545,8697331,8699272,8700687,8702206,8704263,8706311,8708365,8710422,8712477,8714534,8716484,8718483,8719874,8721931,8723985,8725900,8727655,8729136,8730514,8731718,8732875,8734923,8736980,8739028,8741076,8743124,8745179,8747227,8748757,8749791,8750925,8752973,8755021,8757069,8759117,8761165,8763213,8765266,8767294,8769177,8770914,8772470,8773804,8775079,8777135,8779192,8781240,8783288,8785336,8787384,8789432,8791480,8793528,8795585,8797633,8799681,8801729,8803777,8805831,8807888,8809945,8812001,8814051,8816099,8818152,8820209,8822265,8824313,8826361,8828409,8830466,8832514,8834571,8836557,8837850,8839426,8841243,8843299,8845356,8847404,8849452,8851500,8853548,8855596,8857644,8859692,8861740,8863788,8865836,8867884,8869932,8871987,8874021,8875930,8877625,8879532,8881562,8882689,8884611,8886659,8888707,8890755,8892803,8894860,8896908,8898951,8900989,8902754,8903838,8904724,8906648,8908696,8910744,8912792,8914829,8916328,8918376,8920424,8922472,8924520,8926568,8928616,8930665,8931937,8933697,8935745,8937801,8939829,8941814,8943841,8945673,8947240,8948743,8950222,8951604,8952764,8953881,8955056,8956373,8957831,8959130,8960304,8961427,8962487,8963537,8964719,8965752,8966822,8968044,8969154,8970828,8972286,8973663,8975126,8976257,8977531,8979106,8980289,8981479,8982881,8984276,8985643,8986963,8988194,8989431,8990502,8991170,8992309,8993565,8994982,8996465,8997860,8999247,9000604,9001719,9002888,9004257,9005665,9006788,9008415,9009761,9011053,9012075,9013181,9014367,9015587,9016675,9017865,9018247,9018998,9019730,9020619,9021598,9022329,9023498,9024161,9025265,9026367,9027508,9028726,9030375,9032032,9033497,9034090,9034824,9035316,9035589,9036960,9037935,9038460,9038822,9039434,9039997,9040827,9041761,9042455,9043156,9043988,9044667,9045340,9046094,9046799,9047513,9048503,9049124,9049472,9050638,9052148,9053129,9054584,9056126,9056647,9058170,9059553,9060140,9060433,9060674,9061158,9062767,9063887,9064469,9065017,9065406,9066197,9066363,9066498,9066567,9066642,9066734,9067247,9067955,9068913,9069509,9069781,9070093,9070920,9071805,9072337,9072929,9073447,9073520,9073591,9073955,9074782,9075530,9076028,9076636,9077148,9077687,9078267,9078496,9078768,9079315,9079924,9080497,9080719,9080993,9081165,9081505,9081811,9082174,9082753,9082871,9083360,9083919,9083993,9084126,9084244,9084404,9084563,9085036,9086321,9087574,9088155,9088377,9088459,9088932,9089374,9090058,9090550,9090892,9091135,9091521,9091939,9092258,9092571,9092881,9093333,9093479,9094170,9094889,9095364,9095838,9096373,9097013,9097422,9097875,9098273,9098607,9098909,9099304,9099493,9100788,9102471,9103625,9104681,9105585,9106501,9107675,9108939,9110183,9111432,9112804,9114123,9115525,9116940,9118239,9119553,9120924,9122329,9123621,9125071,9126490,9127982,9129523,9131007,9132360,9133539,9134734,9135906,9137097,9138196,9139114,9139981,9141186,9142487,9144384,9145978,9147607,9149131,9150592,9152159,9153787,9155375,9157040,9158819,9160634,9162443,9164243,9166088,9167825,9169616,9171353,9173011,9174776,9176373,9178075,9179831,9181579,9183259,9184834,9186516,9188006,9189642,9191192,9192800,9194279,9195791,9197393,9199246,9200546,9201823,9203027,9204296,9205494,9206805,9208055,9209410,9210892,9212355,9213943,9215526,9217044,9218566,9220046,9221503,9223034,9224566,9226001,9227472,9228867,9230381,9231859,9233019,9234194,9235289,9236486,9237715,9238924,9240236,9241455,9242797,9244071,9245280,9246463,9247617,9248798,9249951,9251131,9252631,9254544,9256033,9257567,9259001,9260409,9261983,9263557,9265485,9266901,9268205,9269857,9271325,9272900,9274411,9275985,9277775,9279297,9280866,9282379,9283950,9285732,9286720,9287741,9288779,9290057,9291863,9293434,9295021,9296554,9298215,9299583,9300933,9302240,9303592,9304795,9305683,9307194,9308935,9310479,9310871,9311256,9311643,9312793,9313949,9315143,9316395,9318267,9320110,9322079,9324057,9326015,9327949,9329728,9331492,9333120,9334282,9335686,9337071,9338345,9339568,9341222,9342939,9344730,9346533,9348313,9350076,9351739,9353549,9355162,9357083,9359009,9360359,9361439,9362963,9364641,9365649,9367206,9368922,9370599,9372185,9373901,9374997,9376171,9377379,9378945,9380600,9382286,9383977,9385265,9387031,9388626,9390407,9392220,9393930,9395585,9397308,9398935,9400625,9402392,9404159,9405775,9407560,9409251,9411030,9412827,9414661,9416347,9418128,9419866,9421468,9423211,9424993,9426778,9428573,9430399,9432010,9433824,9435527,9437221,9438881,9440571,9442272,9443866,9445530,9447323,9449072,9450709,9452436,9454152,9455887,9457630,9459323,9460983,9462748,9464401,9466196,9468046,9469644,9471429,9473120,9474863,9476663,9478304,9480090,9481861,9483408,9485145,9486849,9488418,9490133,9491881,9493712,9495415,9497225,9498822,9500622,9502438,9504115,9505787,9507475,9509114,9510813,9512642,9514360,9516138,9517980,9519811,9521658,9523466,9525325,9527181,9529085,9530840,9532686,9534428,9536127,9537848,9539641,9541260,9542975,9544685,9546376,9548062,9549775,9551395,9553007,9554950,9556881,9558762,9560680,9562615,9564537,9566435,9568358,9570270,9572167,9574051,9575056,9576902,9578737,9580470,9582240,9584034,9585833,9587595,9589404,9591216,9593081,9594816,9596539,9598387,9600087,9601878,9603612,9605396,9607174,9608938,9610764,9612453,9614279,9616095,9617903,9619658,9621355,9623092,9624893,9626686,9628520,9630311,9632105,9633857,9635485,9637163,9638923,9640645,9642447,9644143,9646021,9647834,9649481,9651353,9653204,9655029,9656855,9658543,9660263,9662087,9663937,9665701,9667396,9669218,9670979,9672808,9674471,9676168,9677785,9679440,9680962,9682475,9684074,9685725,9686482,9688065,9689533,9691208,9692814,9694510,9696038,9697764,9698841,9700503,9701757,9703256,9704784,9706401,9708047,9709748,9711304,9713043,9713982,9715678,9717225,9718703,9720277,9721097,9722681,9724213,9725772,9727452,9729044,9730744,9732315,9734031,9735677,9737265,9739295,9741276,9743242,9745224,9747240,9749043,9751039,9752919,9754935,9756963,9758759,9760771,9762812,9764668,9766682,9768699,9770686,9772678,9774710,9776699,9778712,9780663,9782599,9784423,9786463,9788498,9790211,9792019,9793943,9795812,9797647,9799419,9801140,9802950,9804805,9806699,9808572,9810420,9812209,9813902,9815624,9817389,9819211,9821058,9822907,9824753,9826525,9828267,9830009,9831894,9833773,9835597,9837458,9839286,9841011,9842650,9844440,9846334,9848156,9849994,9851853,9853684,9855392,9857131,9858915,9860775,9862539,9864403,9866296,9868179,9869942,9871672,9873525,9875403,9877223,9879080,9880830,9882591,9884314,9886135,9888005,9889823,9891658,9893505,9895224,9896972,9898811,9900686,9902535,9904428,9906239,9907959,9909803,9911700,9913569,9915372,9917180,9919047,9920831,9922558,9924382,9926082,9927568,9929116,9930642,9932253,9933735,9935313,9936929,9938413,9940139,9941716,9943237,9944978,9946492,9948181,9950145,9951919,9953654,9955568,9957285,9959088,9960857,9962534,9964057,9965662,9967182,9968792,9970279,9971840,9973430,9974954,9976635,9978301,9979915,9981777,9983376,9985222,9987113,9988905,9990603,9992474,9994208,9995834,9997408,9998981,10000645,10002266,10003768,10005424,10006904,10008514,10010073,10011558,10013267,10014639,10016219,10018136,10019852,10021595,10023427,10025188,10026990,10028856,10030603,10032303,10034082,10035652,10037327,10038853,10040368,10041892,10043349,10044967,10046472,10048102,10049727,10051281,10053190,10054703,10056400,10058269,10060044,10061697,10063485,10065067,10066594,10068289,10069892,10071539,10073036,10074483,10076098,10077562,10079225,10080775,10082225,10084062,10085623,10087221,10089084,10090748,10092437,10094216,10095944,10097698,10099535,10101299,10103012,10104859,10106626,10108341,10109978,10111833,10113592,10115334,10117161,10118863,10120638,10122373,10124112,10125796,10127480,10129218,10130727,10132366,10134116,10135665,10137467,10139116,10140849,10142485,10144201,10145891,10147549,10149329,10150923,10152736,10154410,10156194,10157879,10159621,10161333,10163108,10164604,10166251,10167840,10169643,10171280,10172978,10174537,10176121,10177679,10179198,10180737,10182484,10184084,10185831,10187423,10189159,10190953,10192697,10194367,10196107,10197999,10199754,10201464,10203167,10204768,10206335,10208052,10209822,10211457,10213005,10214667,10216325,10217792,10219389,10221060,10222567,10224092,10225810,10227476,10229222,10231066,10232845,10234576,10236383,10238153,10239896,10241733,10243544,10245202,10246736,10248610,10250192,10251810,10253489,10255060,10256683,10258107,10259825,10261263,10262779,10264527,10266095,10267746,10269515,10271005,10272680,10274541,10276405,10278096,10280010,10281729,10283337,10285214,10286830,10288367,10290106,10291719,10293388,10294832,10296401,10297848,10299379,10301061,10302621,10304226,10305999,10307596,10309383,10311257,10313036,10314779,10316690,10318492,10320180,10321962,10323669,10325249,10326890,10328482,10330143,10331550,10332934,10334631,10336026,10337581,10339365,10340875,10342483,10344173,10345649,10347296,10348914,10350559,10352382,10354115,10355704,10357464,10359245,10360937,10362750,10364403,10365920,10367638,10369021,10370590,10372059,10373556,10375048,10376597,10378228,10379873,10381406,10383202,10384959,10386743,10388483,10390141,10391932,10393682,10395383,10397097,10398870,10400611,10402356,10404049,10405804,10407621,10409299,10411053,10412836,10414516,10416163,10417897,10419719,10421384,10423108,10424886,10426704,10428361,10430051,10431811,10433521,10435144,10436834,10438529,10440367,10442151,10443869,10445521,10447237,10449056,10450845,10452644,10454169,10455615,10457463,10459278,10461114,10462648,10464438,10466226,10468105,10469836,10471516,10473225,10474993,10476796,10478452,10480108,10481890,10483649,10485503,10487180,10488852,10490622,10492407,10494182,10495909,10497550,10499299,10501167,10502855,10504621,10506390,10507924,10509747,10511594,10513412,10515223,10516936,10518728,10520576,10522322,10524124,10525837,10527535,10529236,10530924,10532611,10534300,10536042,10537803,10539708,10541605,10543503,10545438,10547380,10549325,10551266,10553167,10554874,10556652,10558543,10560428,10562204,10564014,10565803,10567609,10569437,10571344,10573278,10575174,10577069,10578921,10580749,10582673,10584511,10586347,10588162,10589956,10591824,10593639,10595564,10597509,10599419,10601238,10603048,10604878,10606737,10608650,10610564,10612467,10614299,10616129,10617925,10619735,10621645,10623501,10625327,10627145,10629038,10630860,10632622,10634416,10636300,10638228,10640170,10641950,10643862,10645764,10647670,10649589,10651531,10653455,10655359,10657145,10659060,10660994,10662927,10664834,10666670,10668522,10670260,10672008,10673774,10675472,10677218,10678933,10680740,10682535,10684327,10686089,10687900,10689645,10691529,10693265,10695102,10696862,10698730,10700469,10702183,10703963,10705669,10707378,10709180,10710865,10712727,10714502,10716376,10718195,10720062,10721916,10723750,10725623,10727466,10729327,10731150,10733011,10734860,10736682,10738534,10740316,10742174,10743973,10745778,10747667,10749430,10751257,10753066,10754908,10756771,10758578,10760370,10762180,10763982,10765778,10767568,10769334,10771128,10772901,10774753,10776516,10778396,10780100,10781913,10783726,10785424,10787261,10789010,10790850,10792654,10794310,10796075,10797789,10799489,10801299,10803126,10804988,10806839,10808784,10810674,10812401,10814293,10815930,10817837,10819605,10821545,10823299,10825035,10826900,10828669,10830410,10832317,10834102,10835830,10837520,10839201,10840870,10842626,10844323,10846049,10847765,10849451,10851155,10852907,10854639,10856396,10858075,10859858,10861630,10863359,10865115,10866877,10868641,10870333,10872066,10873808,10875609,10877355,10879080,10880838,10882641,10884458,10886075,10888018,10889967,10891561,10893417,10895049,10896907,10898717,10900630,10902192,10904079,10905611,10907581,10909435,10911108,10912841,10914566,10916317,10917726,10919659,10921138,10923140,10924655,10926546,10928033,10929721,10931422,10933198,10934862,10936363,10938198,10939698,10941613,10943136,10945051,10946563,10948322,10949978,10951827,10953480,10955080,10956822,10958395,10960263,10962250,10964188,10966190,10968152,10970129,10972140,10974002,10975974,10977974,10979880,10981344,10983202,10985119,10986610,10987944,10989357,10990041,10990894,10991687,10992676,10993993,10995489,10996338,10998350,11000366,11002391,11004409,11006446,11008466,11010496,11012496,11014442,11016369,11018042,11019709,11021435,11023163,11024903,11026566,11028321,11030077,11031751,11033443,11035217,11036802,11038758,11040485,11042127,11043696,11045403,11047103,11048913,11050677,11052435,11054325,11055979,11057754,11059489,11060458,11061302,11062845,11064026,11064660,11065289,11066940,11068606,11070416,11072206,11074004,11075795,11077649,11079339,11080962,11082758,11084743,11086705,11088697,11090680,11092664,11094642,11096618,11098571,11100506,11102324,11104256,11105736,11107320,11108087,11109456,11111200,11112686,11114078,11115589,11117044,11117968,11119393,11120825,11122392,11123984,11125720,11127571,11129425,11131239,11132778,11134311,11135849,11137433,11139008,11140622,11142195,11143761,11145385,11147219,11149092,11150949,11152866,11154864,11156731,11158578,11160453,11162311,11164201,11166073,11167695,11169629,11171571,11173211,11174803,11176320,11177327,11178937,11180421,11181309,11182960,11184493,11186065,11187667,11189447,11191417,11193001,11194988,11196963,11198189,11200154,11202112,11203935,11205907,11207889,11209808,11211073,11213019,11214976,11216731,11218124,11219918,11221762,11223655,11225569,11227236,11229091,11231107,11232922,11234885,11236325,11238304,11240177,11241784,11243784,11245421,11247410,11249389,11250600,11252566,11254526,11256349,11258324,11260309,11262240,11263438,11265400,11267338,11269091,11270461,11272249,11274093,11275973,11277890,11279551,11281398,11283405,11285365,11287370,11289350,11291279,11293257,11295227,11297030,11298754,11300495,11302205,11303810,11305368,11307112,11308540,11310196,11311761,11313381,11315179,11317075,11318934,11320717,11322488,11324120,11325934,11327795,11329553,11330929,11332670,11334291,11336037,11337529,11339241,11341063,11343061,11345048,11347014,11348973,11350938,11352886,11354853,11356822,11358006,11359308,11360950,11362431,11364005,11366007,11367850,11369216,11371022,11373019,11374899,11376033,11377947,11379919,11381757,11383407,11385269,11387200,11389180,11390997,11392622,11394474,11396495,11398436,11400285,11401669,11403528,11405530,11407363,11409137,11410439,11412244,11414147,11415954,11417393,11419166,11420844,11422760,11424130,11426018,11427990,11429825,11431599,11433115,11434385,11436033,11437825,11439769,11441687,11443017,11444937,11446894,11448863,11450768,11452734,11454667,11456605,11458576,11460453,11462399,11464373,11466289,11468246,11470213,11472140,11474099,11476075,11478016,11479997,11481956,11483909,11485901,11487902,11489808,11491306,11492850,11494850,11496880,11498877,11500568,11502481,11504347,11506326,11508181,11509902,11511541,11513086,11514687,11516149,11517644,11518693,11520650,11522637,11524397,11525533,11526998,11528382,11530168,11532123,11533960,11535663,11537652,11539602,11541517,11543400,11545023,11546774,11548582,11550204,11551914,11553695,11555455,11557355,11559268,11561108,11562926,11564649,11566371,11567681,11568674,11570479,11572038,11573754,11575152,11576845,11578248,11579966,11581721,11583547,11585263,11586985,11588588,11590412,11592334,11594171,11595867,11597593,11599111,11600603,11601755,11603593,11605425,11607298,11609169,11610794,11612197,11613580,11615484,11617132,11618923,11620762,11622498,11624354,11626097,11627912,11629658,11631576,11633441,11635300,11637068,11638672,11640217,11641907,11643632,11645524,11647303,11649087,11650807,11652628,11654369,11656022,11657404,11658416,11659244,11660475,11661980,11663794,11665487,11667330,11669037,11670747,11672296,11673892,11675778,11677529,11679270,11680937,11682487,11684206,11685972,11687741,11689611,11691410,11693202,11694996,11696686,11698406,11700203,11702019,11703776,11705189,11706415,11707561,11708725,11709887,11711011,11712078,11713274,11714678,11716314,11717944,11719584,11721175,11722770,11724430,11726059,11727691,11729575,11731339,11733104,11734852,11736565,11738337,11740092,11741810,11743549,11745265,11747062,11749032,11750776,11752546,11754299,11756217,11758160,11760045,11761969,11763884,11765801,11767703,11769609,11771477,11773406,11775295,11777324,11779189,11781064,11782964,11784906,11786618,11788330,11790007,11791718,11793395,11795081,11796789,11798453,11800339,11802035,11803725,11805417,11807119,11808806,11810489,11812170,11813928,11815772,11817533,11819270,11821037,11822780,11824524,11826285,11828029,11829843,11831345,11832888,11834412,11835961,11837501,11839048,11840579,11842135,11843716,11845221,11846742,11848181,11849964,11851673,11853353,11855038,11856744,11858485,11860186,11861911,11863687,11865326,11867056,11868771,11870523,11872217,11873949,11875625,11877359,11879088,11880825,11882546,11884297,11886064,11887735,11889448,11891133,11892963,11894720,11896451,11898204,11899943,11901716,11903450,11905204,11907070,11908811,11910611,11912440,11914310,11916102,11917923,11919716,11921531,11923341,11925181,11926984,11928847,11930766,11932533,11934321,11936121,11937983,11939581,11941207,11942790,11944377,11945970,11947575,11949161,11950848,11952540,11954177,11955801,11957432,11959060,11960668,11962306,11963942,11965809,11967618,11969430,11971227,11973029,11974809,11976581,11978373,11980192,11981975,11983611,11984856,11986486,11988083,11989759,11990755,11992399,11994184,11995967,11997804,11999672,12001550,12003597,12005481,12007412,12009363,12011230,12013161,12015198,12017136,12019038,12020955,12022833,12024765,12026808,12028627,12030217,12031840,12033482,12035005,12036653,12038504,12040174,12041782,12043409,12044980,12046669,12048640,12050431,12052183,12053784,12055516,12057273,12058972,12060567,12062329,12064221,12066010,12067669,12069306,12071090,12072821,12074447,12076085,12077997,12079993,12081995,12083989,12085982,12087986,12090006,12092030,12094051,12096074,12098069,12100082,12102074,12104031,12105788,12107586,12109518,12111459,12113348,12115301,12117272,12119139,12120959,12122756,12124593,12126375,12128290,12130228,12132121,12134045,12135862,12137793,12139698,12141614,12143474,12145377,12147293,12149211,12151087,12152699,12154533,12156217,12157893,12159611,12161264,12162943,12164781,12166543,12168409,12170230,12172062,12173967,12175851,12177678,12179551,12181354,12182941,12184402,12185796,12187215,12188984,12190610,12192281,12193921,12195563,12197198,12198831,12200507,12202120,12203667,12205261,12206853,12208498,12210148,12211821,12213464,12215105,12216929,12218530,12220128,12221760,12223338,12224949,12226537,12228126,12229677,12231471,12233131,12234752,12236400,12237978,12239627,12241262,12242865,12244605,12246207,12247817,12249427,12251002,12252602,12254203,12255803,12257384,12259160,12260839,12262492,12264142,12265755,12267411,12269048,12270673,12272388,12274000,12275557,12277094,12278600,12280110,12281637,12283160,12284649,12286413,12287973,12289540,12291108,12292704,12294262,12295804,12297328,12298930,12300691,12302272,12303859,12305478,12307096,12308683,12310200,12311761,12313514,12315111,12316679,12318239,12319824,12321403,12322921,12324402,12325995,12327747,12329327,12330938,12332537,12334159,12335733,12337267,12338823,12340566,12342218,12343818,12345430,12347066,12348718,12350319,12351901,12353535,12355329,12356893,12358506,12360103,12361746,12363340,12364937,12366487,12368191,12370197,12372199,12374171,12376188,12378139,12380127,12382034,12383987,12385905,12387883,12389792,12391767,12393719,12395710,12397647,12399618,12401597,12402982,12404344,12405682,12406966,12408453,12409878,12411257,12412634,12414102,12415482,12416813,12418192,12419659,12421098,12422484,12423862,12425211,12426580,12427994,12429368,12430731,12432212,12433647,12435033,12436436,12437907,12439321,12440720,12442158,12443571,12444991,12446352,12447724,12449020,12450607,12452024,12453389,12454770,12456136,12457515,12458874,12460251,12461734,12463091,12464467,12465824,12467185,12468780,12470253,12471819,12473190,12474526,12475896,12477272,12478673,12480084,12481506,12482879,12484361,12485778,12487148,12488543,12490033,12491459,12492861,12494265,12495719,12497273,12498804,12500402,12501991,12503447,12504869,12506385,12507820,12509344,12510851,12512396,12513882,12515460,12516792,12517999,12519288,12520686,12521925,12523259,12524561,12525817,12527361,12528808,12530263,12531752,12533263,12534600,12536017,12537397,12538764,12540169,12541646,12543050,12544471,12546266,12547965,12549569,12551281,12552878,12554593,12556191,12557871,12559641,12561314,12562957,12564651,12566348,12567989,12569678,12571320,12573043,12574799,12576632,12578273,12580111,12581769,12583543,12585174,12586956,12588768,12590501,12592197,12593914,12595722,12597358,12599099,12600749,12602527,12604262,12605956,12607552,12609247,12610887,12612556,12614173,12615833,12617552,12619302,12621036,12622679,12624462,12626085,12627814,12629450,12631195,12632921,12634420,12635387,12637251,12639219,12640672,12642243,12643744,12645545,12647155,12648615,12650369,12651983,12653603,12655258,12656771,12658293,12660098,12661735,12663438,12665095,12666713,12668536,12670239,12671698,12673425,12675197,12676893,12678252,12679960,12681797,12683525,12685198,12686996,12688793,12690523,12692324,12694176,12695904,12697602,12699293,12701124,12702855,12704647,12706353,12708006,12709838,12711687,12713489,12715316,12717180,12718941,12720438,12721931,12723336,12725106,12726837,12728580,12730202,12731522,12733285,12735047,12736908,12738633,12740366,12741700,12743287,12744923,12746570,12748276,12749735,12751161,12753016,12754881,12756721,12758402,12759739,12761481,12763351,12765320,12767219,12769055,12770374,12771922,12773731,12775551,12777327,12778800,12780375,12782141,12783932,12785725,12787460,12788789,12790508,12792322,12794256,12796060,12797862,12799267,12800750,12802444,12804147,12805884,12807434,12808996,12810698,12812552,12814363,12816175,12817516,12819138,12820963,12822926,12824757,12826639,12828151,12829567,12831285,12833085,12834876,12836493,12838170,12839614,12840926,12841916,12842875,12844135,12845440,12846796,12847971,12849295,12850667,12851822,12852912,12853892,12854997,12856233,12857370,12858539,12859915,12861150,12862527,12863855,12865230,12866560,12867781,12869009,12870516,12872356,12873952,12875513,12877048,12878567,12880159,12881731,12883318,12884906,12886489,12888056,12889662,12891292,12892933,12894554,12896173,12897686,12899216,12900693,12902195,12903803,12905321,12906785,12908262,12909728,12911260,12913081,12914798,12916518,12918204,12919915,12921609,12923275,12924959,12926706,12928414,12930131,12931851,12933573,12935300,12937007,12938719,12940427,12942134,12943824,12945500,12947083,12948702,12950381,12952097,12953773,12955424,12957147,12958939,12960690,12962405,12964137,12966066,12967999,12969851,12971722,12973642,12975526,12977414,12979156,12980934,12982455,12983918,12985709,12987407,12989117,12990830,12992512,12994186,12995896,12997623,12999379,13001120,13002816,13004466,13006200,13007855,13009515,13011234,13012942,13014781,13016466,13018135,13019815,13021448,13023124,13024815,13026499,13028161,13029870,13031544,13033048,13034733,13036217,13037897,13039381,13041077,13042822,13044438,13046048,13047656,13049281,13050859,13052446,13054053,13055653,13057382,13058999,13060558,13062189,13063818,13065455,13067039,13068678,13070432,13072053,13073656,13075206,13076795,13078356,13079969,13081520,13083131,13084803,13086385,13087806,13089448,13090881,13092478,13093893,13095509,13097107,13099135,13101123,13103088,13105083,13107086,13109081,13111054,13113080,13115134,13117117,13119064,13121017,13123008,13124967,13126927,13128931,13130914,13132817,13134611,13136385,13138174,13139985,13141794,13143577,13145366,13147327,13149165,13151023,13152891,13154752,13156616,13158465,13160306,13162170,13163823,13165388,13167179,13168873,13170382,13172070,13173419,13174992,13176683,13178386,13180081,13181731,13183364,13185059,13186782,13188445,13190285,13192007,13193797,13195538,13197273,13199003,13200791,13202559,13204287,13206118,13207899,13209699,13211404,13213133,13214902,13216724,13218441,13220299,13221941,13223566,13225204,13226862,13228502,13230158,13231783,13233432,13235278,13236991,13238715,13240418,13242140,13243864,13245607,13247306,13249158,13251118,13253132,13255138,13257183,13259170,13261169,13263148,13265150,13267154,13269184,13271193,13273201,13275212,13277239,13279243,13281279,13283304,13285316,13287337,13289337,13291345,13293210,13295085,13296820,13298689,13300251,13301554,13303159,13305019,13306822,13308723,13310600,13312383,13314202,13315937,13317941,13319944,13321998,13324016,13325913,13327447,13329007,13330582,13332193,13333983,13335808,13337575,13339342,13341137,13342927,13344754,13346458,13348192,13349846,13351480,13353255,13355013,13356790,13358522,13360279,13362039,13363768,13365456,13367129,13368945,13370760,13372576,13374381,13376159,13377947,13379710,13381517,13383322,13385225,13387206,13389183,13391171,13393153,13395042,13396848,13398687,13400532,13402362,13404200,13405993,13407798,13409713,13411575,13413443,13415254,13417238,13419187,13421167,13423167,13425134,13427096,13429090,13431068,13433036,13434941,13436939,13438814,13440681,13442503,13444261,13446034,13447937,13449849,13451779,13453753,13455678,13457557,13459304,13461054,13462927,13464811,13466647,13468353,13469949,13471424,13472996,13474845,13476807,13478758,13480731,13482690,13484547,13486344,13488230,13489992,13491832,13493681,13495462,13497381,13499084,13500971,13502784,13504650,13506435,13508149,13509914,13511660,13513407,13515172,13516979,13518470,13520194,13521679,13523303,13524747,13526211,13527679,13529314,13530104,13531164,13532329,13533327,13534071,13534919,13535739,13536719,13537834,13538835,13540024,13540947,13541868,13542880,13543715,13544615,13546356,13548190,13549994,13551839,13553796,13555722,13557470,13559214,13560910,13562674,13564449,13566193,13567877,13569613,13571344,13573071,13574728,13576322,13578190,13580120,13582018,13583990,13585939,13587878,13589898,13591860,13593864,13595700,13597557,13599414,13601254,13603292,13605296,13607275,13609274,13611322,13613363,13615388,13617424,13619463,13621265,13622858,13624406,13625962,13627461,13629070,13630645,13632382,13634410,13636429,13638438,13640479,13642479,13644509,13646540,13648553,13650587,13652493,13654498,13656473,13658069,13659693,13661112,13662458,13663815,13665358,13667002,13668713,13670362,13672021,13674048,13676078,13678074,13680119,13681987,13683635,13685369,13686972,13688542,13690256,13691888,13693773,13695652,13697573,13699494,13701368,13703250,13705175,13707102,13709056,13711036,13712901,13714547,13716346,13718026,13719956,13721899,13723882,13725819,13727780,13729711,13731634,13733562,13735490,13736689,13737781,13738871,13739949,13741619,13743368,13745167,13746951,13748362,13749690,13750913,13752283,13753930,13755758,13757567,13759430,13761352,13763253,13765166,13767098,13768842,13770276,13771816,13773260,13774768,13776282,13777722,13779348,13780971,13782334,13784189,13786077,13787927,13789525,13791134,13792753,13794424,13796266,13797852,13799431,13800771,13802345,13803961,13805787,13807582,13809165,13810706,13812136,13813730,13815372,13817244,13818959,13820658,13822318,13824111,13825830,13827557,13829266,13830960,13832695,13834436,13836182,13837875,13839800,13841727,13843645,13845574,13847517,13849438,13851349,13853293,13855226,13857274,13859277,13861274,13863292,13865281,13867312,13869281,13871317,13873352,13875386,13877424,13879446,13881492,13883519,13885550,13887570,13889596,13891649,13893697,13895733,13897774,13899805,13901856,13903879,13905926,13907974,13909991,13912011,13914033,13916067,13918067,13920084,13922090,13924125,13925523,13926584,13927688,13928748,13929802,13930563,13931288,13932056,13933030,13934944,13936702,13938619,13940381,13941889,13943377,13944879,13946467,13947969,13949488,13950977,13952539,13954039,13955537,13957064,13958573,13960059,13961450,13962816,13964202,13965610,13966989,13968322,13969692,13971151,13972542,13973884,13975209,13976590,13978266,13979784,13981426,13983105,13984704,13986407,13988254,13990075,13991957,13993688,13995529,13997193,13998892,14000551,14002240,14003919,14005587,14007271,14008945,14010686,14012244,14013773,14015309,14016900,14018469,14020015,14021574,14023264,14024814,14026382,14027930,14029505,14031028,14032529,14034051,14035595,14037490,14039392,14041345,14043273,14045242,14047218,14049201,14051198,14053230,14055109,14057038,14058928,14060833,14062772,14064667,14066580,14068462,14070475,14072488,14074540,14076564,14078616,14080567,14082559,14084524,14086516,14088561,14090574,14092620,14094669,14096691,14098466,14100139,14101960,14103835,14105729,14107582,14109412,14111313,14113097,14114812,14116436,14117900,14119404,14120920,14122308,14123890,14125671,14127576,14129513,14131307,14133015,14134861,14136547,14138307,14140106,14141868,14143802,14145679,14147647,14149554,14151154,14152638,14154321,14156065,14157896,14159733,14161524,14163408,14165254,14167081,14168903,14170719,14172549,14174433,14176124,14177814,14179501,14181189,14182904,14184593,14186251,14187995,14189929,14191785,14193703,14195627,14197524,14199420,14201280,14203105,14205104,14207047,14208915,14210834,14212765,14214694,14216612,14218471,14220388,14222174,14223999,14225778,14227556,14229388,14231251,14233221,14235080,14236921,14238770,14240524,14242414,14244217,14246052,14247943,14249795,14251634,14253573,14255452,14257315,14259141,14260693,14261763,14263158,14264720,14266289,14267869,14269460,14271041,14272669,14274293,14275887,14277593,14279408,14281208,14282893,14284740,14286560,14288235,14290056,14291825,14293539,14295343,14297055,14298870,14300611,14302546,14304427,14306346,14308277,14310236,14312131,14313710,14315591,14317391,14318879,14320375,14321880,14323641,14325288,14326984,14328751,14330420,14332020,14333594,14335245,14336868,14338512,14340127,14341800,14343713,14345667,14347636,14349625,14351624,14353612,14355609,14357612,14359608,14361638,14363636,14365621,14367617,14369427,14371273,14373020,14374840,14376613,14378481,14380235,14382146,14383886,14385478,14387067,14388615,14390271,14391937,14393397,14394850,14396430,14398199,14399810,14401274,14402873,14404278,14405868,14407280,14408847,14410434,14412004,14413565,14415031,14416541,14417956,14419453,14420858,14422332,14423955,14425621,14427179,14428831,14430425,14432081,14433620,14435227,14436868,14438596,14440225,14441782,14443406,14444969,14446594,14448127,14449702,14451382,14453007,14454637,14456264,14457920,14459574,14461197,14462793,14464380,14466144,14467806,14469423,14471093,14472734,14474395,14476015,14477640,14479413,14481032,14482644,14484252,14485860,14487504,14489102,14490707,14492294,14494180,14495970,14497757,14499525,14501326,14503095,14504895,14506662,14508546,14510196,14511848,14513486,14515111,14516757,14518381,14519997,14521615,14523501,14525313,14527144,14528964,14530784,14532603,14534415,14536199,14538091,14539888,14541650,14543406,14545159,14546927,14548654,14550403,14552149,14553980,14555807,14557564,14559331,14561006,14562549,14564130,14565762,14567419,14569236,14571002,14573050,14575098,14576906,14578735,14580479,14582326,14584330,14586283,14588077,14589919,14591787,14593713,14595664,14597660,14599630,14601455,14603122,14604903,14606621,14608454,14610307,14612233,14614281,14616328,14618376,14620433,14622353,14624245,14626002,14627771,14629497,14631327,14632974,14634764,14636820,14638857,14640797,14642781,14644680,14646602,14648533,14650425,14652263,14654030,14655630,14657425,14659360,14661298,14663076,14664964,14666907,14668845,14670647,14672517,14674474,14676264,14677708,14679282,14680980,14682757,14684545,14686437,14688310,14690119,14691578,14693162,14694947,14696804,14698639,14700517,14702263,14703975,14705569,14707270,14709071,14710935,14712810,14714750,14716727,14718670,14720532,14722404,14724047,14725710,14727285,14728868,14730665,14732383,14734099,14735806,14737439,14739088,14740729,14742408,14743980,14745670,14747574,14749505,14751359,14753263,14754956,14756792,14758443,14760277,14761969,14763783,14765462,14767360,14769279,14771177,14772886,14774684,14776323,14778108,14780070,14781933,14783596,14785203,14786907,14788687,14790376,14792010,14793456,14794909,14796389,14797877,14799326,14800801,14802253,14803860,14805885,14807904,14809927,14811933,14813957,14815985,14818009,14820011,14821843,14823700,14825559,14827415,14829278,14831073,14832602,14834103,14835659,14837203,14838744,14840265,14841577,14843189,14844923,14846764,14848554,14850389,14852219,14854158,14855994,14857884,14859508,14861301,14863218,14865142,14867085,14869041,14870942,14872883,14874887,14876736,14878279,14879860,14881492,14883183,14884992,14886875,14888670,14890549,14892357,14894260,14896297,14898317,14900339,14902327,14904139,14905975,14907785,14909611,14911464,14913181,14914771,14916383,14918003,14919747,14921609,14923436,14925097,14926895,14928929,14930966,14932990,14934973,14936779,14938641,14940644,14942553,14944287,14946091,14947834,14949707,14951590,14953441,14955133,14956922,14958564,14960251,14961870,14963671,14965722,14967757,14969800,14971699,14973285,14974901,14976578,14978286,14979949,14981606,14982904,14984369,14985923,14987608,14989403,14990957,14992079,14993518,14995487,14997481,14999323,15001265,15003301,15005349,15007333,15009345,15011214,15013080,15014888,15016606,15018403,15020120,15021916,15023616,15025355,15027029,15028723,15030349,15031932,15033617,15035310,15037025,15038590,15040135,15041574,15043182,15044989,15046866,15048672,15050484,15052034,15053623,15055019,15056558,15058132,15059764,15061393,15063063,15064770,15066515,15068213,15069942,15071722,15073547,15075219,15076930,15078503,15080229,15082007,15083649,15084930,15086274,15087693,15089273,15091126,15092898,15094355,15095815,15097199,15098580,15099926,15101367,15102864,15104444,15106047,15107656,15109240,15110857,15112429,15113989,15115354,15116789,15118252,15119758,15121162,15122681,15124199,15125786,15127401,15128957,15130602,15132182,15133780,15135403,15136993,15138603,15140003,15141680,15143343,15145031,15146690,15148322,15149886,15151474,15153099,15154706,15156248,15157797,15159347,15160992,15162628,15164275,15165805,15167348,15168934,15170517,15172157,15173851,15175499,15177192,15178710,15180271,15181768,15183314,15184962,15186694,15188522,15190316,15191963,15193716,15195552,15197395,15199200,15200949,15202393,15203828,15205240,15206683,15208126,15209700,15211389,15213099,15214770,15216497,15218284,15220043,15221714,15223513,15225045,15226737,15227941,15229435,15230983,15232822,15234490,15236455,15238154,15240060,15241681,15243515,15244974,15246768,15248401,15250177,15251469,15252781,15253672,15254804,15256498,15257976,15259199,15260581,15262065,15263535,15265024,15266489,15267959,15269417,15270812,15272176,15273558,15274977,15276394,15277655,15278890,15279912,15280933,15282722,15284186,15285743,15287060,15288519,15289955,15291601,15293425,15295387,15297415,15299207,15301173,15303102,15304805,15306588,15307580,15308328,15309126,15310035,15311036,15312036,15313190,15314187,15315246,15316113,15316896,15317845,15318872,15319734,15320651,15321526,15322457,15323396,15324130,15325023,15325852,15326794,15327764,15328868,15329741,15330657,15331951,15333202,15333764,15334306,15334848,15335363,15335883,15336931,15337938,15339018,15339996,15340742,15341513,15342499,15343363,15344407,15345460,15346313,15347320,15348246,15349022,15349565,15350085,15350688,15351432,15352300,15353370,15353809,15354691,15355293,15356031,15356725,15357454,15358557,15359519,15360555,15361623,15362196,15362880,15363372,15363937,15364531,15365269,15365957,15366872,15367603,15368390,15369061,15369979,15371250,15372014,15372841,15373846,15374804,15375824,15376662,15377707,15378452,15379345,15380427,15381394,15382287,15382972,15383947,15384223,15384842,15385721,15386779,15387169,15387737,15388710,15389388,15390105,15390678,15391290,15391982,15392891,15393814,15394674,15395291,15395986,15396706,15397481,15399538,15401339,15402114,15403102,15404369,15405634,15406416,15407727,15408801,15409979,15410760,15411722,15413041,15414208,15415807,15417379,15418862,15420422,15422074,15422119,15422163,15422245,15422293,15422385,15422430,15422536,15422758,15423123,15423583,15424154,15424775,15425356,15426028,15426842,15427527,15428602,15430024,15431502,15432970,15434344,15436023,15437631,15439178,15440821,15442449,15444127,15445796,15447506,15449282,15450985,15452614,15454189,15455891,15457564,15459095,15460648,15462132,15463497,15464462,15465366,15466092,15466751,15467338,15467987,15468572,15469130,15469672,15470094,15470470,15470699,15470857,15470930,15470980,15471027,15471072,15471252,15473300,15473388,15473436,15473483,15473528,15473572,15473617,15473665,15473712,15473757,15473801,15473867,15474110,15474929,15476405,15477683,15479153,15480602,15482017,15483308,15484338,15485442,15486305,15486963,15487674,15488577,15489341,15490180,15491032,15491958,15492946,15493850,15494695,15495451,15496203,15497078,15498051,15498875,15499673,15500480,15501323,15502080,15502745,15503287,15503810,15504011,15504057,15504106,15504153,15504198,15504242,15504289,15504338,15504385,15504430,15504474,15504522,15504571,15506299,15507932,15509378,15510759,15512076,15513391,15514718,15516058,15517337,15518647,15519927,15521283,15522534,15523745,15525074,15526224,15527269,15528315,15529248,15530144,15531118,15531936,15532719,15533722,15534842,15535936,15537286,15538708,15540322,15541971,15543537,15545153,15546832,15548220,15549611,15550801,15551996,15553237,15554566,15556061,15557478,15558875,15559913,15560881,15561963,15563125,15564313,15565587,15566776,15568030,15569270,15570554,15571866,15573208,15574530,15575886,15577214,15578544,15580344,15581451,15581496,15581546,15581593,15581638,15581682,15581890,15582453,15583349,15584305,15585478,15586960,15588651,15590373,15592167,15593897,15595615,15597338,15599093,15600866,15602682,15604539,15606317,15608054,15609502,15610856,15612225,15613600,15615348,15617190,15618999,15620897,15622803,15624725,15626662,15628556,15630387,15632289,15634149,15635949,15637734,15639487,15641152,15642959,15644854,15646565,15647907,15649310,15650537,15651223,15651404,15651452,15651501,15651549,15651594,15651640,15651688,15652293,15653135,15654146,15655350,15656586,15657994,15658528,15659462,15660532,15661434,15662334,15663386,15664258,15665900,15667543,15669076,15670717,15672461,15674059,15675649,15677304,15679040,15680724,15682209,15684018,15685665,15687186,15688801,15690494,15692125,15693695,15695363,15697115,15698773,15700343,15701938,15703757,15705445,15707106,15708618,15710468,15712322,15714149,15715932,15717749,15719687,15721712,15723726,15724890,15724939,15724990,15725137,15725355,15725644,15726055,15726502,15727080,15727735,15728679,15729728,15730814,15732197,15733582,15734961,15736443,15737898,15739246,15740605,15742037,15743522,15745163,15746810,15748437,15750017,15751614,15753120,15754717,15756201,15757643,15759132,15760599,15762028,15763515,15765124,15766874,15768560,15770238,15771872,15773508,15775154,15776823,15778379,15779760,15781210,15782662,15784063,15785240,15786278,15787459,15788537,15789583,15790653,15791683,15792705,15793734,15795014,15797020,15798444,15799861,15801248,15802574,15803876,15805219,15806531,15807777,15809090,15810397,15811726,15812902,15814142,15815443,15816582,15817603,15818533,15819504,15820479,15821360,15822119,15823021,15824112,15825218,15826436,15827797,15829334,15831006,15832585,15834171,15835826,15837320,15838766,15840113,15841230,15842398,15843726,15845108,15846590,15848030,15849255,15850229,15851234,15852365,15853572,15854857,15856075,15857355,15858572,15859805,15861083,15862360,15863753,15865039,15866373,15867687,15869077,15871125,15872534,15873873,15874915,15875778,15877182,15878377,15879473,15880334,15881287,15882241,15883108,15883899,15885181,15886682,15888218,15889570,15891024,15892541,15893817,15895205,15896633,15898156,15899548,15900953,15902401,15903814,15905231,15906422,15907668,15908782,15910116,15911678,15913332,15915053,15916701,15918107,15919544,15921035,15922569,15924057,15925471,15926947,15928377,15929628,15930911,15931986,15933077,15933939,15934900,15936110,15937401,15938753,15940168,15941533,15942912,15944293,15945636,15947575,15948191,15948236,15948281,15948372,15948441,15948504,15948567,15948742,15949021,15949418,15949941,15950568,15951176,15951783,15952510,15953234,15954051,15955400,15956836,15958289,15959709,15961242,15962938,15964444,15966029,15967695,15969325,15971023,15972689,15974399,15976182,15977873,15979473,15981135,15982800,15984448,15985921,15987438,15988842,15990058,15990970,15991754,15992437,15993070,15993701,15994262,15994841,15995376,15995869,15996234,15996549,15996765,15996855,15996939,15996988,15997033,15997071,15998274,15999398,15999446,15999495,15999540,15999585,15999630,15999678,15999727,15999772,15999817,15999862,16000005,16000391,16001709,16003053,16004465,16005881,16007305,16008670,16009781,16010881,16011881,16012635,16013260,16014159,16015008,16015798,16016637,16017525,16018485,16019453,16020293,16021084,16021842,16022600,16023573,16024396,16025189,16025968,16026806,16027549,16028249,16028909,16029507,16029829,16029915,16029963,16030012,16030057,16030095,16030140,16030188,16030237,16030282,16030320,16030365,16030413,16031116,16032754,16032799,16032844,16032889,16032931,16032980,16033048,16033914,16035008,16036095,16037167,16038212,16039256,16040384,16041465,16042428,16043551,16044682,16045918,16047396,16049065,16050736,16052519,16054109,16055555,16057022,16058393,16059692,16060763,16062005,16063367,16064611,16065872,16067159,16068570,16070116,16071704,16073155,16074765,16076465,16077946,16079421,16080993,16082596,16084057,16085116,16086085,16087040,16088187,16089409,16090417,16090977,16091017,16091062,16091110,16091159,16091204,16091394,16093442,16093517,16093561,16093670,16093867,16094115,16094481,16094940,16095479,16096101,16096896,16098002,16099161,16100432,16101916,16103311,16104794,16106407,16107960,16109581,16111121,16112770,16114480,16116268,16118033,16119812,16121566,16123241,16124899,16126533,16128115,16129618,16131170,16132708,16134266,16135796,16137575,16139344,16141085,16142760,16144445,16146092,16147754,16149341,16150831,16152227,16153759,16155266,16156526,16157625,16158771,16159860,16160942,16161978,16163042,16164057,16165047,16165994,16167803,16169851,16171357,16172310,16173321,16174177,16175070,16176083,16177034,16177943,16178927,16179812,16180689,16181442,16182326,16183453,16184729,16186101,16187320,16188652,16190014,16191417,16192845,16194257,16195702,16197142,16198455,16199546,16200547,16201579,16202504,16203667,16204794,16205913,16207067,16208223,16209198,16210262,16211523,16212784,16214064,16215371,16216523,16217606,16218870,16220059,16221220,16222468,16223717,16225086,16226415,16227680,16228963,16230226,16231477,16232812,16234105,16235450,16236807,16238341,16239671,16240906,16242158,16243546,16244920,16246320,16247732,16249135,16250551,16252000,16253411,16254740,16256050,16257365,16258798,16260185,16261569,16262957,16264295,16265609,16266878,16268045,16269215,16270360,16271678,16272975,16274127,16275204,16276404,16277531,16278605,16279471,16281077,16282457,16283723,16284958,16286289,16287633,16289032,16290476,16291891,16293319,16294726,16296150,16297525,16298797,16300129,16301495,16302882,16304293,16305689,16307009,16308316,16309579,16310768,16311976,16313149,16314391,16315666,16316848,16317963,16319170,16320257,16321349,16322331,16323615,16325347,16326255,16327239,16328122,16329024,16330024,16331006,16331892,16332857,16333783,16334701,16335513,16336359,16337389,16338715,16340072,16341329,16342626,16343999,16345369,16346815,16348207,16349644,16351100,16352483,16353627,16354627,16355661,16356617,16357768,16358869,16360012,16361069,16362265,16363269,16364297,16365536,16366796,16368044,16369355,16370564,16371633,16372832,16374038,16375215,16376461,16377709,16379022,16380366,16381653,16382937,16384215,16385472,16386766,16388093,16389376,16390774,16392350,16394398,16394553,16394650,16395942,16397227,16398164,16399246,16400419,16401623,16401754,16401892,16403874,16405179,16406291,16407285,16408278,16409304,16410594,16411851,16413206,16414355,16415597,16416970,16418261,16419712,16421095,16422463,16423726,16425052,16426575,16428243,16429755,16431236,16432627,16434050,16435529,16437005,16438425,16439942,16441459,16442953,16444349,16445813,16447327,16448845,16450414,16452066,16453758,16455363,16456860,16458413,16459957,16461548,16463102,16464571,16466057,16467519,16468996,16470385,16471682,16472888,16474096,16475318,16476549,16477845,16479142,16480302,16481459,16482663,16484456,16486078,16487197,16488273,16489179,16490228,16491396,16492653,16493769,16494830,16495785,16496812,16497765,16498767,16499941,16501148,16502418,16503624,16504676,16505862,16507126,16508558,16509841,16511191,16512394,16513617,16515173,16516707,16518329,16520011,16521650,16523321,16524885,16526422,16528000,16529658,16531342,16533095,16534748,16536391,16537847,16539271,16540611,16542000,16543380,16544732,16546287,16547902,16549461,16550984,16552476,16553930,16555351,16556779,16558198,16559594,16560957,16562308,16563990,16565633,16566330,16567052,16567892,16568834,16569859,16570902,16571986,16573156,16574343,16575520,16576726,16577973,16579205,16580598,16581993,16583339,16584831,16586266,16587767,16589259,16590732,16592238,16593815,16595511,16597151,16598723,16600375,16602040,16603771,16605535,16607313,16609171,16610918,16612500,16614109,16615745,16617390,16619112,16620845,16622571,16624332,16626047,16627753,16629398,16630962,16632740,16634538,16636293,16638009,16639696,16641450,16643164,16644692,16645925,16647067,16647927,16648760,16649990,16651131,16652780,16654316,16655888,16657580,16658752,16658801,16658846,16658891,16658936,16658984,16659195,16660162,16661255,16662372,16663430,16664464,16665490,16666692,16667750,16668753,16669878,16671012,16672304,16673791,16675513,16677203,16678962,16680496,16681894,16683442,16684790,16686013,16687033,16688383,16689701,16690942,16692125,16693428,16694882,16696471,16698006,16699492,16701151,16702822,16704279,16705803,16707340,16708957,16710329,16711290,16712330,16713386,16714543,16715704,16716635,16717032,16717077,16717121,16717166,16717214,16717263,16717914,16719601,16719639,16719684,16719732,16719781,16719826,16719864,16719909,16719957,16720006,16720051,16720119,16720432,16721478,16722900,16724223,16725670,16727065,16728447,16729640,16730679,16731795,16732619,16733246,16734085,16734932,16735703,16736574,16737406,16738367,16739361,16740204,16741014,16741733,16742473,16743432,16744310,16745123,16745903,16746671,16747496,16748250,16748953,16749509,16749931,16750100,16750144,16750189,16750237,16750284,16750329,16750373,16750418,16750466,16750513,16750558,16750602,16750749,16752797,16753732,16754643,16755510,16756667,16757772,16758728,16759673,16760706,16761721,16762693,16763553,16764594,16765629,16766719,16767670,16768870,16770254,16771650,16773110,16774632,16776100,16777703,16779173,16780532,16781826,16783084,16784524,16785875,16787156,16788477,16789609,16790790,16791807,16792902,16794158,16795610,16797055,16798512,16799866,16801069,16802218,16803374,16804533,16805920,16807020,16808014,16809140,16810351,16811421,16812333,16813162,16814160,16815166,16816243,16817306,16818295,16819240,16821067,16821699,16821740,16821785,16821833,16821882,16821932,16822219,16822843,16823704,16824731,16825914,16827477,16829176,16830921,16832711,16834418,16836128,16837849,16839603,16841367,16843194,16845036,16846829,16848505,16849919,16851306,16852597,16854056,16855840,16857692,16859536,16861452,16863341,16865278,16867211,16869066,16870914,16872795,16874664,16876501,16878341,16880113,16881854,16883660,16885553,16887075,16888511,16889868,16891045,16891582,16891704,16891748,16891793,16891843,16891890,16891935,16891979,16892645,16893933,16895282,16896271,16897158,16897865,16898802,16899883,16900905,16902550,16903452,16903497,16903562,16903723,16903945,16904247,16904669,16905158,16905730,16906387,16907392,16908443,16909506,16910888,16912284,16913665,16915138,16916570,16917946,16919322,16920777,16922233,16923861,16925522,16927145,16928735,16930306,16931808,16933389,16934884,16936351,16937855,16939332,16940754,16942221,16943849,16945565,16947246,16948906,16950561,16952212,16953859,16955526,16957037,16958425,16959886,16961351,16962727,16963862,16964919,16966032,16967115,16968177,16969258,16970261,16971307,16972280,16973709,16975615,16977048,16978448,16979805,16981095,16982386,16983727,16985044,16986301,16987639,16988985,16990278,16991470,16992764,16994003,16995088,16996141,16997114,16998027,16999004,16999875,17000644,17001588,17002682,17003807,17005046,17006433,17007996,17009646,17011236,17012814,17014506,17015990,17017433,17018697,17019835,17021024,17022354,17023772,17025228,17026658,17027849,17028824,17029850,17030963,17032137,17033425,17034618,17035913,17037113,17038369,17039652,17040962,17042304,17043607,17044976,17046321,17047829,17049852,17051271,17052574,17053557,17054472,17055857,17056996,17058061,17058949,17059884,17060840,17061817,17062451,17063844,17065341,17066871,17068231,17069667,17071165,17072435,17073802,17075284,17076772,17078204,17079622,17081098,17082509,17083914,17085083,17086337,17087435,17088805,17090396,17092016,17093738,17095379,17096788,17098233,17099718,17101277,17102760,17104193,17105672,17107037,17108303,17109571,17110621,17111724,17112575,17113581,17114789,17116067,17117414,17118847,17120218,17121622,17122976,17124311,17126335,17126688,17126735,17126780,17126824,17126872,17126921,17127477,17128495,17129614,17130717,17131780,17132770,17133795,17134953,17135917,17136968,17138124,17139279,17140650,17142240,17143948,17145723,17147390,17148864,17150290,17151719,17153077,17154209,17155317,17156718,17157953,17159215,17160403,17161774,17163267,17164846,17166306,17167837,17169534,17171126,17172523,17174117,17175669,17177257,17178459,17179446,17180388,17181522,17182738,17183789,17184640,17184713,17184758,17184803,17184851,17184900,17184945,17186409,17187272,17187318,17187366,17187455,17187512,17187608,17187660,17187834,17188120,17188510,17188981,17189558,17190161,17190775,17191472,17192213,17193014,17194314,17195756,17197277,17198720,17200219,17201921,17203473,17205055,17206715,17208321,17210028,17211678,17213392,17215191,17216864,17218467,17220086,17221771,17223431,17224901,17226410,17227818,17229112,17230013,17230850,17231574,17232202,17232802,17233366,17233932,17234515,17235037,17235402,17235707,17235931,17236040,17236126,17236171,17236216,17236261,17237224,17238598,17238647,17238694,17238739,17238784,17238832,17238881,17238927,17238972,17239017,17239065,17239179,17239540,17240738,17242100,17243492,17244918,17246335,17247716,17248874,17249960,17251009,17251817,17252404,17253325,17254158,17254928,17255751,17256610,17257571,17258541,17259392,17260199,17260922,17261666,17262624,17263483,17264277,17265071,17265874,17266615,17267319,17267997,17268591,17268974,17269081,17269130,17269175,17269220,17269265,17269307,17269356,17269401,17269446,17269491,17269533,17269582,17270038,17271911,17271956,17272001,17272049,17272098,17272143,17272188,17272233,17272281,17272330,17272375,17272450,17272748,17273676,17275123,17276427,17277892,17279293,17280694,17281950,17282973,17284097,17284936,17285570,17286363,17287198,17287959,17288823,17289658,17290612,17291610,17292506,17293337,17294080,17294827,17295784,17296663,17297481,17298272,17299072,17299884,17300662,17301364,17301910,17302355,17302529,17302574,17302619,17302662,17302711,17302756,17302801,17302846,17302890,17302939,17302984,17303029,17303074,17305060,17305390,17305439,17305484,17305529,17305574,17305622,17306201,17307231,17308338,17309462,17310527,17311520,17312557,17313709,17314678,17315731,17316865,17318046,17319431,17321023,17322741,17324509,17326191,17327652,17329076,17330520,17331860,17333008,17334103,17335511,17336757,17338009,17339188,17340554,17342051,17343641,17345097,17346635,17348332,17349927,17351337,17352910,17354457,17356060,17357261,17358235,17359168,17360322,17361522,17362573,17363426,17363475,17363520,17363565,17363610,17363658,17363707,17365203,17366040,17366085,17366147,17366310,17366560,17366842,17367286,17367800,17368405,17369123,17370120,17371238,17372424,17373919,17375333,17376784,17378331,17379928,17381522,17383090,17384717,17386403,17388145,17389947,17391707,17393450,17395191,17396837,17398523,17400115,17401641,17403229,17404763,17406269,17407786,17409499,17411300,17413011,17414717,17416377,17418031,17419668,17421313,17422838,17424204,17425742,17427215,17428598,17429743,17430820,17431940,17433036,17434092,17435195,17436197,17437213,17438200,17439594,17441642,17443594,17444512,17445510,17446382,17447281,17448273,17449237,17450151,17451042,17451977,17452904,17453705,17454575,17455562,17456865,17458224,17459488,17460727,17462133,17463502,17464964,17466382,17467848,17469275,17470698,17471907,17472898,17473938,17474870,17475979,17477089,17478260,17479290,17480474,17481525,17482529,17483788,17484998,17486196,17487518,17488785,17489864,17491034,17492220,17493400,17494668,17495911,17497191,17498496,17499776,17501076,17502365,17503655,17504937,17506277,17507574,17508990,17510417,17511770,17513060,17514336,17515605,17516936,17518278,17519684,17521147,17522575,17523973,17525398,17526773,17528072,17529407,17530764,17532123,17533512,17534925,17536261,17537584,17538825,17540061,17541266,17542420,17543637,17544903,17546098,17547244,17548452,17549538,17550591,17551611,17552810,17554432,17555704,17556971,17558258,17559593,17560930,17562284,17563775,17565231,17566606,17568039,17569412,17570719,17572108,17573425,17574812,17576186,17577603,17578984,17580339,17581599,17582812,17584055,17585281,17586471,17587721,17588948,17590099,17591299,17592445,17593499,17594547,17595392,17597440,17598446,17599424,17600334,17601196,17602141,17603148,17604071,17604947,17605906,17606830,17607624,17608459,17609400,17610653,17611962,17613282,17614519,17615861,17617269,17618665,17620068,17621537,17622960,17624327,17625614,17626653,17627659,17628589,17629620,17630730,17631929,17632991,17634161,17635241,17636247,17637458,17638686,17639925,17641202,17642487,17643609,17644729,17645917,17647086,17648342,17649615,17650904,17652199,17653495,17654813,17656150,17657445,17658719,17660030,17661326,17662748,17664139,17666106,17667003,17667095,17668019,17669285,17670449,17671212,17672578,17673770,17674363,17674455,17675784,17677364,17678252,17679090,17680131,17681304,17682327,17683287,17684288,17685379,17686306,17687256,17688194,17689236,17690330,17691351,17692429,17693726,17695119,17696486,17697935,17699433,17700937,17702568,17703929,17705185,17706541,17707909,17709320,17710563,17711965,17713124,17714307,17715427,17716435,17717594,17718952,17720440,17721870,17723264,17724590,17725748,17726944,17728026,17729342,17730627,17731595,17732699,17733863,17735000,17735947,17736800,17737722,17738751,17739766,17740863,17741855,17742858,17744096,17746000,17747131,17748156,17749164,17750185,17751290,17752578,17753899,17755086,17756315,17757603,17758952,17760279,17761704,17763113,17764439,17765666,17767044,17768624,17770316,17771749,17773256,17774667,17776083,17777564,17778988,17780408,17781943,17783489,17784909,17786312,17787819,17789347,17790861,17792495,17794161,17795850,17797401,17798898,17800499,17802028,17803607,17805128,17806592,17808083,17809536,17810979,17812366,17813641,17814883,17816080,17817289,17818530,17819866,17821111,17822271,17823376,17824606,17826654,17826768,17826817,17826862,17826907,17826952,17827031,17827399,17828163,17829083,17830130,17831397,17833025,17834729,17836493,17838271,17839996,17841727,17843453,17845234,17847024,17848887,17850698,17852479,17854171,17855512,17856941,17858188,17859775,17861572,17863412,17865262,17867171,17869065,17870999,17872937,17874745,17876619,17878471,17880338,17882169,17884010,17885778,17887535,17889354,17891196,17892631,17894088,17895394,17896458,17896917,17896965,17897014,17897059,17897098,17897143,17897191,17897240,17898941,17900411,17901494,17902551,17903478,17904527,17905681,17906914,17908089,17909140,17910130,17911140,17912071,17913079,17914284,17915528,17916799,17917958,17918994,17920204,17921531,17922927,17924277,17925565,17926702,17928010,17929570,17931101,17932721,17934394,17936023,17937701,17939249,17940776,17942353,17944022,17945705,17947421,17949065,17950680,17952159,17953570,17954920,17956340,17957716,17959060,17960646,17962262,17963817,17965315,17966793,17968218,17969644,17971058,17972483,17973866,17975212,17976538,17978323,17979729,17980442,17981223,17982081,17983012,17984046,17985074,17986150,17987338,17988569,17989745,17990937,17992187,17993419,17994799,17996171,17997524,17999015,18000462,18001959,18003444,18004874,18006330,18007889,18009543,18011153,18012786,18014401,18016072,18017851,18019595,18021363,18023222,18024926,18026511,18028124,18029746,18031408,18033140,18034849,18036567,18038305,18040009,18041719,18043371,18044976,18046746,18048549,18050299,18052001,18053691,18055443,18057156,18058638,18059834,18060955,18061779,18062659,18063909,18065139,18066818,18068338,18069835,18071010,18072068,18072668,18073218,18074114,18075192,18076428,18077506,18079521,18080962,18082430,18083894,18085412,18086932,18088454,18089987,18091485,18092978,18094535,18096200,18098024,18099908,18101881,18103885,18105884,18107894,18109878,18111890,18113894,18115841,18117694,18119465,18121302,18123184,18125089,18127004,18129010,18131020,18132887,18134739,18136584,18138368,18140063,18141812,18143569,18145400,18147274,18149217,18151174,18153193,18155214,18157208,18159187,18160972,18162559,18164047,18165559,18167064,18168582,18170092,18171599,18173083,18174536,18175997,18177438,18178899,18180947,18182322,18183645,18184941,18186210,18187494,18188753,18190130,18191431,18192690,18193960,18195286,18196442,18197800,18199171,18200618,18202026,18203473,18204921,18206313,18207765,18209303,18210834,18212291,18213858,18215409,18216960,18218624,18220225,18221842,18223426,18225032,18226578,18228112,18229604,18231211,18232902,18234556,18236227,18237916,18239389,18240740,18242153,18243517,18244767,18246010,18247247,18248484,18249703,18250899,18252079,18253279,18254405,18255631,18256835,18258117,18259388,18260623,18262560,18263951,18264992,18266163,18267299,18268364,18269324,18270386,18271502,18272586,18273727,18274834,18276003,18277210,18278559,18279909,18281384,18282893,18284484,18286040,18287554,18289199,18290749,18292175,18293625,18295221,18296780,18298287,18299816,18301222,18302669,18304010,18305345,18306662,18308014,18309282,18310699,18312128,18313674,18315201,18316670,18318150,18319482,18320698,18321860,18322870,18323903,18324927,18326078,18327256,18328424,18329377,18330294,18331341,18332285,18333191,18334121,18335145,18336771,18338582,18340128,18341742,18343259,18344893,18346509,18348161,18349810,18351334,18352923,18354569,18356268,18357768,18359234,18360797,18362392,18363950,18365676,18367365,18368908,18370550,18372134,18373586,18375057,18376507,18378123,18379677,18381110,18382637,18384208,18385755,18387298,18388806,18390375,18391947,18393554,18395224,18396902,18398580,18400116,18401638,18403316,18404957,18406484,18407867,18409038,18410527,18412052,18413586,18415027,18416574,18418187,18419867,18421587,18423273,18424807,18426377,18428121,18430068,18431021,18432018,18433008,18434088,18435158,18436250,18437317,18438421,18439482,18440493,18441657,18442785,18443970,18445131,18446214,18447368,18448473,18449730,18450959,18452192,18453437,18454738,18456065,18457316,18458425,18459523,18460552,18461614,18462643,18463621,18464668,18465711,18466616,18467574,18468482,18469428,18470378,18471439,18472515,18473520,18474544,18475530,18476526,18477519,18478470,18479467,18480464,18481483,18482561,18483628,18484773,18485856,18486989,18488024,18488947,18489835,18490697,18492745,18494103,18495394,18496711,18497999,18499306,18500558,18501942,18503257,18504497,18505765,18507081,18508203,18509464,18510728,18512123,18513469,18514800,18516136,18517462,18518905,18520446,18522082,18523691,18525193,18526526,18527872,18529388,18530942,18532633,18534371,18536050,18537573,18538901,18540241,18541633,18543118,18544578,18546107,18547593,18549036,18550389,18551802,18553169,18554421,18555674,18556890,18558146,18559373,18560578,18561759,18562988,18564126,18565346,18566559,18567853,18569125,18570369,18572313,18574030,18575604,18577208,18578799,18580390,18581960,18583486,18585116,18586701,18588244,18589843,18591487,18593251,18595060,18596850,18598647,18600193,18601834,18603443,18605213,18607047,18608900,18610673,18612495,18614376,18616236,18618042,18619927,18621663,18623483,18625172,18626915,18628661,18630404,18632096,18633803,18635409,18637238,18639151,18640848,18642550,18643870,18645207,18646542,18647827,18649331,18650834,18652303,18653786,18655319,18656835,18658339,18659924,18661426,18662896,18664342,18665841,18667670,18669137,18669946,18670700,18671551,18672494,18673272,18673912,18674801,18675704,18676505,18677339,18678119,18679078,18680147,18681293,18682538,18683756,18685088,18686346,18687760,18689260,18690837,18692333,18693961,18695581,18697229,18698791,18700423,18702022,18703638,18705266,18706821,18708280,18709724,18711232,18712754,18714328,18715802,18717244,18718692,18720080,18721416,18722705,18723828,18725053,18726221,18727434,18728470,18729484,18730520,18731595,18732596,18733547,18734568,18735508,18736492,18737281,18738416,18740453,18742200,18744028,18745921,18747757,18749571,18751379,18753228,18755067,18756791,18758462,18760011,18761470,18762967,18765015,18766666,18768516,18770413,18772300,18774154,18776037,18777940,18779835,18781547,18783276,18784844,18786363,18787850,18789861,18791612,18793460,18795354,18797234,18799165,18800989,18802770,18804385,18805857,18807320,18808875,18810520,18812162,18814070,18815765,18817639,18819603,18821249,18823250,18825196,18826881,18828898,18830726,18832046,18833533,18835150,18836639,18838189,18840161,18841598,18842979,18844636,18846184,18847656,18849471,18851221,18852520,18854080,18855688,18857258,18858819,18860867,18862527,18864197,18865851,18867602,18869387,18871153,18872884,18874664,18876439,18878273,18880082,18881982,18883727,18885467,18887248,18889029,18890858,18892675,18894502,18896291,18898169,18899980,18901743,18903518,18905290,18907044,18908811,18910478,18912269,18914048,18915792,18917533,18919330,18921150,18922917,18924694,18926457,18928173,18929888,18931593,18933338,18935063,18936785,18938475,18940096,18941951,18943821,18945701,18947549,18949354,18951178,18953063,18954936,18956764,18958523,18960199,18961746,18963771,18965774,18967710,18969601,18971538,18973467,18975379,18977277,18979199,18981104,18982989,18984842,18986763,18988645,18990491,18992252,18994019,18995764,18997579,18999406,19001164,19003012,19004777,19006640,19008458,19010284,19012033,19013813,19015515,19017116,19018682,19020269,19021980,19023775,19025558,19027287,19029041,19030720,19032413,19034158,19035856,19037611,19039391,19041179,19042985,19044707,19046598,19048503,19050432,19052324,19054140,19055977,19057857,19059772,19061695,19063598,19065513,19067392,19069389,19071439,19073381,19075340,19077368,19079364,19081359,19083368,19085342,19087288,19089214,19091155,19093127,19095137,19097079,19099011,19100910,19102900,19104857,19106829,19108769,19110792,19112814,19114810,19116704,19118637,19120537,19122484,19124353,19126040,19127856,19129647,19131512,19133432,19135368,19137331,19139295,19141274,19143237,19145198,19147100,19149098,19151082,19152949,19154770,19156617,19158472,19160336,19162150,19163948,19165728,19167555,19169400,19171169,19172891,19174527,19176083,19177514,19178929,19179905,19181953,19184001,19186049,19188097,19190145,19192193,19194241,19196289,19198337,19200385,19202433,19204481,19206529,19208577,19210625,19212673,19214721,19216769,19218817,19220865,19222913,19224961,19227009,19229057,19231105,19233153,19235201,19237249,19239297,19241345,19243393,19245441,19247489,19249537,19251585,19253633,19255681,19257729,19259777,19261825,19263873,19265921,19267969,19270026,19272074,19274122,19276170,19278218,19280266,19282314,19284362,19286410,19288458,19290506,19292554,19294602,19296650,19298698,19300746,19302794,19304842,19306890,19308938,19310986,19313034,19315082,19317130,19319178,19321226,19323274,19325322,19327370,19329418,19331475,19333523,19335571,19337619,19339667,19341715,19343763,19345811,19347868,19349916,19351964,19354012,19356060,19358117,19360165,19362213,19364261,19366309,19368357,19370405,19372453,19374501,19376558,19378606,19380654,19382702,19384750,19386798,19388846,19390894,19392942,19394990,19397038,19399086,19401134,19403191,19405239,19407296,19409344,19411392,19413440,19415488,19417536,19419584,19421632,19423680,19425728,19427776,19429824,19431872,19433920,19435968,19438016,19440064,19442112,19444160,19446208,19448256,19450304,19452352,19454400,19456457,19458505,19460553,19462601,19464649,19466697,19468745,19470793,19472841,19474889,19476937,19478985,19481033,19483081,19485129,19487177,19489225,19491273,19493321,19495369,19497417,19499465,19501513,19503561,19505609,19507657,19509705,19511753,19513809,19515857,19517905,19519953,19522001,19524049,19526097,19528145,19530193,19532241,19534298,19536346,19538394,19540442,19542490,19544538,19546586,19548634,19550682,19552730,19554778,19556826,19558874,19560922,19562970,19565018,19567066,19569114,19571162,19573210,19575258,19577306,19579354,19581402,19583450,19585498,19587546,19589594,19591642,19593690,19595738,19597786,19599834,19601882,19603930,19605978,19608026,19610074,19612122,19614170,19616218,19618266,19620314,19622362,19624410,19626458,19628506,19630554,19632602,19634650,19636698,19638746,19640803,19642851,19644899,19646947,19648995,19651043,19653091,19655139,19657187,19659235,19661283,19663331,19665379,19667427,19669475,19671523,19673571,19675619,19677667,19679715,19681763,19683811,19685859,19687907,19689955,19692003,19694051,19696099,19698147,19700195,19702240,19704171,19705635,19707011,19708439,19709971,19711540,19713029,19714471,19715940,19717137,19718362,19719824,19721340,19722555,19723772,19725156,19726617,19728098,19729543,19731030,19732421,19733811,19735191,19736705,19738157,19739618,19741103,19742551,19744078,19745506,19747053,19748561,19750125,19751621,19753110,19754706,19756193,19757737,19759273,19760713,19762240,19763819,19765341,19766723,19768173,19769581,19771237,19772886,19774527,19776166,19777704,19779257,19780943,19782616,19784122,19785732,19787354,19788890,19790938,19791989,19793071,19794223,19795347,19796373,19797341,19798402,19799528,19800654,19801801,19802903,19804102,19805309,19806692,19808071,19809559,19811111,19812744,19814284,19815841,19817469,19818945,19820355,19821851,19823450,19824975,19826530,19828041,19829418,19830894,19832181,19833500,19834875,19836149,19837454,19838911,19840356,19841893,19843425,19844889,19846326,19847616,19848833,19849910,19850931,19851954,19853001,19854154,19855332,19856457,19857330,19858335,19859382,19860307,19861228,19862199,19863269,19865212,19866538,19867620,19868749,19869844,19870908,19871933,19873013,19874129,19875176,19876336,19877523,19878815,19880081,19881344,19882949,19884473,19885905,19887472,19888956,19890428,19892036,19893577,19895025,19896569,19898169,19899737,19901203,19902703,19904175,19905808,19907439,19909211,19911059,19912954,19914675,19916338,19918146,19919932,19921580,19923156,19924733,19926062,19927370,19928579,19929493,19930636,19931697,19932841,19933991,19935141,19936103,19937042,19938106,19939057,19939954,19940941,19941991,19943668,19945478,19947008,19948512,19950037,19951576,19953082,19954538,19956077,19957611,19959105,19960639,19962218,19963918,19965656,19967431,19969185,19970830,19972381,19973947,19975672,19977428,19979303,19980999,19982736,19984542,19986371,19988117,19989995,19991528,19993292,19995036,19996775,19998475,20000169,20001758,20003368,20004983,20006717,20008605,20010287,20012097,20013335,20014667,20015979,20017221,20018619,20020083,20021549,20022980,20024445,20025912,20027352,20028835,20030329,20031723,20033109,20034546,20036240,20038255,20039925,20041594,20043275,20045048,20046815,20048552,20050291,20052077,20053882,20055700,20057544,20059438,20061169,20062902,20064692,20066490,20068332,20070155,20071945,20073798,20075635,20077416,20079172,20080928,20082698,20084483,20086243,20087952,20089748,20091506,20093249,20094980,20096807,20098589,20100327,20102081,20103836,20105540,20107253,20108974,20110717,20112451,20114167,20115840,20117530,20119394,20121274,20123145,20124999,20126811,20128638,20130539,20132421,20134225,20135945,20137593,20139179,20140044,20142092,20144140,20146188,20148236,20150284,20152332,20154380,20156428,20158476,20160524,20162572,20164620,20166668,20168716,20170764,20172812,20174860,20176908,20178965,20181013,20183061,20185109,20187157,20189205,20191253,20193301,20195349,20197397,20199445,20201493,20203541,20205589,20207637,20209685,20211733,20213781,20215829,20217877,20219925,20221973,20224021,20226069,20228117,20230165,20232213,20234261,20236309,20238357,20240405,20242453,20244501,20246549,20248597,20250645,20252693,20254741,20256789,20258837,20260885,20262933,20264981,20267029,20269077,20271125,20273173,20275226,20276436,20277759,20279094,20280547,20282004,20283541,20285047,20286456,20287905,20289376,20290855,20292265,20293714,20295079,20296421,20297454,20298185,20299261,20300541,20302073,20303701,20305480,20307313,20309151,20311051,20312910,20314652,20316416,20317619,20319389,20321127,20322965,20324851,20326701,20328519,20330307,20332109,20333817,20335268,20336474,20337459,20338578,20339925,20341109,20342361,20343744,20344897,20346103,20347307,20348677,20350124,20351591,20353113,20354539,20355975,20357361,20358702,20360743,20362256,20363707,20365201,20366759,20368236,20369701,20371233,20372721,20374174,20375682,20377283,20378908,20380317,20381899,20383575,20385240,20386920,20388723,20390454,20392085,20393805,20395380,20396963,20398496,20400049,20401621,20403208,20404789,20406402,20408020,20409618,20411182,20412707,20414272,20415872,20417528,20419086,20420726,20422278,20423846,20425443,20427103,20428708,20430284,20431611,20432803,20434276,20435777,20437214,20438556,20440035,20441566,20443141,20444769,20446229,20447598,20449092,20450989,20452636,20454065,20455464,20456860,20458300,20459653,20461120,20462601,20463970,20465359,20466835,20468362,20469501,20470921,20472463,20473991,20475517,20477221,20478868,20480435,20482073,20483583,20485055,20486461,20488025,20489585,20491165,20492601,20494115,20495639,20497199,20498657,20500154,20501720,20503256,20504830,20506392,20507978,20509613,20511133,20512660,20514235,20515737,20517131,20518392,20519281,20520532,20521900,20523278,20524524,20525939,20527388,20528908,20530454,20531889,20533214,20534600,20536274,20538221,20539848,20541522,20543179,20544964,20546723,20548453,20550193,20551798,20553512,20555248,20557076,20558675,20560178,20561826,20563462,20565086,20566827,20568619,20570266,20571948,20573599,20575118,20576668,20578177,20579852,20581528,20583020,20584571,20586164,20587786,20589441,20591046,20592689,20594397,20596082,20597823,20599573,20601319,20602939,20604520,20606247,20607896,20609470,20610948,20612206,20613809,20615503,20617194,20618764,20620405,20622116,20623885,20625706,20627529,20629183,20630820,20632578,20634533,20635090,20635693,20636308,20636956,20637608,20638301,20639139,20640139,20641179,20642231,20643116,20644375,20645840,20647386,20649017,20650469,20651655,20653216,20654759,20656424,20658225,20659873,20661453,20663198,20664861,20666497,20668248,20669860,20671455,20673259,20674943,20676657,20678442,20680132,20681747,20683408,20685150,20686887,20688690,20690393,20691822,20693255,20694657,20695867,20697084,20698457,20699839,20701086,20702335,20703624,20704953,20706425,20707988,20709529,20711052,20712611,20714274,20715205,20717253,20719301,20721349,20723397,20725445,20727493,20729541,20731589,20733637,20735685,20737733,20739781,20741829,20743877,20745925,20747973,20750021,20752069,20754117,20756165,20758213,20760261,20762309,20764357,20766405,20768453,20770501,20772549,20774597,20776645,20778693,20780741,20782789,20784837,20786885,20788933,20790989,20793037,20795085,20797133,20799181,20801229,20803277,20805325,20807373,20809421,20811469,20813517,20815565,20817613,20819661,20821709,20823757,20825805,20827853,20829910,20831958,20834006,20836054,20838102,20840150,20842198,20844246,20846294,20848342,20850390,20852438,20854486,20856534,20858582,20860630,20862678,20864726,20866774,20868822,20870870,20872918,20874966,20877014,20879062,20881110,20883158,20885206,20887254,20889302,20891350,20893398,20895455,20897503,20899551,20901599,20903647,20905695,20907743,20909791,20911839,20913887,20915935,20917983,20920038,20922086,20924134,20926182,20928230,20930278,20932326,20934374,20936422,20938470,20940518,20942566,20944614,20946662,20948710,20950758,20952806,20954854,20956902,20958950,20960998,20963046,20965094,20967142,20969190,20971238,20973286,20975334,20977382,20979430,20981478,20983526,20985574,20987622,20989670,20991718,20993766,20995814,20997862,20999910,21001958,21004006,21006054,21008102,21010159,21012207,21014255,21016303,21018351,21020399,21022447,21024495,21026543,21028591,21030639,21032687,21034735,21036783,21038831,21040879,21042927,21044975,21047023,21049071,21051119,21053175,21055223,21057271,21059319,21061367,21063415,21065463,21067511,21069559,21071607,21073655,21075703,21077751,21079799,21081847,21083895,21085943,21087991,21090039,21092087,21094135,21096181,21098195,21100226,21102277,21104325,21106373,21108421,21110477,21112525,21114573,21116621,21118669,21120717,21122765,21124813,21126861,21128909,21130957,21133005,21135053,21137101,21139149,21141197,21143245,21145293,21147341,21149389,21151437,21153485,21155533,21157581,21159629,21161677,21163725,21165773,21167821,21169869,21171917,21173965,21176013,21178061,21180109,21182157,21184205,21186253,21188301,21190349,21192406,21194434,21196445,21198496,21200550,21202607,21204655,21206711,21208758,21210806,21212854,21214902,21216950,21218998,21221046,21223094,21225142,21227190,21229238,21231286,21233334,21235382,21237430,21239478,21241526,21243574,21245622,21247679,21249727,21251775,21253823,21255871,21257919,21259967,21262015,21264063,21266111,21268159,21270207,21272255,21274303,21276360,21278408,21280456,21282504,21284552,21286609,21288657,21290714,21292749,21294757,21296804,21298854,21300910,21302958,21305006,21307055,21309112,21311160,21313208,21315256,21317304,21319352,21321400,21323448,21325496,21327544,21329592,21331640,21333688,21335736,21337784,21339832,21341880,21343928,21345985,21348033,21350081,21352129,21354177,21356225,21358273,21360321,21362369,21364417,21366465,21368513,21370561,21372609,21374657,21376705,21378753,21380801,21382849,21384897,21386945,21388993,21391041,21393089,21395137,21397185,21399233,21401281,21403329,21405377,21407425,21409473,21411521,21413569,21415617,21417665,21419713,21421761,21423809,21425857,21427905,21429953,21432001,21434049,21436097,21438145,21440193,21442241,21444289,21446337,21448385,21450433,21452481,21454529,21456577,21458625,21460673,21462721,21464769,21466817,21468865,21470913,21472961,21475009,21477057,21479105,21481153,21483201,21485249,21487297,21489345,21491393,21493441,21495489,21497537,21499585,21501633,21503681,21505729,21507777,21509825,21511873,21513921,21515969,21518017,21520065,21522113,21524161,21526209,21528257,21530305,21532356,21534404,21536452,21538500,21540548,21542596,21544644,21546692,21548740,21550788,21552836,21554884,21556932,21558980,21561028,21563076,21565124,21567172,21569220,21571277,21573325,21575362,21577376,21579411,21581462,21583519,21585567,21587615,21589665,21591713,21593761,21595809,21597857,21599905,21601953,21604001,21606049,21608097,21610145,21612193,21614241,21616289,21618337,21620385,21622433,21624481,21626150,21627449,21628953,21630278,21631382,21632410,21633524,21634653,21635727,21636926,21637999,21639091,21640311,21641391,21642626,21643685,21644766,21645874,21647049,21648217,21649414,21650539,21651736,21652693,21653607,21654459,21655402,21656354,21656941,21657995,21658833,21659708,21660835,21661186,21661535,21661904,21663035,21664261,21665741,21667239,21668732,21670154,21671010,21672087,21673045,21673947,21674825,21675759,21677137,21678542,21679834,21681019,21682081,21683107,21684293,21685480,21686463,21687676,21688769,21689941,21691102,21692200,21693423,21694482,21695641,21696730,21697836,21698967,21700194,21701241,21702280,21703198,21704170,21705028,21706006,21706981,21707540,21708514,21709289,21710048,21710888,21711243,21711593,21711947,21713238,21714560,21716067,21717532,21718970,21720087,21721202,21722355,21723270,21724203,21725052,21726584,21728026,21728071,21728115,21728160,21728222,21728348,21728469,21728640,21728833,21729008,21729278,21729488,21729734,21730308,21731280,21732308,21733311,21734479,21735917,21737501,21739083,21740746,21742373,21744143,21745887,21747646,21749262,21750809,21752361,21753980,21755671,21757360,21759122,21760901,21762550,21764190,21765841,21767441,21769072,21770651,21771726,21772672,21773631,21774424,21775001,21775273,21775448,21775576,21775693,21775837,21776010,21776125,21776184,21776240,21776290,21776337,21776382,21776529,21777184,21778205,21780105,21780253,21780509,21780706,21780892,21781112,21781507,21781909,21782300,21782713,21783153,21783412,21783771,21784461,21785275,21786264,21787210,21788305,21789590,21791175,21792878,21794671,21796426,21798200,21800052,21801862,21803609,21805273,21806951,21808642,21810504,21812325,21814214,21816078,21817887,21819680,21821597,21823448,21825308,21827199,21828499,21829482,21830370,21831244,21831939,21832467,21832868,21833206,21833514,21833919,21834257,21834699,21834850,21835007,21835144,21835341,21835544,21835662,21837681,21839027,21840341,21841644,21842849,21844175,21845576,21847007,21848318,21849704,21851029,21852435,21853900,21855309,21856701,21858148,21859644,21861097,21862557,21864020,21865558,21866934,21868310,21869706,21871118,21872395,21873512,21874782,21876178,21877483,21878844,21880185,21881574,21882824,21884212,21885643,21886968,21888252,21889648,21891178,21892636,21894037,21895553,21896837,21898220,21899630,21901071,21902493,21903926,21905299,21906609,21907985,21909274,21910751,21912094,21913285,21914532,21915752,21917092,21918068,21919105,21920551,21922034,21922078,21922123,21922171,21922487,21923535,21924574,21925609,21926950,21928447,21929951,21931292,21933099,21934895,21936654,21938342,21940021,21941249,21942201,21943660,21945365,21947106,21948959,21950664,21952490,21954318,21956082,21957714,21959375,21961064,21962865,21964747,21966590,21968476,21970324,21972075,21973949,21975836,21977721,21979564,21981476,21983058,21984648,21986155,21987870,21989436,21990750,21992012,21993367,21994523,21995675,21996792,21997498,21998382,21998429,21998474,21998518,21998833,21999524,22000615,22001392,22002095,22003153,22004396,22005712,22007073,22008043,22008640,22009629,22010557,22011606,22012284,22013150,22013844,22014517,22015223,22015931,22016896,22017783,22018626,22019524,22020372,22021360,22022209,22022878,22023514,22024491,22025449,22026351,22027239,22028200,22028733,22029495,22030265,22031067,22031772,22032488,22033283,22034193,22035174,22035861,22036690,22037523,22038350,22039211,22040090,22040981,22041896,22042818,22043665,22044497,22045336,22046186,22047246,22048042,22049102,22050846,22052229,22053739,22055246,22056897,22058485,22059927,22061688,22063182,22064735,22066190,22067868,22069474,22071004,22072614,22074079,22075498,22076979,22078653,22080257,22081771,22083387,22084750,22086256,22087959,22089884,22091323,22092815,22094104,22095226,22096469,22097812,22099189,22100277,22101389,22102619,22103662,22104797,22106028,22107290,22108534,22109636,22110462,22111312,22112155,22113932,22115482,22116862,22118321,22119701,22120996,22122390,22123568,22124778,22126157,22127506,22128761,22129875,22130801,22131693,22132328,22133304,22135223,22136730,22138226,22139733,22141136,22142433,22143800,22144966,22146211,22147540,22148856,22150076,22150963,22151802,22152511,22153268,22155171,22156641,22158124,22159538,22161018,22162352,22163601,22164960,22166136,22167436,22168831,22170144,22171342,22172386,22173303,22174175,22174816,22175837,22177734,22179167,22180679,22182100,22183578,22185113,22186614,22187958,22189130,22190037,22190858,22191612,22192514,22193373,22194198,22195952,22197425,22198896,22200315,22201769,22203091,22204335,22205655,22206822,22208138,22209490,22210791,22211924,22212867,22213814,22214565,22215261,22216932,22218587,22220066,22221428,22222559,22223810,22225271,22226681,22228012,22228955,22229951,22231342,22233084,22234678,22236242,22237605,22238863,22239999,22241491,22242882,22244111,22245158,22246434,22247707,22249037,22249974,22251161,22252889,22254662,22256443,22258275,22259960,22261549,22262941,22264795,22266705,22268491,22270241,22272158,22273958,22275250,22276530,22277820,22279166,22280616,22282092,22283968,22285281,22286708,22287997,22289361,22290821,22292357,22293710,22294619,22295567,22296738,22298546,22299520,22300377,22301317,22303088,22304412,22305777,22307452,22309050,22310579,22312324,22314054,22315840,22317041,22318569,22320293,22321808,22323450,22325340,22327203,22328783,22330034,22331641,22333328,22334870,22336631,22338547,22340456,22341855,22343187,22344851,22346539,22348141,22349956,22351874,22353808,22355105,22356483,22358156,22359873,22361408,22363141,22365057,22366976,22368388,22369794,22371443,22373126,22374645,22376359,22378213,22380132,22381474,22382841,22384524,22386095,22387619,22389383,22391092,22392936,22394130,22395689,22397422,22398945,22400583,22402344,22404169,22405580,22406913,22408580,22410231,22411740,22413455,22415230,22417087,22418320,22419808,22421540,22423100,22424705,22426530,22428370,22429949,22431576,22433081,22434671,22436242,22437809,22439483,22441172,22442711,22444250,22445846,22447279,22448868,22450463,22452021,22453584,22455015,22456501,22458042,22459434,22460934,22462409,22463571,22464659,22465833,22467176,22468467,22469622,22470927,22472588,22474152,22475423,22476707,22478117,22479510,22480918,22482113,22483603,22484600,22485995,22487839,22487883,22487928,22487976,22488025,22488070,22488167,22488582,22489251,22489996,22490850,22491797,22492769,22493745,22494803,22495735,22496897,22498004,22499274,22500595,22501770,22503079,22504412,22505578,22506768,22507883,22508877,22510090,22511122,22512336,22513511,22514553,22515463,22516397,22517187,22517852,22518573,22519201,22519516,22519563,22519608,22519652,22519697,22519747,22521062,22521938,22522681,22523492,22524625,22525915,22527193,22528197,22529212,22530221,22531304,22532047,22532778,22533541,22534516,22535504,22536601,22537766,22538883,22540068,22541344,22542602,22543804,22545163,22546529,22547865,22549214,22550492,22551812,22553018,22553944,22554741,22555296,22555842,22556395,22557188,22558079,22558880,22559686,22560568,22561602,22562549,22563432,22564442,22565682,22566721,22567714,22568750,22569571,22570664,22571903,22572984,22574027,22574992,22576083,22576920,22578294,22579026,22580121,22581266,22582894,22584095,22585350,22586690,22588156,22589622,22591098,22592747,22594503,22596297,22598128,22599944,22601749,22603470,22605195,22606811,22608496,22610264,22611871,22613540,22615161,22616810,22618375,22619857,22621506,22623185,22624776,22626334,22627910,22629501,22631050,22632466,22633638,22634705,22636106,22637722,22639239,22640823,22642394,22643837,22645185,22646620,22648061,22650079,22650775,22651519,22652574,22653685,22654844,22656160,22657561,22658878,22660145,22661677,22663116,22664412,22665163,22666093,22667261,22668563,22669997,22671245,22672453,22673673,22674790,22675956,22677153,22678352,22679651,22680838,22682166,22683582,22684821,22686089,22687453,22688844,22690180,22691479,22692710,22693958,22695173,22696121,22697100,22698248,22699385,22700678,22701854,22703296,22703916,22705327,22706185,22707158,22708409,22710154,22711849,22712667,22713623,22714690,22716393,22717200,22718047,22718867,22719920,22721014,22722028,22723010,22724042,22725269,22726613,22728192,22729845,22731494,22733130,22734620,22735961,22737409,22738925,22740617,22742212,22743914,22745544,22747177,22748793,22750358,22751842,22753354,22755014,22756836,22758691,22760535,22762362,22764102,22765849,22767303,22768689,22770017,22771375,22772717,22773953,22774970,22775596,22776609,22777745,22778864,22780003,22780839,22782080,22782915,22783963,22785067,22786004,22786858,22787984,22789250,22790711,22791465,22792074,22792635,22793347,22793955,22794579,22795173,22796025,22796850,22797980,22799043,22799853,22800948,22801744,22802556,22803340,22804168,22804955,22805922,22806798,22807703,22808626,22809514,22810378,22811291,22812194,22813098,22814089,22815117,22816086,22816877,22817513,22818171,22818935,22819685,22820423,22821345,22822230,22822985,22823888,22824673,22825512,22826305,22827361,22828127,22829569,22831376,22833424,22834984,22837041,22837474,22837566,22837742,22837937,22838014,22838108,22838459,22839116,22839847,22840670,22841617,22842569,22843526,22844556,22845503,22846656,22847782,22849074,22850412,22851598,22852907,22854210,22855380,22856585,22857619,22858687,22859886,22860909,22862125,22863244,22864232,22865134,22866021,22866672,22867345,22868086,22868579,22868705,22868786,22868976,22869158,22869250,22869675,22871178,22871889,22872608,22873603,22874745,22876127,22877152,22878104,22879153,22880085,22880891,22881560,22882324,22883270,22884193,22885162,22886250,22887311,22888378,22889534,22890731,22891827,22893185,22894598,22895984,22897256,22898482,22899845,22901006,22901930,22902661,22903170,22903706,22904247,22905037,22905944,22906726,22907543,22908466,22909489,22910393,22911305,22912340,22913519,22914565,22915947,22916644,22917672,22918784,22920107,22920917,22922290,22922921,22923967,22925185,22926148,22927210,22928134,22929099,22930093,22931171,22932326,22933401,22935380,22936514,22937731,22939120,22940465,22941974,22943405,22944983,22946667,22948453,22950277,22952094,22953897,22955606,22957356,22959031,22960647,22962428,22964059,22965706,22967282,22968926,22970532,22972011,22973631,22975306,22976972,22978493,22980079,22981640,22983231,22984726,22986030,22987097,22988308,22989940,22991487,22993085,22994651,22996193,22997534,22998896,23000340,23002123,23003325,23004006,23005006,23006099,23007220,23008500,23009835,23011217,23012498,23013962,23015448,23016779,23017726,23018548,23019592,23020873,23022257,23023521,23024763,23026044,23027154,23028343,23029486,23030708,23032024,23033243,23034457,23035848,23037206,23038447,23039766,23041133,23042448,23043779,23045038,23046285,23047484,23048571,23049546,23050623,23051781,23053042,23054225,23055572,23056344,23057350,23058515,23059700,23060480,23062229,23063543,23064407,23065042,23065773,23066424,23067385,23068088,23069418,23071173,23071982,23072859,23073647,23074718,23075818,23076802,23077821,23078853,23080039,23081377,23082949,23084605,23086254,23087893,23089385,23090727,23092132,23093640,23095301,23096907,23098601,23100235,23101866,23103486,23105065,23106535,23108049,23109695,23111517,23113370,23115220,23117052,23118795,23120546,23122043,23123460,23124784,23126136,23127495,23128737,23129743,23130357,23131335,23132494,23133599,23134800,23135606,23136838,23137692,23138696,23139802,23141040,23141813,23142379,23143346,23144054,23145340,23146528,23148531,23150426,23152273,23153978,23155732,23157451,23159165,23160907,23162830,23164720,23166777,23167241,23167286,23167334,23167383,23167428,23167469,23167514,23167562,23167611,23167656,23167700,23167745,23167893,23168677,23169730,23171147,23172551,23174120,23175689,23177118,23178632,23180181,23181773,23183443,23185151,23186915,23188662,23190328,23192049,23193673,23195344,23196981,23198604,23200171,23201770,23203210,23204527,23205807,23206932,23208098,23208993,23209469,23209791,23209999,23210138,23210182,23210227,23210275,23210322,23210367,23210411,23210456,23210506,23210553,23210598,23210642,23210687,23212046,23214094,23216142,23218190,23220238,23222286,23224334,23226382,23228430,23230478,23232526,23234574,23236622,23238670,23240718,23242766,23244814,23246862,23248910,23250958,23253006,23255054,23257102,23259150,23261198,23263246,23265294,23267342,23269390,23270758,23271984,23273186,23274420,23275662,23276756,23277887,23279024,23280244,23281446,23282721,23284002,23285167,23286488,23287757,23289216,23290917,23292471,23294006,23295371,23296738,23298253,23299826,23301265,23302646,23304246,23305856,23307405,23308902,23310390,23311927,23313358,23314733,23316127,23317593,23319045,23320534,23321802,23323015,23324350,23325616,23326882,23328069,23329168,23330037,23331080,23332113,23333247,23334248,23335072,23335758,23336500,23337317,23338006,23338646,23339270,23339804,23341684,23343348,23344501,23345580,23346720,23347724,23348923,23350204,23351553,23352694,23353920,23355113,23356390,23357740,23359006,23360592,23362121,23363900,23365686,23367371,23369123,23370907,23372510,23373973,23375526,23377003,23378384,23379969,23381587,23383043,23384508,23386139,23387713,23389367,23390850,23392561,23394093,23395469,23396748,23398121,23399357,23400466,23401594,23402612,23403613,23404698,23405612,23406602,23407639,23408689,23409731,23410631,23411490,23412176,23412772,23413206,23413640,23414016,23415387,23416751,23417411,23418102,23418775,23419440,23420109,23420762,23421443,23422132,23422818,23423443,23424120,23424798,23426024,23427607,23429109,23430659,23432242,23433920,23435531,23437084,23438583,23439986,23441067,23441954,23443226,23444688,23446135,23447686,23449209,23450656,23452158,23453577,23454903,23456047,23456996,23458147,23459565,23461080,23462562,23464018,23465511,23466902,23468134,23469070,23469766,23470405,23471082,23471783,23472457,23473131,23473786,23474462,23475172,23475837,23476485,23477151,23478327,23480068,23480766,23481427,23482062,23482727,23483429,23484126,23484781,23485437,23486132,23486837,23487549,23488210,23489031,23490432,23492056,23493651,23495282,23496997,23498686,23500252,23501765,23503199,23504569,23505887,23507249,23508523,23509835,23511181,23512508,23513810,23515086,23516367,23517518,23519182,23520859,23522486,23524104,23525765,23527360,23528898,23530287,23531384,23532375,23533112,23533869,23534541,23535210,23535887,23536510,23537200,23537887,23538542,23539186,23539826,23540518,23541178,23541986,23544014,23544864,23545264,23545808,23546460,23547089,23547806,23548677,23549591,23550587,23551705,23552735,23553872,23555218,23556721,23558228,23559805,23561364,23562923,23564441,23565909,23567343,23568813,23570267,23571709,23573198,23574683,23576105,23577521,23578920,23580179,23581539,23582933,23584349,23585947,23587565,23589125,23590572,23591891,23593009,23594165,23595431,23596661,23597889,23599168,23600320,23601446,23602463,23603404,23604424,23605437,23606439,23607406,23608306,23609183,23609876,23610486,23610880,23612107,23613399,23613725,23614215,23614735,23615410,23616151,23616977,23617864,23618777,23619788,23620819,23621981,23623220,23624563,23626077,23627697,23629364,23631086,23632742,23634375,23635862,23637294,23638667,23639973,23641277,23642651,23644077,23645542,23646945,23648392,23649884,23651327,23652780,23654192,23655653,23657103,23658659,23660342,23661990,23663520,23664870,23666171,23667385,23668624,23669835,23671045,23672264,23673442,23674520,23675578,23676639,23677642,23678549,23679344,23680107,23680791,23681305,23682189,23683950,23684253,23684743,23685372,23686013,23686685,23687465,23688370,23689290,23690355,23691433,23692469,23693824,23695379,23696879,23698369,23699952,23701469,23702932,23704246,23705542,23706862,23708218,23709540,23710982,23712371,23713783,23715147,23716405,23717807,23719176,23720547,23721843,23723192,23724530,23725823,23727179,23728717,23730264,23731884,23733307,23734775,23736176,23737546,23738761,23739947,23741176,23742397,23743549,23744633,23745652,23746635,23747570,23748456,23749233,23749881,23750375,23750777,23752527,23754270,23755993,23757789,23759490,23761543,23763591,23765639,23767687,23769735,23771783,23773831,23775879,23777927,23779975,23782023,23784071,23786119,23788167,23790215,23792263,23794311,23796359,23798407,23800455,23802503,23804551,23806599,23808647,23810695,23812723,23814699,23816752,23818764,23820817,23822807,23824855,23826815,23828863,23830834,23832882,23834886,23836861,23838737,23840766,23842763,23844534,23846417,23848379,23850376,23852360,23854329,23856291,23858253,23860249,23862188,23863194,23863959,23864776,23865675,23866667,23867666,23868793,23869816,23870886,23871733,23872516,23873480,23874512,23875375,23876314,23877207,23878109,23879094,23879918,23880720,23881597,23882435,23883413,23884500,23885384,23886071,23886952,23888302,23889585,23890852,23892225,23893352,23893912,23894451,23894955,23895553,23896109,23896906,23897839,23898780,23899832,23900790,23901498,23902494,23903220,23904163,23905161,23906173,23906923,23907983,23908800,23909314,23909853,23910539,23911273,23911981,23913249,23913719,23914510,23915166,23915860,23916605,23917239,23918373,23919276,23920291,23921330,23922070,23922815,23923355,23923897,23924440,23925136,23925883,23926691,23927514,23928176,23928870,23929754,23930727,23931896,23932702,23933480,23934491,23935490,23936489,23937526,23938267,23939212,23939952,23940761,23941738,23942663,23943588,23944016,23944555,23945458,23946230,23947005,23947536,23948185,23949098,23949746,23950367,23951008,23951679,23952516,23953280,23954128,23954809,23955535,23956285,23957026,23958664,23960353,23962060,23963527,23964962,23966382,23967737,23969284,23970955,23972876,23974618,23976409,23977871,23979310,23980731,23982159,23983715,23985487,23987453,23989093,23990728,23992466,23994102,23995721,23997409,23999157,24000956,24002742,24004493,24006218,24007873,24009141,24010326,24011517,24012972,24014568,24016182,24017897,24019666,24021396,24023172,24024843,24026595,24028300,24030039,24031705,24033457,24035129,24036888,24038659,24040317,24042091,24043890,24045577,24047317,24049106,24050870,24052509,24054083,24055692,24057103,24058405,24059716,24061109,24062640,24064163,24065775,24067421,24068982,24070601,24072217,24073748,24075324,24076963,24078578,24080298,24082332,24083742,24085147,24086634,24088180,24089626,24091106,24092667,24094144,24095607,24097139,24098768,24100336,24101775,24103417,24105089,24106737,24108445,24110223,24111941,24113613,24115294,24116864,24118436,24119944,24121532,24123137,24124731,24126299,24127930,24129571,24131152,24132707,24134275,24135925,24137548,24139189,24140800,24142412,24143985,24145551,24147155,24148797,24150392,24151958,24153192,24154442,24155916,24157424,24158820,24160213,24161692,24163247,24164869,24166482,24167935,24169334,24170825,24172876,24174242,24175472,24176694,24177951,24179176,24180435,24181667,24182912,24184160,24185442,24186743,24188146,24189603,24190894,24192177,24193470,24194781,24196091,24197404,24198675,24199920,24201209,24202477,24203730,24204992,24206250,24207483,24208737,24209992,24211244,24212474,24213662,24214851,24216099,24217324,24218570,24219807,24221044,24222321,24223566,24224835,24226081,24227362,24228662,24229985,24231560,24232855,24234131,24235448,24236783,24238092,24239383,24240615,24241870,24243162,24244436,24245661,24247481,24249395,24251122,24252902,24254689,24256491,24258301,24260078,24261852,24263637,24265421,24267176,24268900,24270628,24272338,24274041,24275711,24277344,24278968,24280578,24282232,24283884,24285478,24287056,24288769,24290476,24292177,24293893,24295655,24297399,24299202,24300941,24302707,24304453,24306188,24307901,24309490,24311202,24312884,24314561,24316222,24317883,24319554,24321295,24323006,24324727,24326457,24328188,24329933,24331722,24333519,24335265,24337009,24338747,24340503,24342251,24344003,24345779,24347288,24348377,24350001,24352049,24354097,24356145,24358193,24360241,24362289,24364337,24366385,24368433,24370481,24372529,24374577,24376625,24378673,24380721,24382769,24384817,24386865,24388913,24390961,24393009,24395057,24397105,24399153,24401201,24403249,24405297,24407345,24409393,24411441,24413489,24415537,24417585,24419633,24421681,24423729,24425777,24427825,24429873,24431921,24433969,24436017,24438073,24440121,24442169,24444217,24446265,24448313,24450361,24452409,24454457,24456505,24458553,24460601,24462649,24464697,24466745,24468793,24470841,24472889,24474937,24476985,24479033,24481081,24483129,24485177,24487225,24489273,24491321,24493369,24495417,24497465,24499513,24501561,24503609,24505657,24507705,24509753,24511801,24513849,24515897,24517945,24519993,24522041,24524089,24526137,24528185,24530233,24532281,24534329,24536377,24538425,24540473,24542521,24544569,24546617,24548665,24550713,24552761,24554809,24556857,24558905,24560953,24563001,24565049,24567097,24569145,24571193,24573241,24575289,24577337,24579385,24581433,24583481,24585529,24587577,24589625,24591673,24593721,24595769,24597817,24599865,24601913,24603961,24606009,24608057,24610105,24612153,24614201,24616249,24618297,24620345,24622393,24624441,24626489,24628537,24630585,24632633,24634681,24636729,24638777,24640825,24642873,24644921,24646969,24649017,24651065,24653113,24655161,24657209,24659257,24661305,24663353,24665401,24667449,24669497,24671545,24673593,24675641,24677689,24679737,24681785,24683833,24685881,24687929,24689977,24692025,24694073,24696121,24698169,24700217,24702265,24704313,24706361,24708409,24710457,24712505,24714553,24716601,24718649,24720697,24722745,24724793,24726841,24728889,24730937,24732985,24735033,24737081,24739129,24741177,24743225,24745273,24747321,24749369,24751417,24753465,24755513,24757561,24759609,24761657,24763705,24765753,24767801,24769849,24771897,24773945,24775993,24778041,24780089,24782137,24784185,24786233,24788290,24790338,24792386,24794434,24796482,24798530,24800578,24802626,24804674,24806722,24808770,24810818,24812866,24814914,24816962,24819010,24821058,24823106,24825154,24827202,24829250,24831298,24833346,24835394,24837442,24839490,24841538,24843586,24845634,24847682,24849730,24851778,24853826,24855874,24857922,24859970,24862018,24864066,24866114,24868162,24870210,24872258,24874306,24876354,24878402,24880450,24882498,24884546,24886594,24888642,24890690,24892738,24894786,24896834,24898882,24900930,24902978,24905026,24907074,24909122,24911170,24913218,24915266,24917314,24919362,24921410,24923458,24925506,24927554,24929602,24931650,24933698,24935746,24937794,24939842,24941890,24943938,24945986,24948034,24950082,24952130,24954178,24956226,24958274,24960322,24962370,24964418,24966466,24968514,24970562,24972610,24974658,24976706,24978754,24980802,24982850,24984898,24986946,24988994,24991042,24993090,24995138,24997194,24999242,25001290,25003338,25005386,25007434,25009482,25011530,25013578,25015626,25017674,25019722,25021770,25023818,25025866,25027914,25029962,25032010,25034058,25036106,25038154,25040202,25042250,25044298,25046346,25048394,25050442,25052490,25054538,25056586,25058634,25060682,25062730,25064778,25066826,25068874,25070922,25072970,25075018,25077066,25079114,25081162,25083210,25085258,25087306,25089354,25091402,25093450,25095498,25097546,25099594,25101642,25103690,25105738,25107786,25109834,25111882,25113930,25115978,25118026,25120074,25122122,25124170,25126218,25128266,25130314,25132362,25134410,25136458,25138506,25140554,25142602,25144650,25146698,25148746,25150794,25152842,25154890,25156938,25158986,25161034,25163082,25165130,25167178,25169226,25171274,25173322,25175370,25177418,25179466,25181514,25183562,25185610,25187658,25189706,25191754,25193802,25195859,25197907,25199955,25202003,25204051,25206099,25208147,25210195,25212243,25214291,25216339,25218387,25220435,25222483,25224531,25226579,25228627,25230675,25232723,25234771,25236819,25238867,25240915,25242963,25245011,25247059,25249107,25251155,25253203,25255251,25257299,25259347,25261395,25263443,25265491,25267539,25269587,25271635,25273683,25275731,25277779,25279827,25281875,25283923,25285603,25286257,25286860,25287442,25288085,25288683,25289274,25289870,25290499,25291131,25291743,25292366,25293697,25294338,25294857,25295453,25296044,25296578,25296957,25297353,25297846,25299539,25301278,25302661,25303692,25304817,25305872,25307175,25308693,25310168,25311304,25312661,25314414,25315637,25316674,25318114,25318510,25318938,25319387,25319861,25320376,25320843,25321354,25321788,25322143,25322404,25322683,25322963,25323365,25325051,25326949,25328703,25330407,25332110,25333885,25334900,25336076,25337218,25338133,25339033,25340154,25341260,25342143,25343324,25343917,25345021,25345937,25346914,25347898,25349267,25349896,25351195,25352272,25353339,25354329,25355375,25356296,25357335,25358583,25359537,25360434,25361276,25362593,25363222,25364394,25365412,25366720,25367878,25368905,25370090,25370671,25371802,25372883,25374041,25374968,25375883,25377160,25377671,25377976,25378277,25378753,25380060,25381105,25382359,25383150,25384455,25385368,25387175,25388108,25389834,25391141,25393091,25394553,25396050,25397608,25399182,25400780,25402409,25404040,25405668,25407353,25408973,25410627,25412302,25413892,25415557,25417196,25418788,25420408,25422049,25423789,25425508,25427193,25428943,25430692,25432467,25434163,25435839,25437611,25439410,25441223,25443033,25444887,25446778,25448671,25450562,25452468,25454343,25456104,25457883,25459710,25461523,25463333,25465116,25466907,25468708,25470460,25472220,25473792,25475380,25477004,25478623,25480189,25481647,25483140,25484752,25486312,25488022,25489688,25491736,25493147,25494549,25496050,25497606,25499102,25500605,25502163,25503629,25505099,25506619,25508248,25509843,25511239,25512857,25514538,25516168,25517864,25519639,25521376,25523031,25524741,25526310,25527905,25529430,25530991,25532596,25534196,25535775,25537384,25539026,25540616,25542160,25543708,25545339,25546947,25548567,25550154,25551775,25553338,25554922,25556534,25558185,25559804,25561386,25562659,25563877,25565354,25566842,25568260,25569588,25571078,25572615,25574223,25575836,25577267,25578649,25580124,25582099,25583081,25583663,25584375,25584863,25585479,25586215,25587049,25587782,25588782,25589740,25590884,25591782,25592968,25594219,25595514,25596834,25598170,25599524,25600903,25602292,25603698,25605173,25606531,25607933,25609389,25610955,25612398,25613803,25615277,25616598,25617626,25618606,25619517,25620729,25621989,25623256,25624521,25625562,25626676,25627635,25628571,25629565,25630447,25631366,25632395,25633268,25634032,25634877,25635777,25636622,25637104,25637752,25638571,25639185,25639888,25640543,25641145,25642553,25643977,25644710,25645452,25646336,25647310,25648363,25649490,25650529,25651642,25652803,25653908,25654864,25655692,25656424,25657433,25658767,25660076,25661499,25662942,25664460,25665935,25667457,25668800,25670289,25671837,25673440,25674983,25676499,25678109,25679751,25681454,25683123,25684687,25686187,25687729,25689315,25690795,25692273,25693742,25695018,25696330,25697539,25698623,25699553,25700582,25701656,25702746,25703807,25704970,25706188,25707423,25708525,25709520,25710353,25711087,25711900,25712671,25713693,25714624,25716276,25718297,25720345,25722393,25724441,25726489,25728537,25730585,25732633,25734681,25736729,25738777,25740825,25742873,25744921,25746969,25749017,25751065,25753113,25755161,25757209,25759257,25761305,25763353,25765401,25767449,25769497,25771554,25773602,25775650,25777698,25779746,25781794,25783842,25785890,25787938,25789986,25792034,25794082,25796130,25798178,25800226,25802274,25804322,25806370,25808418,25810466,25812514,25814562,25816610,25818658,25820706,25822761,25824809,25826857,25828905,25830953,25833001,25835049,25837097,25839145,25841193,25843241,25845289,25847337,25849385,25851433,25853481,25855529,25857577,25859634,25861682,25863730,25865787,25867835,25869883,25871931,25873979,25876027,25878075,25880123,25882171,25884219,25886267,25888315,25890371,25892419,25894467,25896515,25898563,25900611,25902659,25904707,25906755,25908803,25910851,25912899,25914947,25916995,25919043,25921091,25923139,25925187,25927235,25929292,25931340,25933388,25935436,25937484,25939532,25941580,25943602,25945508,25947489,25949537,25951585,25953641,25955555,25957564,25959612,25961669,25963717,25965765,25967632,25969655,25971710,25973761,25975817,25977756,25979750,25981798,25983843,25985838,25987769,25989762,25991755,25993758,25995621,25997600,25999593,26001600,26003463,26005438,26007465,26009470,26011384,26013366,26015361,26017304,26019297,26021167,26023197,26025239,26027135,26029057,26030990,26032868,26034852,26036710,26038685,26040548,26042495,26044402,26046306,26048252,26050171,26052130,26053989,26056000,26057858,26059832,26061695,26063711,26065574,26067507,26069413,26071338,26073271,26075170,26077154,26078983,26081014,26082884,26084878,26086768,26088680,26090617,26092549,26094488,26096438,26098378,26100299,26102261,26104153,26106140,26108056,26110039,26111892,26113922,26115797,26117825,26119692,26121671,26123534,26125502,26127380,26129338,26131228,26133159,26135077,26137022,26138941,26140863,26142802,26144715,26146675,26148548,26150527,26152422,26154427,26156292,26158303,26160192,26162129,26164044,26166029,26167950,26169960,26171809,26173803,26175738,26177710,26179591,26181613,26183592,26185569,26187457,26189438,26191446,26193349,26195292,26197199,26199107,26201046,26203009,26204907,26206886,26208755,26210697,26212593,26214534,26216441,26218344,26220295,26222287,26224155,26226136,26228001,26229994,26231857,26233790,26235704,26237684,26239554,26241583,26243450,26245405,26247299,26249207,26251146,26252971,26254989,26256864,26258849,26260719,26262735,26264783,26266810,26268710,26270689,26272737,26274718,26276694,26278710,26280758,26282621,26284599,26286643,26288657,26290575,26292504,26294437,26296423,26298302,26300280,26302144,26304119,26305985,26307937,26309844,26311792,26313693,26315631,26317548,26319426,26321412,26323246,26325191,26327087,26328996,26330942,26332749,26334780,26336644,26338570,26340502,26342434,26344367,26346290,26348236,26350148,26352125,26354049,26356026,26357917,26359898,26361780,26363795,26365670,26367699,26369569,26371529,26373432,26375380,26377294,26379236,26381141,26383079,26384994,26386920,26388853,26390783,26392722,26394610,26396590,26398518,26400497,26402395,26404404,26406294,26408299,26410195,26412201,26414097,26416102,26418014,26420020,26421923,26423932,26425951,26427867,26429807,26431726,26433655,26435588,26437518,26439451,26441379,26443325,26445209,26447187,26449042,26451070,26452935,26454910,26456774,26458705,26460615,26462536,26464473,26466347,26468328,26470297,26472257,26474197,26476134,26478087,26479992,26481938,26483841,26485792,26487692,26489638,26491545,26493484,26495393,26497332,26499234,26501175,26503092,26505029,26506959,26508919,26510826,26512773,26514674,26516614,26518524,26520465,26522372,26524313,26526227,26528157,26530089,26532023,26533962,26535848,26537827,26539682,26541696,26543560,26545517,26547431,26549375,26551282,26553224,26555131,26557071,26558978,26560916,26562822,26564764,26566680,26568622,26570528,26572466,26574372,26576313,26578219,26580168,26582064,26584001,26585918,26587826,26589783,26591583,26593613,26595477,26597427,26599342,26601285,26603195,26605177,26607041,26608979,26610877,26612791,26614723,26616661,26618612,26620446,26622455,26624305,26626282,26628152,26630127,26631990,26633971,26635836,26637815,26639686,26641715,26643580,26645523,26647437,26649420,26651373,26653353,26655337,26657283,26659130,26661139,26662991,26664989,26666853,26668834,26670701,26672665,26674546,26676460,26678393,26680344,26682259,26684198,26686104,26688012,26689915,26691865,26693763,26695667,26697613,26699445,26701454,26703313,26705342,26707208,26709186,26711056,26712995,26714891,26716832,26718749,26720668,26722607,26724508,26726487,26728344,26730350,26732215,26734193,26736072,26738048,26739913,26741858,26743753,26745732,26747597,26749611,26751575,26753555,26755415,26757448,26759496,26761544,26763408,26765405,26767453,26769482,26771388,26773369,26775426,26777456,26779375,26781367,26783410,26785280,26787256,26789304,26791359,26793222,26795199,26797063,26799041,26800972,26802981,26804956,26806913,26808788,26810768,26812646,26814669,26816546,26818576,26820440,26822434,26824298,26826239,26828146,26830129,26832010,26834040,26836088,26837970,26840000,26842048,26843918,26845948,26847981,26849844,26851817,26853865,26855735,26857733,26859781,26861660,26863636,26865684,26867555,26869533,26871581,26873458,26875488,26877353,26879367,26881415,26883291,26885270,26887318,26889373,26891253,26893228,26895276,26897222,26899201,26901151,26903138,26905082,26907058,26908961,26910937,26912876,26914856,26916798,26918778,26920710,26922690,26924544,26926519,26928384,26930359,26932224,26934216,26936081,26938065,26939935,26941910,26943789,26945765,26947625,26949634,26951574,26953552,26955480,26957459,26959381,26961361,26963216,26965246,26967122,26969152,26971028,26973057,26974927,26976959,26978870,26980878,26982809,26984788,26986709,26988705,26990755,26992812,26994860,26996845,26998815,27000803,27002788,27004729,27006715,27008734,27010722,27012589,27014573,27016621,27018678,27020733,27022598,27024596,27026562,27028551,27030524,27032444,27034343,27036320,27038132,27040162,27042024,27043934,27045867,27047710,27049719,27051570,27053506,27055413,27057362,27059262,27061214,27063110,27065061,27066961,27068912,27070808,27072761,27074656,27076592,27078495,27080437,27082352,27084246,27086219,27088034,27090064,27091944,27093976,27095854,27097883,27099749,27101743,27103606,27105574,27107457,27109389,27111308,27113258,27115173,27117114,27119031,27120981,27122890,27124871,27126738,27128715,27130580,27132557,27134432,27136451,27138317,27140295,27142159,27144155,27146018,27147981,27149865,27151808,27153704,27155650,27157546,27159491,27161393,27163309,27165253,27167145,27169129,27170971,27173001,27174868,27176822,27178723,27180670,27182573,27184521,27186422,27188366,27190271,27192207,27194134,27196067,27198003,27199923,27201869,27203775,27205752,27207646,27209625,27211518,27213523,27215425,27217435,27219292,27221324,27223204,27225236,27227111,27229141,27231021,27233049,27234916,27236867,27238765,27240680,27242614,27244541,27246498,27248423,27250386,27252267,27254241,27256134,27258142,27260008,27262038,27263918,27265897,27267767,27269734,27271616,27273559,27275466,27277404,27279306,27281247,27283164,27285092,27287029,27288926,27290903,27292804,27294786,27296754,27298731,27300671,27302617,27304530,27306507,27308438,27310396,27312320,27314283,27316201,27318158,27319986,27321991,27324039,27325904,27327881,27329895,27331841,27333717,27335697,27337650,27339637,27341587,27343550,27345472,27347418,27349248,27351256,27353113,27355063,27356968,27358852,27360838,27362667,27364612,27366510,27368413,27370359,27372352,27374350,27376314,27378187,27380169,27382155,27384101,27386018,27387979,27389958,27391848,27393782,27395692,27397597,27399543,27401499,27403414,27405401,27407265,27409217,27411124,27413019,27414979,27416905,27418851,27420771,27422735,27424647,27426624,27428527,27430504,27432478,27434437,27436346,27438323,27440263,27442224,27444071,27446080,27448044,27450021,27451905,27453887,27455846,27457829,27459679,27461696,27463558,27465492,27467397,27469279,27471261,27473167,27475150,27477003,27478979,27480841,27482776,27484689,27486609,27488546,27490445,27492431,27494259,27496236,27498104,27500134,27502126,27504088,27506086,27507947,27509918,27511780,27513719,27515615,27517601,27519481,27521509,27523557,27525418,27527390,27529269,27531302,27533350,27535398,27537438,27539357,27541311,27543214,27545197,27547245,27549107,27551085,27553074,27555033,27556965,27558915,27560908,27562769,27564741,27566789,27568824,27570748,27572741,27574789,27576651,27578594,27580500,27582485,27584335,27586310,27588174,27590166,27592028,27593955,27595871,27597794,27599731,27601649,27603599,27605596,27607644,27609669,27611571,27613518,27615414,27617398,27619278,27621306,27623178,27625207,27627218,27629151,27631083,27633017,27634946,27636879,27638884,27640932,27642941,27644878,27646830,27648735,27650674,27652580,27654561,27656423,27658395,27660266,27662316,27664184,27666179,27668059,27670088,27672076,27674039,27675993,27677910,27679899,27681753,27683784,27685832,27687722,27689697,27691568,27693539,27695401,27697337,27699245,27701207,27703100,27705077,27707022,27709002,27710898,27712908,27714872,27716849,27718789,27720735,27722640,27724602,27726521,27728484,27730480,27732347,27734319,27736367,27738243,27740205,27742087,27744062,27746072,27748018,27750011,27751873,27753835,27755702,27757674,27759545,27761483,27763379,27765324,27767234,27769154,27771091,27773087,27774955,27776926,27778797,27780768,27782630,27784603,27786465,27788429,27790301,27792240,27794138,27796042,27797988,27799946,27801853,27803835,27805784,27807763,27809815,27811724,27813733,27815786,27817805,27819736,27821737,27823758,27825691,27827693,27829741,27831611,27833641,27835661,27837594,27839598,27841464,27843442,27845307,27847286,27849280,27851240,27853236,27855284,27857148,27859146,27861194,27863158,27865136,27867188,27869133,27871112,27873164,27875028,27877017,27879030,27880970,27882965,27884838,27886817,27888844,27890746,27892696,27894597,27896548,27898443,27900376,27902282,27904177,27906135,27907960,27909965,27911832,27913790,27915686,27917602,27919540,27921503,27923400,27925380,27927269,27929300,27931308,27933246,27935195,27937115,27939079,27940971,27942889,27944821,27946816,27948761,27950741,27952793,27954660,27956673,27958535,27960507,27962539,27964434,27966413,27968461,27970323,27972301,27974349,27976212,27978193,27980241,27982113,27984088,27986125,27988019,27989999,27991099,27992231,27993376,27994525,27995496,27996472,27998390,28000078,28001932,28003716,28005582,28007172,28008376,28009695,28011670,28013718,28015766,28016813,28016847,28016881,28016915,28016949,28016983,28017017,28017051,28017238,28018131,28019100,28020171,28021274,28022342,28023288,28024166,28024895,28025841,28026790,28027788,28028705,28029765,28030653,28031634,28032762,28033738,28034807,28035831,28036758,28037643,28038494,28039342,28040344,28041461,28042371,28043294,28044129,28045030,28045999,28046907,28047820,28048830,28049700,28050451,28051322,28052396,28053602,28054560,28055511,28056858,28058142,28059411,28060637,28061927,28063194,28064670,28065964,28067475,28068869,28070275,28071283,28072165,28073227,28074251,28075157,28076128,28077179,28078190,28079091,28080235,28081222,28082359,28083386,28084427,28085515,28086609,28087643,28088719,28089904,28091095,28092200,28093445,28094775,28096055,28097148,28098061,28098408,28099185,28100091,28101209,28102290,28103363,28104348,28104870,28106122,28107667,28109188,28110505,28111967,28113281,28114678,28116011,28117084,28118229,28119418,28120331,28122110,28123403,28124752,28126034,28127240,28128435,28129657,28130804,28132038,28133517,28134964,28136345,28137640,28138948,28140175,28141486,28142956,28144491,28146147,28147717,28149294,28150905,28152440,28154003,28155599,28157110,28158640,28160133,28161593,28162982,28164356,28165716,28167311,28169365,28171413,28173461,28175509,28177557,28179605,28181660,28183708,28185756,28187804,28189852,28191900,28193948,28195996,28198044,28200092,28202140,28204188,28206236,28208284,28210332,28212380,28214428,28216476,28218524,28220572,28222620,28224668,28226716,28228764,28230812,28232860,28234908,28236956,28239004,28241052,28243100,28245148,28247196,28249244,28251292,28253340,28255388,28257436,28259484,28261532,28263580,28265628,28267676,28269724,28271772,28273820,28275868,28277916,28279964,28282012,28284060,28286108,28288156,28290204,28292252,28294300,28296348,28298396,28300444,28302492,28304540,28306588,28308636,28310684,28312732,28314780,28316828,28318876,28320924,28322972,28325020,28327068,28329116,28331164,28333212,28335260,28337308,28339356,28341404,28343452,28345500,28347548,28349596,28351068,28352425,28353865,28355245,28356596,28357985,28359432,28360897,28362392,28364051,28365708,28367228,28368678,28370103,28371392,28372946,28374613,28376336,28378092,28379737,28381383,28382899,28384331,28385902,28387547,28389192,28390852,28392501,28394082,28395632,28397065,28398656,28400634,28402689,28404744,28406735,28408783,28410792,28412814,28414862,28416880,28418901,28420949,28422943,28424984,28427032,28429054,28431102,28433150,28435188,28437243,28439291,28441320,28443278,28445204,28447252,28449295,28451210,28452737,28454324,28455936,28457497,28459069,28460656,28461441,28461680,28461886,28462116,28462330,28462602,28463297,28463539,28463752,28463974,28464193,28464412,28465579,28466817,28468152,28469398,28470560,28471683,28472915,28474083,28475352,28476543,28477726,28478922,28480032,28481143,28481601,28481760,28483430,28484759,28486631,28488680,28490714,28492762,28494208,28495086,28497134,28499182,28501230,28503278,28505326,28507374,28508821,28509702,28511750,28513798,28515846,28517894,28519942,28521990,28524038,28525487,28526362,28528413,28530461,28532509,28534557,28536605,28538653,28540070,28541017,28543065,28545113,28547161,28549209,28551257,28553305,28555353,28557401,28559449,28561497,28563212,28564369,28565388,28565469,28565893,28567910,28569958,28572006,28574054,28576102,28578150,28580198,28582246,28584294,28586342,28588393,28590441,28592489,28594537,28596585,28598624,28600672,28602720,28604768,28606816,28608873,28610929,28612977,28615025,28617073,28619121,28621168,28623095,28625143,28627191,28629239,28631287,28633335,28635390,28637438,28639486,28641542,28643590,28645638,28647686,28649734,28651782,28653830,28655878,28657926,28659974,28662022,28664067,28666115,28668163,28670211,28672259,28674291,28676339,28678387,28680435,28682483,28684531,28686564,28688612,28690660,28692708,28694721,28696757,28698805,28700829,28702877,28704925,28706957,28709005,28711030,28713027,28715075,28717109,28719166,28721201,28723249,28725297,28727331,28729379,28731427,28733475,28735529,28737577,28739633,28741689,28743737,28745640,28746549,28748603,28750656,28752704,28754152,28755027,28756974,28759028,28761076,28763074,28765122,28767170,28769218,28771266,28773314,28775362,28777418,28779475,28781523,28783571,28785619,28787667,28789715,28791763,28793798,28795846,28797899,28799947,28801995,28804043,28806092,28808107,28810155,28812166,28814214,28816262,28818319,28820332,28822380,28824316,28826364,28828400,28830448,28832481,28834529,28836551,28838541,28840589,28842622,28844670,28846702,28848750,28850662,28852719,28854754,28856802,28858837,28860885,28862818,28864866,28866917,28868965,28871017,28873073,28875074,28877076,28879124,28881140,28883188,28885229,28887265,28889309,28891357,28893414,28895462,28897510,28899558,28901606,28903661,28905709,28907741,28909789,28911812,28913846,28915894,28917942,28919990,28922007,28924055,28926103,28928151,28930201,28932249,28934297,28936345,28938393,28940441,28942489,28944545,28946579,28948616,28950664,28952712,28954760,28956808,28958856,28960872,28962892,28964899,28966937,28968978,28971026,28973069,28975117,28977141,28979138,28981186,28983211,28985259,28987284,28989341,28991266,28993314,28995359,28997407,28999454,29001502,29003430,29005478,29007524,29009572,29011620,29013668,29015647,29017637,29019685,29021713,29023761,29025777,29027808,29029760,29031808,29033838,29035886,29037919,29039967,29041877,29043933,29045977,29048034,29050078,29052135,29054051,29055475,29055610,29055745,29056625,29058673,29060407,29060574,29061452,29063497,29064940,29066080,29068056,29070036,29072069,29074082,29076136,29078150,29078408,29079282,29081330,29082707,29083643,29085677,29087403,29087539,29088419,29090451,29091789,29091920,29092057,29092484,29092768,29093642,29095690,29096355,29096489,29096626,29097067,29097248,29097702,29098716,29099615,29100479,29101384,29102360,29103287,29104156,29104961,29105885,29106776,29107674,29108479,29109502,29110622,29111530,29112471,29113481,29114273,29115355,29116465,29117557,29118523,29119666,29120584,29121432,29122611,29123694,29124791,29125896,29126529,29127161,29127546,29128374,29129612,29130567,29131569,29132020,29132365,29132711,29133137,29133519,29133990,29134525,29135151,29135609,29137097,29138342,29139311,29140279,29141575,29143024,29144599,29146096,29147435,29148819,29150094,29151659,29153087,29154310,29155418,29156657,29158150,29159560,29161143,29162678,29164044,29165294,29166478,29167826,29169244,29170714,29172258,29173720,29174857,29176064,29177520,29178941,29180503,29182090,29183400,29184560,29185746,29187274,29188699,29190269,29191806,29193034,29194152,29195373,29196879,29198368,29199921,29201386,29202682,29203916,29205309,29206626,29208003,29208651,29209208,29209756,29210453,29211053,29211686,29212289,29213228,29214181,29215046,29215761,29216568,29217494,29218327,29219080,29219898,29220832,29221656,29222321,29222781,29223535,29224111,29225003,29225819,29226540,29227367,29228045,29228929,29229447,29230157,29230767,29231212,29231944,29232684,29233397,29234138,29234897,29235561,29236161,29236771,29237369,29238000,29238519,29239037,29239709,29240159,29240581,29241158,29241722,29242370,29243417,29243866,29244305,29245805,29246955,29248257,29249691,29251276,29252647,29253858,29255132,29256281,29257527,29258588,29259980,29261227,29262440,29263887,29265042,29266191,29267314,29268403,29269832,29270698,29272254,29273239,29274116,29275022,29276580,29277538,29278485,29279330,29280308,29281210,29282424,29283283,29284382,29285396,29286456,29287235,29288108,29289081,29289913,29290879,29291918,29292845,29293829,29294963,29296036,29297004,29298114,29298968,29299637,29300707,29301670,29302779,29303888,29304589,29305566,29306635,29307206,29307792,29308273,29308752,29309517,29310171,29310784,29311723,29312448,29313091,29313742,29314411,29315238,29316011,29317094,29318024,29319158,29319991,29320497,29321376,29322215,29323003,29323860,29324497,29325253,29326021,29326391,29326825,29327387,29328179,29328893,29329834,29330638,29331747,29332363,29333232,29334050,29334863,29335769,29336649,29337485,29338385,29339249,29340126,29340969,29341809,29342771,29343481,29344327,29345171,29346074,29346867,29347836,29348493,29349316,29350483,29351287,29352129,29352649,29353470,29354383,29355234,29356059,29356893,29357614,29358399,29359257,29360118,29360973,29361804,29362620,29363153,29363901,29364490,29365226,29365780,29366630,29366986,29367654,29368385,29369097,29369675,29370699,29371101,29372447,29373155,29373923,29375517,29377268,29379087,29380857,29382871,29384750,29386798,29388846,29390901,29392645,29394014,29395712,29397497,29399546,29401589,29403465,29405271,29407319,29409198,29410953,29413003,29415051,29417099,29419062,29420891,29422834,29424757,29426532,29428561,29430566,29432366,29434275,29435576,29436730,29437319,29437963,29438455,29440286,29442342,29444280,29445840,29447232,29448479,29449625,29450947,29452961,29454775,29456015,29457287,29458392,29459516,29461200,29462668,29464051,29465085,29465589,29465731,29466181,29468213,29470261,29472309,29474357,29476405,29478453,29480501,29482549,29484597,29486645,29488693,29490750,29492798,29494834,29496756,29498127,29500175,29502223,29504271,29506319,29508367,29510415,29512471,29514528,29515125,29515241,29517262,29519293,29521341,29523398,29525382,29526722,29528645,29530647,29532681,29534664,29536664,29538712,29540760,29542808,29544856,29546884,29548744,29550792,29552826,29554757,29556814,29558829,29560878,29562926,29564962,29567013,29569066,29571099,29572893,29574356,29576094,29577982,29580030,29582078,29584126,29586174,29588222,29590270,29592318,29594366,29596236,29598285,29599386,29600369,29601562,29602844,29604089,29605347,29607006,29608477,29609458,29610944,29612108,29613439,29614489,29615595,29616666,29617657,29618816,29620199,29621914,29623800,29625709,29627606,29629509,29631394,29632904,29634639,29636339,29637823,29639594,29641092,29642246,29643219,29644337,29645529,29647169,29648337,29649364,29650402,29651526,29652765,29653788,29654833,29656143,29657333,29658680,29659726,29661660,29663702,29665750,29667730,29669784,29671755,29673803,29675790,29677838,29679871,29681846,29683889,29685900,29687948,29689980,29691965,29694013,29696046,29698014,29700050,29702091,29704139,29706171,29708150,29710198,29712246,29714219,29716267,29718324,29720294,29722342,29724390,29726362,29728410,29730448,29732460,29734496,29736544,29738518,29740561,29742559,29744607,29746634,29748614,29750662,29752626,29754677,29756725,29758773,29760830,29762793,29764841,29766898,29768946,29770994,29773042,29775098,29777146,29779194,29781209,29783259,29785307,29787355,29789403,29791451,29793499,29795547,29797595,29799643,29801691,29803593,29805641,29807689,29809737,29811785,29813833,29815881,29817929,29819977,29821876,29823924,29825972,29828020,29830068,29832116,29834164,29836212,29838106,29840154,29842202,29844250,29846298,29848346,29850394,29852297,29854345,29856393,29858441,29860489,29862537,29864585,29866604,29868561,29870609,29872657,29874714,29876762,29878810,29880858,29882906,29884803,29886851,29888899,29890947,29892995,29895043,29897091,29899139,29901187,29903235,29905162,29906606,29908341,29909562,29911272,29912699,29914335,29916072,29917845,29919551,29921215,29922657,29924173,29925786,29927421,29929110,29930883,29932604,29934310,29935729,29937766,29939529,29940638,29942276,29943521,29944936,29946066,29947172,29948819,29950487,29952225,29953907,29955594,29957228,29959123,29961059,29963110,29965158,29966452,29967601,29968747,29970005,29971175,29972297,29973501,29974443,29975720,29977365,29978790,29980320,29981639,29983114,29984463,29985929,29987454,29988989,29990767,29992396,29994039,29995628,29997123,29998705,30000381,30002192,30004123,30005891,30007647,30009541,30011348,30013217,30014922,30016724,30018540,30020297,30021515,30023326,30025201,30026695,30027722,30029187,30030773,30032456,30033644,30035233,30036887,30038323,30039823,30041287,30043142,30044708,30046374,30048199,30049589,30050137,30050974,30052444,30053637,30054895,30056225,30057569,30059427,30061061,30062527,30064095,30065631,30067000,30068409,30070156,30071887,30073848,30075803,30077244,30078962,30080859,30082640,30084452,30086242,30088082,30089892,30091599,30093385,30094924,30096731,30098396,30100241,30101933,30103357,30104783,30106204,30107742,30109234,30110659,30111845,30113281,30114815,30116495,30118150,30119675,30121269,30122843,30123967,30125534,30127199,30128780,30130305,30131787,30133321,30134845,30136361,30137895,30139415,30140896,30141736,30142505,30143121,30143793,30144469,30145114,30145770,30146395,30147089,30147723,30148339,30148992,30149761,30150377,30151091,30151783,30152537,30153211,30153962,30154748,30155522,30156068,30156667,30157201,30157831,30158452,30158704,30159154,30159630,30160152,30162171,30164202,30166029,30167760,30169497,30171200,30172872,30174549,30176227,30177944,30179644,30181333,30183028,30184743,30186428,30188352,30190326,30192118,30193855,30195599,30197223,30198878,30200602,30202383,30204084,30205840,30207081,30208111,30209134,30211086,30212879,30214732,30216396,30218220,30219850,30221338,30222822,30224310,30225789,30227252,30228733,30230232,30231725,30232718,30233336,30233888,30234500,30235153,30235700,30236259,30236867,30237473,30238033,30238661,30239240,30239878,30240382,30240846,30241113,30241620,30242183,30242563,30242906,30243427,30243949,30244304,30244794,30245073,30246075,30248038,30249900,30251557,30253232,30254888,30256566,30258241,30259905,30261593,30263275,30264968,30266649,30268436,30270421,30272027,30273797,30275527,30277200,30278944,30280633,30282330,30283146,30283899,30284679,30286573,30288400,30290184,30291751,30293534,30295305,30296839,30298364,30299847,30301368,30302857,30304341,30305840,30307347,30308847,30310333,30311844,30313339,30314825,30316327,30317828,30319332,30320838,30322345,30323849,30325321,30326665,30327258,30327511,30328077,30328674,30329369,30329877,30330447,30331076,30331665,30331931,30332481,30332936,30333368,30333812,30334347,30334659,30335063,30335709,30336292,30336910,30337516,30338182,30338800,30339478,30340105,30340600,30341312,30341740,30342243,30342485,30343098,30343480,30343859,30344148,30344630,30345114,30345496,30345983,30346567,30347040,30347503,30348014,30348550,30349121,30349741,30350092,30350531,30351021,30351410,30352018,30352466,30352709,30353093,30353632,30354029,30354529,30354956,30355226,30355666,30356730,30358722,30360741,30362762,30364759,30366790,30368667,30370363,30372060,30373750,30375470,30377165,30378869,30380586,30382300,30383961,30385653,30387332,30388996,30390666,30392352,30394051,30395776,30397456,30399162,30400861,30402565,30404251,30405928,30407625,30409313,30410994,30412681,30414514,30416562,30418610,30420570,30422228,30423935,30425649,30427372,30429032,30430751,30432438,30434121,30435798,30437382,30439136,30440870,30442565,30444242,30445961,30447651,30449284,30451042,30452765,30454439,30455785,30456742,30457843,30458858,30460268,30462031,30463657,30465382,30467050,30468742,30470065,30471163,30472178,30473962,30475798,30477619,30479471,30481275,30482734,30484307,30485791,30487306,30488836,30490329,30491787,30493303,30494803,30496288,30497782,30498301,30498890,30499295,30499757,30500168,30500589,30501120,30501497,30502160,30502809,30503356,30503916,30504442,30505021,30505547,30505755,30506058,30506186,30506505,30507000,30507660,30508157,30508687,30509134,30509642,30510004,30510547,30510993,30511148,30511483,30512712,30514748,30516748,30518510,30520229,30521943,30523653,30525339,30527032,30528721,30530397,30532083,30533800,30535531,30537202,30538887,30540773,30542821,30544537,30546191,30547964,30549678,30551425,30553094,30554780,30556571,30558336,30560031,30561516,30562440,30563773,30565061,30566700,30568443,30570219,30571737,30573289,30574779,30576275,30577772,30579253,30580742,30582236,30583723,30585185,30586690,30587438,30587799,30588214,30588518,30589063,30589633,30589887,30590123,30590463,30590828,30590986,30591392,30591702,30592181,30592319,30592454,30592811,30593035,30593349,30593638,30594117,30594504,30594775,30595270,30595888,30596433,30596859,30597154,30597705,30598239,30599876,30601874,30603930,30605656,30607355,30609046,30610733,30612414,30614108,30615788,30617451,30619172,30620860,30622576,30624300,30626006,30627966,30630022,30631822,30633567,30635353,30637122,30638868,30640496,30642380,30644148,30645904,30647747,30649595,30650608,30651388,30652498,30654065,30655631,30657249,30658916,30660710,30662279,30663785,30665277,30666769,30668273,30669751,30671000,30671448,30671796,30672137,30672517,30673012,30673162,30673559,30674035,30674448,30674837,30675091,30675567,30675853,30676105,30676404,30676887,30677903,30679863,30681687,30683383,30685084,30686754,30688422,30690122,30691799,30693530,30695498,30697305,30699057,30700694,30702406,30704156,30705984,30707786,30708686,30710146,30711390,30713105,30714751,30716306,30717832,30719306,30720798,30722287,30723767,30725274,30726780,30728299,30729822,30730240,30730810,30731389,30732007,30732517,30733073,30733678,30734222,30734844,30735289,30735884,30736526,30737219,30737740,30738324,30738871,30739458,30739972,30740583,30741057,30741509,30741919,30742503,30742928,30743301,30743626,30744196,30745037,30747022,30749049,30750879,30752587,30754265,30755938,30757600,30759297,30761005,30762695,30764409,30766085,30767770,30769423,30771218,30773266,30775105,30776866,30778565,30780255,30782032,30783799,30785609,30787358,30789112,30790549,30791401,30792214,30793218,30794462,30795749,30796926,30798317,30799722,30801390,30802970,30804596,30806172,30807612,30809115,30810606,30812109,30813607,30815088,30816580,30818062,30819550,30821064,30822598,30824067,30825551,30827052,30828597,30829847,30830293,30830672,30831072,30831383,30831636,30832087,30832540,30832888,30833133,30833673,30834152,30834624,30835046,30835402,30835764,30836159,30836662,30837028,30837444,30837748,30837869,30838067,30838484,30838709,30838956,30839071,30839179,30839526,30839922,30840227,30840573,30840819,30841252,30841432,30841840,30842207,30842571,30842910,30843206,30843644,30844016,30844511,30844675,30845046,30845412,30845746,30846152,30846539,30846834,30847266,30847684,30848684,30850672,30852611,30854575,30856580,30858390,30860058,30861713,30863386,30865064,30866750,30868442,30870117,30871786,30873518,30875208,30876879,30878553,30880229,30881891,30883560,30885227,30886898,30888592,30890241,30891908,30893590,30895286,30897066,30899114,30901162,30902856,30904431,30906069,30907681,30909338,30910999,30912803,30914475,30916175,30917849,30919540,30921151,30922783,30924461,30926189,30927825,30929550,30930766,30931497,30932375,30933748,30935413,30936970,30938570,30939922,30941655,30943496,30945303,30947141,30948825,30950383,30951822,30953314,30954767,30956251,30957744,30959249,30960730,30962231,30963720,30965209,30966695,30968187,30969680,30971147,30972623,30973997,30974490,30975084,30975649,30976288,30976831,30977409,30977789,30978296,30978571,30978895,30979388,30979653,30980084,30980533,30981146,30981585,30981951,30982329,30982905,30983446,30984130,30984757,30985341,30985640,30986197,30986683,30987188,30987775,30988444,30989040,30989691,30990232,30990436,30990527,30991093,30991732,30992379,30992907,30993538,30994150,30994739,30995368,30995993,30996547,30997154,30997737,30998289,30998873,30999482,30999956,31001652,31003646,31005604,31007590,31009509,31011204,31012878,31014572,31016228,31017908,31019605,31021290,31022972,31024673,31026380,31028091,31029805,31031526,31033219,31034935,31036636,31038334,31040038,31041722,31043431,31045161,31047086,31049134,31051159,31052891,31054626,31056326,31058090,31059886,31061649,31063385,31065158,31066975,31068769,31070555,31072337,31074100,31075876,31077573,31079380,31081173,31082188,31083070,31084095,31085016,31086092,31087067,31088252,31089508,31090778,31091788,31092781,31093739,31095093,31096914,31098625,31100452,31102300,31103878,31105554,31107175,31108671,31110165,31111678,31113190,31114680,31116186,31117689,31119177,31120669,31122172,31123684,31125175,31126669,31128139,31129625,31131088,31132566,31134045,31135546,31136776,31137365,31138013,31138678,31139249,31139877,31140437,31140966,31141640,31142246,31142834,31143460,31143990,31144539,31145065,31145662,31146144,31146531,31147036,31147620,31148083,31148756,31149244,31149854,31150440,31150823,31151279,31151875,31152311,31152871,31153447,31153785,31154359,31154869,31155383,31155928,31156429,31156824,31157323,31157840,31158411,31158882,31159464,31159957,31160280,31160727,31161206,31161595,31161877,31162375,31162710,31162990,31163299,31163671,31164083,31164563,31165053,31165444,31165716,31166284,31166739,31167010,31167361,31167727,31168212,31168582,31168885,31169189,31169786,31170328,31171346,31173394,31175442,31177496,31179552,31181600,31183648,31185388,31187106,31188837,31190569,31192308,31194037,31195747,31197466,31199199,31200918,31202629,31204332,31206079,31207796,31209544,31211293,31213006,31214734,31216460,31218192,31219923,31221641,31223374,31225113,31226843,31228577,31230314,31232059,31233780,31235516,31237223,31238965,31241004,31243052,31245100,31247148,31249099,31250832,31252640,31254491,31256350,31258200,31260035,31261812,31263620,31265377,31267135,31268948,31270770,31272552,31274382,31276182,31277966,31279735,31281577,31283379,31285206,31287064,31288911,31290738,31292608,31294440,31296259,31298118,31299941,31301702,31303514,31304433,31305283,31306148,31306909,31307724,31309056,31310319,31311889,31312920,31314167,31315711,31317075,31318104,31318976,31319796,31321056,31322253,31323796,31325035,31326827,31328648,31330430,31332062,31333738,31335379,31336972,31338557,31340154,31341721,31343274,31344772,31346252,31347781,31349308,31350860,31352390,31353878,31355409,31356902,31358412,31359922,31361441,31362967,31364504,31366034,31367499,31368991,31370509,31371997,31373529,31375046,31376545,31378031,31379522,31381041,31382530,31384009,31385484,31386995,31388504,31389111,31389776,31390369,31390879,31391476,31391946,31392339,31392996,31393758,31394372,31395001,31395635,31396317,31397018,31397566,31398186,31398819,31399494,31400200,31400862,31401558,31402139,31402811,31403552,31404255,31404839,31405516,31406164,31406783,31407462,31407979,31408144,31408654,31409253,31409893,31410571,31411009,31411685,31412385,31413044,31413532,31413957,31414564,31415022,31415572,31416113,31416612,31416855,31417181,31417377,31417897,31418464,31418718,31418841,31419027,31419706,31419907,31420506,31421046,31421634,31422266,31422831,31423403,31423997,31424577,31425101,31425757,31426351,31426945,31427542,31428107,31428632,31429099,31429675,31430146,31430650,31431153,31431875,31432451,31433017,31433533,31434108,31434608,31435155,31435734,31436047,31436620,31437000,31437534,31438134,31438709,31439273,31439762,31440465,31441062,31441661,31443479,31445510,31447554,31449559,31451557,31453505,31455474,31457526,31459326,31461027,31462690,31464336,31466012,31467725,31469421,31471124,31472808,31474530,31476249,31477953,31479654,31481334,31483047,31484742,31486446,31488130,31489831,31491514,31493225,31494945,31496646,31498333,31500049,31501722,31503438,31505148,31506846,31508532,31510231,31511944,31513632,31515342,31517042,31518729,31520427,31522104,31523807,31525490,31527150,31528799,31530847,31532895,31534943,31536991,31538835,31540564,31542247,31544025,31545729,31547469,31549257,31550956,31552606,31554293,31555998,31557708,31559442,31561218,31562918,31564697,31566520,31568239,31570007,31571706,31573501,31575215,31576928,31578690,31580423,31582189,31583951,31585676,31587459,31589117,31590853,31591829,31592876,31593827,31594873,31595975,31597023,31597972,31598945,31599991,31600819,31601439,31602139,31602826,31603561,31604411,31605291,31606240,31607171,31608050,31608973,31609954,31610828,31611665,31612410,31613240,31613988,31614931,31615643,31616392,31616985,31617280,31618111,31618806,31619540,31620712,31622374,31623128,31624864,31626589,31628251,31629983,31631799,31633644,31635484,31637170,31638875,31640467,31642059,31643666,31645254,31646740,31648264,31649788,31651301,31652782,31654276,31655801,31657301,31658793,31660335,31661863,31663341,31664827,31666320,31667826,31669322,31670834,31672328,31673849,31675343,31676855,31678356,31679850,31681353,31682866,31684379,31685903,31687420,31688942,31690468,31691995,31693481,31694969,31696469,31697986,31699504,31700994,31702525,31704045,31705523,31707032,31708548,31710059,31711551,31713059,31714573,31716105,31717596,31719115,31720027,31720706,31721384,31722097,31722761,31723570,31724225,31724893,31725420,31726090,31726840,31727621,31728301,31728985,31729703,31730101,31730641,31731339,31732002,31732755,31733463,31734116,31734871,31735518,31736185,31736606,31737095,31737820,31738497,31739084,31739613,31740375,31741092,31741793,31742507,31743180,31743681,31744378,31744955,31745634,31746300,31746912,31747569,31748170,31748661,31749024,31749648,31750285,31750635,31751360,31751926,31752594,31753308,31753862,31754483,31754960,31755598,31756342,31756992,31757613,31758168,31758826,31759457,31760113,31760662,31761314,31761857,31762496,31762924,31763473,31763963,31764597,31765236,31765931,31766586,31767279,31767906,31768541,31769162,31769842,31770567,31771312,31771993,31772783,31773438,31774113,31774882,31775623,31776339,31776955,31777684,31778380,31779120,31779816,31780477,31781208,31781815,31782493,31783141,31783718,31784268,31784516,31785163,31785757,31786316,31786958,31787561,31788151,31788693,31789210,31789927,31790313,31790900,31791280,31791926,31792480,31793193,31793810,31794335,31795071,31795774,31796411,31797043,31797657,31798317,31798924,31799565,31799995,31800750,31801214,31801739,31802369,31803137,31803696,31804328,31805017,31805508,31805959,31806430,31806795,31807354,31808030,31808680,31809361,31810034,31810625,31812248,31814234,31816225,31818188,31820161,31822127,31824123,31826145,31828111,31830133,31832095,31834121,31836155,31838066,31839796,31841520,31843235,31844949,31846645,31848328,31850017,31851732,31853431,31855115,31856789,31858462,31860181,31861903,31863616,31865306,31867021,31868722,31870407,31872092,31873794,31875470,31877176,31878855,31880554,31882287,31884014,31885699,31887395,31889083,31890787,31892511,31894242,31895988,31897734,31899456,31901184,31902930,31904662,31906360,31908059,31909748,31911441,31913138,31914812,31916501,31918208,31919908,31921594,31923295,31925002,31926725,31928405,31930076,31931775,31933532,31935262,31936991,31938730,31940457,31942187,31944014,31946062,31948110,31950158,31952206,31954254,31956302,31957841,31959456,31961163,31962926,31964673,31966400,31968159,31969869,31971641,31973445,31975127,31976838,31978534,31980209,31981944,31983668,31985366,31987166,31988882,31990542,31992150,31993863,31995616,31997354,31999096,32000887,32002559,32004284,32005974,32007679,32009420,32011170,32012774,32014539,32016338,32018120,32019832,32021552,32023190,32024884,32026646,32028392,32030178,32031692,32032715,32033748,32034738,32035716,32036788,32037774,32038735,32039707,32040691,32041521,32042722,32044338,32045716,32047307,32048939,32050538,32052113,32053668,32055293,32056921,32058463,32060269,32061669,32063143,32064743,32066059,32067332,32068577,32070176,32071261,32072664,32074247,32075899,32077102,32078501,32079963,32081174,32082481,32083727,32085205,32086696,32088264,32089741,32091244,32092927,32094574,32096186,32097651,32098980,32100523,32102036,32103625,32105232,32106705,32108117,32109689,32111290,32112898,32114330,32116217,32118023,32119894,32121799,32123715,32125597,32127453,32129243,32131006,32132874,32134670,32136528,32137994,32139478,32140951,32142446,32143936,32145432,32146923,32148401,32149898,32151392,32152359,32152896,32153311,32153850,32154354,32154707,32155243,32155737,32156148,32156516,32156837,32157389,32157836,32158378,32158808,32159324,32159877,32160095,32160513,32160835,32161264,32161639,32162030,32162368,32162797,32163038,32163323,32163815,32163984,32164377,32164739,32165257,32166778,32168724,32170751,32172490,32174183,32175889,32177594,32179299,32181017,32182704,32184405,32186097,32187794,32189463,32191141,32192812,32194481,32196153,32198201,32200194,32201912,32203666,32205402,32207164,32208934,32210662,32212424,32214199,32215958,32217678,32219361,32220804,32221610,32222433,32223462,32225018,32226401,32227777,32228996,32230591,32232251,32233993,32235517,32236968,32238500,32239997,32241464,32242921,32244422,32245924,32247421,32248906,32250318,32250860,32251399,32251854,32252341,32252711,32253408,32253955,32254535,32255062,32255654,32256168,32256623,32257054,32257425,32257707,32258190,32258619,32258993,32259360,32259754,32260106,32260563,32261105,32261470,32261829,32262339,32262642,32263278,32265300,32267333,32269129,32270824,32272516,32274232,32275966,32277687,32279421,32281135,32282825,32284530,32286222,32287936,32289615,32291595,32293626,32295199,32296987,32298836,32300689,32302468,32304276,32306048,32307880,32309656,32311425,32313198,32314481,32315147,32316104,32317710,32319331,32320919,32322313,32323957,32325674,32327379,32328921,32330532,32332074,32333581,32335059,32336558,32338030,32339521,32341013,32342507,32343994,32345448,32346935,32348405,32349902,32351357,32352823,32354297,32355799,32357276,32358749,32360240,32361701,32363160,32364634,32366110,32367611,32369054,32370534,32372022,32373510,32374993,32376472,32377964,32379468,32380963,32382445,32383930,32385444,32386031,32386697,32387270,32387928,32388634,32389312,32389981,32390534,32391136,32391688,32392292,32393004,32393583,32394175,32394758,32395399,32395969,32396585,32397125,32397703,32398375,32398995,32399572,32400165,32400755,32401405,32401974,32402553,32403173,32403756,32404200,32404697,32405182,32405864,32406476,32407005,32407566,32408098,32408580,32409150,32409676,32410258,32410820,32411488,32412046,32412425,32412752,32412951,32413364,32413805,32414059,32414572,32414986,32415365,32415852,32416415,32417092,32417638,32417866,32418027,32418388,32418636,32418802,32419007,32419468,32419851,32420390,32420853,32421329,32421874,32422517,32423023,32423555,32424126,32424756,32425350,32425849,32426358,32426777,32427266,32427900,32428426,32428917,32429494,32429927,32430184,32430772,32431228,32431721,32432181,32432468,32432679,32433147,32433738,32434390,32434911,32435468,32435852,32436337,32436978,32437596,32438083,32438606,32439288,32439902,32440493,32441032,32441489,32442117,32443390,32445394,32447442,32449419,32451390,32453373,32455326,32457274,32459252,32461296,32463040,32464756,32466474,32468187,32469887,32471596,32473303,32475007,32476689,32478384,32480073,32481775,32483439,32485156,32486860,32488575,32490256,32491942,32493619,32495325,32496999,32498633,32500302,32501950,32503640,32505319,32507002,32508693,32510371,32512048,32513724,32515387,32517076,32518761,32520456,32522126,32523812,32525479,32527171,32528851,32530546,32532233,32533923,32535580,32537229,32538896,32540677,32542725,32544773,32546821,32548869,32550712,32552474,32554152,32555868,32557584,32559286,32560964,32562751,32564506,32566332,32568068,32569801,32571486,32573200,32574893,32576505,32578214,32579902,32581598,32583341,32585065,32586803,32588523,32590248,32592027,32593700,32595396,32597034,32598728,32600435,32602214,32603838,32605456,32606485,32607418,32608283,32609160,32609984,32610916,32611821,32612697,32613563,32614584,32615824,32616900,32617847,32618939,32620030,32621446,32622635,32623832,32624929,32626137,32627504,32628761,32630004,32631276,32632832,32634221,32635712,32636714,32637932,32639183,32640292,32641065,32641764,32642743,32643351,32643700,32644362,32645415,32646471,32647665,32648674,32649865,32650779,32651376,32651892,32652909,32654066,32655617,32657260,32659102,32660971,32662817,32664738,32666685,32668601,32670529,32672427,32674054,32675608,32677088,32678578,32680083,32681586,32683072,32684567,32686019,32687509,32688998,32690485,32691997,32693219,32693693,32693958,32694381,32694923,32695423,32695787,32696325,32696952,32697506,32697650,32697919,32698149,32698448,32698793,32699124,32699596,32700070,32700491,32700963,32701279,32701594,32701985,32702505,32702838,32703220,32703588,32703930,32704278,32704719,32705009,32705359,32705759,32706169,32706498,32707119,32707770,32708523,32710502,32712490,32714523,32716348,32718056,32719725,32721403,32723097,32724789,32726489,32728194,32729877,32731546,32733259,32734964,32736675,32738357,32740063,32741767,32743609,32745657,32747499,32749218,32750913,32752615,32754368,32756184,32757968,32759692,32761420,32763212,32764978,32766715,32768481,32769845,32770549,32771402,32773011,32774719,32775994,32776592,32777446,32778587,32780288,32782121,32783889,32785457,32787081,32788582,32790068,32791576,32793065,32794581,32796079,32797387,32797958,32798565,32799158,32799742,32800168,32800730,32801265,32801665,32802097,32802601,32803012,32803381,32803678,32804029,32804417,32804906,32805374,32805625,32806059,32806631,32806798,32807128,32807768,32808388,32810337,32812353,32814060,32815764,32817468,32819164,32820877,32822563,32824224,32825910,32827604,32829304,32830990,32833032,32834844,32836625,32838467,32840215,32841954,32843669,32845407,32847177,32849014,32850002,32850789,32851940,32853540,32855062,32856645,32858037,32859642,32861318,32862788,32864257,32865621,32867091,32868581,32870059,32871557,32873014,32874503,32875976,32877460,32878954,32880458,32881934,32883424,32884918,32885732,32886227,32886690,32887276,32887878,32888345,32888907,32889387,32889844,32890523,32891049,32891565,32892125,32892775,32893167,32893485,32893953,32894489,32894814,32895223,32895760,32896174,32896618,32897109,32897390,32897621,32898015,32898713,32899326,32899985,32900569,32901161,32901618,32902254,32902765,32903042,32903619,32903985,32904559,32905104,32905631,32906012,32906553,32907023,32908181,32910164,32912192,32914193,32915986,32917672,32919365,32921085,32922769,32924438,32926123,32927791,32929478,32931209,32932906,32934560,32936229,32937961,32939676,32941389,32943095,32944828,32946529,32948260,32950313,32952361,32954135,32955847,32957551,32959286,32961061,32962727,32964428,32966112,32967771,32969486,32971283,32973070,32974749,32976514,32978292,32979685,32980603,32981454,32982410,32984147,32985686,32987025,32988588,32990110,32991570,32993310,32995163,32996927,32998551,33000000,33001435,33002937,33004451,33005948,33007412,33008907,33010388,33011875,33013350,33014821,33016304,33017801,33019284,33020743,33022236,33023268,33023751,33024330,33024938,33025513,33025888,33026382,33026982,33027605,33028139,33028527,33029003,33029389,33029886,33030184,33030582,33031051,33031535,33032045,33032548,33032987,33033451,33033961,33034385,33034710,33034894,33035120,33035342,33035890,33036345,33036598,33036789,33036914,33037174,33037529,33037757,33037961,33038445,33038965,33039258,33039826,33040109,33040427,33040784,33041114,33041494,33041984,33043270,33045234,33047100,33049092,33051031,33052729,33054404,33056094,33057776,33059467,33061146,33062866,33064572,33066250,33067899,33069561,33071230,33072939,33074628,33076293,33077945,33079639,33081302,33082974,33084641,33086507,33088555,33090607,33092371,33094085,33095794,33097583,33099280,33101091,33102781,33104425,33106114,33107812,33109546,33111135,33112822,33114594,33116333,33118091,33119399,33120144,33121019,33121851,33123456,33124728,33126108,33127543,33129019,33129930,33131257,33132921,33134658,33136346,33138028,33139636,33141241,33142730,33144265,33145764,33147273,33148777,33150288,33151743,33153228,33154717,33156191,33157695,33159217,33160704,33162192,33163696,33165192,33166666,33168113,33169605,33171106,33172628,33174151,33174762,33175351,33175975,33176343,33176737,33177231,33177776,33178326,33178904,33179351,33179875,33180382,33180938,33181345,33181477,33182082,33182644,33183146,33183606,33183973,33184295,33184490,33184759,33184935,33185498,33186035,33186608,33187164,33187696,33188191,33188646,33189089,33189481,33189875,33190472,33191006,33191579,33192020,33192453,33192966,33193230,33193565,33193911,33194051,33194216,33194683,33195241,33195861,33196413,33196792,33197166,33197606,33198041,33198376,33198734,33198988,33199173,33199637,33200033,33200416,33200862,33201275,33201736,33202000,33202485,33202842,33203388,33203861,33204445,33204887,33205737,33207771,33209810,33211804,33213808,33215852,33217841,33219486,33221132,33222825,33224534,33226211,33227929,33229641,33231337,33233028,33234698,33236378,33238077,33239781,33241494,33243203,33244895,33246556,33248226,33249904,33251605,33253335,33255021,33256727,33258431,33260087,33261762,33263466,33265180,33266896,33268630,33270331,33272219,33274267,33276315,33278363,33280015,33281584,33283358,33285134,33286880,33288656,33290395,33292144,33293846,33295563,33297329,33299046,33300788,33302530,33304210,33305944,33307679,33309531,33311251,33312928,33314628,33316353,33318115,33319853,33321699,33323516,33324552,33325360,33326123,33326910,33327463,33328354,33329394,33330247,33330902,33331886,33332901,33333867,33334664,33335312,33335671,33336351,33336526,33337468,33338804,33339571,33340690,33342234,33343934,33345723,33347476,33349263,33350968,33352606,33354271,33355734,33357231,33358701,33360179,33361672,33363164,33364633,33366091,33367577,33368221,33368726,33369230,33369740,33370026,33370523,33371091,33371403,33371916,33372461,33372853,33373287,33373732,33374124,33374428,33374758,33375280,33375640,33376239,33376799,33377322,33377889,33378384,33378983,33379490,33379994,33380544,33380999,33381875,33383883,33385903,33387763,33389451,33391148,33392831,33394482,33396184,33397886,33399599,33401312,33403018,33404710,33406392,33408098,33410131,33412057,33413767,33415480,33417237,33419076,33420845,33422670,33424445,33426194,33427999,33429326,33430210,33431049,33432000,33433101,33434228,33435506,33437165,33438862,33440476,33442052,33443654,33445167,33446682,33448184,33449668,33451159,33452649,33454118,33455611,33457105,33458583,33460057,33461532,33463032,33464532,33466009,33467494,33468655,33469277,33469922,33470428,33471025,33471633,33472248,33472856,33473501,33474160,33474626,33475281,33475878,33476363,33477035,33477429,33477931,33478514,33479043,33479608,33480103,33480687,33481293,33481747,33482248,33482793,33483203,33483617,33484113,33484594,33485110,33485692,33485925,33486346,33486817,33487286,33487657,33488192,33488689,33489207,33489841,33490366,33490956,33491518,33491949,33492376,33492905,33493422,33493996,33494659,33495039,33495615,33496215,33496831,33497430,33498473,33500525,33502566,33504617,33506631,33508520,33510227,33511935,33513656,33515362,33517075,33518779,33520477,33522156,33523859,33525534,33527250,33528914,33530655,33532367,33534068,33535765,33537464,33539153,33540822,33542484,33544193,33545904,33547619,33549427,33551475,33553523,33555367,33557091,33558884,33560548,33562285,33563951,33565712,33567513,33569312,33571136,33572953,33574634,33576377,33578074,33579900,33581658,33583391,33584553,33585288,33586109,33586901,33587665,33589202,33591011,33592347,33593691,33595442,33597138,33598688,33599682,33601342,33603191,33605037,33606787,33608586,33610215,33611827,33613273,33614802,33616272,33617754,33619249,33620730,33622211,33623700,33625170,33626640,33628151,33629636,33631089,33632587,33634080,33635576,33637111,33638606,33640111,33641593,33643086,33644598,33645638,33646024,33646177,33646425,33646735,33647169,33647701,33648170,33648568,33649068,33649546,33650201,33650723,33651004,33651490,33651877,33652339,33652633,33652983,33653517,33654099,33654547,33654918,33655221,33655313,33655891,33656061,33656376,33656869,33657382,33657983,33658577,33659101,33659475,33660060,33660566,33660830,33661202,33661725,33662084,33662668,33663290,33663787,33664378,33664772,33664954,33665146,33665512,33665961,33666319,33666783,33667295,33667883,33668433,33669011,33669652,33670167,33670713,33671238,33671627,33671945,33672403,33672848,33673097,33673381,33673747,33674154,33674616,33674921,33675392,33675997,33677984,33680028,33682034,33684047,33686102,33687983,33689655,33691352,33693063,33694751,33696402,33698081,33699767,33701409,33703097,33704789,33706475,33708156,33709846,33711551,33713257,33714932,33716659,33718363,33720028,33721718,33723413,33725114,33726798,33728504,33730216,33731906,33733598,33735304,33736943,33738663,33740685,33742733,33744781,33746646,33748307,33750051,33751830,33753511,33755258,33756864,33758618,33760374,33762050,33763795,33765567,33767366,33769140,33770959,33772649,33774392,33776099,33777709,33779474,33781164,33782820,33784332,33786156,33787010,33787916,33788674,33789476,33790328,33791062,33791876,33792743,33793635,33794590,33795675,33796731,33797728,33798476,33799381,33800232,33801376,33802498,33803541,33804598,33805704,33806732,33807771,33808815,33809707,33809933,33810249,33811509,33812768,33814429,33816282,33818102,33819945,33821763,33823456,33824967,33826487,33828020,33829531,33831020,33832516,33834002,33835510,33837013,33838497,33840015,33841434,33841804,33842171,33842377,33842675,33843096,33843464,33843844,33844298,33844729,33845234,33845659,33846153,33846446,33846905,33847240,33847648,33848088,33848322,33848685,33849006,33849426,33849812,33850186,33850606,33851034,33851256,33851558,33851774,33852110,33852408,33852819,33853279,33853476,33853739,33854015,33855138,33857130,33859094,33861005,33862687,33864379,33866094,33867776,33869461,33871145,33872813,33874501,33876169,33877857,33879552,33881229,33882896,33884584,33886262,33888229,33890277,33892082,33893798,33895595,33897296,33898993,33900734,33902470,33904200,33905950,33907731,33909411,33911092,33912729,33913972,33914781,33915724,33917267,33918829,33920475,33922365,33924269,33926007,33927528,33929091,33930572,33932077,33933579,33935078,33936590,33938099,33939594,33941089,33942590,33944082,33945575,33947088,33948603,33950119,33951616,33953097,33954592,33956090,33957601,33959101,33960579,33962078,33963584,33965058,33966565,33968082,33969591,33971058,33972566,33974083,33975579,33977046,33978517,33979262,33979739,33980292,33980818,33981252,33981808,33982370,33982948,33983579,33984219,33984878,33985403,33985868,33986355,33986916,33987377,33987817,33988361,33988934,33989571,33990163,33990780,33991355,33991936,33992454,33992902,33993373,33993961,33994582,33995143,33995417,33995963,33996393,33996929,33997436,33997943,33998432,33998951,33999460,34000034,34000576,34001033,34001636,34002038,34002396,34002811,34003165,34003627,34003992,34004362,34004595,34005099,34005504,34005862,34006427,34006847,34007439,34008036,34008554,34008828,34009415,34010015,34010651,34011266,34011839,34012416,34012771,34013338,34013824,34014344,34014834,34015220,34015702,34016242,34016556,34017055,34017542,34018071,34018458,34018829,34019274,34019777,34020306,34020712,34021238,34021823,34022323,34022728,34022995,34023485,34024071,34024403,34024775,34024907,34025148,34025497,34026084,34026417,34026796,34027295,34027571,34027784,34028093,34028539,34028908,34029240,34029587,34029979,34030233,34030707,34031099,34031365,34032000,34034049,34036073,34038129,34040112,34042094,34044128,34046130,34048151,34050206,34052176,34053911,34055647,34057409,34059130,34060830,34062527,34064231,34065922,34067618,34069307,34070977,34072690,34074383,34076112,34077816,34079536,34081265,34082976,34084680,34086373,34088055,34089738,34091444,34093183,34094905,34096595,34098272,34099933,34101600,34103295,34105009,34106687,34108336,34110008,34111693,34113382,34115068,34116787,34118499,34120240,34121994,34123738,34125482,34127163,34128862,34130583,34132278,34133960,34135610,34137292,34139063,34141111,34143159,34145207,34147255,34149303,34151107,34152842,34154627,34156392,34158076,34159819,34161470,34163184,34164817,34166453,34168215,34169932,34171653,34173439,34175158,34176855,34178569,34180300,34181997,34183664,34185317,34186908,34188527,34190307,34192030,34193668,34195362,34197032,34198638,34200339,34202035,34203794,34205581,34207243,34209007,34210709,34212297,34213926,34215342,34216139,34216992,34217783,34218630,34219452,34220188,34220990,34221725,34222838,34223831,34224905,34225970,34226874,34227531,34228271,34229156,34230178,34231026,34231845,34232561,34233522,34234379,34235096,34235730,34236474,34237284,34238207,34238988,34239840,34240914,34241994,34243293,34244351,34245523,34246678,34247797,34249306,34250826,34252756,34254555,34256366,34258248,34260090,34261917,34263799,34265636,34267266,34268879,34270433,34271967,34273508,34275026,34276525,34278054,34279574,34281079,34282579,34284069,34285591,34287096,34288606,34290069,34291572,34292593,34293159,34293897,34294519,34295026,34295633,34296203,34296843,34297315,34297790,34298267,34298786,34299389,34300170,34300703,34301482,34302156,34302820,34303482,34303988,34304781,34305449,34305896,34306610,34307256,34307767,34308264,34308919,34309495,34310215,34310874,34311338,34311868,34312395,34312703,34313009,34313361,34313969,34314573,34315186,34315862,34316409,34316998,34317518,34318042,34318617,34319323,34321378,34323433,34325466,34327516,34329230,34330962,34332703,34334440,34336161,34337885,34339615,34341354,34343062,34344799,34346549,34348277,34349983,34351699,34353418,34355109,34356804,34358536,34360271,34361998,34363714,34365770,34367818,34369837,34371600,34373445,34375315,34377168,34379005,34380881,34382699,34384572,34386421,34388279,34390109,34391926,34393696,34395500,34397227,34399048,34400864,34402677,34404446,34405418,34406428,34407332,34408233,34409529,34410836,34411981,34413221,34414136,34415295,34416215,34417279,34418315,34419796,34421119,34422657,34424332,34426046,34427668,34429289,34430818,34432338,34433832,34435323,34436824,34438297,34439770,34441241,34442733,34444262,34445788,34447260,34448725,34450200,34451701,34453172,34454649,34456115,34457581,34459060,34460519,34461988,34463486,34464952,34466415,34467907,34469341,34469916,34470421,34471018,34471515,34471992,34472489,34472995,34473496,34474021,34474427,34474862,34475277,34475562,34475936,34476159,34476709,34477020,34477606,34478012,34478445,34478795,34479225,34479682,34480238,34480753,34481247,34481734,34482268,34482804,34483259,34483664,34484066,34484548,34484748,34485105,34485464,34485865,34486437,34486867,34487132,34487616,34488153,34488648,34489146,34489580,34489938,34490288,34490655,34491216,34491728,34492081,34492473,34492804,34493214,34493699,34494220,34494614,34495061,34495554,34495990,34496482,34496966,34497605,34498271,34498939,34499591,34500125,34500514,34500798,34501136,34501439,34501754,34502259,34502573,34502857,34503088,34503555,34503989,34504450,34504866,34505422,34505902,34507818,34509749,34511655,34513647,34515631,34517580,34519601,34521297,34523000,34524689,34526364,34528037,34529749,34531412,34533062,34534732,34536404,34538086,34539784,34541477,34543155,34544812,34546503,34548171,34549835,34551550,34553278,34554964,34556677,34558305,34559971,34561653,34563336,34565024,34566679,34568369,34570029,34571656,34573298,34574958,34576606,34578291,34580070,34582118,34584166,34586214,34588122,34589871,34591659,34593433,34595209,34596949,34598622,34600332,34602036,34603760,34605398,34607033,34608725,34610445,34612235,34613956,34615706,34617321,34619013,34620644,34622244,34623904,34625584,34627210,34628834,34630503,34632030,34632873,34633766,34634380,34635249,34636098,34636866,34637930,34639229,34640552,34641725,34642727,34643590,34644637,34645812,34647093,34648149,34649082,34649981,34650956,34652171,34653413,34654242,34655505,34656253,34656690,34658059,34659815,34661551,34663265,34665067,34666928,34668736,34670339,34671977,34673571,34675202,34676699,34678205,34679726,34681241,34682761,34684277,34685794,34687320,34688819,34690333,34691841,34693352,34694864,34696383,34697880,34699398,34700923,34702435,34703933,34705440,34706951,34708468,34709991,34711494,34713004,34714532,34716035,34717528,34719076,34720605,34722123,34723678,34725195,34726713,34728237,34729739,34731242,34732742,34734244,34735746,34737235,34738720,34740186,34741668,34743166,34744651,34746152,34747417,34747955,34748435,34748990,34749415,34749943,34750527,34751004,34751379,34752010,34752667,34753338,34754047,34754767,34755424,34756146,34756830,34757469,34758123,34758758,34759481,34760194,34760760,34761410,34761990,34762416,34762892,34763485,34764075,34764572,34765292,34765943,34766555,34767276,34767887,34768506,34769079,34769727,34770211,34770837,34771363,34771907,34772590,34773167,34773709,34774348,34774850,34775382,34775946,34776467,34777083,34777666,34778317,34778832,34779419,34779983,34780546,34781080,34781599,34782141,34782670,34783341,34783788,34784238,34784857,34785283,34785847,34786482,34787008,34787660,34788235,34788857,34789449,34790015,34790599,34791046,34791676,34792347,34792887,34793412,34793917,34794526,34794958,34795547,34796087,34796618,34797271,34797844,34798251,34798748,34799409,34799987,34800585,34801276,34801866,34802569,34803307,34803989,34804617,34805248,34805960,34806683,34807389,34807977,34808536,34809217,34809891,34810543,34811140,34811655,34812120,34812762,34813399,34813945,34814579,34815190,34815734,34816338,34816946,34817564,34818174,34818725,34819318,34819823,34820180,34820692,34821212,34821795,34822313,34822871,34823441,34823905,34824501,34824921,34825398,34826016,34826610,34827143,34827517,34827959,34828545,34829107,34829582,34830108,34830593,34830903,34831395,34831909,34832461,34832968,34833441,34833788,34834130,34835708,34837765,34839822,34841856,34843894,34845932,34847982,34850024,34852072,34854129,34856177,34858198,34860253,34862212,34863930,34865649,34867331,34869033,34870734,34872467,34874167,34875845,34877564,34879254,34880967,34882667,34884368,34886072,34887776,34889483,34891214,34892949,34894657,34896378,34898103,34899836,34901581,34903325,34905086,34906849,34908606,34910364,34912097,34913812,34915506,34917216,34918914,34920595,34922276,34923947,34925653,34927394,34929078,34930762,34932466,34934177,34935875,34937589,34939304,34941055,34942806,34944568,34946306,34948053,34949758,34951479,34953197,34954937,34956659,34958400,34960135,34961897,34963632,34965359,34967104,34968859,34970614,34972355,34974078,34975837,34977885,34979933,34981981,34984029,34986077,34988125,34990173,34992143,34993841,34995504,34997243,34998984,35000678,35002348,35004076,35005861,35007563,35009343,35011141,35012902,35014746,35016536,35018362,35020181,35021972,35023771,35025564,35027319,35029093,35030887,35032491,35034065,35035764,35037491,35039172,35040797,35042413,35044220,35045905,35047625,35049335,35051030,35052751,35054588,35056408,35058219,35060035,35061862,35063690,35065379,35067090,35068676,35070307,35072096,35073913,35075710,35077499,35079347,35081206,35083020,35084802,35085871,35086816,35087729,35088669,35089623,35090538,35091322,35092303,35093303,35094289,35095596,35096950,35098276,35099497,35100787,35102121,35103376,35104784,35106143,35107457,35108642,35109893,35110647,35111408,35112275,35113191,35114152,35115199,35116372,35116796,35117328,35118693,35120123,35121829,35123764,35125514,35127265,35129155,35131066,35132912,35134747,35136589,35138391,35140244,35142152,35143712,35145260,35146834,35148359,35149865,35151406,35152936,35154451,35155955,35157420,35157820,35158299,35158633,35158959,35159477,35159995,35160516,35160932,35161332,35161695,35162094,35162367,35162736,35162904,35163332,35163639,35163835,35164064,35164272,35164673,35165078,35165461,35165839,35166253,35167608,35169641,35171660,35173391,35175094,35176812,35178494,35180184,35181873,35183568,35185262,35186954,35188644,35190349,35192143,35194191,35196096,35197892,35199705,35201404,35203201,35204992,35206821,35208588,35210343,35211951,35212753,35214149,35215759,35217362,35218848,35220440,35221963,35223399,35224609,35226125,35227552,35227982,35228387,35228870,35229409,35229985,35230471,35231406,35233235,35234922,35236604,35238508,35240231,35242028,35242976,35243740,35245203,35246782,35248285,35249786,35251284,35252449,35252751,35253226,35253588,35254036,35254340,35254432,35254819,35255293,35255739,35255886,35256204,35256789,35257324,35258676,35260545,35262224,35263890,35265578,35267247,35268922,35270687,35272591,35274361,35276045,35277738,35279431,35280587,35281960,35283761,35285481,35287043,35288489,35289997,35291462,35292978,35294484,35295015,35295451,35295820,35296192,35296659,35297043,35297430,35297738,35298240,35298692,35299134,35299510,35299966,35300559,35301039,35301577,35302026,35304022,35305840,35307523,35309203,35310866,35312525,35314196,35315893,35317681,35319604,35321316,35322990,35324677,35326447,35327786,35328428,35329711,35331079,35332083,35333533,35335167,35337137,35339188,35341242,35343277,35345332,35347041,35348635,35350183,35351624,35352916,35354430,35355987,35357139,35358000,35358916,35360338,35362339,35364372,35366299,35368220,35370014,35370781,35371977,35373419,35374602,35376031,35377486,35378888,35380227,35381450,35382526,35383189,35384193,35385313,35386483,35387488,35388292,35389227,35390152,35391008,35391892,35392917,35394090,35395167,35396231,35397118,35398288,35399176,35400275,35401349,35402460,35403568,35404653,35405702,35406641,35407633,35408708,35409846,35410848,35412029,35412743,35413370,35414198,35415035,35416346,35417432,35418250,35419236,35420191,35421112,35422001,35422881,35423609,35424886,35426014,35426898,35427949,35428931,35429730,35430669,35431653,35432433,35433465,35434557,35435032,35436556,35438604,35439832,35440931,35441975,35442912,35443881,35444866,35446003,35447001,35448002,35448914,35449927,35451080,35451994,35453078,35454092,35454980,35455995,35456872,35457730,35458449,35459246,35460102,35461250,35462515,35463931,35465487,35466839,35468428,35470420,35472468,35474516,35476402,35477811,35479839,35481896,35483944,35485992,35487990,35489806,35491860,35493517,35495463,35497518,35499566,35501614,35503662,35505710,35507758,35509806,35511860,35513890,35515932,35517966,35519998,35522032,35524035,35525991,35527794,35529471,35531443,35533491,35535539,35537587,35539635,35541683,35543731,35545779,35547827,35549875,35551923,35553971,35555963,35557890,35559714,35561491,35562826,35564595,35566524,35568424,35570189,35572123,35574171,35576224,35578280,35580328,35582376,35584424,35586472,35588520,35590568,35592616,35594664,35596712,35598760,35600808,35602808,35604306,35605381,35607421,35609469,35611517,35613565,35615613,35617661,35619709,35621757,35623805,35625853,35627901,35629949,35631997,35634045,35636093,35638141,35640189,35642237,35644285,35646309,35647889,35649944,35651992,35654040,35656095,35657969,35659523,35660908,35662085,35663075,35663784,35664224,35666228,35668285,35670333,35672381,35674436,35676493,35678541,35680594,35682642,35684690,35686536,35687990,35688757,35690805,35692857,35694878,35696846,35698689,35700390,35701904,35703052,35703938,35704502,35704778,35705123,35707052,35709100,35711148,35713197,35715247,35717295,35719343,35721391,35723439,35725495,35727543,35729591,35731633,35733609,35735425,35737049,35738543,35739865,35741917,35743974,35746022,35748070,35750126,35752174,35754231,35756288,35758336,35760384,35762440,35764475,35766497,35768418,35770116,35771562,35772586,35773789,35775593,35777481,35779502,35781550,35783605,35785658,35787588,35789271,35790538,35791526,35793574,35795620,35797668,35799489,35801519,35803567,35805624,35807395,35807925,35807999,35808197,35808230,35809050,35811098,35813146,35815203,35817251,35819307,35821355,35823405,35825449,35827352,35829400,35831241,35833075,35835123,35837171,35839219,35841267,35843315,35845363,35847420,35849468,35851525,35853449,35854974,35856952,35858960,35860542,35862144,35863945,35865540,35866410,35867376,35869093,35871058,35873102,35875150,35877198,35879246,35881300,35883317,35885091,35886209,35886302,35888052,35890100,35892148,35894205,35896258,35898315,35900371,35902419,35904476,35906528,35908585,35910530,35912366,35914282,35916137,35917716,35919764,35921812,35923860,35925917,35927965,35930013,35932061,35934109,35936011,35938068,35940116,35942171,35944219,35946267,35948315,35950363,35952411,35954034,35956072,35958039,35960010,35961401,35962994,35965042,35967098,35969079,35970784,35972721,35974769,35976817,35978865,35980913,35982970,35985018,35987066,35989114,35991162,35992796,35994063,35995908,35997877,35999878,36001894,36003948,36005995,36008020,36010063,36012106,36014163,36016217,36018260,36020281,36022295,36024282,36026265,36028267,36030319,36032368,36034415,36036469,36038495,36040532,36042564,36044612,36046662,36048694,36050739,36052745,36054620,36056354,36057892,36059257,36060521,36061713,36062874,36064037,36065078,36066144,36067259,36068251,36069287,36070131,36071007,36071933,36072616,36073249,36073696,36074132,36074325,36074507,36074595,36074658,36075246,36077296,36079317,36081371,36083428,36085433,36087255,36088996,36090500,36091505,36092792,36094840,36096888,36098936,36100984,36102876,36104924,36106972,36109020,36110983,36113031,36115079,36117127,36119141,36121198,36123246,36125303,36127351,36129393,36131437,36133494,36135550,36137598,36139625,36141678,36143683,36145621,36147482,36149258,36151020,36152791,36154360,36156409,36158465,36160513,36162569,36164622,36166677,36168725,36170469,36172517,36174573,36176630,36178686,36180740,36182788,36184843,36186858,36188816,36190864,36192887,36194796,36196226,36198282,36200330,36202308,36203716,36205724,36207781,36209829,36211877,36213925,36215973,36218030,36220078,36222126,36224144,36225926,36227685,36229168,36230553,36231815,36232950,36234778,36236826,36238874,36240922,36242975,36244983,36246830,36248407,36249137,36249617,36250758,36252343,36254127,36256054,36257994,36259950,36261897,36263905,36265770,36267438,36268899,36270201,36271148,36271679,36272316,36274180,36276226,36278218,36279456,36280306,36282363,36284411,36286459,36288507,36290555,36292603,36294651,36296699,36298714,36300679,36302731,36304724,36306470,36307839,36308649,36310657,36312711,36314394,36315741,36317696,36319744,36321792,36323846,36325894,36327947,36329995,36332050,36334105,36336056,36337725,36339569,36341617,36343031,36343665,36345564,36347612,36349660,36351708,36353756,36355804,36357861,36359879,36361636,36363651,36365699,36367756,36369804,36371852,36373900,36375948,36377599,36378636,36380231,36382184,36384216,36386272,36388320,36390269,36391433,36393310,36395109,36397164,36399212,36401260,36403308,36405343,36407352,36409024,36410276,36411140,36411893,36412290,36412629,36412817,36413390,36415438,36417486,36419534,36421582,36423630,36425678,36427726,36429774,36431822,36433870,36435918,36437966,36440014,36442062,36444110,36446158,36448206,36450222,36451450,36453507,36455558,36457613,36459658,36461715,36463769,36465683,36467634,36469691,36471245,36473214,36474500,36475147,36476478,36478175,36480136,36482191,36484239,36486287,36488335,36490383,36492431,36494479,36496527,36498575,36500616,36502475,36504117,36505600,36506951,36508099,36509182,36510192,36511078,36511793,36512629,36513619,36514453,36515355,36516994,36519050,36521098,36523146,36525194,36527242,36529290,36531338,36533386,36535434,36537482,36539530,36541578,36543626,36545466,36546708,36547414,36548117,36549896,36551944,36553992,36556040,36558047,36559626,36561683,36563740,36565795,36567846,36569894,36571942,36573998,36575981,36577466,36578934,36580583,36581891,36583157,36585214,36587097,36588256,36588782,36590613,36592524,36594549,36596604,36598656,36600710,36602760,36604806,36606808,36608351,36610121,36611977,36613912,36615887,36617943,36620000,36622048,36624096,36626144,36628192,36630240,36632296,36634292,36636045,36637541,36638348,36639105,36640712,36642769,36644817,36646865,36648913,36650961,36653009,36655057,36657113,36659167,36661168,36662902,36664341,36665398,36666371,36666561,36667029,36669077,36671127,36673088,36675019,36676807,36678503,36680272,36682320,36684338,36686117,36687729,36688984,36690737,36692500,36694540,36696588,36698521,36700560,36701597,36703645,36705310,36707163,36709077,36711125,36712773,36714687,36716059,36717520,36718638,36720325,36722333,36724357,36726352,36728369,36730375,36732354,36734268,36736316,36738371,36740426,36742114,36743070,36744395,36746362,36748410,36750458,36752506,36754361,36756183,36757429,36758311,36759333,36761381,36763429,36765485,36767542,36769073,36769433,36771240,36773297,36775342,36777390,36779446,36781502,36783559,36785554,36787609,36789657,36791139,36793178,36795226,36796974,36799022,36801070,36802687,36804707,36806755,36808216,36809484,36811401,36812959,36813662,36815707,36817755,36819812,36821869,36823249,36823371,36823495,36824810,36826849,36828897,36830945,36833002,36835059,36837107,36839155,36840904,36842768,36844595,36846129,36846986,36847158,36848199,36850171,36852219,36854189,36856237,36858280,36860324,36862372,36864404,36866452,36868289,36870299,36871938,36873920,36875327,36877248,36878487,36880075,36881720,36883416,36884718,36886037,36887771,36889813,36891785,36893833,36895881,36897929,36899977,36902025,36904073,36906121,36908169,36910217,36912274,36914327,36916378,36918360,36920290,36922096,36924100,36925726,36927702,36929753,36931659,36933126,36934875,36936670,36938718,36940766,36942822,36944870,36946918,36948966,36951014,36953062,36955118,36957168,36959164,36960937,36962511,36963895,36965086,36965997,36967383,36969431,36971479,36973527,36975575,36977632,36979118,36979895,36981943,36983991,36985958,36987940,36989977,36991950,36993958,36995976,36997995,37000051,37002108,37004156,37006202,37008223,37009934,37011395,37013416,37015464,37017520,37019499,37021400,37023425,37025481,37027529,37029577,37031625,37033673,37035721,37037768,37039720,37041487,37042897,37043600,37044854,37046902,37048950,37050998,37053046,37055094,37057044,37059092,37061140,37063188,37065236,37067216,37068457,37070511,37072559,37074607,37076655,37078703,37080759,37082807,37084855,37086711,37088056,37090013,37092061,37094109,37096157,37098205,37100222,37102135,37104183,37105361,37105847,37106301,37107582,37109471,37111527,37113575,37115623,37117671,37119719,37121767,37123815,37125863,37127911,37129967,37131991,37133962,37135755,37137543,37139284,37140871,37142306,37143558,37144771,37146015,37147096,37147900,37148463,37149019,37149536,37150017,37150459,37150915,37151290,37151756,37152186,37152651,37153190,37153735,37153993,37154315,37155081,37156287,37157488,37158719,37159895,37160971,37161910,37162795,37163528,37164054,37164360,37164507,37165090,37166970,37169023,37170782,37172516,37174418,37176374,37178422,37180472,37182490,37184487,37186535,37188585,37190639,37192687,37194552,37196084,37197989,37200018,37201681,37203135,37205121,37206938,37208956,37211004,37213008,37215032,37216907,37218952,37221000,37223037,37224880,37226907,37228964,37230998,37232975,37234961,37236942,37238692,37240109,37241657,37243690,37245710,37247741,37249794,37251842,37253850,37255571,37257407,37259350,37261398,37263440,37265493,37267520,37269568,37271501,37273452,37275364,37277119,37278957,37280889,37282868,37284723,37286733,37288557,37290581,37292524,37294572,37296620,37298668,37300719,37302727,37304310,37305662,37307423,37308638,37309570,37310896,37312943,37314991,37317039,37319030,37320975,37322801,37324598,37326477,37328236,37330219,37332093,37333989,37335953,37337898,37339831,37341877,37343805,37345588,37347583,37349085,37350577,37352503,37354516,37356525,37358419,37360255,37362139,37363998,37365766,37367492,37369007,37370859,37372639,37374076,37375568,37376886,37377773,37378960,37380965,37382932,37384785,37386621,37388361,37389986,37391707,37393381,37394735,37396169,37397449,37398916,37400183,37401454,37402641,37403675,37405010,37406122,37407227,37408513,37409918,37411111,37412594,37414115,37415955,37417759,37419461,37421427,37423416,37425469,37427448,37429458,37431285,37433017,37434591,37436001,37436870,37438340,37440128,37442155,37444209,37446257,37448309,37449463,37449616,37450920,37452977,37455025,37457059,37458498,37460550,37461606,37463654,37465702,37467192,37468846,37470902,37472950,37474998,37477046,37478575,37480632,37482577,37484075,37485462,37487510,37489558,37491606,37493654,37495702,37497758,37499714,37501766,37503814,37505862,37507910,37509958,37512006,37514054,37516102,37518150,37520198,37522246,37524294,37526310,37528367,37530415,37532472,37534520,37536568,37538528,37540476,37542501,37544558,37546606,37548658,37550712,37552768,37554816,37556864,37558912,37560960,37563015,37564661,37566087,37568144,37570192,37572249,37574297,37576350,37578390,37580438,37582338,37584264,37586044,37587607,37589215,37590652,37592411,37594211,37595779,37597225,37598559,37599647,37600499,37600768,37602555,37604387,37606283,37608333,37610381,37612424,37614389,37615915,37617125,37619173,37621230,37622982,37625037,37627085,37629133,37631160,37632689,37634628,37636684,37638597,37640189,37641646,37643487,37645344,37646487,37647283,37647966,37649396,37650808,37652254,37653669,37654865,37656260,37656867,37657588,37658432,37658863,37659138,37659600,37660133,37660458,37661398,37662270,37662631,37663040,37663527,37664006,37664772,37665246,37665781,37666430,37666783,37667075,37667725,37668420,37669068,37669805,37670476,37671608,37672407,37672951,37673918,37674716,37675219,37676137,37676759,37677344,37677989,37678395,37678905,37679530,37679891,37680530,37680944,37681293,37682008,37682585,37683338,37683878,37685059,37685893,37687082,37688078,37689075,37689759,37690312,37690899,37691337,37691919,37692526,37693284,37693661,37693838,37694288,37694749,37695424,37695890,37696214,37696759,37697422,37697760,37698818,37700186,37700543,37700893,37701286,37701599,37702127,37702735,37703408,37703946,37704389,37704986,37705637,37706213,37706568,37707065,37707461,37708545,37709664,37710707,37711577,37711883,37712456,37712811,37713229,37713679,37714131,37714391,37714912,37715112,37715556,37716114,37716317,37716566,37716828,37717385,37718039,37718335,37718783,37719300,37719549,37720304,37721135,37721666,37721882,37722267,37722593,37723088,37723374,37723598,37724010,37724531,37725505,37726044,37726520,37726963,37727634,37728141,37728618,37729044,37729439,37730111,37730436,37730767,37731362,37731866,37732792,37733631,37734231,37734502,37734822,37735103,37735361,37735882,37736207,37736551,37736803,37736961,37737465,37738030,37738771,37739393,37740475,37741815,37742860,37743897,37744572,37745223,37745493,37745962,37746541,37747385,37748718,37749741,37750257,37751139,37751713,37752341,37752896,37753522,37754090,37754854,37755604,37756165,37756813,37757469,37758037,37758731,37759571,37760312,37761503,37762689,37764068,37764878,37765543,37766130,37766711,37767715,37768966,37770168,37771366,37772566,37773771,37774644,37775059,37775508,37776643,37777809,37778683,37779197,37779749,37781115,37781474,37781787,37782129,37782324,37782663,37782921,37783131,37783270,37783500,37783877,37784323,37784463,37784596,37784728,37785119,37785664,37786283,37786597,37787192,37787827,37788267,37789199,37789600,37790260,37790422,37790862,37791361,37791687,37791960,37792394,37793108,37793576,37794171,37794663,37794970,37795251,37795571,37795901,37796313,37796517,37796794,37796980,37797205,37797540,37797685,37798189,37798466,37798765,37798937,37799219,37799405,37799615,37800137,37800597,37801139,37801425,37802126,37803283,37803541,37804021,37804413,37804932,37805539,37806156,37806479,37807039,37807948,37808977,37809984,37810433,37810985,37811328,37811711,37812120,37812448,37812890,37813333,37813637,37813879,37814161,37814327,37814495,37815308,37816211,37816994,37817732,37818500,37818918,37819551,37819967,37820269,37820686,37821114,37821675,37821997,37822156,37822571,37822822,37822990,37823396,37823756,37824176,37824625,37824781,37824974,37825257,37825448,37825626,37825888,37826077,37826431,37826906,37827183,37827422,37827926,37828254,37828588,37829132,37829435,37829803,37830293,37831043,37831895,37833193,37834017,37834520,37834991,37835707,37836180,37836614,37837212,37837581,37838031,37838965,37840014,37840708,37841017,37842241,37843245,37844346,37845441,37845935,37846534,37846838,37847590,37848205,37848851,37849408,37849710,37849995,37850313,37850669,37851012,37852087,37853048,37853464,37853870,37854304,37854851,37855238,37855664,37856132,37856991,37857755,37858446,37859304,37859659,37860055,37860812,37861660,37862148,37862986,37863878,37864768,37865604,37866404,37867280,37868814,37870700,37872066,37873054,37874050,37875040,37876742,37878628,37880514,37881503,37882491,37883481,37885030,37886293,37887466,37888555,37889822,37890344,37891238,37891793,37892953,37893362,37893804,37894712,37895543,37896242,37896923,37897769,37898493,37899235,37899943,37900559,37901152,37901825,37902461,37903447,37903766,37903884,37904059,37904515,37904987,37905163,37905285,37905559,37906029,37906356,37906825,37907294,37908017,37909089,37909819,37910130,37910618,37911181,37911672,37912062,37912627,37913132,37913598,37913896,37914190,37914855,37915805,37916995,37918663,37919178,37919685,37920422,37920871,37921228,37921588,37922057,37922705,37923105,37923530,37923937,37924478,37924869,37925313,37925606,37926024,37926349,37926705,37926964,37927264,37927476,37928001,37928342,37928672,37928836,37929017,37929308,37929803,37930102,37930389,37930785,37930954,37931539,37931775,37932198,37932318,37932885,37933464,37934136,37934416,37934563,37934836,37935289,37935667,37936103,37936519,37936840,37937499,37938149,37938742,37938987,37939555,37940334,37940554,37941191,37942194,37942822,37943136,37943198,37943356,37944099,37944776,37945142,37945755,37946538,37947055,37947598,37947946,37948557,37949161,37949632,37950089,37950526,37950995,37951527,37951822,37952294,37952970,37953443,37954038,37954795,37955625,37956108,37956791,37957488,37957825,37958328,37958814,37959297,37960082,37960996,37961699,37962457,37962978,37963567,37964179,37964729,37965475,37966082,37966908,37967213,37967937,37968428,37969359,37969628,37969937,37970520,37970718,37971094,37971270,37971448,37971679,37972077,37972188,37972631,37973091,37973217,37973475,37973692,37973849,37974175,37974302,37974436,37975147,37975688,37976155,37976594,37976993,37977463,37977675,37977935,37978295,37978669,37978970,37979330,37980259,37980581,37981040,37981393,37981854,37982219,37982879,37983830,37984692,37985763,37986537,37987291,37988012,37988209,37988987,37990011,37990393,37991270,37992478,37992812,37993623,37994393,37995588,37996770,37997266,37997566,37998092,37998412,37999522,38000935,38002006,38003294,38004643,38006105,38007564,38008995,38010522,38012070,38013561,38015099,38016622,38018076,38019577,38021088,38022662,38024169,38025710,38027193,38028674,38030265,38031692,38033076,38034390,38035637,38036857,38038188,38039572,38040844,38042042,38043186,38044260,38045362,38046997,38048519,38050296,38052045,38053792,38055546,38057226,38058929,38060633,38062375,38064054,38065788,38067520,38069224,38070978,38072718,38074479,38076218,38077954,38079494,38081165,38082818,38084481,38086194,38087874,38089575,38091310,38093036,38094718,38096362,38098026,38099703,38101318,38102872,38104534,38106230,38108029,38109617,38111306,38112968,38114591,38116261,38118008,38119737,38121479,38123288,38125156,38126954,38128760,38130573,38132331,38134032,38135766,38137527,38139285,38141157,38142985,38144659,38146340,38148148,38149905,38151618,38153414,38155223,38156983,38158660,38160365,38162013,38163521,38165405,38166999,38168656,38170251,38171844,38173458,38175070,38176752,38178452,38180148,38181807,38183526,38185251,38186939,38188673,38190401,38192093,38193772,38195541,38197253,38198946,38200645,38202300,38203957,38205641,38207288,38208929,38210539,38212147,38213734,38215288,38216785,38218292,38220148,38221771,38223340,38224894,38226276,38227677,38229236,38230705,38232212,38233438,38234669,38236119,38237590,38238892,38240242,38241661,38243043,38244337,38245760,38247364,38248891,38250447,38251975,38253365,38254786,38256289,38257685,38259041,38260591,38262164,38263589,38265116,38266732,38268190,38270018,38271466,38272913,38274306,38275725,38277275,38278687,38280218,38281655,38283218,38284616,38285953,38287177,38288496,38288714,38288921,38289305,38289522,38289762,38290468,38291606,38293043,38294249,38295154,38296425,38297716,38298766,38300261,38301899,38303019,38304393,38306069,38307337,38308290,38309675,38310862,38312509,38313706,38315352,38316778,38318432,38320061,38321749,38323263,38324535,38326132,38327462,38329218,38330473,38331950,38333740,38334948,38336668,38338256,38339591,38341067,38342361,38343803,38345274,38346856,38348603,38349865,38351035,38352720,38354421,38355731,38357428,38358712,38360112,38361571,38363186,38364829,38366230,38367661,38369247,38370639,38372409,38373746,38375343,38376847,38378146,38379646,38381175,38382546,38383991,38385358,38386965,38388461,38390168,38391600,38393184,38394868,38395898,38397442,38398907,38400551,38401579,38403073,38404671,38406342,38407743,38409296,38410781,38412059,38413741,38415270,38416503,38417818,38419323,38420804,38422000,38423490,38425001,38426258,38427664,38428968,38430652,38432225,38433922,38435575,38436898,38438130,38439545,38441050,38442369,38444226,38445503,38447136,38448548,38450265,38451500,38453316,38454852,38456277,38458131,38459839,38461652,38463080,38464703,38466331,38467568,38469493,38470900,38472447,38474060,38475786,38477515,38479353,38480773,38482455,38484214,38485955,38487489,38489201,38490962,38492227,38493904,38495213,38496805,38498387,38500152,38501598,38502779,38504336,38505992,38507745,38509499,38510789,38512616,38514235,38515608,38517240,38518732,38520741,38522795,38524809,38526827,38528869,38530917,38532918,38534962,38536997,38539023,38541030,38543065,38545086,38547113,38549138,38551189,38553233,38555272,38557320,38559324,38561347,38563351,38565369,38567384,38569428,38571479,38573530,38575572,38577612,38579661,38581679,38583701,38585713,38587761,38589810,38591839,38593890,38595946,38598001,38600012,38602051,38603900,38605887,38607911,38609946,38611990,38614028,38616054,38618082,38620128,38622149,38624149,38626124,38628107,38630076,38632088,38634075,38636109,38638138,38640164,38642215,38644245,38646240,38648199,38650210,38652226,38654217,38656218,38658251,38660264,38662287,38664340,38666372,38668364,38670317,38672325,38674333,38676316,38678334,38680374,38682421,38684470,38686507,38688529,38690493,38692487,38694510,38696535,38698565,38700601,38702642,38704695,38706728,38708769,38710813,38712850,38714899,38716952,38718990,38721028,38723074,38725054,38727027,38729011,38731015,38732988,38734925,38736924,38738916,38740902,38742853,38744815,38746775,38748739,38750735,38752733,38754672,38756628,38758614,38760604,38762572,38764520,38766523,38768520,38770490,38772480,38774436,38776427,38778403,38780388,38782382,38784337,38786324,38788299,38790275,38792267,38794220,38796218,38798196,38800201,38802177,38804178,38806153,38808125,38810124,38812103,38814090,38816037,38817996,38819988,38821981,38823956,38825963,38827917,38829910,38831879,38833878,38835831,38837804,38839811,38841801,38843803,38845797,38847803,38849812,38851812,38853790,38855776,38857770,38859751,38861694,38863550,38865346,38867160,38868980,38870743,38872639,38874582,38876396,38878109,38880014,38881768,38883623,38885305,38887105,38888945,38890873,38892812,38894730,38896538,38898300,38900223,38902039,38903891,38905651,38907309,38908975,38910672,38912297,38914062,38915997,38917911,38919691,38921476,38923491,38925547,38927574,38929604,38931497,38933441,38935255,38937168,38939013,38940911,38942811,38944514,38946263,38947950,38949825,38951696,38953600,38955405,38957199,38959020,38960807,38962535,38964250,38966150,38967989,38969840,38971682,38973512,38975247,38977066,38978689,38980575,38982354,38984247,38986069,38987961,38989688,38991646,38993368,38995175,38996732,38998537,39000401,39002241,39003969,39005943,39007722,39009625,39011446,39013119,39014874,39016583,39018446,39020306,39022170,39023925,39025825,39027556,39029422,39030970,39032784,39034423,39036387,39038294,39040252,39042182,39043998,39045925,39047788,39049649,39051351,39053306,39055190,39057190,39059140,39061089,39063093,39064991,39066665,39068631,39070388,39072272,39073934,39075744,39077597,39079407,39081370,39083186,39085038,39086962,39088794,39090633,39092445,39094357,39096170,39098030,39099821,39101759,39103622,39105350,39107287,39109046,39110928,39112673,39114446,39116331,39118151,39119908,39121612,39123425,39125274,39126990,39128896,39130804,39132678,39134595,39136507,39138453,39140402,39142337,39144292,39146194,39148171,39150075,39152034,39153951,39155897,39157846,39159750,39161670,39163591,39165590,39167499,39168947,39170336,39171752,39173171,39174609,39176077,39177664,39179078,39180682,39182220,39183742,39185298,39187026,39188719,39190239,39191940,39193762,39195737,39197707,39199560,39201538,39203206,39205094,39206923,39208630,39210594,39212527,39214515,39216308,39218358,39220112,39222038,39223764,39225590,39227488,39229325,39231314,39233288,39235121,39237135,39238817,39240742,39242555,39244225,39246190,39248082,39250071,39251839,39253794,39255609,39257374,39259173,39260961,39262603,39264546,39266448,39268419,39270244,39272272,39274104,39275948,39277779,39279605,39281334,39283270,39285193,39287113,39288932,39290954,39292742,39294665,39296438,39298276,39300191,39302127,39304105,39306070,39307951,39309938,39311636,39313545,39315414,39317193,39319179,39321119,39323061,39325018,39326914,39328880,39330841,39332781,39334647,39336573,39338492,39340166,39341854,39343800,39345813,39347772,39349724,39351727,39353744,39355751,39357779,39359783,39361794,39363780,39365779,39367775,39369724,39371705,39373687,39375655,39377647,39379641,39381654,39383646,39385601,39387596,39389568,39391586,39393575,39395566,39397570,39399601,39401634,39403618,39405618,39407624,39409659,39411680,39413693,39415705,39417731,39419711,39421714,39423725,39425748,39427772,39429802,39431808,39433830,39435836,39437818,39439841,39441871,39443891,39445892,39447894,39449882,39451896,39453878,39455878,39457880,39459899,39461909,39463918,39465919,39467923,39469922,39471960,39474009,39476012,39477994,39479863,39481605,39483388,39485108,39486824,39488519,39490166,39491944,39493610,39495198,39496842,39498613,39500308,39501988,39503756,39505491,39507107,39508846,39510599,39512200,39513779,39515625,39517211,39518889,39520640,39522445,39524153,39525821,39527609,39529451,39531177,39532859,39534614,39536361,39538139,39539844,39541621,39543335,39545305,39547246,39549209,39551217,39553209,39555152,39557066,39559008,39560957,39562950,39564927,39566902,39568914,39570893,39572855,39574849,39576841,39578826,39580792,39582774,39584732,39586741,39588732,39590725,39592709,39594668,39596674,39598616,39600584,39602580,39604560,39606568,39608564,39610528,39612504,39614469,39616455,39618410,39620370,39622321,39624233,39626140,39628011,39629945,39631830,39633651,39635536,39637370,39639202,39641110,39642971,39644870,39646717,39648602,39650521,39652381,39654250,39656170,39658093,39660084,39662049,39664051,39665979,39667928,39669839,39671743,39673661,39675586,39677524,39679490,39681380,39683314,39685265,39687214,39689175,39691137,39693027,39695006,39696746,39698679,39700555,39702605,39704656,39706684,39708682,39710703,39712721,39714744,39716756,39718794,39720810,39722855,39724885,39726912,39728940,39730961,39732935,39734901,39736864,39738890,39740940,39742995,39745047,39747062,39749106,39751130,39753131,39755141,39757170,39759203,39761255,39763278,39765333,39767389,39769440,39771468,39773455,39775411,39777428,39779450,39781458,39783477,39785520,39787568,39789547,39791538,39793561,39795544,39797503,39799484,39801500,39803543,39805569,39807583,39809595,39811581,39813598,39815598,39817596,39819566,39821560,39823570,39825599,39827632,39829659,39831664,39833663,39835683,39837670,39839654,39841649,39843625,39845618,39847658,39849698,39851729,39853773,39855803,39857842,39859834,39861850,39863857,39865847,39867840,39869865,39871891,39873944,39875989,39878033,39880058,39882094,39884121,39886172,39888224,39890266,39892314,39894360,39896359,39898335,39900350,39902358,39904345,39906311,39908282,39910309,39912303,39914298,39916290,39918236,39920217,39922165,39924120,39926078,39928066,39930030,39932024,39934022,39935977,39937927,39939821,39941747,39943699,39945681,39947649,39949668,39951671,39953678,39955647,39957642,39959568,39961532,39963390,39965350,39967289,39969276,39971062,39972971,39975008,39977037,39979054,39981090,39983116,39985095,39986841,39988821,39990809,39992779,39994644,39996545,39998460,40000438,40002406,40004308,40006232,40008164,40010143,40012091,40014009,40015848,40017777,40019767,40021754,40023622,40025476,40027431,40029396,40031337,40033167,40035055,40036992,40038928,40040916,40042798,40044654,40046581,40048552,40050508,40052386,40054273,40056259,40058188,40060052,40061887,40063850,40065773,40067642,40069478,40071264,40073188,40075135,40077039,40078933,40080832,40082687,40084560,40086475,40088354,40090199,40092088,40093987,40095818,40097697,40099511,40101302,40103328,40105265,40107203,40109144,40111048,40112882,40114728,40116602,40118456,40120216,40122223,40124223,40126235,40128262,40130255,40132282,40134071,40135862,40137793,40139731,40141773,40143811,40145824,40147763,40149743,40151746,40153737,40155734,40157709,40159667,40161623,40163671,40165657,40167656,40169355,40171343,40173376,40175397,40177379,40179201,40181171,40183191,40185232,40187205,40189106,40191105,40193100,40195125,40197149,40199119,40200910,40202884,40204885,40206906,40208893,40210887,40212909,40214941,40216949,40218954,40220962,40222860,40224878,40226890,40228869,40230843,40232861,40234901,40236926,40238943,40240971,40242983,40244825,40246802,40248784,40250787,40252771,40254787,40256754,40258713,40260683,40262674,40264611,40266606,40268501,40270482,40272487,40274422,40276363,40278344,40280350,40282308,40284160,40286097,40288035,40290008,40291860,40293756,40295757,40297743,40299760,40301779,40303751,40305660,40307563,40309520,40311455,40313361,40315272,40317254,40319217,40321209,40323199,40325201,40327190,40329181,40331156,40333078,40335060,40336998,40338960,40340959,40342966,40344925,40346961,40348948,40350926,40352868,40354849,40356809,40358772,40360653,40362628,40364582,40366530,40368508,40370516,40372482,40374466,40376481,40378456,40380454,40382454,40384395,40386367,40388380,40390327,40392301,40394308,40396294,40398263,40400144,40402114,40404106,40406046,40408004,40409965,40411909,40413889,40415832,40417790,40419731,40421681,40423618,40425478,40427327,40429286,40431260,40433171,40435069,40437017,40438907,40440868,40442843,40444733,40446701,40448694,40450635,40452598,40454618,40456524,40458521,40460435,40462420,40464398,40466358,40468357,40470379,40472379,40474431,40476487,40478380,40480403,40482411,40484377,40486396,40488427,40490469,40492502,40494540,40496512,40498522,40500545,40502515,40504539,40506573,40508603,40510641,40512677,40514667,40516711,40518722,40520724,40522756,40524797,40526833,40528884,40530921,40532886,40534870,40536895,40538875,40540903,40542933,40544978,40547031,40549080,40551062,40553064,40555081,40557046,40559089,40561124,40563174,40565205,40567236,40569200,40571202,40573166,40575188,40576974,40578956,40580918,40582902,40584890,40586889,40588931,40590940,40592946,40594922,40596686,40598699,40600698,40602673,40604719,40606684,40608648,40610696,40612673,40614648,40616673,40618609,40620530,40622417,40624234,40625956,40627601,40629110,40630564,40632175,40633563,40635037,40636392,40637863,40639217,40640301,40641930,40643090,40644517,40645716,40647313,40648369,40649714,40650999,40651925,40653220,40654659,40656049,40657143,40658469,40660025,40660917,40662036,40663431,40664650,40665993,40667373,40668564,40669949,40671086,40672659,40673833,40675178,40676666,40678078,40679559,40680940,40682497,40683945,40685535,40687075,40688362,40689809,40691317,40692682,40693953,40695503,40696779,40698150,40699247,40700875,40702055,40703513,40704821,40705677,40707298,40708679,40710023,40711182,40712416,40714038,40714953,40716072,40717506,40718783,40720295,40721441,40722705,40724002,40725197,40726812,40728089,40729544,40731042,40732298,40733950,40735348,40736855,40738398,40739790,40741399,40742674,40744169,40745718,40746949,40748505,40749768,40751120,40752449,40753628,40755208,40756475,40757910,40759157,40760016,40761660,40763067,40764356,40765553,40766796,40768402,40769253,40770423,40771855,40773068,40774611,40775680,40777004,40778318,40779538,40781123,40782458,40783942,40785426,40786652,40788292,40789664,40791177,40792755,40794086,40795659,40796994,40798501,40799985,40801121,40802716,40803918,40805381,40806658,40808021,40809484,40810649,40812111,40813310,40814174,40815746,40817163,40818307,40819564,40820911,40822327,40823228,40824504,40825866,40826919,40828468,40829587,40830975,40832128,40833759,40834848,40836180,40837641,40839078,40840507,40841985,40843554,40844993,40846570,40847989,40849384,40850774,40852243,40853712,40854939,40856564,40857754,40859166,40860311,40861886,40863061,40864578,40865893,40866814,40868283,40869643,40871045,40872136,40873455,40875060,40876047,40877144,40878496,40879823,40881130,40882499,40883706,40884995,40886141,40887794,40888982,40890504,40892003,40893291,40894876,40896222,40897736,40899264,40900691,40902338,40903596,40905052,40906537,40907898,40909386,40910707,40912070,40913401,40914521,40916125,40917337,40918775,40919988,40920818,40922401,40923766,40925080,40926271,40927563,40929154,40929966,40931204,40932623,40933841,40935382,40936483,40937823,40939125,40940372,40941981,40943273,40944790,40946299,40947571,40949201,40950562,40952142,40953750,40955116,40956712,40958066,40959622,40961158,40962385,40963791,40965160,40966471,40967764,40968898,40970501,40971676,40973098,40974370,40975229,40976822,40978167,40979479,40980666,40981899,40983477,40984296,40985528,40986954,40988112,40989589,40990659,40991973,40993316,40994612,40996172,40997320,40998814,41000361,41001731,41003351,41004766,41006339,41007901,41009344,41010944,41012295,41013852,41015393,41016655,41017949,41019493,41020775,41022081,41023222,41024826,41025999,41027409,41028694,41029604,41031016,41032422,41033823,41034900,41036235,41037794,41038706,41039791,41041146,41042421,41043578,41045017,41046182,41047570,41048799,41050497,41051616,41053010,41054570,41056035,41057454,41059002,41060533,41061960,41063524,41065022,41066531,41067907,41069416,41070873,41072032,41073722,41074866,41076304,41077483,41079051,41080260,41081658,41083054,41084009,41085300,41086669,41088095,41089180,41090480,41091772,41093158,41094103,41095471,41096903,41098121,41099733,41100816,41102207,41103381,41105046,41106287,41107678,41109111,41110514,41111937,41113455,41115047,41116533,41118116,41119654,41121113,41122560,41124123,41125535,41126719,41128413,41129654,41131097,41132272,41133873,41135079,41136480,41137870,41138857,41140105,41141503,41142951,41144083,41145385,41146549,41148159,41149017,41150306,41151810,41153099,41154735,41155821,41157211,41158540,41160029,41161458,41162800,41164302,41165821,41167057,41168765,41170387,41171998,41173620,41175024,41176752,41177951,41179185,41180477,41181848,41183154,41184966,41186463,41187910,41189116,41190374,41191963,41193433,41194904,41196718,41198110,41199434,41200701,41202262,41203673,41205138,41206966,41208385,41209831,41211116,41212404,41213893,41215297,41216675,41218520,41219930,41221534,41222911,41224154,41225631,41226866,41228170,41229603,41231350,41232449,41233710,41234996,41236456,41238071,41239401,41240788,41242194,41243775,41245180,41246890,41248597,41250337,41252250,41253837,41255804,41257692,41259489,41261245,41263101,41264915,41266690,41268610,41269579,41270479,41272216,41273902,41275691,41277395,41279104,41280780,41282235,41282978,41284141,41286130,41288039,41289784,41291316,41292564,41294005,41295522,41297243,41298823,41300671,41302477,41304352,41305839,41307539,41309252,41311027,41312924,41314802,41316692,41318427,41319980,41321848,41323265,41325214,41327033,41328955,41330730,41332551,41334399,41336291,41338017,41339835,41341665,41343506,41345406,41347277,41348972,41350635,41352286,41353810,41355359,41356980,41358511,41360200,41361717,41363295,41364892,41366324,41367946,41369418,41370996,41372533,41373958,41375355,41377182,41379095,41381037,41382734,41384587,41386417,41388310,41390095,41391986,41393894,41395631,41397503,41399369,41401212,41403080,41405083,41407035,41408981,41410867,41412842,41414822,41416801,41418645,41420568,41422577,41424542,41426415,41428340,41430109,41432033,41433694,41435746,41437781,41439824,41441784,41443726,41445621,41447391,41449360,41451290,41453209,41455172,41457120,41459094,41461024,41462949,41464902,41466840,41468780,41470717,41472620,41474535,41476496,41478401,41480303,41482222,41484137,41486042,41487897,41489815,41491552,41493418,41495269,41497078,41498824,41500558,41502275,41503906,41505197,41506850,41508747,41510237,41512064,41513620,41515325,41517036,41518615,41520328,41521944,41523267,41524453,41525591,41526825,41528327,41530082,41531747,41533159,41534317,41535829,41537535,41538945,41540101,41541923,41543824,41545615,41547334,41549117,41550901,41552496,41554441,41556272,41557976,41559655,41561339,41563066,41564646,41566401,41568088,41569597,41571274,41572726,41574278,41575876,41577265,41578497,41580135,41581774,41582879,41583848,41585443,41586996,41588578,41590450,41592480,41594445,41596429,41598413,41600337,41602174,41603817,41605363,41607231,41609220,41611063,41612956,41614862,41616629,41618413,41620199,41621958,41623607,41625474,41627310,41629066,41630921,41632610,41634432,41636046,41637582,41639257,41640813,41642520,41644250,41646046,41647897,41649394,41651231,41652744,41654334,41655766,41657544,41659436,41661236,41662981,41664286,41665707,41667403,41669141,41670763,41672195,41673796,41675495,41677107,41678654,41680307,41681825,41683520,41685110,41686409,41687992,41689447,41691121,41692782,41694072,41695695,41697142,41698854,41700505,41701957,41703382,41704966,41706545,41707670,41708947,41710345,41711508,41712929,41714190,41715752,41716912,41718257,41719686,41720998,41722527,41723764,41725094,41726557,41728043,41729574,41731249,41733070,41734312,41735891,41737715,41739642,41741458,41743360,41745141,41747074,41748564,41750100,41751362,41752935,41754581,41756630,41758640,41760613,41762032,41763888,41765586,41767359,41769190,41770668,41772499,41774292,41776093,41777733,41779535,41781029,41782631,41784151,41785415,41787148,41789025,41790745,41792310,41794161,41795443,41797292,41799091,41800991,41802457,41804055,41805724,41807404,41809199,41810943,41812955,41814444,41815952,41817730,41819422,41821169,41822812,41824565,41826111,41826588,41827171,41827633,41828383,41829006,41829718,41830120,41830744,41831990,41833979,41835957,41837924,41839839,41841805,41843763,41845732,41847658,41849529,41851171,41852789,41854423,41856240,41857799,41859382,41860986,41862590,41864353,41865898,41867715,41869067,41870586,41872059,41873602,41874968,41876372,41877864,41879450,41880772,41882024,41883282,41884808,41886197,41887711,41889126,41890468,41892038,41893509,41895021,41896538,41897931,41899285,41900694,41902111,41903538,41904908,41906331,41908073,41909826,41911631,41913490,41915379,41917260,41919109,41920869,41922584,41924398,41926051,41927814,41929608,41931439,41933204,41934926,41936601,41938160,41938960,41939764,41940621,41941599,41943299,41945001,41946661,41948277,41949975,41951577,41953185,41954837,41956484,41958230,41959901,41961639,41963304,41965049,41966851,41968683,41970497,41972072,41973793,41975291,41977101,41978436,41980242,41981811,41983709,41985394,41987247,41989034,41990901,41992664,41994503,41996299,41998138,41999455,42000514,42001556,42002619,42003677,42004760,42005837,42006892,42008367,42009906,42011477,42013008,42014592,42016131,42017697,42019229,42020794,42022370,42023838,42025483,42027083,42028659,42029673,42030698,42031784,42032807,42034322,42035725,42037478,42039295,42040871,42042051,42043274,42044786,42046159,42047240,42048704,42050368,42051658,42053172,42054810,42056399,42057946,42059584,42061191,42062562,42063787,42064636,42065710,42066397,42067181,42068052,42068784,42070197,42071624,42072923,42073476,42074253,42074790,42075355,42076163,42076695,42077572,42078296,42079218,42079708,42080294,42081092,42081745,42082618,42083134,42083987,42084680,42085557,42086085,42086599,42087553,42088252,42089101,42089534,42090348,42090944,42091636,42092045,42092318,42092875,42093132,42093741,42093953,42094507,42094727,42094908,42095536,42095689,42096213,42096410,42096933,42096973,42097211,42097623,42097855,42098446,42098692,42099712,42101150,42102662,42103833,42105022,42106242,42107429,42108670,42109610,42110593,42111599,42112552,42113558,42114557,42115543,42116903,42118265,42119692,42121092,42122575,42124083,42125485,42126874,42128277,42129882,42131347,42132838,42134392,42136014,42137619,42139132,42140640,42142251,42143629,42145034,42146422,42147817,42149234,42150638,42152135,42153578,42154963,42156370,42157786,42159162,42160496,42161439,42162381,42163303,42164396,42165355,42166308,42167269,42168189,42169267,42170161,42171159,42172083,42173356,42174770,42176239,42177584,42178957,42179872,42180794,42181749,42182709,42184440,42186022,42187613,42189184,42190631,42192213,42193801,42195377,42197096,42198459,42199806,42201154,42202453,42203760,42205069,42206452,42207783,42209389,42210977,42212570,42213769,42215170,42216577,42217802,42219283,42220904,42222519,42224074,42225629,42227211,42228982,42230664,42232416,42234068,42235566,42236788,42238225,42239651,42240991,42242331,42243473,42244949,42246374,42247853,42249297,42250745,42252367,42253832,42255540,42257197,42258788,42260415,42261968,42263555,42265109,42266736,42268377,42270078,42271725,42273305,42274957,42276372,42277979,42279524,42281100,42282782,42284423,42286029,42287654,42289220,42290725,42292335,42293956,42295525,42297243,42298883,42300472,42302136,42303580,42305206,42306772,42308373,42310060,42311661,42313221,42314758,42316342,42318173,42319712,42321268,42322795,42324570,42326245,42327868,42329442,42331036,42332845,42334429,42336134,42337734,42339346,42340308,42341245,42342212,42343239,42344804,42346290,42347865,42349349,42350894,42352177,42353453,42354770,42356149,42357267,42358434,42359698,42361059,42362281,42363189,42364152,42365283,42366614,42367782,42368876,42369958,42371130,42372282,42373170,42374085,42375441,42377313,42378805,42380705,42382253,42383813,42385236,42386672,42388000,42389407,42390820,42392255,42393595,42395250,42396762,42398270,42399812,42401348,42402868,42404393,42405925,42407462,42409072,42410456,42411830,42413208,42414579,42415983,42417354,42418717,42420359,42421885,42423406,42424939,42426518,42428072,42429586,42431103,42432638,42434392,42435983,42437588,42439239,42440875,42442470,42444062,42445738,42447492,42448986,42450453,42451873,42453276,42454716,42456168,42457587,42459015,42460812,42462576,42464307,42465988,42467736,42469480,42471183,42472874,42474693,42476504,42478234,42479920,42481570,42483300,42484978,42486666,42488330,42489990,42491025,42492274,42493396,42494497,42495620,42496662,42498000,42499111,42500200,42501163,42502089,42502763,42503439,42504100,42505314,42507070,42508778,42510532,42512205,42513957,42515641,42517377,42519044,42520909,42522640,42524361,42525998,42527694,42529381,42531088,42532800,42534626,42536420,42538172,42539977,42541700,42543473,42545247,42547016,42548739,42550632,42552349,42554056,42555688,42557348,42559015,42560720,42562413,42564181,42565591,42567099,42568465,42569949,42571300,42572263,42573285,42574307,42575900,42577741,42579524,42581360,42583026,42584899,42586678,42588530,42590307,42591937,42593113,42594327,42595711,42597397,42598454,42599470,42600542,42602240,42603925,42605538,42607122,42608738,42610341,42611960,42613566,42615261,42616833,42618305,42619744,42621147,42622518,42623994,42625408,42626848,42628315,42629991,42631484,42633047,42634547,42636045,42637490,42638921,42640381,42642015,42643617,42645271,42646864,42648428,42650078,42651684,42653274,42654994,42656556,42658019,42659443,42660924,42662348,42663792,42665231,42666656,42668265,42670104,42671942,42673783,42675474,42677346,42679113,42680959,42682767,42684501,42686158,42687758,42689398,42690943,42692589,42694192,42695810,42697494,42699046,42700527,42701984,42703377,42704928,42706397,42707867,42709339,42711075,42712887,42714711,42716587,42718268,42720140,42721952,42723802,42725606,42727264,42728914,42730530,42732221,42733774,42735419,42737024,42738698,42740310,42741769,42743195,42744653,42746021,42747483,42748926,42750352,42751897,42753740,42755546,42757387,42759280,42760961,42762786,42764604,42766468,42768124,42768766,42770530,42771486,42772223,42773390,42774073,42774755,42775902,42776600,42777686,42779122,42779770,42780481,42781267,42782664,42783767,42785024,42786386,42787630,42788432,42789559,42790857,42792052,42793339,42794562,42796178,42797519,42798817,42799825,42801132,42802803,42804369,42806121,42807773,42809522,42811074,42812674,42814345,42816014,42817039,42818048,42819502,42820981,42822547,42823566,42824555,42825546,42826566,42827941,42829017,42830155,42831261,42832504,42834078,42836091,42838130,42840133,42842137,42844160,42846190,42848184,42850193,42852225,42854261,42856286,42858295,42860309,42862314,42864331,42866296,42868328,42870353,42872381,42874378,42876367,42878386,42880397,42882372,42884376,42886409,42888438,42890444,42892452,42894459,42896485,42898498,42900445,42902471,42904479,42906372,42908294,42910175,42912071,42914001,42915846,42917695,42919568,42921453,42923342,42925229,42927065,42928952,42930769,42932619,42934510,42936343,42938011,42939684,42941363,42943031,42944697,42946362,42947972,42949738,42951395,42953049,42954713,42956345,42958004,42959669,42961302,42962890,42964604,42966039,42967463,42968902,42970310,42971774,42973189,42974602,42976057,42977653,42979053,42980476,42982116,42983540,42984984,42986459,42988134,42989534,42990991,42992540,42994163,42995674,42997057,42998621,43000177,43001715,43002988,43004551,43005898,43007820,43009596,43011062,43012707,43014356,43015913,43017477,43019004,43020714,43022320,43023873,43025456,43027099,43028857,43030552,43032126,43033678,43035350,43036880,43038457,43040004,43041556,43043101,43044650,43046176,43047698,43049231,43050702,43052374,43053969,43055492,43057138,43058862,43060448,43062110,43063847,43065650,43067163,43068683,43070649,43072588,43074293,43076006,43077823,43079781,43081714,43083642,43085623,43087552,43089511,43091408,43093342,43095172,43097013,43098872,43100776,43102755,43104603,43106468,43108300,43110116,43111890,43113677,43115450,43117375,43119352,43121305,43123260,43125187,43127108,43129010,43130917,43132859,43134879,43136749,43138646,43140502,43142320,43144127,43145969,43147753,43149667,43151670,43153654,43155632,43157602,43159535,43161470,43163384,43165312,43167290,43169087,43170860,43172597,43174334,43176094,43177869,43179603,43181395,43183313,43185111,43186908,43188733,43190500,43192304,43194090,43195869,43197761,43199232,43200673,43202081,43203517,43204925,43206348,43207765,43209214,43211182,43213171,43215097,43217145,43219095,43221031,43222924,43224826,43226720,43228637,43230533,43232500,43234432,43236371,43238298,43240180,43242079,43244006,43245889,43247829,43249705,43251223,43252732,43254334,43255948,43257526,43259121,43260636,43262239,43264159,43265971,43267764,43269510,43271291,43273037,43274770,43276490,43278248,43279586,43280881,43282173,43283542,43284834,43286177,43287546,43288880,43290629,43292292,43293932,43295617,43297324,43299067,43300809,43302474,43304173,43305653,43307123,43308619,43310189,43311752,43313245,43314718,43316167,43317854,43319518,43321000,43322688,43324367,43325909,43327533,43328948,43330304,43331641,43332968,43334212,43335478,43336641,43337920,43339677,43341560,43343422,43345308,43347207,43349083,43350946,43352821,43354735,43356688,43358583,43360455,43362318,43364211,43366093,43367979,43369839,43371716,43373138,43374568,43375913,43377310,43378779,43380251,43381733,43383186,43384992,43386655,43388353,43390123,43391780,43393391,43394961,43396498,43398066,43399600,43401161,43402751,43404372,43406101,43407813,43409514,43411159,43412834,43414282,43415767,43417238,43418690,43420029,43421431,43422841,43424440,43425908,43427421,43428913,43430444,43431734,43433227,43434745,43436207,43437864,43439350,43440885,43442367,43443578,43445076,43446572,43448091,43449679,43451663,43453617,43455541,43457177,43458604,43460014,43461443,43462328,43463739,43465113,43466511,43468102,43469269,43470409,43471525,43472687,43473838,43474908,43476067,43477269,43478794,43480207,43481663,43483617,43485496,43487417,43489331,43491229,43493132,43495036,43496968,43498644,43500254,43501759,43503285,43504731,43506031,43506953,43507860,43508715,43509622,43510446,43511408,43512128,43512981,43513916,43514913,43515669,43516596,43517483,43518577,43519438,43520500,43521780,43523038,43524361,43525653,43526390,43526766,43527382,43527957,43528256,43528568,43529000,43529750,43531106,43531940,43532860,43533764,43534813,43536041,43536898,43538226,43538909,43539129,43539574,43539867,43540168,43541602,43543008,43544512,43546231,43548069,43549835,43551647,43553471,43555287,43557082,43558836,43560628,43562366,43563998,43565646,43567219,43568831,43570435,43572086,43573663,43575348,43576698,43577994,43579330,43580647,43582267,43583958,43585620,43587290,43588979,43590617,43592271,43593961,43595643,43597323,43598992,43600658,43601630,43603200,43605034,43606894,43608661,43610442,43612242,43614113,43615908,43617674,43619312,43620760,43622249,43623694,43625362,43627219,43629061,43630930,43632771,43634649,43636521,43638374,43640256,43642104,43643234,43644988,43646142,43647230,43648478,43649500,43650745,43652778,43654781,43656757,43658679,43660665,43662608,43664502,43666403,43668288,43670264,43672204,43674154,43676081,43677991,43679883,43681812,43683831,43685567,43687220,43688978,43690775,43692584,43694395,43696053,43697676,43699589,43701641,43703689,43705738,43707791,43709839,43711883,43713910,43715963,43718019,43720074,43722113,43724151,43726199,43728241,43730288,43732345,43734393,43736276,43738195,43740048,43741900,43743715,43745584,43747404,43749279,43751231,43753137,43755010,43756854,43758705,43760545,43762395,43764245,43766202,43768048,43769908,43770667,43771479,43772269,43772945,43773680,43774127,43774896,43775795,43776590,43777011,43777623,43778429,43779270,43780010,43780409,43781144,43781988,43782859,43783414,43783868,43784641,43785461,43786405,43786840,43787458,43788673,43789695,43790871,43791502,43791997,43793275,43794351,43795471,43795901,43796637,43797810,43798878,43799929,43800321,43801295,43802371,43803436,43804269,43805534,43806777,43808348,43809631,43811334,43812838,43813814,43814970,43816126,43817272,43818461,43819565,43820662,43821758,43822914,43824073,43825255,43826422,43827546,43828651,43829687,43830764,43832321,43833417,43834505,43835670,43836744,43837817,43838906,43839948,43840975,43841977,43842871,43843908,43844954,43845817,43846707,43847476,43848365,43849768,43850192,43850727,43851232,43851758,43852343,43852822,43853388,43853963,43854410,43854919,43855391,43855911,43856417,43856947,43857521,43858023,43859378,43860848,43862334,43863827,43865374,43866871,43868379,43869889,43871408,43872577,43873567,43874549,43875920,43877544,43878957,43880352,43881646,43882998,43884455,43886181,43887829,43889479,43891146,43892761,43894373,43896032,43897678,43899345,43901253,43902957,43904639,43906388,43908073,43909765,43911489,43913166,43914967,43915951,43917064,43918298,43919632,43920940,43922223,43923546,43924661,43926020,43927455,43928850,43930279,43931810,43933318,43934868,43936417,43938071,43939510,43940539,43941701,43942850,43943981,43945154,43946237,43947329,43948449,43949595,43950713,43951876,43953047,43954141,43955216,43956211,43957315,43958784,43959914,43961018,43962200,43963281,43964358,43965445,43966497,43967523,43968547,43969417,43970447,43971513,43972376,43973267,43974058,43974936,43976297,43976718,43977257,43977764,43978312,43978859,43979320,43979891,43980450,43980905,43981436,43981904,43982417,43982916,43983446,43984033,43984540,43986155,43987953,43989733,43991549,43993330,43995140,43996879,43998726,44000123,44001545,44002928,44004315,44005972,44007795,44009621,44011514,44013362,44015227,44017074,44018940,44020807,44022334,44023881,44025473,44026979,44028429,44030123,44031645,44033344,44034933,44036697,44038490,44040352,44042076,44043618,44044826,44045963,44047126,44048491,44049798,44051522,44053263,44055069,44056890,44058635,44060481,44062250,44063980,44065771,44067103,44068312,44069448,44070554,44071914,44073337,44074903,44076788,44078514,44080428,44082179,44083990,44085796,44087538,44089388,44091151,44092908,44094677,44096378,44098003,44099676,44101445,44103203,44104973,44106566,44108239,44109484,44111259,44112877,44114490,44116084,44117671,44119236,44120815,44122439,44124206,44125690,44127453,44129239,44130712,44132132,44133885,44135666,44137215,44138911,44139937,44141059,44142202,44143325,44144498,44145636,44146722,44147855,44148999,44150147,44151272,44152479,44153600,44154696,44155725,44156805,44158056,44159131,44160340,44161480,44162235,44163022,44164182,44165329,44166398,44167388,44168365,44169601,44170718,44171593,44172257,44173340,44174577,44175676,44176651,44177574,44178792,44179914,44180897,44181451,44182597,44183809,44184988,44185978,44186823,44188016,44189152,44190137,44190577,44191767,44192946,44194140,44195095,44195895,44197051,44198197,44199265,44199695,44200877,44202044,44203183,44204139,44205409,44206515,44207600,44208791,44209861,44210921,44212039,44213061,44214044,44215058,44215953,44216974,44218005,44218843,44219663,44220501,44221481,44222374,44223531,44224753,44225935,44226353,44227404,44228636,44229777,44230632,44231865,44232984,44234203,44235390,44236646,44237782,44238899,44240126,44241311,44242583,44243699,44244803,44246033,44247242,44248576,44249654,44250851,44252056,44253226,44254527,44255691,44256683,44257720,44258818,44260181,44261294,44262294,44263297,44264513,44265797,44266843,44267826,44268902,44270217,44271453,44272517,44273432,44274549,44276091,44276668,44277196,44277707,44279029,44280572,44282321,44284180,44286039,44287860,44289425,44290798,44291272,44291786,44292290,44292822,44293371,44294399,44295919,44297372,44299012,44300530,44301983,44303629,44305155,44306610,44308245,44309779,44311228,44312933,44314608,44316443,44318225,44320041,44321789,44323574,44325400,44327167,44329000,44330869,44332608,44334478,44336208,44337956,44339988,44341695,44343536,44345313,44347081,44348884,44350761,44352506,44354224,44356132,44357824,44359659,44361544,44363238,44365118,44366894,44368731,44370458,44372309,44374058,44375843,44377734,44379489,44381221,44383105,44384837,44386683,44388473,44390227,44392121,44393830,44395660,44397416,44399318,44401054,44402904,44404663,44406402,44408306,44409975,44411796,44413690,44415429,44417193,44419006,44420837,44422554,44424407,44426227,44427955,44429851,44431573,44433328,44435218,44437022,44438787,44440591,44442347,44444199,44446030,44447856,44449530,44451435,44452498,44453726,44454856,44456128,44457402,44458506,44459794,44460850,44461621,44462352,44463172,44464026,44464578,44465046,44465811,44466634,44467554,44468018,44468518,44469328,44470189,44471042,44471630,44472017,44472839,44473738,44474579,44475520,44476731,44477740,44478880,44480059,44481160,44482349,44483417,44484525,44485634,44486797,44487888,44489084,44490264,44491349,44492413,44493504,44494924,44496394,44497934,44499573,44500668,44501770,44502958,44504053,44505158,44506246,44507296,44508341,44509366,44510255,44511281,44512320,44513255,44514159,44514925,44515807,44517231,44518661,44520116,44521397,44521821,44522381,44522890,44523449,44523984,44524451,44525007,44525552,44526026,44526530,44527008,44527498,44528006,44528538,44529113,44529632,44531260,44532910,44534584,44536133,44537849,44539486,44541161,44542835,44544535,44546235,44548001,44549641,44551268,44552879,44554547,44556126,44557179,44557815,44559159,44560579,44561932,44563311,44564640,44566017,44567404,44568716,44569962,44571032,44572257,44573312,44574544,44575639,44576886,44577999,44579217,44580621,44582029,44583484,44584886,44586366,44587728,44589153,44590589,44592147,44593708,44595171,44596527,44597982,44599424,44600857,44602193,44603616,44604800,44605911,44607168,44608269,44609586,44610753,44612097,44613274,44614556,44615701,44616940,44618155,44619512,44620665,44621830,44622999,44624140,44625607,44627117,44628644,44630159,44631866,44633339,44634915,44636388,44637846,44639229,44640684,44641965,44643055,44644202,44645402,44646884,44648245,44649263,44650699,44651615,44652615,44653801,44654982,44657005,44659034,44661049,44663062,44665080,44667076,44669054,44671050,44673073,44675099,44677088,44679124,44681144,44683143,44685164,44687126,44689101,44690440,44691784,44693414,44694927,44696050,44697173,44698292,44699419,44700540,44701657,44702914,44704522,44706000,44707519,44709089,44710892,44712576,44714316,44716063,44717917,44719475,44720971,44722492,44724110,44725718,44727272,44728815,44730413,44730812,44730911,44732590,44734618,44736585,44738474,44740379,44742266,44744086,44745966,44747872,44749759,44751674,44753580,44755489,44757469,44759370,44761234,44763148,44765082,44766980,44768803,44770754,44772714,44774598,44776507,44778450,44780373,44782122,44783892,44785732,44787445,44789422,44791343,44793210,44795063,44796961,44798882,44800763,44802655,44804544,44806495,44808317,44810151,44812002,44813921,44815713,44817231,44818884,44820574,44822237,44823885,44825608,44827283,44828961,44830574,44832317,44833932,44835599,44837273,44839002,44840661,44842340,44843979,44845684,44847469,44848917,44850456,44852068,44853684,44855255,44856744,44858229,44859819,44861420,44863042,44864692,44866174,44867721,44869280,44870839,44872397,44874277,44875780,44877343,44878995,44880521,44882469,44884264,44886011,44887818,44889692,44891548,44893401,44895242,44897134,44898447,44899745,44901054,44902420,44903748,44905102,44906442,44907686,44909326,44910769,44912215,44913639,44915162,44916633,44918090,44919532,44921138,44922596,44924040,44925483,44926949,44928450,44929928,44931380,44932801,44934436,44935900,44937357,44938786,44940288,44941751,44943225,44944656,44946191,44947712,44949149,44950577,44952027,44953518,44954971,44956397,44957812,44959399,44960820,44962204,44963636,44965079,44966557,44967986,44969402,44970830,44972413,44973796,44975181,44976662,44978134,44979581,44980960,44982364,44983976,44985368,44986763,44988155,44989609,44991046,44992473,44993863,44995264,44996880,44998270,44999697,45001168,45002661,45004158,45005579,45006982,45008602,45010061,45011489,45012940,45014431,45015914,45017405,45018860,45020251,45021849,45023203,45024504,45025872,45027262,45028613,45029931,45031238,45032715,45034111,45035430,45036730,45038128,45039443,45040819,45042152,45043415,45044989,45046312,45047603,45048943,45050279,45051624,45052925,45054298,45055622,45057229,45058689,45060120,45061613,45063102,45064610,45066068,45067478,45069101,45070509,45071907,45073345,45074847,45076296,45077768,45079154,45080571,45082178,45083536,45084943,45086380,45087828,45089297,45090687,45092087,45093702,45095122,45096510,45097889,45099353,45100840,45102277,45103684,45105102,45106719,45108113,45109498,45110893,45112386,45113844,45115259,45116693,45118254,45119735,45121150,45122557,45123995,45125500,45126953,45128382,45129785,45131540,45133217,45135063,45136791,45138667,45140335,45142045,45143841,45145672,45147503,45149294,45151003,45152651,45154428,45156192,45157930,45159663,45161534,45163307,45165200,45167043,45168920,45170787,45172665,45174525,45176385,45178323,45180150,45181931,45183722,45185533,45187330,45189103,45190883,45192840,45194588,45196341,45198024,45199735,45201438,45203131,45204801,45206540,45208386,45210135,45211878,45213568,45215293,45217009,45218716,45220400,45222232,45224112,45225959,45227789,45229590,45231377,45233235,45235037,45236844,45238773,45240500,45242275,45244013,45245744,45247457,45249203,45250993,45252805,45254548,45256462,45258303,45260135,45261964,45263757,45265512,45267303,45269073,45270960,45272640,45274388,45276101,45277632,45279398,45281124,45282746,45284518,45286335,45288079,45289854,45291560,45293178,45294865,45296457,45298291,45300185,45301816,45303455,45305089,45306745,45308444,45310128,45311807,45313461,45315230,45316917,45318534,45320165,45321872,45323577,45325268,45326924,45328671,45330497,45332314,45334051,45335842,45337674,45339471,45341285,45343069,45344914,45346705,45348425,45350157,45351916,45353715,45355473,45357266,45359016,45360778,45362484,45364191,45365934,45367652,45369399,45371089,45372818,45374614,45376307,45377995,45379751,45381415,45383092,45384790,45386521,45388272,45390052,45391735,45393467,45395089,45396740,45398387,45400105,45401830,45403647,45405050,45406561,45408062,45409609,45411128,45412625,45414115,45415623,45417580,45419562,45421492,45423465,45425487,45427422,45429389,45431367,45433269,45435211,45437226,45439257,45441232,45443176,45445148,45447134,45449146,45450940,45451867,45451905,45451945,45451983,45452301,45452341,45452380,45452420,45452493,45454455,45456254,45458096,45459954,45461771,45463607,45465424,45467213,45469126,45470601,45472097,45473538,45474978,45476347,45477806,45479253,45480675,45482595,45484424,45486198,45487978,45489778,45491530,45493304,45495078,45496661,45497496,45497583,45497615,45497655,45497695,45498013,45498053,45498085,45498125,45498856,45499981,45501553,45503201,45504883,45506544,45508252,45509938,45511616,45513306,45515049,45516129,45517390,45518843,45519999,45520918,45522515,45523926,45525140,45526246,45528068,45529673,45531325,45531755,45531795,45531835,45531874,45532193,45532226,45532266,45532306,45532876,45534152,45535493,45536699,45537900,45539595,45541249,45542868,45544571,45546262,45547928,45549601,45551208,45552775,45552815,45552853,45552893,45552933,45554046,45554358,45554472,45555714,45557567,45559579,45561315,45562970,45564575,45566227,45567913,45569572,45571278,45573010,45574691,45576427,45578175,45579929,45581669,45583384,45585095,45586786,45588533,45589625,45590768,45591125,45592224,45594042,45595799,45597517,45599255,45600980,45602779,45604445,45606191,45608061,45609910,45611749,45613632,45615402,45617329,45619121,45620978,45622859,45624698,45626380,45628028,45629773,45631425,45633237,45635029,45636734,45638616,45640396,45642372,45644146,45646101,45647909,45649852,45651715,45653596,45655590,45657088,45658467,45659769,45660981,45662315,45663908,45665462,45666922,45668251,45669664,45670901,45672183,45673421,45674720,45676032,45677478,45679242,45679840,45680654,45681528,45682511,45683869,45685541,45686612,45687333,45687981,45688718,45690200,45691772,45693473,45694940,45695750,45697016,45698610,45699971,45701109,45702033,45702860,45703825,45704566,45705187,45706098,45707323,45708687,45709901,45711129,45712478,45713822,45715230,45716501,45717981,45719759,45721482,45723301,45724990,45726776,45728474,45730244,45731967,45733743,45735496,45737239,45739010,45740780,45742581,45744349,45746094,45747262,45748230,45749157,45750132,45751706,45753669,45755373,45757294,45759180,45760303,45761523,45762713,45763940,45765969,45767988,45769985,45772011,45773950,45775868,45777752,45779645,45781593,45783633,45785683,45787731,45789772,45791530,45793348,45795134,45796971,45798782,45800581,45802290,45804100,45805821,45807473,45809115,45810719,45812428,45814014,45815294,45816609,45818246,45819540,45820700,45821965,45823249,45824578,45825756,45827034,45828262,45829871,45831260,45832474,45833678,45835391,45836985,45837768,45838565,45840139,45841784,45842627,45843371,45844667,45845935,45847018,45847796,45848758,45850330,45851934,45853300,45854704,45856312,45858209,45860084,45861942,45863815,45865687,45867607,45869551,45871514,45873362,45875037,45876695,45878350,45880002,45881710,45883507,45885300,45887012,45888614,45890044,45891455,45892882,45894447,45895892,45897323,45898763,45900361,45901888,45903334,45904831,45906374,45907943,45909453,45910922,45912466,45914378,45916359,45918304,45920229,45922245,45924217,45926203,45928174,45930177,45931939,45933716,45935469,45937227,45939018,45940590,45942133,45943702,45945594,45947510,45949308,45951213,45953145,45954921,45956750,45958515,45960357,45962308,45964170,45966013,45967911,45969789,45971602,45973381,45975198,45977098,45978532,45980028,45981616,45983218,45984435,45985682,45987280,45988573,45989756,45991017,45992226,45993942,45995073,45996321,45997619,45999491,46001269,46003059,46004827,46006629,46008438,46010242,46012023,46013828,46015702,46017533,46019334,46021141,46022593,46023482,46024334,46025144,46026113,46027257,46028440,46029584,46030765,46032051,46033257,46034445,46035656,46036985,46038384,46039792,46041085,46042688,46044523,46046392,46048235,46050115,46051967,46053768,46055624,46057449,46059405,46061306,46063244,46065158,46067088,46068997,46070922,46072880,46074766,46076546,46078317,46080098,46081757,46083574,46085317,46086993,46088505,46090095,46091810,46093602,46095404,46097249,46099085,46100812,46102669,46104479,46105944,46107411,46108812,46110333,46111884,46113480,46115264,46116832,46118389,46120026,46121668,46123384,46125063,46126821,46128565,46130356,46132153,46134044,46136100,46138153,46140115,46142081,46144053,46146042,46148030,46150020,46151954,46153918,46155840,46157752,46158857,46160187,46161567,46162610,46164362,46166156,46167899,46169658,46171385,46172896,46174548,46176074,46177720,46179489,46181257,46183034,46184764,46186607,46188385,46190199,46191956,46193739,46195434,46197150,46198882,46200514,46202203,46204022,46205812,46207447,46208614,46209645,46210710,46211875,46213430,46213974,46214526,46215178,46216881,46217588,46218998,46219719,46221141,46221642,46222332,46222779,46223387,46224362,46225081,46225896,46226585,46227342,46228521,46229719,46230915,46232002,46233420,46234740,46236188,46237686,46239160,46240550,46241987,46243550,46245095,46246575,46247984,46249531,46251088,46252629,46253987,46255497,46257063,46258502,46259830,46261292,46262702,46264323,46265766,46267149,46268634,46269564,46269791,46270025,46270237,46271028,46271518,46271967,46272443,46273285,46275333,46277356,46279396,46281437,46283476,46285521,46287561,46289592,46291629,46293598,46295518,46297491,46299383,46301283,46303215,46305119,46307008,46308445,46309829,46311255,46312709,46314053,46315181,46316347,46317471,46318705,46320152,46321513,46323054,46324547,46326404,46328215,46330049,46331927,46333794,46335618,46337402,46339208,46341095,46342865,46344611,46346370,46348169,46349915,46351604,46353363,46355037,46356599,46357898,46359180,46360552,46362102,46363423,46364706,46366076,46367778,46369553,46371301,46373106,46374846,46376052,46377319,46378521,46379788,46381637,46383463,46385243,46387038,46388723,46390185,46391576,46393092,46394649,46396686,46398718,46400753,46402775,46404787,46406773,46408746,46410744,46412489,46413992,46415489,46416965,46418671,46420372,46422031,46423715,46425443,46427436,46429415,46431387,46433380,46435215,46436938,46438660,46440382,46442358,46444410,46446458,46448505,46450480,46452061,46453595,46454340,46454872,46455411,46455946,46456879,46458304,46459728,46461148,46462269,46463565,46465142,46466759,46468003,46469357,46470922,46472468,46473960,46475601,46477256,46478998,46480631,46482542,46484393,46485704,46486927,46488271,46489511,46490699,46491632,46492655,46493614,46494946,46495826,46496812,46497747,46498590,46499846,46500503,46501212,46502818,46504810,46506795,46508752,46510537,46512501,46514495,46516482,46518474,46520320,46522225,46524118,46526002,46527983,46529994,46531149,46533154,46535147,46537025,46538918,46540813,46542726,46544731,46546725,46548550,46550561,46552201,46553857,46555498,46556993,46558484,46560011,46561622,46563117,46564688,46566569,46568485,46570335,46572185,46574114,46576005,46577859,46579725,46581601,46583103,46584580,46586028,46587933,46589889,46591868,46593879,46595889,46597721,46599512,46601313,46603112,46604955,46606830,46608722,46610601,46612280,46613693,46615169,46616567,46617991,46619459,46620990,46622469,46623909,46625447,46627123,46628834,46630466,46632021,46633570,46635143,46636694,46638315,46640049,46641674,46643425,46645180,46646832,46648596,46650256,46651992,46653659,46655326,46656847,46658568,46660224,46661897,46663403,46665069,46666813,46668255,46669825,46671385,46672933,46674392,46676072,46677668,46679294,46680717,46682248,46683787,46685273,46686761,46688228,46689792,46691512,46692988,46694293,46695527,46697048,46698672,46700332,46702096,46703506,46705229,46706828,46708446,46710230,46711969,46713500,46715153,46716661,46718354,46719882,46721400,46723035,46724537,46725996,46727494,46729298,46730642,46732045,46733418,46734669,46735817,46736954,46738261,46739441,46740825,46742287,46743642,46744999,46746574,46747934,46749143,46750509,46752378,46754067,46755808,46757375,46758626,46759671,46760691,46761556,46762499,46763570,46764765,46766064,46767315,46768896,46770483,46772047,46773769,46775713,46777052,46778336,46779867,46781329,46782859,46784340,46785799,46787198,46788675,46790352,46792078,46793775,46795480,46797138,46798857,46800651,46802612,46804278,46806080,46807847,46809435,46810803,46812147,46813475,46814875,46816326,46817879,46819496,46821121,46822730,46824166,46825600,46826968,46828578,46829983,46831355,46832727,46834121,46835528,46836912,46838567,46840070,46841582,46843047,46844457,46845913,46847373,46848847,46850353,46851804,46853560,46855358,46856877,46858279,46859638,46861031,46862427,46863755,46865121,46866615,46868307,46870066,46871808,46873408,46874915,46876424,46877863,46879290,46881013,46882437,46883876,46885265,46886711,46888128,46889674,46891359,46893006,46894588,46896039,46897557,46899040,46900452,46901892,46903380,46904821,46906495,46908131,46908468,46908735,46910336,46911955,46912329,46912609,46914124,46915711,46916109,46916383,46917908,46919511,46919933,46920200,46921735,46923318,46923766,46924029,46925488,46927072,46927536,46927798,46929043,46930315,46931595,46932841,46934291,46935543,46936835,46938145,46939532,46940816,46942057,46943382,46944684,46946125,46947393,46948753,46950053,46951506,46953032,46954293,46955550,46956816,46958048,46959327,46960583,46961876,46963103,46964555,46965780,46966992,46968220,46969425,46970617,46971810,46973001,46974505,46975759,46977014,46978270,46979558,46980849,46982138,46983435,46984697,46986586,46988315,46990100,46991788,46993455,46995076,46996906,46998766,47000221,47001467,47002842,47004190,47005529,47006909,47008254,47009519,47010907,47012204,47013646,47014940,47016316,47017691,47019108,47020472,47021963,47023810,47025432,47027032,47028614,47030237,47031847,47033343,47034730,47036039,47037419,47038822,47040307,47041833,47043379,47044815,47046395,47048127,47050017,47051678,47053268,47054842,47056467,47058058,47059530,47060941,47062249,47063643,47065044,47066503,47068053,47069582,47070997,47072579,47074283,47076175,47077846,47079423,47081012,47082660,47084254,47085745,47087205,47088487,47089842,47091269,47092726,47094308,47095832,47097267,47098782,47100507,47102421,47104094,47105681,47107263,47108927,47110515,47112016,47113497,47114739,47116101,47117503,47118946,47120526,47122038,47123468,47124986,47126690,47128592,47129858,47131128,47132233,47133178,47134126,47135272,47136330,47137441,47138528,47139809,47141092,47142297,47143203,47144182,47145254,47146335,47147978,47149210,47150508,47151631,47152609,47153584,47154710,47155805,47156850,47157943,47159221,47160488,47161713,47162665,47163653,47164727,47165797,47167291,47169259,47171172,47173082,47175046,47177014,47178971,47180922,47182837,47184702,47186505,47188282,47190138,47192002,47193946,47195866,47197817,47199497,47201250,47203221,47205158,47207135,47209155,47211140,47213061,47215031,47216948,47218070,47219247,47220398,47221545,47222831,47223955,47225110,47226237,47227943,47229709,47231463,47233234,47235013,47236773,47238590,47240380,47242111,47243900,47245666,47247446,47249197,47250958,47252617,47254620,47256568,47258469,47260366,47262251,47264231,47265859,47266580,47267372,47269298,47271261,47273277,47275261,47277213,47279170,47281162,47283114,47285112,47287064,47289019,47290980,47292962,47294922,47296896,47298837,47300798,47302642,47304219,47305772,47307365,47308913,47310514,47312076,47313638,47315299,47317075,47318706,47320381,47322047,47323674,47325455,47327126,47328874,47330509,47332210,47333671,47335254,47336684,47338395,47340058,47341794,47343464,47345192,47346885,47348558,47350324,47352065,47353954,47355676,47357519,47359313,47361151,47362766,47364456,47366085,47367846,47369551,47371327,47373022,47374711,47376395,47377912,47379530,47381068,47382735,47384346,47386137,47387799,47389571,47391271,47393046,47394828,47396649,47398265,47399752,47401526,47403165,47404977,47406769,47408577,47410355,47412176,47413986,47415811,47417608,47419377,47421079,47422811,47424570,47426127,47427773,47429311,47431075,47432726,47434586,47436278,47438157,47439913,47441661,47443323,47445106,47446874,47448602,47449877,47451778,47453694,47455497,47457061,47458977,47460857,47462341,47463912,47465460,47467461,47469471,47471444,47472994,47474386,47475630,47476861,47478178,47479336,47480472,47482149,47483776,47485384,47486939,47488430,47489928,47491466,47492993,47494670,47495909,47497043,47497958,47498876,47499995,47501229,47502250,47503238,47504412,47505516,47507418,47509170,47511043,47512875,47514699,47516510,47518364,47520137,47522041,47523798,47525346,47527067,47528701,47530438,47532183,47533876,47535656,47537540,47539357,47541225,47543081,47544903,47546740,47548544,47550355,47552278,47554026,47555602,47557318,47558999,47560723,47562478,47564255,47565983,47567799,47569622,47571528,47573354,47575243,47577041,47578968,47580765,47582716,47584655,47586528,47588518,47590457,47592345,47594310,47596325,47598243,47600190,47601990,47603708,47605523,47607307,47609121,47610932,47612779,47614637,47616001,47617336,47619008,47620428,47621619,47623221,47624714,47626498,47627900,47628947,47630304,47631723,47632843,47633799,47634430,47634726,47635869,47637104,47638411,47639717,47641024,47642461,47643729,47645044,47646387,47647700,47649173,47650486,47651821,47653128,47654566,47655944,47657264,47658621,47659956,47661424,47662928,47664262,47665538,47667052,47668756,47670650,47672609,47674646,47676693,47678691,47680695,47682677,47684616,47686263,47687899,47689419,47690910,47692637,47694217,47695937,47697664,47699352,47701110,47702897,47704517,47706275,47707872,47709446,47711051,47712691,47714273,47716025,47717922,47719849,47721702,47723336,47725048,47726838,47728813,47730771,47732627,47734356,47736071,47737912,47739831,47741672,47743439,47744970,47746777,47748702,47750584,47752468,47754118,47755824,47757723,47759718,47761702,47763622,47765387,47767047,47768914,47770790,47772662,47774480,47775874,47776865,47777858,47778816,47780173,47781627,47783214,47784820,47786464,47788096,47789776,47791428,47793055,47794569,47796487,47798169,47799902,47801618,47803210,47804940,47806568,47808194,47809878,47811562,47813456,47815218,47816937,47818698,47820440,47822160,47823903,47825501,47827193,47828881,47830612,47832321,47834113,47836059,47837839,47839167,47841018,47842894,47844752,47846690,47848654,47850575,47852460,47854184,47855931,47857587,47859260,47860978,47862928,47864802,47866714,47868595,47870499,47872487,47874401,47876359,47878307,47880244,47882073,47883873,47885666,47887448,47889313,47891277,47893147,47895050,47896935,47898842,47900701,47902581,47904327,47905653,47906746,47908102,47909825,47911427,47913104,47914720,47916591,47918359,47920091,47921881,47923637,47925379,47927155,47928912,47930684,47932421,47934221,47935902,47936980,47937561,47938181,47938916,47940082,47941059,47942383,47943629,47944873,47945831,47947678,47949387,47951016,47952569,47954320,47955922,47957580,47959267,47960887,47962300,47963964,47965476,47966852,47968016,47969619,47971188,47972949,47974634,47976278,47977992,47979738,47981307,47982957,47984508,47986011,47987606,47989161,47990836,47992382,47994061,47995603,47997191,47998858,48000422,48002066,48003631,48005302,48006840,48008489,48009940,48011464,48013079,48014596,48016191,48017704,48019213,48020873,48022438,48024111,48025647,48027177,48028986,48030788,48032600,48034446,48036310,48038161,48040016,48041838,48043739,48045544,48047368,48049192,48051114,48053023,48054886,48056736,48058620,48060602,48062621,48064586,48066507,48068395,48070286,48072218,48074147,48076068,48077978,48079908,48081803,48083669,48085539,48087396,48089300,48091183,48092977,48094647,48096289,48097966,48099675,48101283,48102886,48104554,48106169,48107791,48109440,48111048,48112788,48114422,48116065,48117728,48119377,48121012,48122663,48124281,48125923,48127674,48129352,48130974,48132609,48134230,48135851,48137489,48139160,48141005,48142858,48144738,48146574,48148436,48150298,48152145,48154008,48155855,48157790,48159645,48161480,48163312,48165170,48167011,48168835,48170688,48172633,48174525,48176381,48178232,48180105,48181963,48183805,48185666,48187548,48189229,48190628,48192067,48193523,48194839,48196280,48197706,48199312,48200715,48202059,48203523,48205014,48206430,48207876,48209636,48211501,48213337,48215179,48216960,48218759,48220572,48222481,48224396,48226092,48227818,48229532,48231209,48232893,48234583,48236331,48237974,48239683,48241227,48243016,48244733,48246424,48248189,48249958,48251658,48253249,48254945,48256800,48258640,48260446,48262327,48263941,48265718,48267583,48269474,48271331,48273176,48274891,48276585,48278374,48280145,48281920,48283680,48285212,48286955,48288647,48290309,48292134,48293791,48295470,48297251,48299089,48300859,48302608,48304357,48305998,48307693,48309348,48310993,48312758,48314440,48315873,48317366,48318866,48320436,48321924,48323586,48325038,48326710,48328289,48329784,48331402,48333096,48334698,48336192,48337765,48339378,48340869,48342464,48343987,48345774,48347602,48349350,48351117,48352874,48354630,48356332,48357743,48359173,48360956,48362762,48364564,48366314,48368020,48369678,48371146,48372821,48374566,48376295,48377918,48379269,48380590,48382397,48384148,48385885,48387234,48388872,48390293,48391774,48393434,48394868,48396563,48398047,48399526,48401039,48402561,48404089,48405645,48407133,48408436,48409928,48411461,48413046,48414590,48416088,48417594,48419155,48420762,48422253,48423813,48425168,48426612,48428060,48429537,48431351,48433189,48435059,48436850,48438679,48440512,48442303,48444027,48445758,48447248,48449047,48450807,48452522,48454329,48455987,48457748,48459522,48461258,48463035,48465049,48467079,48469080,48471094,48473110,48475107,48476874,48478640,48480380,48482005,48483743,48485462,48487255,48488931,48490629,48492358,48494149,48495884,48497555,48499349,48501049,48502774,48504435,48506103,48507776,48509506,48511164,48512950,48514630,48516404,48518065,48519728,48521442,48523170,48524856,48526544,48528202,48530009,48531612,48533046,48534477,48536241,48537993,48539643,48541345,48543007,48544424,48545939,48547456,48549002,48550429,48551931,48553480,48555003,48556603,48558396,48560144,48561811,48563582,48565239,48566985,48568737,48570478,48572091,48573764,48575421,48577100,48578720,48580317,48581932,48583643,48585260,48586958,48588592,48590229,48591928,48593541,48595218,48596848,48598590,48600244,48601893,48603527,48605200,48606831,48608475,48610112,48611762,48613465,48615107,48616753,48618402,48620124,48621767,48623372,48624961,48626717,48628335,48630012,48631688,48633473,48635143,48636784,48638406,48640053,48641763,48643366,48645025,48646701,48648518,48650144,48651762,48653381,48655058,48656705,48658542,48660383,48662045,48663679,48665427,48667258,48668906,48670629,48672399,48674241,48675989,48677814,48679733,48681605,48683506,48685533,48687488,48689437,48691380,48693333,48695144,48696985,48698901,48700882,48702915,48704915,48706915,48708793,48710713,48712565,48714381,48716245,48718242,48720255,48722273,48724308,48726290,48728273,48730175,48732087,48733972,48735894,48737806,48739736,48741690,48743715,48745421,48747298,48749197,48751101,48752951,48754762,48756344,48757956,48759835,48761661,48763472,48765086,48766725,48768324,48769963,48771587,48773353,48774392,48775449,48776377,48777456,48778685,48779953,48781093,48782431,48783625,48784904,48786051,48787321,48788571,48789785,48790961,48792204,48793384,48795099,48796795,48798552,48800292,48801961,48803676,48805365,48807116,48808780,48810478,48812184,48813971,48815674,48817341,48818985,48820694,48822327,48824053,48825681,48827321,48828980,48830730,48832398,48834067,48835682,48837400,48839078,48840775,48842436,48844070,48845907,48847615,48849337,48851065,48852738,48854461,48856188,48857921,48859730,48861470,48863143,48864885,48866668,48868692,48870688,48872708,48874749,48876784,48878820,48880849,48882873,48884891,48886938,48888981,48891029,48893086,48895134,48897184,48899225,48901260,48903218,48905074,48906941,48908847,48910766,48912655,48914566,48916432,48918332,48919980,48921698,48923230,48924910,48926698,48928380,48929912,48931566,48933299,48934992,48936636,48938328,48939975,48941671,48943438,48945220,48946823,48948546,48950185,48951732,48953391,48954841,48956545,48958312,48960196,48961909,48963569,48965208,48966947,48968905,48970778,48972653,48974446,48976216,48977929,48979756,48981585,48983453,48984927,48986944,48988909,48990934,48992865,48994770,48996668,48998348,49000099,49001745,49003530,49005235,49007012,49008802,49010560,49012233,49013999,49015709,49017403,49019095,49020802,49022247,49023755,49025244,49026762,49028337,49029851,49031372,49032893,49034384,49035959,49037459,49038972,49040495,49042037,49043556,49045096,49046604,49048071,49049081,49049917,49050921,49051878,49053402,49054809,49056098,49057489,49058838,49060276,49061615,49063031,49064536,49066154,49067882,49069499,49071130,49072785,49074385,49076031,49077757,49079531,49081227,49082888,49084572,49086378,49088154,49089877,49091615,49093320,49094995,49096682,49098351,49099953,49100989,49102575,49104244,49105953,49107836,49109733,49111657,49113531,49115397,49117275,49119194,49121098,49123008,49124966,49126628,49128217,49129705,49131245,49132695,49134270,49136008,49137970,49139868,49141694,49143336,49144885,49146461,49148101,49149926,49151825,49153686,49155299,49156964,49158609,49160259,49161894,49163582,49165285,49167074,49168468,49169973,49171651,49173329,49175058,49176788,49178518,49179646,49181171,49182410,49183783,49185287,49186976,49188741,49190484,49191824,49193260,49194752,49196127,49197534,49198896,49200259,49201596,49202951,49204352,49205857,49207297,49208579,49209944,49211284,49212606,49213965,49215233,49216572,49218144,49219509,49221083,49222598,49224294,49226019,49227452,49228582,49230036,49231250,49232664,49234140,49235741,49237347,49238826,49240095,49241301,49242967,49244424,49245798,49247132,49248272,49249578,49250855,49252323,49253988,49255377,49256954,49258649,49260394,49262132,49263814,49265588,49266841,49268488,49269827,49271491,49273039,49274750,49276445,49277906,49279114,49280745,49282277,49283534,49285010,49286645,49288280,49289715,49291197,49292438,49294093,49295380,49296839,49298368,49300058,49301805,49303504,49304965,49306507,49308129,49309577,49311136,49312561,49314094,49315613,49317100,49318513,49320349,49322136,49323851,49325601,49327398,49327778,49327877,49329054,49329511,49330180,49330769,49331308,49331791,49332544,49333178,49333680,49334972,49335885,49336767,49338196,49339595,49340990,49342432,49343847,49345393,49346990,49348696,49350301,49351944,49353499,49355101,49356952,49358534,49359655,49360820,49362003,49363254,49364580,49365843,49367144,49368407,49369882,49371389,49372987,49374531,49376032,49377593,49379267,49380866,49382251,49383592,49384976,49385845,49385870,49385900,49385925,49386371,49387063,49388285,49389032,49390490,49392117,49393786,49395403,49397036,49398253,49399904,49401428,49403034,49404574,49406282,49408187,49410122,49412028,49413976,49415855,49417724,49419199,49420696,49422189,49423535,49424491,49425445,49426690,49428022,49429427,49430868,49432358,49433868,49435295,49436822,49438553,49440319,49441854,49443460,49444959,49446521,49448108,49449625,49451174,49452886,49454936,49456984,49459020,49461032,49462924,49464857,49466875,49468846,49470591,49472502,49474373,49476317,49478313,49480349,49482338,49484372,49486358,49488379,49490351,49492384,49494435,49496446,49498172,49500004,49502005,49504011,49506008,49507951,49509614,49511227,49512474,49513705,49514891,49516315,49518308,49520220,49521933,49523683,49525579,49527471,49529237,49531022,49532804,49534669,49536696,49538724,49540743,49542751,49544795,49546770,49548815,49550734,49552277,49553835,49555388,49556908,49558439,49559992,49561524,49563030,49564405,49565800,49567114,49568455,49569748,49571051,49572381,49573900,49575908,49577932,49579913,49581899,49583897,49585879,49587800,49589736,49591751,49593589,49595312,49596982,49598646,49600364,49602002,49603339,49603564,49604009,49605256,49606574,49607899,49608882,49609899,49610858,49611964,49613123,49614739,49616440,49618000,49619706,49621433,49623107,49624627,49626206,49627788,49629389,49630931,49632521,49634017,49635508,49636752,49638134,49639195,49640366,49641600,49642941,49644182,49645504,49646928,49648418,49649985,49651588,49653052,49654501,49655913,49657197,49658152,49659230,49660822,49662337,49663124,49664287,49665580,49666948,49668434,49669895,49671381,49672895,49674087,49675419,49676963,49678657,49680605,49682409,49683703,49685042,49686226,49687617,49689189,49690826,49692420,49694074,49695652,49697252,49698745,49700343,49701840,49703297,49704535,49705959,49707533,49709087,49710452,49711814,49713198,49714600,49715945,49717234,49717791,49718453,49718899,49719612,49721058,49722582,49724136,49725690,49727116,49728594,49730135,49731593,49732975,49734319,49735463,49736629,49737925,49739319,49740827,49742204,49743322,49744299,49745165,49746331,49748061,49749962,49751747,49753524,49755079,49756486,49757497,49758617,49760173,49761765,49763325,49764880,49766453,49768030,49769589,49771292,49773061,49774893,49776618,49778440,49780227,49782106,49783879,49785637,49787044,49788441,49789796,49791213,49792624,49794118,49795787,49797559,49799527,49801472,49803345,49805278,49807246,49809191,49811064,49813029,49814935,49816764,49818309,49819587,49820318,49821070,49821916,49823156,49824638,49826228,49827895,49829605,49831083,49832693,49834051,49835388,49836624,49837587,49838189,49839020,49839841,49840713,49841327,49842245,49843681,49844909,49845401,49845935,49846438,49847396,49849151,49850843,49851927,49853064,49854088,49855264,49856632,49857988,49859086,49860216,49861121,49862114,49863546,49865018,49866450,49867893,49869318,49870879,49872577,49874337,49875976,49877767,49879645,49881502,49883058,49884461,49885458,49886604,49887742,49888914,49889868,49890881,49891708,49892767,49893765,49894908,49896121,49897273,49897726,49898272,49898894,49899558,49900037,49900559,49901163,49901811,49902277,49902810,49903442,49904147,49904646,49905201,49905810,49906490,49906908,49907394,49907951,49908965,49910844,49912541,49913584,49914709,49915742,49916863,49917895,49918991,49920098,49921434,49923238,49924906,49926584,49928295,49929933,49931607,49933343,49934916,49936064,49937376,49939039,49940703,49942383,49944142,49946018,49947509,49947760,49948119,49948407,49948786,49948977,49949258,49949505,49949879,49949930,49950199,49950224,49950405,49950563,49950847,49951107,49951406,49951647,49952273,49953722,49955196,49956812,49958345,49959412,49960491,49961558,49962683,49963867,49965190,49966657,49968178,49969627,49971241,49973094,49974973,49976670,49978379,49979759,49981376,49983003,49984660,49986031,49987601,49989581,49991565,49993594,49995626,49997566,49999534,50001491,50003466,50005432,50007398,50009408,50011234,50012503,50013798,50015418,50017021,50018608,50019783,50021434,50022885,50024401,50025891,50027385,50028838,50030301,50031779,50033312,50034839,50036354,50037779,50038780,50040092,50041333,50042775,50043894,50045177,50046437,50047536,50048593,50049710,50051758,50053213,50053840,50055469,50057517,50058408,50059201,50061111,50062955,50063753,50064895,50066943,50068263,50068873,50070480,50072446,50074450,50076498,50078546,50080594,50082513,50084502,50086550,50088598,50090646,50092546,50094525,50096378,50098362,50100241,50102272,50104299,50106200,50108173,50110135,50112121,50114077,50116023,50117966,50119883,50121872,50123786,50125795,50127795,50129726,50131727,50133592,50135590,50137451,50139423,50141281,50143260,50145308,50147356,50149219,50151197,50153245,50155293,50157156,50159129,50161086,50163073,50165093,50166960,50168935,50170983,50173015,50175020,50176958,50178979,50181027,50183077,50184992,50187000,50188903,50190912,50192840,50194821,50196872,50198920,50200968,50202999,50204916,50206907,50208955,50211003,50213051,50214916,50216891,50218867,50220853,50222845,50224752,50226735,50228681,50230660,50232705,50234572,50236547,50238414,50240409,50242453,50244489,50246357,50248386,50250439,50252485,50254382,50256389,50258437,50260485,50262470,50264434,50266430,50268478,50270503,50272409,50274390,50276438,50278486,50280349,50282320,50284368,50286416,50288292,50290270,50292141,50294121,50295992,50298020,50299934,50301943,50303847,50305856,50307730,50309758,50311629,50313600,50315466,50317380,50319317,50321154,50323163,50325210,50327258,50329123,50331104,50333152,50335200,50337065,50339045,50341093,50343141,50345005,50346985,50349042,50351097,50352960,50354933,50356982,50358845,50360843,50362896,50364761,50366757,50368702,50370684,50372692,50374611,50376540,50378478,50380411,50382344,50384258,50386219,50388103,50390079,50392094,50394001,50395982,50397859,50399836,50401699,50403632,50405541,50407521,50409569,50411565,50413524,50415519,50417567,50419435,50421464,50423344,50425374,50427244,50429274,50431148,50433181,50435056,50437032,50439007,50440993,50442982,50444888,50446829,50448734,50450676,50452583,50454522,50456432,50458382,50460283,50462264,50464274,50466297,50468175,50470205,50472240,50474252,50476239,50478199,50480151,50482084,50484044,50485951,50487930,50489797,50491791,50493706,50495714,50497761,50499636,50501615,50503620,50505571,50507560,50509432,50511407,50513455,50515483,50517375,50519352,50521409,50523433,50525329,50527313,50529361,50531409,50533279,50535255,50537303,50539351,50541323,50543309,50545335,50547383,50549431,50551329,50553356,50555404,50557452,50559500,50561365,50563342,50565390,50567438,50569314,50571343,50573394,50575450,50577402,50579381,50581236,50583208,50585210,50587104,50589109,50591104,50593068,50595033,50596975,50598912,50600775,50602755,50604727,50606686,50608681,50610665,50612625,50614620,50616645,50618665,50620693,50622612,50624597,50626630,50628636,50630648,50632548,50634527,50636464,50638445,50640464,50642362,50644342,50646208,50648186,50650062,50652040,50654089,50656080,50658033,50660024,50662063,50663926,50665899,50667947,50669815,50671790,50673838,50675708,50677646,50679542,50681508,50683400,50685370,50687242,50689217,50691081,50693056,50694925,50696901,50698764,50700744,50702610,50704585,50706641,50708689,50710734,50712630,50714613,50716661,50718709,50720737,50722670,50724672,50726549,50728525,50730532,50732470,50734393,50736332,50738252,50740198,50742185,50744061,50746038,50747926,50749956,50752002,50753944,50755923,50757964,50759911,50761891,50763840,50765826,50767779,50769725,50771722,50773770,50775818,50777831,50779770,50781766,50783814,50785862,50787877,50789810,50791806,50793854,50795902,50797907,50799853,50801850,50803898,50805946,50807911,50809897,50811874,50813785,50815726,50817641,50819560,50821492,50823504,50825491,50827451,50829448,50831379,50833388,50835411,50837307,50839290,50841234,50843238,50845290,50847338,50849395,50851260,50853232,50855280,50857328,50859326,50861272,50863269,50865317,50867365,50869266,50871271,50873319,50875367,50877415,50879278,50881255,50883120,50885116,50886981,50888952,50890818,50892786,50894661,50896636,50898587,50900565,50902614,50904478,50906448,50908496,50910373,50912349,50914397,50916305,50918310,50920184,50922213,50924080,50926058,50927961,50929889,50931819,50933733,50935690,50937526,50939532,50941396,50943371,50945421,50947469,50949338,50951362,50953418,50955458,50957329,50959348,50961365,50963344,50965277,50967256,50969272,50971137,50973135,50975078,50977057,50979073,50980988,50982965,50984985,50986999,50988870,50990873,50992899,50994915,50996895,50998846,51000801,51002699,51004676,51006550,51008525,51010499,51012475,51014343,51016371,51018354,51020343,51022208,51024203,51026245,51028146,51030131,51032125,51034078,51036075,51038130,51040120,51042066,51044059,51046114,51048116,51050054,51051995,51053927,51055799,51057778,51059773,51061710,51063675,51065569,51067507,51069417,51071354,51073273,51075196,51077146,51079046,51081023,51082839,51084838,51086732,51088645,51090577,51092497,51094482,51096345,51098349,51100404,51102348,51104327,51106377,51108334,51110310,51112360,51114300,51116301,51118353,51120250,51122256,51124286,51126218,51128220,51130086,51132064,51134036,51136022,51138014,51139917,51141899,51143947,51145995,51148043,51149914,51151964,51154012,51156060,51158108,51160033,51161912,51163966,51165850,51167759,51169811,51171692,51173542,51175590,51177467,51179312,51181303,51183161,51185138,51187169,51189030,51191065,51192913,51194946,51196796,51198746,51200598,51202462,51204318,51206185,51208024,51209901,51211704,51213639,51215465,51217454,51219422,51221258,51223235,51225151,51226974,51228896,51230877,51232797,51234766,51236672,51238549,51240434,51242457,51244378,51246350,51248213,51250227,51252078,51254104,51255966,51257850,51259686,51261576,51263454,51265415,51267298,51269251,51271167,51272979,51274809,51276694,51278586,51280413,51282257,51284123,51285960,51287839,51289652,51291562,51293410,51295435,51297298,51299317,51301278,51303153,51305035,51306878,51308907,51310759,51312785,51314548,51316441,51318438,51320466,51322324,51324215,51326057,51327921,51329760,51331799,51333590,51334724,51335912,51337418,51338921,51340179,51341800,51343401,51344604,51345620,51346830,51347997,51349148,51350319,51351465,51352679,51354154,51356017,51357952,51359860,51361799,51363710,51365567,51367429,51369355,51371271,51373168,51375145,51376989,51379001,51380871,51382834,51384730,51386713,51388770,51390818,51392681,51394614,51396520,51398501,51400380,51402414,51404276,51406107,51407279,51408411,51409642,51410684,51412543,51414490,51416390,51418294,51420240,51422078,51424087,51425943,51427900,51429803,51431720,51433652,51435539,51437520,51439376,51441388,51443261,51445173,51447079,51448974,51450939,51452743,51454772,51456635,51458612,51460660,51462712,51464599,51466575,51468623,51470666,51472579,51474561,51476609,51478657,51480558,51482539,51484587,51486568,51488537,51490541,51492589,51494459,51496435,51498483,51500526,51502436,51504418,51506466,51508420,51510397,51512447,51514495,51516358,51518333,51520195,51522210,51524076,51526041,51527363,51528699,51530475,51531751,51532904,51534581,51535907],"sizes":[1641,1482,1475,1484,1493,1482,1476,1483,1480,1476,1474,1476,1477,1481,1474,1492,1461,1478,1476,1484,1477,1495,1482,1478,1487,1485,1132,559,566,703,371,598,309,533,510,466,450,594,499,405,220,306,252,250,263,273,220,316,322,245,151,138,229,140,97,90,366,496,355,269,321,244,531,451,421,238,329,446,499,446,570,189,386,548,616,323,146,292,456,320,273,304,350,256,299,310,82,85,106,268,258,234,525,515,410,300,106,344,376,294,359,475,379,291,394,490,516,448,453,2052,2020,2048,2056,2031,2028,2054,2053,1822,1720,1724,1737,1698,1729,1722,1723,1721,1700,1707,1719,1719,1698,1698,1704,1677,1700,1737,1635,1671,1675,1694,1732,1719,1733,1730,1740,1724,1652,1737,1717,1737,1745,1726,1723,1705,1789,2048,2048,2048,2048,2048,1999,1734,1701,1686,1718,1748,1831,1773,1861,1650,1751,1787,1686,1750,1703,1691,1673,1592,1704,1678,1717,1676,1621,1695,1745,1690,1679,1726,1727,1771,1620,1657,1649,1735,1758,1735,1712,1734,1637,1756,1692,1713,722,447,567,641,1076,825,881,857,977,1021,1075,1443,1824,1870,1837,1874,1859,1871,1557,1478,1501,1455,1447,1442,1442,1442,1431,1441,1436,1476,1470,1463,1448,1471,1456,1475,1471,1466,1483,1466,1474,1423,1452,1473,1474,1471,1460,1479,1441,1455,1454,1469,1466,1469,1475,1478,1461,1461,1452,1470,1467,1446,1449,1456,1454,1446,1457,1481,1462,1474,1447,1474,1463,1447,1469,1461,1471,1474,1478,1487,1464,1478,1475,1459,1464,1463,1442,1438,1455,1459,1469,1467,959,594,456,539,362,331,356,387,473,526,529,428,547,527,398,459,458,474,446,448,478,431,437,583,596,483,440,610,558,356,519,637,456,593,633,466,465,350,424,384,429,476,392,421,472,389,423,308,201,251,538,493,395,363,603,441,460,554,566,621,575,497,468,547,472,503,478,471,495,397,534,375,344,330,510,483,451,511,589,631,473,493,544,371,505,515,535,338,587,598,572,600,586,581,600,491,512,460,530,461,444,444,475,564,451,536,546,497,598,454,546,535,590,613,487,491,453,459,465,379,428,343,497,451,496,469,437,406,471,478,552,613,565,487,368,419,349,564,503,623,343,209,168,106,205,365,453,266,270,307,472,409,414,414,387,431,441,348,449,548,589,400,523,517,446,413,491,509,504,536,616,599,665,624,616,579,537,487,558,572,571,417,582,540,516,518,544,523,414,517,551,499,452,500,521,515,477,580,562,412,409,442,515,632,522,485,475,466,458,318,490,234,365,449,263,346,397,343,388,505,407,340,491,509,518,513,493,535,466,456,505,459,465,469,450,428,424,409,439,457,457,455,427,423,461,309,357,432,441,380,366,401,507,403,417,434,377,448,334,439,517,459,463,525,1691,1945,2025,1987,1999,1999,1922,1982,2050,2046,2054,2042,2017,2027,2026,2030,2055,2055,2048,1879,1726,1723,1702,1722,1714,1714,1732,1721,1705,1737,1723,1693,1709,1700,1713,1720,1704,1696,1685,1705,1723,1691,1675,1699,1667,1685,1679,1697,1687,1695,1707,1699,1682,1693,1690,1688,1678,1701,1728,1704,1731,1727,1707,1666,1680,1700,1738,1726,1717,1694,1653,1680,1664,1697,1687,1695,1683,1684,1695,1729,1752,1725,1665,1660,1698,1713,1717,1702,1705,1700,1695,1708,1689,1697,1714,1697,1710,1701,1689,1696,1722,1700,1701,1693,1698,1694,1720,1680,1710,1740,1743,1749,1749,1763,1733,1767,1736,1671,1674,1661,1689,1704,1681,1683,1673,1675,1730,1740,1732,1735,1688,1670,1667,1689,1838,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1719,1752,1706,1749,1806,1688,1717,1754,1638,1781,1744,1662,1737,1747,1740,1696,1589,1670,1690,1621,1627,1684,1553,1570,1583,1636,1608,1669,1623,1637,1639,1622,1653,1727,1727,1695,1777,1717,1748,1649,1808,1886,1843,1746,1707,1651,1644,1735,1739,1714,1649,1774,1850,1873,1659,1671,1643,1517,1521,1533,1479,1492,1540,1608,1660,1666,1554,1520,1633,1667,1634,1683,1684,1712,1578,1527,1660,1532,1769,1844,1796,1794,1792,1779,1779,1836,1795,1686,1654,1678,1699,1674,1648,1712,1772,1771,1750,1726,1613,1679,1627,482,476,555,515,584,701,648,610,587,469,338,618,666,619,759,604,517,713,640,620,545,438,509,547,573,563,132,141,435,526,279,240,130,748,646,545,308,456,558,388,597,358,422,144,116,148,147,210,369,642,745,675,617,551,512,713,822,780,975,1052,1028,871,789,755,849,298,314,436,342,361,134,134,154,463,406,250,245,225,204,311,406,252,752,499,278,495,419,237,203,224,412,415,266,342,268,310,257,621,480,471,657,520,508,642,813,917,776,748,861,904,746,681,728,754,674,706,809,690,636,505,517,494,529,532,501,542,621,830,809,821,799,792,784,579,685,966,807,894,542,783,1006,937,804,933,966,856,929,869,861,812,720,691,930,800,749,786,773,651,767,850,379,175,125,114,253,968,996,981,1007,1072,915,963,958,942,917,770,791,675,555,512,849,841,767,741,844,707,565,472,558,834,1001,1039,1080,1055,1097,976,1095,1119,1142,1093,887,721,503,421,383,366,352,341,595,844,947,1015,947,826,735,525,668,780,890,779,734,811,804,907,934,983,996,789,835,1042,1065,1104,1183,1124,1019,1136,1081,840,870,1059,1065,1195,1247,1052,975,1179,1188,1103,981,1038,1016,822,1044,1256,1184,1786,1606,1845,1874,1834,1876,1891,1839,1828,1871,1937,1981,1929,1892,1886,1951,1956,1857,1698,1593,1640,1488,1486,1504,1493,1517,1507,1495,1500,1503,1524,1480,1497,1510,1480,1488,1494,1475,1489,1510,1460,1491,1494,1491,1519,1525,1489,1495,1504,1452,1470,1498,1504,1504,1510,1500,1517,1503,1143,532,511,581,441,546,500,534,566,510,573,535,636,600,602,622,411,618,624,504,519,589,532,547,566,708,613,517,493,450,543,433,564,591,610,588,623,630,577,482,494,420,453,486,559,562,576,535,568,533,473,354,594,363,198,342,235,488,470,410,616,306,609,535,421,566,488,453,402,436,543,515,510,456,321,373,506,672,461,648,598,454,423,497,410,406,240,45,162,324,328,289,423,258,251,355,385,284,322,445,315,405,316,590,551,573,526,420,343,351,489,355,575,540,532,527,491,558,398,568,472,334,425,487,467,502,506,588,533,455,699,2022,2018,2039,2017,1993,2024,1986,2054,2045,2042,1962,1698,1681,1725,1690,1645,1692,1717,1696,1672,1706,1708,1719,1727,1715,1726,1710,1711,1716,1727,1704,1721,1703,1696,1703,1692,1714,1708,1713,1709,1687,1701,1670,1701,1712,1718,1706,1725,1707,1739,1713,1726,1730,1729,1719,1721,1711,1730,1723,1730,1728,1641,1680,1713,1712,1715,1703,1988,2048,2048,2048,2048,2048,2037,1643,1683,1653,1709,1768,1676,1672,1797,1734,1741,1721,1787,1792,1800,1829,1764,1763,1780,1732,1685,1744,1704,1708,1776,1701,1772,1709,1685,1729,1754,1770,1712,1787,1785,1779,1773,1783,1781,1756,1759,1759,1803,1612,1716,1763,1649,1115,756,832,895,897,915,730,944,1179,1441,1264,937,1111,1169,1276,1105,1123,1085,937,913,1066,1133,904,1093,1073,1120,1934,1987,2007,2009,1993,2007,1992,1596,1596,1507,1461,1459,1438,1499,1477,1461,1015,621,398,461,573,487,604,613,583,557,550,501,496,426,484,125,570,338,589,448,559,540,1630,2017,1752,1709,1711,1708,1701,1720,1709,1714,1709,1777,2049,1791,1787,1897,1818,1730,1738,1499,634,587,376,25,25,25,1930,1013,1419,1444,1408,1383,1509,1496,1459,1454,1465,1458,1441,1445,1481,1439,1470,1472,1472,1461,1462,1489,748,349,426,356,333,493,414,503,453,265,417,315,499,339,652,561,635,551,535,582,362,494,509,530,505,483,504,560,442,542,451,442,512,420,491,497,484,508,357,503,473,394,497,440,332,410,275,286,442,373,545,2056,1952,2004,1971,1727,1718,1686,1724,1721,1685,1658,1687,1690,1654,1684,1669,1647,1670,1672,1697,1711,1726,1678,1666,1687,1673,2018,2048,1968,1853,1810,1716,1799,1705,1617,1649,1728,1786,1652,1715,1707,1782,1820,1754,1574,1673,1377,751,561,628,607,773,697,884,945,1051,1388,1268,1289,1209,1434,1558,890,1010,1132,759,631,1181,1539,1814,1757,1745,1714,1601,1573,1485,1487,1475,1479,1467,1460,1489,1495,1481,1483,1485,1492,1478,1457,1483,1442,1477,1471,1481,1470,1476,1473,1480,1482,1480,1504,1482,1487,1468,911,393,621,581,461,538,437,473,551,367,194,425,401,502,377,557,439,209,472,650,571,673,497,534,549,389,521,454,508,628,443,512,434,397,454,416,639,460,398,153,197,312,427,560,378,545,499,606,537,538,522,249,431,446,131,371,296,329,354,471,424,380,519,518,473,544,531,574,546,543,526,521,291,289,507,563,491,556,552,479,463,481,446,446,464,443,570,373,471,431,476,434,488,483,405,470,441,389,1850,2043,2043,2002,2054,2052,2040,1905,1686,1684,1713,1709,1728,1677,1717,1729,1723,1699,1695,1703,1716,1708,1715,1722,1703,1705,1665,1720,1652,1685,1701,1653,1703,1660,1700,1699,1692,1679,1659,1695,1694,1693,1698,1717,1715,1680,1646,1725,1683,1911,2048,2048,2048,2015,1634,1548,1686,1723,1802,1784,1814,1921,1690,1773,1865,1764,1717,1875,1715,1805,1542,1754,1744,1647,1784,1723,1674,1703,1719,1689,1800,1743,1640,1705,1703,752,820,895,809,774,605,551,528,460,206,410,534,794,617,520,353,454,775,676,679,737,717,575,629,478,436,492,660,830,762,534,747,773,759,686,725,809,681,729,594,516,180,342,322,283,390,234,180,286,659,638,615,860,659,640,630,631,774,820,621,627,530,698,613,633,929,1316,1490,1592,1824,1694,1682,1715,1719,1705,1729,1699,1554,1219,1438,1445,1469,1473,1476,1470,1494,1471,1487,1488,1487,1485,1478,1489,1480,1457,1473,1473,1486,1476,1505,1480,980,191,284,316,397,454,386,206,285,232,303,228,409,650,394,560,430,546,394,589,458,165,202,465,586,545,408,499,591,502,459,607,441,639,394,248,56,353,497,406,466,177,199,416,522,397,202,194,193,195,188,195,203,198,189,194,191,514,276,364,176,257,310,245,507,460,510,409,474,1578,1916,1910,1886,1908,2037,1965,1655,1676,1704,1672,1665,1701,1737,1653,1663,1701,1689,1681,1654,1670,1694,1666,1646,1679,1689,1689,1650,1658,1643,1648,1663,1644,1663,1664,1661,1681,1675,1667,1996,2048,2048,1931,1678,1745,1613,1690,1865,1680,1670,1754,1698,1599,1804,1601,1614,1600,1706,1658,1629,1611,1606,1628,1657,1717,1642,1180,832,740,602,188,486,829,929,880,1025,907,818,988,1014,915,844,561,702,688,609,1716,1524,1795,1814,1833,1743,1807,1742,1560,1542,1476,1486,1489,1484,1459,1498,1456,1491,1470,1485,1494,1499,865,551,612,548,492,381,434,285,379,551,257,559,536,560,422,569,544,589,562,512,541,351,216,478,448,484,524,600,548,558,341,142,117,387,311,1145,2004,2050,2032,1697,1683,1714,1703,1700,1661,1695,1684,1730,1678,1707,1712,1706,1686,1700,1753,2048,1979,1792,1808,1839,1774,1689,1751,1769,1754,1822,1814,1804,1752,859,895,742,913,1077,1087,877,1024,762,1464,1259,1581,1682,1663,1563,1521,1462,1567,1474,1481,1463,1491,1478,1480,1469,1488,1466,1483,1243,521,616,536,530,605,497,603,258,506,389,480,309,473,325,155,262,573,179,478,258,468,508,284,438,443,611,506,602,484,436,222,285,508,596,509,1589,1921,2024,1883,1669,1696,1673,1650,1652,1650,1660,1696,1670,1653,1667,1695,1733,1703,1733,2000,2039,1675,1696,1675,1679,1648,1669,1627,1729,1701,1871,1896,1736,773,833,766,696,660,632,919,947,581,1556,1562,1503,1585,1644,1515,1490,1466,1475,1480,1486,1459,1489,1484,1482,1478,1048,437,258,315,363,354,283,271,390,475,499,369,479,388,244,335,353,401,302,339,244,170,300,267,364,349,446,568,413,305,396,391,274,339,238,243,333,184,421,1397,2048,2046,2048,1716,1719,1704,1729,1735,1717,1732,1738,1733,1723,1737,1727,1672,1731,1713,1721,1705,1934,2048,2012,1815,1815,1779,1851,1774,1825,1827,1787,1840,1853,1816,1767,1670,1772,1855,1824,1800,952,955,1346,1820,1849,1747,1504,1406,1463,1466,1456,1479,1481,1462,1473,1505,1489,1467,1481,1490,1487,1476,1486,1494,1483,1487,1475,1503,1458,1480,1469,1324,180,277,210,253,489,481,548,293,364,345,317,476,369,318,369,284,413,458,239,295,357,445,331,429,396,293,197,224,284,414,362,293,341,395,444,361,292,491,258,364,278,424,476,183,189,79,256,226,552,199,399,352,303,355,466,382,553,385,67,62,466,315,385,339,463,433,355,350,332,398,372,453,521,376,389,1642,1916,1940,1947,1917,1942,1966,1708,1688,1689,1692,1697,1698,1707,1693,1701,1689,1690,1721,1704,1714,1697,1706,1705,1686,1719,1702,1705,1712,1702,1703,1720,1707,1697,1714,1699,1710,1696,1711,1675,1838,2048,2048,2048,1848,1573,1693,1720,1730,1687,1709,1713,1659,1654,1732,1667,1741,1736,1704,1790,1765,1758,1649,1823,1714,1785,1639,1698,1673,1696,1643,1702,1698,885,797,866,870,429,25,25,25,25,25,25,25,1996,1587,1711,1761,1785,1688,1833,1776,1467,1355,1463,1649,1564,1512,1521,1505,1507,1523,1521,1507,1464,1488,1489,1464,1493,1477,1475,1457,1436,1489,1481,1481,1480,1464,1468,1489,1461,1471,1485,1494,1280,659,618,644,597,607,623,691,616,707,680,655,705,683,631,632,586,719,708,619,723,659,606,706,713,655,595,523,562,594,666,584,548,608,474,614,539,644,585,527,487,532,547,589,497,537,606,636,566,654,543,555,668,602,666,553,462,578,479,446,418,417,480,569,437,463,476,606,354,542,609,442,488,424,342,494,561,623,551,532,454,569,579,588,316,494,513,530,594,474,176,375,470,474,464,410,388,396,602,577,564,535,441,2028,2044,2024,2019,1948,2018,2051,1908,1711,1694,1702,1714,1677,1670,1717,1753,1669,1681,1696,1745,1728,1654,1629,1711,1737,1722,1713,1706,1714,1694,1692,1694,1705,1749,1734,1703,1722,1740,1725,1695,1740,1721,1687,1694,1704,1688,1713,1722,1737,1684,1693,1697,2041,2048,2048,2048,2048,1984,1722,1704,1798,1614,1654,1784,1797,1616,1734,1750,1838,1689,1592,1777,1813,1739,1699,1744,1679,1682,1713,1775,1807,1752,1793,1711,1848,1688,1779,1723,1701,1718,1879,1793,1803,1787,1711,1749,1048,617,780,630,571,649,617,606,532,481,1390,1499,1484,1463,1581,1575,1638,1570,1536,1134,1155,1523,1474,1585,1397,1608,1568,1477,1596,1424,1403,1326,1411,1390,1351,913,1022,1280,877,747,1222,1360,1430,1619,1608,1729,1411,1835,1642,1414,1602,1693,1699,1692,1694,1643,1677,1637,1673,1566,1575,1558,1593,1438,1480,1479,1454,1478,1463,1462,1496,1485,1452,1475,1485,1443,1440,1459,1453,1454,1481,1465,1482,1496,1469,1466,1463,1472,1464,1457,1461,1470,1477,1472,1465,1473,1456,1467,1491,1462,1495,1451,1472,1497,1455,1443,1504,1471,1489,1488,1465,1487,539,459,539,506,461,379,386,429,420,482,481,359,452,493,488,402,351,564,458,261,274,343,281,417,316,366,293,259,515,466,470,485,470,403,290,458,286,407,530,400,371,371,353,570,517,482,469,421,341,206,338,533,312,306,407,506,481,478,339,222,428,534,425,523,431,403,256,180,472,487,426,456,411,428,385,369,413,453,478,516,491,411,346,306,467,335,431,261,424,229,332,368,311,194,317,474,318,277,309,181,386,306,364,352,424,255,345,411,359,335,423,401,490,529,510,460,281,349,193,362,464,310,484,199,463,442,453,314,421,268,423,331,287,421,412,474,387,240,162,501,500,475,436,362,493,807,2006,1996,1962,1977,1956,1954,2024,1941,1976,1925,2007,2048,1823,1694,1642,1660,1654,1693,1642,1689,1698,1658,1655,1685,1694,1672,1705,1660,1673,1706,1684,1669,1674,1691,1686,1713,1681,1663,1691,1692,1695,1681,1689,1675,1674,1676,1706,1704,1702,1675,1677,1686,1681,1675,1710,1700,1685,1705,1721,1668,1645,1683,1689,1724,1691,1674,1683,1677,1678,1683,1684,1671,1690,1681,1684,1749,2048,2048,2048,2048,2048,2048,1650,1696,1619,1660,1602,1697,1680,1649,1693,1722,1739,1624,1803,1653,1717,1757,1745,1692,1755,1787,1749,1716,1700,1765,1768,1743,1684,1708,1753,1701,1696,1858,1685,1672,1801,1799,1804,1701,1646,1722,1793,1724,1737,1551,980,840,791,832,787,751,912,658,899,855,697,651,413,464,329,417,351,416,236,555,486,533,447,338,265,576,450,499,498,610,677,343,216,471,463,394,773,584,502,330,469,329,453,151,351,436,419,512,407,362,482,799,1621,1629,1446,687,936,1626,1627,1639,1683,1681,1714,1738,1810,1723,1763,1743,1747,1692,1733,1689,1589,1543,1549,1497,1466,1467,1492,1475,1500,1484,1484,1494,1512,1498,1514,1490,1468,1469,627,421,193,417,599,452,75,75,258,349,609,595,447,500,433,582,477,439,541,602,475,391,417,506,554,356,552,516,334,480,386,406,429,341,302,220,355,327,514,494,552,444,593,267,1526,2012,1961,1955,1875,1702,1721,1739,1722,1727,1745,1727,1737,1728,1731,1724,1710,1738,1721,1713,1698,1715,1732,1701,1707,2015,2048,1981,1723,1739,1779,1752,1788,1703,1718,1751,1747,1732,1743,1778,1741,1763,1789,1751,1548,809,934,816,923,399,25,25,25,25,25,25,25,1606,1655,1551,1690,1695,1475,1336,1082,1195,1605,1526,1560,1487,1486,1509,1498,1483,1502,1493,1498,1493,1485,1468,1450,1460,1477,1434,1509,687,657,466,593,490,423,463,453,470,531,517,447,549,558,436,448,196,364,249,351,400,575,261,545,492,523,682,497,443,449,384,502,602,390,419,523,517,527,564,473,583,706,703,530,403,490,245,1485,2003,2053,2019,2022,1717,1715,1723,1709,1711,1664,1658,1696,1726,1726,1709,1670,1699,1716,1730,1704,1709,1724,1692,1665,1812,2048,2048,1936,1799,1784,1812,1848,1686,1755,1850,1792,1844,1847,1810,1854,1838,1761,1871,1790,1758,1737,776,637,975,812,678,725,779,526,814,848,753,754,869,872,357,688,955,1468,1110,843,1553,1470,1527,1626,1599,1615,1572,1418,1376,1479,1424,1365,1455,1421,1471,1477,1448,1474,1480,1497,1479,1469,1498,1498,1487,1493,1484,1483,1486,1495,1487,1468,1498,1463,1490,1499,1477,1499,1495,1522,1513,1471,1478,1502,1489,1486,1479,1453,1474,1493,1341,489,524,599,469,468,546,268,565,553,583,190,559,540,664,661,576,558,561,583,558,521,524,492,379,202,492,554,511,571,531,450,514,543,566,648,570,398,513,520,619,503,575,492,494,476,597,552,572,549,606,556,509,368,453,528,450,480,617,507,458,555,459,455,483,241,317,524,446,503,286,463,526,527,540,464,403,74,91,185,124,182,275,203,394,341,437,557,325,461,221,271,158,133,357,466,680,486,492,527,555,509,548,526,587,481,480,265,546,546,428,496,466,491,500,415,483,438,513,548,603,526,491,428,505,404,422,524,447,395,520,450,186,370,510,339,598,2007,1985,2020,2045,1987,2025,1964,2048,2048,2049,1986,1651,1633,1623,1646,1728,1715,1693,1686,1658,1671,1699,1704,1678,1710,1735,1729,1715,1726,1653,1694,1741,1698,1727,1686,1691,1745,1744,1735,1745,1697,1692,1643,1700,1747,1749,1737,1739,1735,1736,1719,1736,1725,1737,1731,1738,1686,1656,1684,1705,1676,1707,1727,1742,1736,1722,1725,1656,1676,1716,1720,2009,2048,2048,2048,2048,2048,2048,1929,1499,1430,1615,1716,1734,1690,1595,1656,1647,1734,1746,1811,1758,1716,1626,1697,1713,1725,1741,1582,1853,1876,1776,1748,1730,1585,1798,1817,1768,1758,1787,1769,1749,1824,1760,1742,1773,1726,1809,1717,1632,1618,1654,1736,1724,1791,1740,1744,1744,1507,1642,1799,1349,571,646,684,607,506,423,663,710,475,613,352,1408,1397,1398,1657,1209,1322,1480,1492,1682,1182,1138,1337,1405,1237,1372,1250,1150,1319,1660,715,1351,1396,1460,897,1469,1628,808,1196,1213,1431,1367,1385,1441,1570,809,898,565,1253,1708,1582,887,991,1435,1395,1318,1317,1369,1322,1607,1641,649,968,430,850,1252,1173,819,856,1535,1629,1710,1770,1801,1837,1783,1748,1734,1869,1805,1413,1436,1359,1314,1464,1436,1361,1331,1442,1509,1487,1453,1468,1458,1450,1468,1442,1477,1495,1487,1494,1497,1489,1481,1490,1484,1486,1502,1480,1453,1468,1489,1485,1477,1483,1470,1481,1433,1492,1498,1465,1458,1446,1487,1487,1461,1493,1493,1487,1488,1469,1484,1485,1475,1486,1491,1463,1462,1464,1505,1475,1470,1482,1486,1466,1485,1493,1463,1507,1482,1478,1473,1493,1477,1448,1465,1469,1470,1482,1486,1487,1467,1492,1496,1487,1489,1469,1034,365,577,589,660,521,590,555,547,621,628,587,666,621,590,606,565,377,512,528,555,493,391,610,616,580,619,617,247,559,586,576,470,746,670,501,646,634,639,474,506,478,540,484,611,553,646,565,624,604,598,497,459,420,490,498,513,561,452,465,451,469,497,544,511,565,558,644,545,584,595,617,616,569,586,597,650,527,605,625,521,521,460,517,507,294,400,473,514,528,513,532,542,564,579,635,556,600,575,580,625,542,582,527,499,594,352,299,543,587,536,522,456,540,478,441,439,336,482,320,378,453,513,551,513,517,573,482,361,161,447,532,392,419,469,418,433,464,362,459,513,456,487,370,431,585,746,626,428,550,493,552,550,474,550,594,521,570,531,618,318,519,375,482,469,516,534,504,478,536,550,581,503,329,475,471,434,552,507,548,569,602,538,456,385,607,446,489,454,512,469,278,429,474,560,564,605,461,487,498,466,430,495,519,624,343,465,338,508,320,485,402,462,463,495,353,351,302,221,181,256,318,308,233,414,389,270,465,206,151,300,306,237,633,608,692,527,517,597,454,631,466,537,595,646,416,383,501,419,574,532,565,553,658,632,608,615,596,425,509,568,570,359,518,454,527,485,569,474,549,434,225,271,330,320,385,532,385,554,522,631,567,1023,2026,2011,1919,1999,1991,2030,2004,2015,2034,2015,2004,2021,1959,2040,1988,2006,2031,2028,2055,1875,1730,1711,1659,1686,1693,1703,1723,1730,1737,1720,1739,1717,1696,1698,1666,1716,1699,1690,1675,1701,1726,1715,1715,1711,1667,1726,1708,1710,1717,1712,1708,1706,1718,1680,1666,1693,1685,1667,1682,1689,1651,1672,1688,1685,1702,1698,1688,1705,1686,1685,1685,1694,1693,1675,1681,1686,1709,1683,1693,1687,1682,1676,1674,1706,1694,1680,1689,1696,1692,1709,1698,1719,1710,1698,1664,1729,1707,1677,1682,1673,1709,1710,1680,1699,1697,1651,1665,1702,1721,1690,1693,1677,1658,1654,1653,1670,1651,1670,1708,1680,1709,1691,1718,1676,1685,1701,1694,1718,1736,1708,1701,1732,1665,1710,1678,1680,1684,1659,1698,1849,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1883,1766,1663,1676,1693,1670,1750,1720,1702,1717,1763,1643,1648,1679,1709,1715,1580,1756,1763,1667,1701,1670,1812,1702,1750,1847,1695,1712,1621,1611,1625,1660,1720,1633,1628,1673,1663,1657,1655,1667,1682,1678,1631,1534,1617,1705,1741,1679,1771,1681,1702,1618,1582,1662,1642,1580,1596,1680,1747,1788,1758,1729,1747,1819,1684,1667,1674,1797,1630,1671,1657,1604,1737,1660,1690,1556,1594,1583,1508,1667,1589,1732,1669,1711,1634,1730,1608,1764,1809,1755,1812,1815,1715,1637,1631,1688,1668,1739,1017,631,617,619,355,474,119,602,706,585,672,615,512,691,739,601,678,788,633,613,605,600,627,683,765,545,615,1208,1464,1364,1281,1644,1599,1493,1465,1603,1656,1329,1070,1417,1096,1016,1146,1011,861,956,1127,554,1144,976,719,1118,913,957,918,1032,1243,1406,1679,1622,1623,1588,1407,1713,1688,1586,1608,1690,1616,1531,1617,1574,1548,1312,1444,1548,1654,1700,1636,1543,1570,1422,1464,1339,1516,1428,1297,1597,1243,1600,1609,1548,1406,1389,1326,1522,1525,1458,1417,1608,1624,1624,1588,1415,905,1305,1249,813,409,887,1176,1202,1216,1016,1057,1002,961,1060,991,869,959,798,714,649,441,161,118,615,612,558,564,407,573,1179,1528,1316,1293,1172,1262,1184,1594,1580,1587,1450,1503,1411,1413,1418,1154,671,763,1060,1284,1460,1520,1541,1148,1617,1275,1475,1389,1576,1244,662,1247,1496,1489,1390,1411,1546,1461,1621,1523,1589,1505,921,972,931,551,1256,1422,1134,398,782,542,484,838,1161,848,1092,1157,872,596,1196,929,1473,1364,627,459,1482,1426,1308,1018,1212,1291,943,809,568,637,1100,488,691,252,615,937,724,645,807,476,439,1338,1520,1547,1284,1584,1670,1578,1437,1639,1575,1288,518,777,1397,1430,1412,1141,890,1544,1141,891,1388,1298,1021,1354,769,501,576,344,396,389,457,492,366,417,345,421,465,355,328,447,549,766,832,674,510,500,402,423,710,219,376,387,288,687,866,365,813,853,613,355,604,603,406,392,368,415,363,816,1573,1522,1583,1616,1639,1622,1353,580,599,219,211,243,462,1162,1598,1879,1916,1447,914,1625,1761,1687,1638,1738,1743,1746,1769,1816,1752,1812,1739,1794,1820,1802,1812,1831,1809,1798,1817,1850,1790,1734,1739,1577,1421,1492,1462,1483,1478,1474,1431,1478,1496,1476,1439,1482,1469,1470,435,518,433,375,463,473,494,358,500,379,435,550,395,402,278,308,346,343,315,284,268,554,432,334,585,434,499,459,487,388,526,345,523,503,490,507,441,452,357,347,615,1973,1959,1908,1725,1664,1670,1672,1682,1672,1668,1654,1665,1664,1664,1695,1684,1688,1695,1675,1681,1906,2048,1821,1669,1627,1680,1722,1678,1711,1708,1746,1746,1820,1587,1590,1186,422,379,548,112,930,979,1086,973,1005,1084,866,1077,1033,659,1120,1259,1667,1755,1731,1643,1264,1480,1470,1474,1491,1481,1490,1485,415,225,606,657,615,429,577,554,480,549,415,438,406,430,457,330,532,244,437,312,510,448,464,317,572,2047,1974,1658,1675,1721,1714,1690,1667,1655,1667,1652,1634,1659,1968,1932,1718,1802,1890,1799,1705,1763,1764,1686,1299,554,391,749,1114,949,1007,840,1069,988,1448,1495,1695,1554,1601,1478,1467,1486,1498,1476,1464,1452,1491,1250,584,586,546,346,328,372,487,392,512,555,386,467,483,482,452,439,465,422,576,462,468,574,417,515,496,403,530,538,1486,1999,1907,1693,1705,1689,1683,1708,1698,1690,1674,1720,1710,1693,1679,2030,1916,1782,1760,1675,1753,1770,1674,1808,1758,1674,888,674,591,1117,1645,1125,1353,1436,1823,1654,1555,1370,1495,1483,1479,1505,1530,1497,1485,1492,470,539,518,531,533,308,385,507,541,494,596,561,665,585,122,159,410,460,528,577,550,565,742,2029,1947,1688,1693,1682,1676,1678,1683,1673,1670,1663,1779,2008,1739,1719,1728,1691,1708,1642,1622,753,761,1141,1585,1220,1260,1444,1638,1622,1431,1388,1438,1538,1467,1498,1476,1437,1481,1482,1470,1471,1503,1516,1493,599,364,326,397,327,215,426,480,356,481,354,347,300,249,298,428,440,191,511,454,180,385,354,258,418,377,416,610,442,435,392,226,271,492,362,493,349,687,1992,1994,2001,1779,1690,1673,1657,1707,1696,1675,1679,1707,1714,1711,1707,1717,1695,1704,1692,1688,1870,2048,1978,1613,1628,1733,1740,1700,1809,1856,1808,1881,1804,1751,1706,1698,1447,564,690,734,865,1208,704,941,848,806,555,520,1707,1195,1335,1556,1536,1473,1545,1471,1474,1543,1496,1483,1491,1482,1483,1473,1503,1247,322,522,619,563,503,473,465,600,541,474,338,574,579,511,531,532,664,645,599,395,379,294,1728,1950,1792,1691,1693,1704,1706,1671,1682,1680,1688,1669,2037,1701,1707,1758,1729,1743,1750,1717,1085,714,1065,1548,1556,1493,1479,1534,1560,1458,1557,1513,1516,1546,1501,1520,1483,1480,1488,1503,1487,1475,1498,1486,1482,1454,1485,1509,1494,1472,1469,1493,1482,1483,1470,1505,982,636,629,599,668,521,202,458,280,326,569,237,374,608,522,646,544,474,590,613,436,566,429,691,624,580,548,557,682,604,644,669,582,556,485,546,437,412,529,478,628,552,497,416,525,611,522,625,587,510,481,123,139,289,431,532,313,349,438,518,613,596,431,579,587,394,314,245,583,554,704,495,479,1955,2006,2010,2019,1984,2027,1627,1706,1697,1698,1702,1711,1677,1696,1716,1700,1690,1697,1694,1706,1678,1682,1728,1680,1688,1680,1672,1698,1690,1689,1695,1700,1670,1698,1683,1669,1686,1818,2048,2048,2048,1793,1777,1728,1699,1820,1721,1759,1892,1708,1776,1760,1767,1717,1756,1758,1712,1724,1730,1680,1787,1788,1750,1783,1724,1790,1876,797,725,607,711,641,675,540,751,518,596,438,605,560,739,962,882,894,897,937,701,502,290,603,682,567,411,666,383,313,310,672,920,866,880,584,1277,958,634,299,1242,1603,1648,1624,1621,1802,1715,1685,1632,1528,1467,1580,1526,1455,1485,1485,1449,1475,1480,1473,1473,1475,1457,1462,1503,1485,1477,1453,616,513,510,441,441,568,291,512,443,596,149,294,591,494,540,322,566,570,604,486,385,612,248,175,504,554,299,262,166,332,485,552,496,518,500,248,385,402,402,507,535,413,316,350,532,536,613,2016,2048,2001,2029,1811,1712,1717,1702,1717,1730,1669,1705,1698,1741,1666,1714,1683,1683,1698,1729,1718,1677,1689,1680,1652,1973,2048,2029,1867,1869,1710,1801,1749,1791,1783,1928,1822,1810,1782,1842,1886,1870,1729,1801,1636,1290,690,809,666,763,708,875,1008,716,915,938,972,793,891,820,968,745,635,532,1113,1457,603,760,1520,1562,1605,1615,1607,1537,1502,1472,1042,610,626,484,380,1493,1665,1687,1841,1804,1066,1188,1513,1409,1500,1484,1472,1492,1499,1481,1464,1413,552,563,558,581,559,331,395,522,409,542,529,361,414,174,392,495,431,269,343,319,288,283,395,471,510,367,999,1932,1878,1650,1662,1655,1697,1672,1650,1683,1697,1676,1699,1676,1997,1729,1530,1633,1727,1732,1746,1699,1723,1602,595,629,460,1689,1399,1028,1216,1231,1622,1654,1624,1026,491,1120,1741,1457,1376,524,702,1690,1533,1611,1491,1519,1424,1456,1476,1499,1482,1463,1488,1476,1484,1483,1500,1490,1476,1482,1493,1518,1463,1514,1467,1479,1464,1481,1472,1484,1475,1473,1503,814,611,593,530,622,605,576,605,502,443,531,620,604,398,443,394,439,575,634,473,484,534,510,209,553,580,404,238,387,541,594,559,593,599,367,479,482,480,429,454,485,488,297,474,496,290,381,318,416,497,467,541,476,446,410,592,568,615,499,554,510,418,469,521,503,580,488,496,296,486,472,486,456,385,619,540,371,414,410,435,261,341,453,274,539,400,432,576,382,424,1881,2030,2054,2056,2016,2017,2044,1849,1724,1727,1733,1707,1739,1727,1729,1743,1723,1754,1737,1745,1733,1748,1743,1697,1742,1721,1705,1737,1715,1690,1653,1679,1677,1679,1681,1683,1697,1710,1728,1718,1718,1716,1725,1716,1643,1654,1750,2048,2048,2048,2048,1995,1833,1804,1806,1818,1806,1826,1794,1806,1778,1780,1810,1823,1856,1868,1893,1800,1812,1808,1792,1852,1711,1641,1717,1678,1708,1790,1774,1783,1753,1812,1781,1814,1636,1619,771,649,814,713,545,530,860,1303,1232,999,1000,819,1128,937,998,1155,1095,888,979,1117,873,692,682,973,1209,1716,1516,1326,1669,1603,1689,1639,1670,1613,1662,1738,1685,1380,536,698,1692,1527,1504,646,400,1630,1641,1505,902,433,1329,1765,1446,1212,545,875,1719,1492,1519,544,446,1721,1577,1502,792,420,1462,1785,1414,1048,506,1053,1727,1473,1419,535,639,1699,1533,1490,680,404,1596,1673,1487,956,461,1267,1757,1442,1281,570,825,1708,1506,1512,591,406,1715,1587,1510,817,405,1428,1781,1402,1097,529,1014,1719,1486,1439,539,594,1710,1546,1564,1474,1461,1478,1481,1457,961,450,398,218,226,204,348,474,349,484,544,396,402,407,278,242,400,337,356,1903,1877,1646,1634,1652,1670,1682,1642,1644,1629,1780,1779,1520,1599,1622,1593,1648,1303,380,171,829,991,1131,484,1692,1668,1263,546,831,1710,1502,1230,1483,1464,1477,1436,1447,1030,550,404,405,467,458,505,744,566,511,482,391,370,372,461,442,547,1666,1774,1660,1655,1681,1618,1651,1670,1904,1572,1590,1602,1160,444,536,462,239,528,884,1240,1571,1671,902,687,746,696,610,754,741,742,738,624,664,786,755,1164,1849,2057,2040,2048,2057,1184,1466,1442,1267,1366,1486,1460,1437,1511,1552,1515,1489,1459,1438,1344,1381,1480,1378,1558,1419,1340,1337,1451,1410,1317,1594,1539,1386,1351,1418,1545,1421,1562,1497,1366,1502,1006,408,46,72,376,356,347,417,574,425,455,538,624,976,1151,1085,1059,1046,1244,1239,1218,682,559,570,526,534,633,702,438,315,431,468,458,784,1526,1512,1451,1433,1472,1540,1593,1565,1547,1576,1573,1540,1650,1435,1509,1554,1605,1686,1611,1602,1692,1677,1607,1492,1616,1489,1515,1560,1598,1406,1273,933,968,980,1040,1158,1127,1163,1226,1215,1137,1209,1450,1432,1457,1353,1438,1414,1578,1316,1162,1172,1208,1171,1314,1276,1357,1454,1327,1414,1410,1374,1133,1390,1316,1014,1107,1120,1133,1167,1220,1489,1392,1199,1274,1578,1423,1321,1634,1470,1744,1060,1296,1187,1190,1667,1188,1155,1171,1150,1199,1167,1122,1302,1556,1524,1412,1450,1493,1571,1612,1561,1562,1609,1565,1549,1631,1482,1462,1599,1623,1700,1571,1660,1691,1663,1565,1464,1606,1478,1504,1568,1589,1352,1770,2051,2048,2027,2048,1879,1457,1572,1477,1460,1452,1528,1600,1574,1523,1581,1598,1567,1618,1498,1545,1485,1620,1677,1614,1575,1698,1674,1597,1528,1546,1552,1502,1555,1569,1484,1283,1086,1374,1284,1022,1087,1157,1123,1153,1216,1477,1419,1228,1304,1598,1365,1347,1609,1481,1747,1096,1304,1214,1167,1669,1230,1159,1182,1148,1172,1150,1134,650,480,387,824,755,817,732,848,757,847,762,649,627,857,579,700,583,763,816,803,517,778,721,749,819,927,735,689,362,364,811,598,708,621,819,830,1331,1529,1380,1006,898,808,791,1094,1188,1139,1094,1127,1003,1059,1035,1082,1071,1118,1123,1095,1069,1118,1070,1031,1072,1078,1059,1095,1092,1011,1054,1024,1000,953,1264,1081,837,1166,1212,1508,1150,900,854,860,860,1035,1187,1529,2050,2055,2056,1861,1456,1456,2056,2048,2048,2048,2048,2048,2057,2056,2048,2042,1955,2036,2048,1601,1917,1422,1789,1868,1795,1810,1868,1818,1830,1858,1826,1793,1872,1808,1998,1618,1355,1918,1319,1780,1025,1751,1879,1616,1651,1117,1722,745,1064,1229,1832,1783,1877,1802,1701,1628,1508,1460,1438,1357,1932,1929,1776,1649,1528,1435,1332,1286,1212,1212,1148,1401,1649,1677,1839,1969,1937,1963,2006,1878,1912,1885,2014,1804,1515,1459,2048,1621,1769,1824,1515,1029,1841,2055,1780,342,1117,1774,1246,2006,1398,662,2042,2048,2048,1217,1398,2048,1837,1031,423,1831,1726,630,1919,2057,2048,2048,1672,593,1910,2048,1964,1175,126,1177,2048,2057,2048,1503,1149,2053,2048,2048,2048,1734,1205,741,724,632,2002,2048,2048,2054,2004,1784,1552,1320,1080,1020,913,2048,1822,1870,2055,1993,1924,1573,604,384,1621,1012,1071,903,289,2003,2048,2048,2048,1906,437,1051,2048,2057,2034,1368,1218,1869,2048,2048,2056,2048,1895,1222,903,672,2049,1618,2048,1970,2048,1861,2018,1890,1566,1216,883,1396,2057,2048,2048,2048,2055,2048,2053,1942,2049,2049,2054,2022,2048,2057,2048,2052,2048,1850,1471,1127,886,903,621,283,2049,1965,1757,1456,1388,922,998,2048,2054,2048,1391,1331,1834,1906,1915,1970,1999,1955,2037,2015,1972,1998,1798,1221,1642,1944,2047,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,1984,1862,1694,1512,1348,1101,627,1054,1704,1713,2048,2048,1929,1745,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2057,1835,1138,1899,2048,2048,2048,2048,2048,2048,2048,2048,2043,1893,1646,1336,868,829,234,878,2048,2048,2048,2048,2048,2048,1442,544,459,1718,1974,1973,2037,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2049,2047,2053,2055,2048,2045,2051,2056,2052,2034,1963,1850,1696,1523,1322,1249,1542,2048,2057,1738,1255,1968,1412,1159,998,205,25,25,25,25,865,1625,1894,1923,2048,1979,1724,1001,435,2048,2048,2048,1731,1652,1565,2048,2052,2033,1960,1938,1324,1515,2048,2048,2048,1427,1987,2001,2048,2048,2048,2047,1943,1924,1843,1823,1612,1293,1062,870,1833,2048,2048,2048,2048,2053,1626,2048,2048,2048,1265,1829,2017,2048,2048,2048,2048,2019,1760,1506,1158,2033,1203,1750,2002,1937,1846,1605,1372,1415,1562,1642,1269,1837,1909,2048,2055,2048,1646,245,960,2048,2057,1849,1529,1377,1269,1080,1055,1060,1829,2055,1825,1288,1097,768,685,695,703,1152,2048,2015,1191,640,1271,2055,2048,2048,2048,2048,2048,2048,2048,2048,2008,1716,1433,1150,1391,2048,2048,2040,643,1826,2057,2048,2056,1747,309,100,1400,1712,2035,2048,2057,2048,1770,2048,2048,2048,2057,2048,1565,1636,1840,1468,2056,2048,2048,2048,2028,1245,1831,2051,2055,2048,2056,2048,2057,2031,1990,1964,1812,1609,1064,894,1591,2039,2028,1774,2048,2048,2057,2048,2048,1988,1408,922,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,1998,1806,1545,1092,1992,2048,2057,2048,2048,2048,2048,2048,1878,1207,780,356,503,2048,2048,2048,2048,2048,1903,1600,1564,1661,1849,1596,1016,598,1940,2051,2056,2057,2057,2048,2048,2048,2057,2056,2026,1915,1643,1403,882,473,433,575,525,512,2010,2048,2010,1850,1609,1450,1260,1140,1678,1957,1593,1369,1989,1829,1607,1449,1197,835,486,1285,1951,1752,1466,1132,1983,1892,1552,2051,2048,853,2048,1727,2048,1802,410,1749,2048,2048,2048,1907,1466,283,1336,2048,1350,25,1034,2057,2057,2048,2048,2048,2048,2048,2048,2048,2054,2055,1719,1176,2048,1885,902,1732,2048,2048,2048,2048,2048,2048,2034,1483,749,2048,2048,2048,2048,2056,2052,1747,1325,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,1517,455,868,2048,2016,2047,2053,2048,2048,2048,2048,2053,2048,2048,2048,2016,1613,1259,846,320,817,1901,1842,2011,2056,2048,2049,1786,970,1757,1728,785,1464,2048,2048,2048,2050,1596,1103,693,703,857,2048,2048,2048,2048,2051,2048,2048,2048,2048,2057,1879,1569,1163,815,1112,2048,2048,2048,2048,1888,1405,1213,658,1375,2055,2048,861,2048,2039,2048,2048,2048,1981,2035,1404,1389,958,584,598,1786,1941,1415,1519,2057,2048,2054,2057,2055,2057,1950,1999,1391,2057,2054,1915,1755,1481,1378,1204,1157,2048,2057,2048,2048,2048,2055,2048,1530,1034,1134,2048,2048,2048,2048,2048,2048,2053,2028,1883,1737,1556,1334,1275,2056,2057,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2054,2057,2057,2056,2050,2048,2053,2057,2056,2048,2048,2048,2057,2048,2057,1986,1293,1576,1817,2056,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2055,2034,1909,1695,1907,2030,1127,1922,2048,2048,2048,2048,2057,2048,2043,2038,1765,1084,886,1924,2048,2048,2048,2037,1499,2048,2048,2048,2048,2048,2048,2049,1272,1760,2048,2056,2028,1985,2027,1832,1567,1503,1479,1382,1160,1117,1175,1317,1458,1299,1174,1123,1060,1050,1182,1033,1070,1222,1110,1674,1458,1377,1463,1131,1274,1575,1183,1190,1402,1395,1367,1320,1231,1237,1071,668,1139,1256,1417,1483,1395,1387,1357,1115,1169,1369,1408,1123,1627,1346,1292,1022,1106,1186,1220,1088,1190,382,751,732,889,979,731,1169,663,1104,1102,1141,1218,1649,1657,1465,593,734,492,273,1371,975,525,362,612,563,830,934,694,701,832,679,673,754,705,714,990,621,348,1166,1510,981,1455,1542,521,1523,1383,587,293,241,484,1609,1120,582,548,389,791,166,135,69,75,92,513,708,958,596,272,312,827,885,532,592,518,73,71,364,827,748,498,608,512,539,580,229,272,547,609,573,222,274,172,340,306,363,579,118,489,559,74,133,118,160,159,473,1285,1253,581,222,82,473,442,684,492,342,243,386,418,319,313,310,452,146,691,719,475,474,535,640,409,453,398,334,302,395,189,1295,1683,1154,1056,904,916,1174,1264,1244,1249,1372,1319,1402,1415,1299,1314,1371,1405,1292,1450,1419,1492,1541,1484,1353,1179,1195,1172,1191,1099,918,867,1205,1301,1897,1594,1629,1524,1461,1567,1628,1588,1665,1779,1815,1809,1800,1845,1737,1791,1737,1658,1765,1597,1702,1756,1748,1680,1575,1682,1490,1636,1550,1608,1479,1512,1602,1853,1300,1277,1204,1269,1198,1311,1250,1355,1482,1463,1588,1583,1518,1522,1480,1457,1531,1532,1435,1471,1395,1514,1478,1160,1175,1095,1197,1229,1209,1312,1219,1342,1274,1209,1183,1154,1181,1153,1180,1500,1913,1489,1534,1434,1408,1574,1574,1928,1416,1304,1652,1468,1575,1511,1574,1790,1522,1569,1513,1571,1782,988,1021,1038,1278,1806,1571,1587,1533,1661,1368,1350,1307,1352,1203,888,1511,1741,1544,392,385,387,1150,1156,1194,1252,1872,1843,1969,1978,1958,1934,1779,1764,1628,1162,1404,1385,1274,1223,1654,1717,1791,1803,1780,1763,1663,1810,1613,1921,1926,1350,1080,1524,1678,1008,1557,1716,1677,1586,1716,1096,1174,1208,1566,1655,1686,1691,1288,1766,1595,1781,1813,1710,1655,1723,1627,1690,1767,1767,1616,1785,1691,1779,1797,1834,1686,1781,1738,1602,1743,1782,1785,1795,1826,1611,1814,1703,1694,1660,1690,1701,1594,1664,1793,1749,1637,1727,1716,1735,1743,1693,1660,1765,1653,1795,1850,1598,1785,1691,1743,1800,1641,1786,1771,1547,1737,1704,1569,1715,1748,1831,1703,1810,1597,1800,1816,1677,1672,1688,1639,1699,1829,1718,1778,1842,1831,1847,1808,1859,1856,1904,1755,1846,1742,1699,1721,1793,1619,1715,1710,1691,1686,1713,1620,1612,1943,1931,1881,1918,1935,1922,1898,1923,1912,1897,1884,1005,1846,1835,1733,1770,1794,1799,1762,1809,1812,1865,1735,1723,1848,1700,1791,1734,1784,1778,1764,1826,1689,1826,1816,1808,1755,1697,1737,1801,1793,1834,1791,1794,1752,1628,1678,1760,1722,1802,1696,1878,1813,1647,1872,1851,1825,1826,1688,1720,1824,1850,1764,1695,1822,1761,1829,1663,1697,1617,1655,1522,1513,1599,1651,757,1583,1468,1675,1606,1696,1528,1726,1077,1662,1254,1499,1528,1617,1646,1701,1556,1739,939,1696,1547,1478,1574,820,1584,1532,1559,1680,1592,1700,1571,1716,1646,1588,2030,1981,1966,1982,2016,1803,1996,1880,2016,2028,1796,2012,2041,1856,2014,2017,1987,1992,2032,1989,2013,1951,1936,1824,2040,2035,1713,1808,1924,1869,1835,1772,1721,1810,1855,1894,1873,1848,1789,1693,1722,1765,1822,1847,1849,1846,1772,1742,1742,1885,1879,1824,1861,1828,1725,1639,1790,1894,1822,1838,1859,1831,1708,1739,1784,1860,1764,1864,1893,1883,1763,1730,1853,1878,1820,1857,1750,1761,1723,1821,1870,1818,1835,1847,1719,1748,1839,1875,1849,1893,1811,1720,1844,1897,1869,1803,1808,1867,1784,1727,1824,1700,1486,1548,1526,1611,1482,1578,1616,1484,1726,1577,1521,1741,1514,1689,1964,1774,1735,1914,1717,1803,1769,1677,1523,1605,1520,1610,1487,1561,1590,1524,1681,1666,1614,1862,1599,1846,1891,1792,1698,1871,1734,1626,1574,1573,1664,1621,1502,1656,1480,1610,1559,1485,1709,1372,1580,1917,1716,1743,1832,1761,1802,1866,1747,1700,1779,1570,1675,1526,1515,1524,1457,1618,1505,1630,1625,1554,1909,1513,1697,1869,1775,1653,1788,1582,1527,1695,1603,1647,1497,1447,1615,1464,1663,1550,1450,1837,1561,1598,1863,1664,1689,1779,1728,1754,1837,1764,1713,1847,1767,1715,1637,1855,1759,1742,1827,1702,1775,1735,1739,1684,1684,1738,1509,1639,1750,1549,1802,1649,1733,1636,1716,1690,1658,1780,1594,1813,1674,1784,1685,1742,1712,1775,1496,1647,1589,1803,1637,1698,1559,1584,1558,1519,1539,1747,1600,1747,1592,1736,1794,1744,1670,1740,1892,1755,1710,1703,1601,1567,1717,1770,1635,1548,1662,1658,1467,1597,1671,1507,1525,1718,1666,1746,1844,1779,1731,1807,1770,1743,1837,1811,1658,1534,1874,1582,1618,1679,1571,1623,1424,1718,1438,1516,1748,1568,1651,1769,1490,1675,1861,1864,1691,1914,1719,1608,1877,1616,1537,1739,1613,1669,1444,1569,1447,1531,1682,1560,1605,1773,1597,1787,1874,1779,1743,1911,1802,1688,1782,1707,1580,1641,1592,1661,1407,1384,1697,1395,1555,1784,1510,1608,1690,1476,1647,1618,1645,1823,1733,1589,1760,1781,1692,1813,1653,1517,1718,1383,1569,1469,1497,1492,1549,1631,1645,1533,1796,1757,1784,1740,1658,1791,1750,1701,1714,1773,1741,1745,1693,1755,1817,1678,1754,1783,1680,1647,1734,1822,1665,1724,1778,1818,1657,1690,1760,1710,1623,1690,1695,1838,1784,1718,1652,1716,1819,1789,1799,1525,1446,1848,1815,1836,1534,1790,1788,1879,1731,1680,1709,1768,1803,1656,1656,1782,1759,1854,1677,1672,1770,1785,1775,1727,1641,1749,1868,1688,1766,1769,1534,1823,1847,1818,1811,1713,1792,1848,1746,1802,1713,1698,1701,1688,1687,1689,1742,1761,1905,1897,1898,1935,1942,1945,1941,1901,1707,1778,1891,1885,1776,1810,1789,1806,1828,1907,1934,1896,1895,1852,1828,1924,1838,1836,1815,1794,1868,1815,1925,1945,1910,1819,1810,1830,1859,1913,1914,1903,1832,1830,1796,1810,1910,1856,1826,1818,1893,1822,1762,1794,1884,1928,1942,1780,1912,1902,1906,1919,1942,1924,1904,1786,1915,1934,1933,1907,1836,1852,1738,1748,1766,1698,1746,1715,1807,1795,1792,1762,1811,1745,1884,1736,1837,1760,1868,1739,1714,1780,1706,1709,1802,1685,1862,1775,1874,1819,1867,1854,1834,1873,1843,1861,1823,1861,1849,1822,1852,1782,1858,1799,1805,1889,1763,1827,1809,1842,1863,1807,1792,1810,1802,1796,1790,1766,1794,1773,1852,1763,1880,1704,1813,1813,1698,1837,1749,1840,1804,1656,1765,1714,1700,1810,1827,1862,1851,1945,1890,1727,1892,1637,1907,1768,1940,1754,1736,1865,1769,1741,1907,1785,1728,1690,1681,1669,1756,1697,1726,1716,1686,1704,1752,1732,1757,1679,1783,1772,1729,1756,1762,1764,1692,1733,1742,1801,1746,1725,1758,1803,1817,1617,1943,1949,1594,1856,1632,1858,1810,1913,1562,1887,1532,1970,1854,1673,1733,1725,1751,1409,1933,1479,2002,1515,1891,1487,1688,1701,1776,1664,1501,1835,1500,1915,1523,1915,1512,1759,1656,1849,1653,1600,1742,1573,1868,1987,1938,2002,1962,1977,2011,1862,1972,2000,1906,1464,1858,1917,1491,1334,1413,684,853,793,989,1317,1496,849,2012,2016,2025,2018,2037,2020,2030,2000,1946,1927,1673,1667,1726,1728,1740,1663,1755,1756,1674,1692,1774,1585,1956,1727,1642,1569,1707,1700,1810,1764,1758,1890,1654,1775,1735,969,844,1543,1181,634,629,1651,1666,1810,1790,1798,1791,1854,1690,1623,1796,1985,1962,1992,1983,1984,1978,1976,1953,1935,1818,1932,1480,1584,767,1369,1744,1486,1392,1511,1455,924,1425,1432,1567,1592,1736,1851,1854,1814,1539,1533,1538,1584,1575,1614,1573,1566,1624,1834,1873,1857,1917,1998,1867,1847,1875,1858,1890,1872,1622,1934,1942,1640,1592,1517,1007,1610,1484,888,1651,1533,1572,1602,1780,1970,1584,1987,1975,1226,1965,1958,1823,1972,1982,1919,1265,1946,1957,1755,1393,1794,1844,1893,1914,1667,1855,2016,1815,1963,1440,1979,1873,1607,2000,1637,1989,1979,1211,1966,1960,1823,1975,1985,1931,1198,1962,1938,1753,1370,1788,1844,1880,1917,1661,1847,2007,1960,2005,1980,1929,1978,1970,1803,1724,1741,1710,1605,1558,1744,1428,1656,1565,1620,1798,1896,1859,1783,1771,1632,1814,1861,1758,1376,1741,1621,1746,1492,1712,1822,1998,1987,1966,1959,1965,1948,1967,1969,1184,1302,1642,1481,1574,2002,1843,1366,1806,1997,1880,1134,1914,1972,1838,1650,1862,1931,1980,1817,1625,1852,2021,1941,1849,1384,1859,2002,1833,1774,1302,1805,1903,1807,1439,1773,1678,1916,1370,1888,1972,1835,1774,1516,1270,1648,1792,1944,1918,1330,1920,1957,1969,1905,1966,1933,1938,1971,1877,1946,1974,1916,1957,1967,1927,1959,1976,1941,1981,1959,1953,1992,2001,1906,1498,1544,2000,2030,1997,1691,1913,1866,1979,1855,1721,1639,1545,1601,1462,1495,1049,1957,1987,1760,1136,1465,1384,1786,1955,1837,1703,1989,1950,1915,1883,1623,1751,1808,1622,1710,1781,1760,1900,1913,1840,1818,1723,1722,1310,993,1805,1559,1716,1398,1693,1403,1718,1755,1826,1716,1722,1603,1824,1922,1837,1696,1726,1518,1492,1152,1838,1832,1873,1871,1625,1403,1383,1904,1648,1791,1839,1736,1856,1743,1815,1746,1918,1865,1859,1768,1604,1545,1690,1725,1892,1779,1784,1720,1821,1741,1653,1382,1012,828,1231,1505,1814,1693,1843,1707,1710,1549,1596,1886,1751,1741,1667,1550,1719,1766,1769,1870,1799,1792,1794,1690,1720,1797,1816,1757,1413,1226,1146,1164,1162,1124,1067,1196,1404,1636,1630,1640,1591,1595,1660,1629,1632,1884,1764,1765,1748,1713,1772,1755,1718,1739,1716,1797,1970,1744,1770,1753,1918,1943,1885,1924,1915,1917,1902,1906,1868,1929,1889,2029,1865,1875,1900,1942,1712,1712,1677,1711,1677,1686,1708,1664,1886,1696,1690,1692,1702,1687,1683,1681,1758,1844,1761,1737,1767,1743,1744,1761,1744,1814,1502,1543,1524,1549,1540,1547,1531,1556,1581,1505,1521,1439,1783,1709,1680,1685,1706,1741,1701,1725,1776,1639,1730,1715,1752,1694,1732,1676,1734,1729,1737,1721,1751,1767,1671,1713,1685,1830,1757,1731,1753,1739,1773,1734,1754,1866,1741,1800,1829,1870,1792,1821,1793,1815,1810,1840,1803,1863,1919,1767,1788,1800,1862,1598,1626,1583,1587,1593,1605,1586,1687,1692,1637,1624,1631,1628,1608,1638,1636,1867,1809,1812,1797,1802,1780,1772,1792,1819,1783,1636,1245,1630,1597,1676,996,1644,1785,1783,1837,1868,1878,2047,1884,1931,1951,1867,1931,2037,1938,1902,1917,1878,1932,2043,1819,1590,1623,1642,1523,1648,1851,1670,1608,1627,1571,1689,1971,1791,1752,1601,1732,1757,1699,1595,1762,1892,1789,1659,1637,1784,1731,1626,1638,1912,1996,2002,1994,1993,2004,2020,2024,2021,2023,1995,2013,1992,1957,1757,1798,1932,1941,1889,1953,1971,1867,1820,1797,1837,1782,1915,1938,1893,1924,1817,1931,1905,1916,1860,1903,1916,1918,1876,1612,1834,1684,1676,1718,1653,1679,1838,1762,1866,1821,1832,1905,1884,1827,1873,1803,1587,1461,1394,1419,1769,1626,1671,1640,1642,1635,1633,1676,1613,1547,1594,1592,1645,1650,1673,1643,1641,1824,1601,1598,1632,1578,1611,1588,1589,1551,1794,1660,1621,1648,1578,1649,1635,1603,1740,1602,1610,1610,1575,1600,1601,1600,1581,1776,1679,1653,1650,1613,1656,1637,1625,1715,1612,1557,1537,1506,1510,1527,1523,1489,1764,1560,1567,1568,1596,1558,1542,1524,1602,1761,1581,1587,1619,1618,1587,1517,1561,1753,1597,1568,1560,1585,1579,1518,1481,1593,1752,1580,1611,1599,1622,1574,1534,1556,1743,1652,1600,1612,1636,1652,1601,1582,1634,1794,1564,1613,1597,1643,1594,1597,1550,1704,2006,2002,1972,2017,1951,1988,1907,1953,1918,1978,1909,1975,1952,1991,1937,1971,1979,1385,1362,1338,1284,1487,1425,1379,1377,1468,1380,1331,1379,1467,1439,1386,1378,1349,1369,1414,1374,1363,1481,1435,1386,1403,1471,1414,1399,1438,1413,1420,1361,1372,1296,1587,1417,1365,1381,1366,1379,1359,1377,1483,1357,1376,1357,1361,1595,1473,1566,1371,1336,1370,1376,1401,1411,1422,1373,1482,1417,1370,1395,1490,1426,1402,1404,1454,1554,1531,1598,1589,1456,1422,1516,1435,1524,1507,1545,1486,1578,1332,1207,1289,1398,1239,1334,1302,1256,1544,1447,1455,1489,1511,1337,1417,1380,1367,1405,1477,1404,1421,1795,1699,1604,1712,1597,1715,1598,1680,1770,1673,1643,1694,1697,1641,1689,1642,1723,1756,1833,1641,1838,1658,1774,1631,1782,1812,1733,1696,1717,1808,1636,1741,1650,1778,1735,1694,1596,1695,1640,1669,1617,1660,1719,1750,1734,1643,1783,1623,1729,1636,1745,1726,1499,967,1864,1968,1453,1571,1501,1801,1610,1460,1754,1614,1620,1655,1513,1522,1805,1637,1703,1657,1618,1823,1703,1459,1727,1772,1696,1359,1708,1837,1728,1673,1798,1797,1730,1801,1852,1728,1698,1691,1831,1731,1792,1706,1653,1832,1849,1802,1827,1864,1761,1497,1493,1405,1770,1731,1743,1622,1320,1763,1762,1861,1725,1733,1334,1587,1636,1647,1706,1459,1426,1855,1865,1840,1681,1337,1742,1870,1969,1899,1836,1319,1548,1809,1820,1776,1473,1575,1766,1791,1793,1735,1329,1719,1814,1934,1804,1802,1405,1483,1694,1703,1737,1550,1562,1702,1854,1811,1812,1341,1622,1825,1963,1831,1882,1512,1416,1718,1800,1791,1617,1677,1444,1312,990,959,1260,1305,1356,1175,1324,1372,1155,1090,980,1105,1236,1137,1169,1376,1235,1377,1328,1375,1330,1221,1228,1507,1840,1596,1561,1535,1519,1592,1572,1587,1588,1583,1567,1606,1630,1641,1621,1619,1513,1530,1477,1502,1608,1518,1464,1477,1466,1532,1821,1717,1720,1686,1711,1694,1666,1684,1747,1708,1717,1720,1722,1727,1707,1712,1708,1707,1690,1676,1583,1619,1679,1716,1676,1651,1723,1792,1751,1715,1732,1929,1933,1852,1871,1920,1884,1888,1742,1778,1521,1463,1791,1698,1710,1713,1682,1674,1710,1727,1756,1741,1696,1650,1734,1655,1660,1719,1708,1839,1685,1669,1680,1633,1676,1691,1684,1662,1709,1674,1504,1685,1484,1680,1484,1696,1745,1616,1610,1608,1625,1578,1587,1607,1600,1729,1617,1559,1631,1629,1637,1584,1639,1754,1621,1603,1550,1589,1561,1613,1551,1611,1672,1582,1421,1642,1433,1597,1415,1616,1598,2028,1988,1965,1995,2003,1995,1973,2026,2054,1983,1947,1953,1991,1959,1960,2004,1983,1903,1794,1774,1789,1811,1809,1783,1789,1961,1838,1858,1868,1861,1864,1849,1841,1864,1653,1565,1791,1694,1509,1688,1349,1573,1691,1703,1695,1650,1633,1695,1723,1663,1840,1722,1790,1741,1735,1730,1788,1768,1728,1831,1781,1800,1705,1729,1769,1822,1717,1858,1642,1625,1638,1658,1640,1656,1625,1649,1846,1713,1724,1703,1722,1724,1743,1699,1852,1960,2014,2006,2045,1987,1999,1979,2002,2004,2030,2009,2008,2011,2027,2004,2036,2025,2012,2021,2000,2008,1865,1875,1735,1869,1562,1303,1605,1860,1803,1901,1877,1783,1819,1735,2004,2003,2054,2018,1897,1534,1560,1575,1611,1790,1825,1767,1767,1795,1790,1827,1704,1734,1654,1634,1775,1758,1777,1732,1757,1760,1729,1688,1673,1816,1815,1816,1805,1778,1788,1763,1807,1805,1903,1981,1977,1988,1982,1889,1806,1839,1845,1830,1838,1793,1805,1915,1862,1868,1811,1984,1949,1980,2000,1967,1962,1994,1978,1968,1905,1998,1875,1867,1822,1758,1773,1903,1912,1930,1974,1925,1879,1747,1750,1873,1884,1836,1706,1596,1475,1572,1849,1962,1951,1973,1959,1857,1797,1886,1762,1840,1849,1781,1919,1703,1887,1813,1866,1785,1714,1765,1746,1747,1765,1807,1491,1724,1485,1624,1444,1464,1468,1635,790,1060,1165,998,744,848,820,980,1115,1001,1189,923,921,1012,835,900,1741,1834,1804,1845,1957,1926,1748,1744,1696,1764,1775,1744,1684,1736,1731,1727,1657,1594,1868,1930,1898,1972,1949,1939,2020,1962,2004,1836,1857,1857,1840,2038,2004,1979,1999,2048,2041,2025,2036,2039,1802,1593,1548,1556,1499,1609,1575,1737,2028,2019,2009,2041,2000,2030,2031,2013,2034,1906,2005,1975,1596,1624,1419,1346,1357,1543,1644,1711,1649,1659,2027,2030,1996,2045,1868,1648,1734,1603,1570,1714,1632,1885,1879,1921,1921,1874,1882,1925,1927,1954,1980,1865,1646,1799,1680,1930,1943,1983,1937,1961,1931,1923,1928,1928,1199,1092,1090,1078,1670,1749,1799,1784,1411,1328,1223,1370,1647,1828,1809,1863,1922,1901,1913,1932,1744,1434,1540,1444,1508,1514,1440,1626,1623,1363,1855,1888,1850,1598,1609,1619,1671,1842,1586,1579,1340,1574,1616,1826,1795,1583,1541,1430,1594,1642,1872,1715,1699,1660,1793,1719,1727,1709,1694,1735,1741,1746,1693,1925,1927,1918,1929,1943,1921,1911,1944,1933,2048,2003,1997,2018,1989,2031,1969,2036,2035,2034,2038,2022,2046,2027,2031,2020,2026,2053,2048,2036,2041,2031,2051,2023,2047,2048,2017,2020,2022,2034,2000,2017,2006,2035,1398,1061,1104,1060,1054,761,725,768,974,1914,1758,1917,1762,1508,1488,1502,1588,1502,1519,1489,1562,1500,1498,1527,1509,1486,1391,1366,1386,1408,1379,1333,1370,1459,1391,1342,1325,1381,1676,1518,1642,1679,1599,1703,1847,1821,1882,1731,1841,1664,1699,1659,1689,1679,1668,1684,1674,1741,1558,1529,1536,1591,1569,1546,1559,1690,1550,1568,1548,1575,1523,1501,1522,1544,1895,1902,1953,1928,1969,1976,1983,1997,2032,1879,1929,1890,1905,1939,1895,1913,1882,2013,2013,2052,2024,2052,1951,1992,1965,1992,2045,2013,2046,2049,2022,1775,1673,1821,1875,1894,1853,1830,1901,1784,1715,1624,1464,1504,1516,1388,1582,1781,1905,1937,1794,1708,1846,1686,1760,1799,1762,1934,1877,1968,1907,1600,1484,1683,1744,1831,1837,1791,1884,1846,1827,1822,1816,1830,1884,1691,1690,1687,1688,1715,1689,1658,1744,1934,1856,1918,1924,1897,1896,1860,1825,1999,1943,1868,1919,1931,1929,1918,1859,1917,1786,1825,1779,1778,1832,1863,1970,1859,1841,1849,1754,1890,1803,1835,1891,1852,1839,1939,1879,1863,1826,1552,1070,1395,1562,1569,1580,1591,1581,1628,1624,1594,1706,1815,1800,1685,1847,1820,1675,1821,1769,1714,1804,1712,1815,1741,1935,1881,1919,1931,1959,1895,1579,1881,1800,1488,1496,1505,1761,1647,1696,1767,1669,1600,1574,1651,1623,1644,1615,1673,1913,1954,1969,1989,1999,1988,1997,2003,1996,2030,1998,1985,1996,1810,1846,1747,1820,1773,1868,1754,1911,1740,1592,1589,1548,1656,1666,1460,1453,1580,1769,1611,1464,1599,1405,1590,1412,1567,1587,1570,1561,1466,1510,1415,1497,1405,1474,1623,1666,1558,1652,1594,1656,1539,1607,1641,1728,1629,1557,1624,1563,1625,1533,1575,1680,1625,1630,1627,1656,1654,1623,1596,1587,1764,1662,1617,1670,1641,1661,1620,1625,1773,1619,1612,1608,1608,1644,1598,1605,1587,1886,1790,1787,1768,1801,1769,1800,1767,1884,1650,1652,1638,1625,1646,1624,1616,1618,1886,1812,1831,1820,1820,1819,1812,1784,1892,1797,1762,1756,1753,1768,1727,1749,1746,1831,1827,1757,1767,1675,1543,1581,1632,1657,1817,1766,2048,2048,1808,1829,1744,1847,2004,1953,1794,1842,1868,1926,1951,1996,1970,1825,1667,1781,1718,1833,1853,1926,2048,2047,2048,2057,1920,1892,1757,1769,1726,1830,1647,1790,2056,2037,1940,1984,1899,1922,1931,1892,1838,1767,1600,1795,1935,1938,1778,1888,1943,1938,1802,1870,1957,1790,1444,1574,1698,1777,1788,1892,1873,1809,1459,1584,1785,1857,1835,1878,1746,1712,1594,1701,1801,1864,1875,1940,1977,1943,1862,1872,1643,1663,1575,1583,1797,1718,1716,1707,1633,1649,1641,1679,1572,1690,1904,1931,1854,1904,1693,1836,1651,1834,1692,1814,1679,1898,1919,1898,1709,1798,1639,1785,1962,1863,1663,1607,1704,1780,1689,1634,1446,1453,1480,1488,1449,1475,1452,1607,2025,2019,2023,2006,2024,2028,2024,2002,1832,1857,1859,1856,1863,1795,1529,1501,1556,1544,1541,1521,1312,1612,1734,1841,1790,1835,1830,1939,1836,1890,1624,1793,1917,1924,1943,1956,1901,1941,2004,1849,1543,1581,1632,1691,1809,1883,1795,1879,1808,1903,2037,2020,2022,1988,1812,1836,1810,1826,1853,1717,1590,1612,1620,1744,1862,1827,1661,1798,2034,2037,2024,1983,1806,1862,2003,1909,1734,1804,1743,1873,1883,1851,1692,1789,1642,1687,1619,1801,2051,2035,2043,1899,1586,1616,1677,1708,1663,1657,1298,1465,1554,1685,1795,1554,1122,1439,1969,1994,1842,1942,2036,2048,1984,2012,1869,1866,1808,1718,1797,1717,1796,1700,1739,1674,1694,1626,1583,1685,1693,1715,1565,1545,1439,1608,1807,1877,1806,1812,1550,1589,1396,1539,1574,1632,1629,1670,1707,1745,1698,1729,1780,1825,1672,1711,1573,1726,1778,1642,1281,1344,1419,1580,1853,1772,1457,1460,1384,1381,1346,1441,1497,1580,1603,1609,1584,1617,1572,1560,1365,1435,1463,1506,1404,1519,1518,1587,1615,1556,1645,1580,1598,1623,1590,1610,1400,1677,1663,1688,1659,1632,1564,1588,1625,1607,1542,1549,1550,1645,1636,1647,1530,1543,1586,1583,1640,1694,1648,1693,1518,1561,1497,1546,1648,1732,1828,1794,1647,1753,1836,1843,1805,1749,1444,1435,1412,1443,1443,1574,1689,1710,1671,1727,1787,1759,1671,1799,1532,1692,1204,1494,1548,1839,1668,1965,1699,1906,1621,1834,1459,1794,1633,1776,1292,1312,891,1132,1694,1478,1223,1382,1484,1470,1489,1465,1470,1458,1395,1364,1382,1419,1417,1261,1235,1022,1021,1789,1464,1557,1317,1459,1436,1646,1824,1962,2028,1792,1966,1929,1703,1783,992,748,798,909,1001,1000,1154,997,1059,867,783,949,1027,862,917,875,931,939,734,893,829,942,970,1104,873,916,1294,1251,562,542,542,515,520,1048,1007,1080,978,746,771,986,864,1044,1053,853,1007,926,776,543,520,603,744,868,1070,439,882,602,738,694,729,1103,962,1036,1068,573,684,492,565,594,738,688,915,731,787,671,918,1271,764,827,1005,958,1020,838,1045,745,893,1082,967,893,685,975,276,619,879,1058,390,568,973,678,717,573,612,692,909,923,860,617,695,720,775,2057,1801,775,988,1267,1265,782,1311,1074,1178,781,962,1319,1167,1599,1572,1483,1560,1652,45,44,82,48,92,45,106,222,365,460,571,621,581,672,814,685,1075,1422,1478,1468,1374,1679,1608,1547,1643,1628,1678,1669,1710,1776,1703,1629,1575,1702,1673,1531,1553,1484,1365,965,904,726,659,587,649,585,558,542,422,376,229,158,73,50,47,45,180,2048,88,48,47,45,44,45,48,47,45,44,66,243,819,1476,1278,1470,1449,1415,1291,1030,1104,863,658,711,903,764,839,852,926,988,904,845,756,752,875,973,824,798,807,843,757,665,542,523,201,46,49,47,45,44,47,49,47,45,44,48,49,1728,1633,1446,1381,1317,1315,1327,1340,1279,1310,1280,1356,1251,1211,1329,1150,1045,1046,933,896,974,818,783,1003,1120,1094,1350,1422,1614,1649,1566,1616,1679,1388,1391,1190,1195,1241,1329,1495,1417,1397,1038,968,1082,1162,1188,1274,1189,1254,1240,1284,1312,1342,1322,1356,1328,1330,1800,1107,45,50,47,45,44,208,563,896,956,1173,1482,1691,1722,1794,1730,1718,1723,1755,1773,1816,1857,1778,1737,1448,1354,1369,1375,1748,1842,1809,1898,1906,1922,1937,1894,1831,1902,1860,1800,1785,1753,1665,1807,1895,1711,1342,1403,1227,686,181,48,49,48,45,46,48,605,842,1011,1204,1236,1408,534,934,1070,902,900,1052,872,1642,1643,1533,1641,1744,1598,1590,1655,1736,1684,1485,1809,1647,1521,1615,1693,1631,1570,1668,1752,1658,1570,1595,1819,1688,1661,1512,1850,1854,1827,1783,1817,1938,2025,2014,1164,49,51,147,218,289,411,447,578,655,944,1049,1086,1383,1385,1379,1482,1455,1348,1359,1432,1485,1641,1647,1627,1580,1597,1506,1597,1484,1442,1489,1467,1429,1487,1609,1750,1686,1678,1634,1636,1646,1669,1556,1381,1450,1452,1401,1177,1038,1181,1078,1046,1070,1030,1022,1029,1280,2006,1424,1417,1387,1326,1302,1343,1312,1246,1313,1307,1329,1176,1240,1301,1139,1021,930,971,975,881,759,902,1091,1106,1218,1361,1537,1672,1579,1586,1655,1494,1446,1347,1117,1168,1328,1382,1482,1440,1225,974,1005,1131,1207,1285,1218,1280,1217,1233,1278,1277,1393,1286,1334,1314,1390,2048,1409,1339,1042,863,1404,1195,1096,861,953,954,867,791,1282,1501,1536,1352,1454,1517,1276,1388,1428,1523,1392,1405,1448,1413,1417,1191,1246,1114,1334,1562,1654,1721,1648,1406,1437,1491,1534,1488,1414,1476,1430,1251,1283,1075,1091,862,961,1210,1291,1352,1415,1365,1379,1381,1343,1939,616,45,45,91,69,63,63,175,279,397,523,627,608,607,727,724,817,1349,1436,1453,1420,1533,1696,1506,1585,1666,1630,1698,1666,1710,1783,1691,1600,1662,1665,1648,1473,1517,1404,1216,912,784,683,633,631,561,579,535,493,365,315,216,90,84,49,45,38,1203,1124,48,49,45,45,45,48,49,45,45,45,143,386,1318,1344,1412,1416,1424,1365,1111,1100,1000,754,625,899,849,790,839,888,960,968,840,791,758,758,973,823,793,779,838,743,700,660,598,322,86,48,49,45,38,45,48,49,45,38,45,48,703,1638,45,45,45,42,49,68,866,1094,1087,1072,1045,1044,1128,1081,963,1123,1131,1236,1478,1669,1671,1783,1590,1446,1467,1371,1299,1071,1242,1362,1244,1261,1287,1411,1546,1588,1451,1610,1700,1481,1475,1572,1603,1461,1059,969,955,1147,1222,1008,560,40,45,48,49,45,190,2048,75,44,109,197,248,366,459,539,622,795,1106,1159,1271,1484,1395,1483,1613,1553,1621,1540,1649,1710,1788,1765,1779,1754,1675,1658,1634,1582,1503,1552,1538,1558,1530,1779,1769,1741,1675,1685,1647,1662,1587,1490,1396,1532,1507,1260,1099,1146,1089,1082,1036,1064,1015,990,947,1809,2048,1506,953,1011,856,893,1013,951,909,984,885,877,753,884,1127,1276,1372,1219,1332,1362,1403,1428,1412,1445,1440,1313,1091,1001,1032,925,1163,1127,1119,1154,1156,975,1064,1261,1261,1280,1307,1152,1083,1264,1189,1161,1248,1249,1369,1329,1265,1283,1263,1251,1335,1293,1345,1357,1534,1330,1235,1252,1388,1374,1400,1412,1403,1416,1449,1411,1329,1310,1315,1433,1387,1384,1388,1338,1314,1269,1167,1170,1145,1318,1297,1152,1077,1200,1127,1074,866,1606,1380,1266,1235,1331,1344,1399,1444,1415,1428,1407,1424,1375,1272,1332,1366,1387,1411,1396,1320,1307,1263,1189,1208,1173,1242,1275,1182,1115,1207,1087,1092,982,1284,1732,908,984,883,902,1000,982,886,965,926,918,812,846,1030,1326,1357,1257,1297,1373,1370,1446,1392,1437,1456,1383,1144,1000,1034,956,1151,1101,1143,1057,1196,1004,1028,1239,1260,1248,1311,1209,1069,1199,1206,1177,1246,1248,1313,1344,1287,1284,1278,1257,1294,1327,1283,1398,1576,2048,155,97,1292,1285,937,1082,1173,1204,131,138,1982,1305,1112,994,993,1026,1290,1257,1355,1149,1242,1373,1291,1451,1383,1368,1263,1326,1523,1668,1512,1481,1391,1423,1479,1476,1420,1517,1517,1494,1396,1464,1514,1518,1569,1652,1692,1605,1497,1553,1544,1591,1554,1469,1486,1462,1477,1389,1297,1206,1208,1222,1231,1296,1297,1160,1157,1204,1793,1622,1119,1076,906,1049,1168,1257,1116,1061,955,1027,953,1002,1174,1207,1270,1206,1052,1186,1264,1432,1283,1350,1203,1223,1556,1534,1622,1682,1639,1671,1564,1537,1578,1658,1684,1753,1653,1643,1456,1424,1340,1389,1380,1352,1555,1615,1559,1523,1492,1454,1421,1428,1419,1396,1363,1351,1682,1643,697,722,840,942,1025,1043,1084,1170,1187,1177,1206,1247,1232,1393,1395,1346,1492,1435,1501,1492,1473,1506,1577,1696,1640,1572,1652,1665,1731,1764,1778,1858,1747,1582,1609,1636,1645,1722,1733,1726,1761,1715,1706,1645,1564,1778,1798,1755,1716,1687,1754,1714,1528,1233,1142,860,833,1230,1141,1649,1536,1572,1692,1172,49,45,45,45,48,211,967,1093,1117,1058,1034,1026,1202,1058,1003,1125,1134,1292,1487,1722,1690,1759,1534,1398,1548,1348,1223,1020,1350,1318,1241,1183,1303,1454,1589,1535,1486,1659,1671,1457,1524,1537,1617,1372,961,1040,1056,1157,1161,931,397,45,44,45,48,49,651,1687,38,45,48,49,45,38,45,48,49,45,68,313,1046,1422,1323,1447,1395,1382,1193,1039,1116,824,627,839,847,771,871,832,961,994,843,810,719,740,959,878,813,780,768,825,754,703,556,422,169,44,45,48,47,45,44,45,48,47,45,44,147,2048,935,911,867,1157,1105,956,945,1033,1015,972,860,1041,1035,1090,951,1200,1384,1396,1460,1522,1468,1603,1470,1359,1294,1258,1440,1351,1281,1321,1132,1181,1017,1095,1256,1452,1445,1457,1354,1203,1149,1156,1159,1387,1100,994,1126,1211,1070,912,829,998,1006,1077,1063,989,945,1827,632,41,45,48,49,50,287,624,861,1027,1183,1563,1699,1745,1790,1707,1710,1721,1754,1764,1827,1842,1793,1676,1414,1387,1291,1459,1784,1852,1844,1916,1889,1937,1933,1855,1848,1881,1869,1837,1840,1772,1741,1806,1893,1522,1436,1357,1177,537,122,44,45,50,47,45,44,666,1288,1349,989,887,707,937,1081,1022,1645,902,45,65,161,222,302,422,489,572,657,1005,1051,1063,1382,1396,1381,1473,1432,1376,1376,1455,1456,1628,1661,1623,1590,1571,1502,1581,1495,1467,1504,1477,1422,1467,1628,1716,1681,1660,1655,1651,1647,1667,1511,1388,1461,1465,1376,1135,1057,1113,1083,1062,1081,1003,1046,973,1429,1906,1433,1400,1357,1290,1291,1341,1317,1257,1338,1346,1293,1192,1294,1239,1085,1053,973,913,977,871,769,944,1094,1125,1239,1387,1563,1650,1590,1578,1692,1484,1443,1264,1138,1189,1330,1418,1456,1430,1191,975,1026,1113,1174,1288,1193,1295,1200,1256,1283,1310,1342,1303,1369,1345,1508,2023,1419,1303,983,915,1385,1139,1065,888,935,956,977,634,1393,1497,1530,1360,1436,1498,1270,1367,1482,1488,1432,1418,1476,1411,1405,1169,1254,1098,1370,1591,1620,1722,1641,1409,1445,1485,1559,1483,1433,1479,1365,1266,1268,1050,1103,851,1006,1208,1278,1347,1433,1371,1404,1354,1335,2024,353,47,45,44,48,49,556,1018,1119,1103,1063,990,1025,1158,964,1051,1156,1155,1371,1590,1708,1775,1667,1474,1426,1429,1358,1132,1108,1401,1235,1262,1188,1371,1493,1579,1460,1531,1697,1592,1397,1594,1552,1588,1202,987,942,1134,1216,1051,851,73,45,45,48,49,45,1464,863,46,48,89,57,96,52,174,286,390,471,577,603,614,697,741,801,1300,1442,1521,1443,1499,1702,1552,1582,1660,1606,1707,1650,1714,1799,1673,1603,1619,1685,1660,1470,1509,1408,1294,901,837,724,628,600,564,566,583,522,365,305,224,109,86,45,45,45,963,1374,49,47,45,45,48,49,46,45,45,48,114,361,1198,1362,1392,1426,1417,1381,1158,1086,1049,808,587,921,833,770,823,859,961,970,851,807,723,744,958,859,794,794,803,741,704,678,594,383,107,49,45,45,45,42,49,45,45,45,42,49,456,1873,45,45,48,49,45,45,45,48,49,45,75,298,928,1447,1304,1465,1401,1401,1256,1023,1124,839,634,793,835,761,864,835,954,998,896,831,743,747,957,879,818,791,800,812,778,702,546,445,174,45,45,43,49,45,45,45,44,49,45,45,45,1986,330,49,45,45,45,48,579,1030,1107,1124,1065,993,1037,1152,969,1053,1134,1181,1385,1592,1718,1768,1682,1461,1424,1444,1340,1148,1095,1408,1246,1252,1179,1366,1497,1590,1456,1538,1697,1595,1410,1573,1547,1603,1201,974,933,1154,1200,1051,853,49,45,45,45,48,49,1496,837,45,62,163,250,282,444,514,605,718,997,1118,1186,1495,1414,1451,1547,1597,1594,1568,1627,1686,1742,1802,1760,1743,1741,1646,1686,1592,1526,1588,1534,1506,1517,1713,1801,1711,1706,1660,1654,1637,1645,1525,1366,1538,1473,1383,1145,1077,1120,1096,1056,1103,1002,1016,987,1394,2048,1952,918,998,872,899,992,964,914,891,935,927,801,870,987,1303,1359,1264,1239,1406,1369,1462,1418,1466,1427,1423,1209,991,1040,932,1109,1110,1171,1030,1184,1051,1004,1259,1210,1198,1322,1267,1079,1170,1186,1180,1268,1243,1280,1305,1280,1300,1289,1290,1282,1340,1297,1416,1427,1353,1290,1276,1269,1331,1342,1406,1463,1428,1398,1425,1375,1299,1335,1357,1359,1389,1413,1336,1323,1241,1236,1205,1154,1217,1266,1195,1146,1208,1086,1053,1020,1199,1622,1272,1267,1287,1335,1337,1354,1491,1456,1375,1433,1373,1307,1389,1317,1387,1374,1417,1381,1355,1260,1213,1243,1226,1190,1250,1227,1151,1200,1146,1054,1048,845,2048,1006,978,910,862,945,1007,923,876,959,924,794,835,941,1253,1309,1320,1237,1342,1408,1396,1403,1469,1423,1367,1287,1039,1006,930,1031,1110,1199,1062,1170,1080,1006,1211,1228,1239,1277,1285,1122,1120,1188,1169,1256,1273,1289,1295,1296,1318,1337,1295,1274,1311,1296,1422,1391,1967,897,92,924,1266,1164,763,1366,1192,593,92,1329,1580,888,838,1041,1173,1023,960,1001,1091,927,950,938,1042,1094,1021,1078,1297,1393,1367,1449,1498,1504,1631,1361,1256,1356,1368,1411,1243,1402,1159,1183,1120,1008,1159,1358,1488,1430,1394,1326,1158,1196,1082,1316,1285,968,1104,1164,1137,947,853,922,1029,1015,1097,992,1003,1238,1904,1131,1025,1008,1021,1105,1288,1321,1187,1229,1288,1349,1327,1425,1409,1326,1227,1378,1580,1692,1433,1507,1411,1416,1481,1424,1420,1535,1546,1420,1403,1507,1528,1514,1634,1666,1689,1551,1497,1601,1529,1579,1521,1464,1491,1453,1443,1387,1275,1242,1197,1209,1241,1336,1245,1160,1105,1230,2048,114,49,45,45,45,79,368,764,920,1047,1267,1628,1704,1764,1778,1725,1731,1726,1781,1790,1863,1811,1781,1692,1341,1429,1247,1587,1797,1840,1850,1909,1894,1934,1938,1808,1874,1852,1867,1831,1841,1768,1757,1819,1842,1435,1457,1306,1064,459,48,49,45,39,45,48,49,1701,1470,1083,1057,927,1049,1154,1233,1175,1051,990,1010,931,1008,1205,1244,1271,1159,1036,1210,1327,1396,1350,1288,1137,1308,1560,1531,1620,1673,1629,1678,1548,1527,1577,1669,1683,1716,1644,1615,1479,1411,1350,1420,1376,1344,1586,1616,1555,1498,1478,1425,1426,1414,1425,1383,1346,1326,1785,1406,713,781,858,931,1034,1028,1076,1188,1231,1176,1192,1250,1232,1380,1372,1353,1491,1447,1497,1485,1430,1456,1559,1654,1610,1633,1615,1671,1779,1744,1768,1859,1704,1585,1613,1622,1662,1732,1709,1718,1738,1704,1710,1652,1605,1770,1803,1750,1702,1690,1752,1713,1482,1196,1121,824,880,1250,1230,1679,1520,1497,1175,1058,600,550,896,1078,1236,1078,2015,1441,1468,1464,1518,1520,1522,1533,1498,1493,1557,1665,1824,1884,1973,2004,1999,2010,1984,2012,2004,1947,1853,1771,1837,1882,1905,1915,2006,2010,1867,1852,1845,1784,1695,1749,1757,1831,1874,1943,1957,2019,2021,1994,1979,1785,1587,1488,1512,1505,1518,1510,1507,1484,1453,1461,1441,1461,2048,1375,1323,1296,1269,1284,1259,1377,1301,1259,1270,1326,1156,1358,1371,1447,1408,1447,1448,1392,1452,1538,1531,1457,1567,1551,1551,1664,1601,1617,1584,1606,1546,1534,1492,1607,1691,1654,1671,1689,1473,1351,1413,1364,1250,1243,1237,1237,1219,1196,1180,1200,1126,1226,1204,1282,1271,1235,1937,1391,1041,1171,1136,1065,960,1062,1116,1084,1141,1107,1169,1207,1349,1350,1475,1509,1591,1556,1514,1645,1550,1426,1450,1596,1559,1507,1529,1406,1447,1341,1335,1317,1352,1268,1417,1429,1546,1527,1469,1480,1332,1216,1162,1010,1033,1024,1151,1178,1168,953,917,1047,944,906,930,1024,1626,1811,1546,1614,1517,1634,1616,1652,1649,1524,1589,1646,1699,1500,1466,1563,1595,1558,1726,1689,1543,1642,1584,1452,1471,1450,1616,1554,1433,1527,1571,1547,1543,1508,1569,1572,1607,1670,1678,1678,1536,1522,1678,1641,1527,1383,1171,1489,1525,1534,1441,1547,1613,1680,1720,1686,1534,1570,1744,1947,953,997,990,1080,1070,1092,1067,1104,1061,1011,1164,1128,1185,1161,1083,1154,1105,1257,1229,1233,1245,1301,1327,1251,1109,1098,1029,1062,1029,978,1047,1043,905,958,908,946,950,1061,1076,1005,1024,986,996,993,951,997,997,1019,1078,1067,1145,1083,1133,1035,923,888,862,2048,1358,1291,1317,1288,1307,1252,1384,1315,1240,1268,1316,1122,1261,1264,1395,1346,1331,1336,1326,1443,1541,1636,1609,1502,1333,1346,1516,1554,1691,1738,1679,1523,1328,1340,1392,1485,1460,1529,1486,1443,1353,1413,1367,1252,1253,1216,1256,1227,1205,1181,1229,1138,1220,1213,1294,1272,1244,1944,1717,1574,1604,1591,1591,1570,1526,1630,1585,1543,1599,1644,1764,1809,1790,1797,1546,1641,1609,1770,1834,1853,1773,1822,1881,1860,1806,1885,1736,1820,1689,1743,1746,1743,1692,1707,1606,1829,1913,1697,1702,1320,1337,1335,1285,1504,1503,1469,1483,1533,1516,1504,1585,1502,1470,1446,1499,1829,1467,809,754,851,943,778,640,889,903,801,834,780,959,1069,1146,1245,1218,1332,1258,1414,1500,1577,1496,1628,1620,1648,1562,1632,1599,1616,1628,1555,1459,1444,1508,1522,1574,1474,1442,1448,1388,1336,1289,1123,1225,1168,1213,1036,1014,1036,1075,1001,951,1021,940,984,789,1135,2037,1747,1828,1893,1836,1814,1808,1849,1839,1724,1671,1549,1459,1497,2048,1651,1850,1897,1887,1854,1883,1903,1895,1712,1729,1568,1519,1487,2011,1751,1848,1894,1880,1931,1824,1781,1615,1472,1463,1555,1645,1642,1908,1695,1874,1964,1646,2001,1946,1685,2017,1828,1320,1487,1617,1489,1550,1972,1437,1381,1657,1548,1472,1815,1750,1299,1560,1608,1570,1561,2048,1660,1670,1654,1751,1785,1766,1731,1780,1775,1834,1809,1900,1745,1740,1781,1781,1829,1817,1827,1789,1878,1811,1763,1775,1772,1754,1767,1667,1791,1779,1744,1741,1797,1820,1767,1777,1763,1716,1715,1705,1745,1725,1722,1690,1621,1855,1870,1880,1848,1805,1824,1885,1873,1828,1759,1676,1547,2025,2003,1936,1891,1937,1929,1912,1898,1922,1905,1885,1853,1921,1882,1846,1761,1767,1745,1815,1827,1758,1848,1765,1863,1818,1826,1749,1780,1702,1601,1566,1587,1711,1795,1783,1729,1754,1679,1693,1745,1698,1755,1780,1788,1806,1722,1891,1905,1929,1892,1816,1837,1880,1915,1923,1903,1915,1879,1997,2050,1942,1959,2028,1996,1995,2009,1974,1946,1926,1941,1972,2010,1942,1932,1899,1990,1957,1972,1940,2023,2022,1996,1894,1933,1900,1947,1869,1687,1816,1791,1865,1920,1936,1963,1964,1979,1963,1961,1902,1998,1984,1867,1821,1847,1855,1864,1814,1798,1780,1827,1845,1769,1722,1636,1556,1431,1415,976,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2045,1931,1464,1376,1428,1532,1569,1489,1442,1469,1197,1225,1462,1516,1215,1217,1384,1461,1481,1445,1487,1391,1390,1380,1514,1452,1461,1485,1448,1527,1428,1547,1508,1564,1496,1489,1596,1487,1544,1536,1440,1527,1579,1522,1382,1450,1408,1656,1649,1641,1639,1538,1553,1686,1673,1506,1610,1622,1536,2048,1051,1082,1152,1124,1026,968,1061,1126,1126,1147,1102,1199,1207,1383,1379,1488,1552,1633,1540,1557,1628,1476,1410,1496,1599,1525,1555,1511,1377,1476,1287,1319,1375,1274,1305,1457,1445,1537,1532,1464,1437,1290,1217,1077,1021,1023,1047,1153,1178,1125,873,1005,1047,925,921,971,1070,1943,1326,1082,1129,1095,1064,1025,1080,1116,1047,1160,1187,1292,1266,1263,1605,1524,1432,1567,1484,1472,1608,1541,1448,1544,1600,1568,1466,1500,1472,1633,1631,1772,1848,1895,1721,1663,1808,1786,1648,1576,1577,1329,1308,1209,914,1143,1061,1144,1150,1150,962,939,1064,951,897,987,1050,1677,1810,1530,1504,1525,1539,1506,1456,1539,1534,1494,1534,1579,1700,1738,1775,1754,1645,1551,1566,1725,1756,1875,1696,1737,1806,1829,1746,1878,1533,1764,1744,1739,1700,1694,1589,1610,1615,1734,1888,1682,1810,1238,1332,1312,1242,1398,1464,1466,1431,1465,1467,1440,1483,1494,1394,1386,1437,1694,2015,1670,1669,1681,1773,1767,1737,1739,1786,1805,1818,1844,1894,1731,1733,1790,1798,1842,1823,1790,1853,1837,1781,1756,1756,1770,1785,1760,1709,1796,1758,1743,1731,1827,1782,1738,1754,1755,1704,1713,1721,1743,1734,1716,1673,1690,1864,1880,1871,1854,1812,1827,1901,1882,1804,1720,1648,1586,865,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2053,1210,1323,1335,1453,1457,1537,1506,1409,1449,1471,1479,1410,1449,1365,1342,1033,731,1076,1280,1532,1628,1779,1833,1838,1900,1859,1742,1764,1203,1770,1738,1838,1886,1850,1818,1788,1802,1708,1451,1206,985,1119,1347,1184,1252,1383,1153,1206,1204,1370,1447,1467,1522,1426,1436,1386,1341,2041,1513,1451,1494,1558,1477,1465,1532,1488,1453,1508,1601,1625,1409,1582,1676,1665,1680,1803,1731,1631,1720,1575,1583,1533,1553,1572,1587,1581,1613,1618,1598,1564,1525,1565,1600,1656,1558,1640,1552,1568,1597,1660,1605,1576,1327,1192,1473,1501,1437,1342,1479,1531,1575,1628,1460,1369,1494,1897,1647,1429,1399,1396,1440,1353,1467,1481,1369,1389,1476,1527,1139,1420,1542,1528,1526,1704,1647,1567,1638,1510,1472,1406,1564,1560,1580,1436,1514,1524,1560,1458,1497,1566,1536,1574,1562,1586,1635,1520,1527,1575,1502,1394,1261,889,1251,1368,1378,1246,1415,1449,1520,1546,1435,1325,1386,1674,1947,1627,1674,1657,1785,1759,1730,1740,1605,1714,1736,1828,1599,1503,1648,1636,1624,1741,1792,1647,1682,1651,1519,1550,1509,1675,1676,1492,1551,1593,1622,1655,1605,1643,1708,1685,1741,1750,1746,1620,1581,1727,1649,1574,1478,1258,1603,1694,1691,1570,1641,1711,1769,1821,1823,1654,1637,1758,1955,557,603,615,648,652,693,838,1000,1040,1052,885,1259,1465,1546,1631,1452,1186,1561,1543,1665,1801,1648,1580,1745,1663,1636,1751,1612,1595,1804,1684,1714,1785,1690,1615,1661,1742,1737,1803,1703,1429,1433,1402,1210,1217,1373,1382,1247,1249,1289,1329,1472,1563,1541,1523,1559,1663,931,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2055,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2046,2014,2031,2051,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2028,2011,2051,2054,2057,2048,2056,2047,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2057,2048,2057,2035,2008,2047,2050,2056,2048,2048,2049,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2051,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2037,2014,2035,2051,2057,2048,2048,2050,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1669,1299,1504,1325,1104,1028,1114,1129,1074,1199,1073,1092,1220,1080,1235,1059,1081,1108,1175,1168,1197,1125,1197,957,914,852,943,952,587,1054,838,875,1127,351,349,369,1131,1226,1480,1498,1493,1422,856,1077,958,902,878,934,1378,1405,1292,1185,1062,1026,1186,1187,983,1213,1093,1172,1161,1098,1223,1059,1159,1089,1106,1131,1227,1047,1039,918,972,858,978,975,559,974,775,759,840,355,350,354,1291,1322,1507,1465,1438,1117,1115,1153,915,933,849,1532,1442,45,44,45,62,126,121,171,193,175,270,210,246,574,972,1028,1003,1168,1438,1584,1582,1663,1627,1770,1744,1759,1616,1547,1552,1619,1691,1689,1762,1779,1649,1640,1651,1600,1631,1579,1075,946,959,793,577,272,175,128,117,144,173,115,59,56,50,47,45,147,655,1021,1900,148,256,197,186,220,395,402,391,413,440,259,359,690,814,989,946,1095,1285,1585,1703,1793,1755,1774,1852,1810,1747,1664,1678,1691,1862,1821,1889,1864,1809,1793,1917,1851,1860,1891,1300,983,888,874,695,528,401,338,308,405,338,442,151,157,137,197,203,118,2019,1346,1314,1303,1205,1326,1401,1431,1311,1386,1325,1406,1465,1409,1392,1447,1496,1453,1460,1463,1538,1376,1376,1396,1412,1277,1117,1270,1396,1305,1361,1341,1389,1250,1388,1431,1325,1284,1396,1530,1458,1401,1516,1284,1383,1410,1441,1422,1433,1373,1310,1376,1289,1477,1343,1191,1247,1220,1340,976,1037,1446,1483,44,45,48,316,1048,1039,1035,1341,1497,1504,1341,1807,1796,1759,1688,1679,1228,952,1459,1705,1741,1853,1705,1826,1828,1764,1632,1661,1689,1801,1882,1843,1886,1848,1751,1874,1887,1885,1843,1912,1582,1590,1507,1715,1566,1314,1262,1355,1156,1152,1117,706,884,47,45,44,315,691,1091,777,703,1058,1243,1316,1361,970,597,989,928,1049,678,866,694,673,706,708,965,887,843,898,848,988,849,669,636,977,958,902,888,961,533,762,770,802,705,716,795,910,981,687,829,833,827,861,879,891,915,922,847,832,839,850,1060,796,1060,1744,1383,1510,1507,1651,1588,1442,1761,1494,1553,1455,1678,1606,1530,1610,1465,1419,1481,1674,1604,1514,1616,1363,1506,1703,1925,1439,1492,1289,1122,1243,1343,1377,1088,1112,1230,1043,1135,1231,1262,1244,1102,826,850,843,1777,1550,1380,1459,1380,1295,1394,1178,1210,1379,1349,1255,1114,926,892,635,976,1919,1507,1496,1507,1403,1297,1367,1166,1245,1329,1316,1220,887,839,709,757,1903,1470,1483,1414,1480,1334,1249,1359,1176,1300,1395,1313,1198,1044,917,872,641,1021,1897,1433,1512,1421,1478,1535,1501,1344,1172,907,821,754,902,859,825,1754,1473,1471,1419,1454,1322,1244,1320,1167,1316,1352,1301,1133,943,947,751,696,1671,1655,1479,1362,1131,1251,1461,1410,1331,943,996,1391,1742,1594,1564,1363,1258,1136,1492,1391,1229,1047,1276,1273,1330,937,1187,1728,1773,1781,1832,1685,1589,1392,1854,1910,1786,1750,1917,1800,1292,1280,1290,1346,1450,1476,1876,1313,1427,1289,1364,1460,1536,1353,909,948,1171,1808,974,857,940,1771,1324,1365,1675,1598,1529,1745,1730,1786,1201,1528,1724,1515,1642,1890,1863,1580,1251,1607,1687,1542,1761,1916,1909,1399,1332,1664,1688,1602,1815,1918,1934,1297,1378,1673,1717,1535,1733,1916,1919,1412,1406,1649,1683,1519,1714,1854,1919,1342,1367,1683,1571,1524,1764,1709,1844,1194,1559,1733,1523,1638,1761,1825,1411,1333,1667,1651,1509,1715,1775,1857,1233,1488,1732,1560,1605,1825,1840,1579,1627,1505,1590,1571,1567,1674,1689,1539,1539,1596,1433,1589,1595,1558,1563,1431,1486,1541,1392,1500,1475,1162,1088,1174,1343,1291,1155,1305,1661,1564,1271,1284,1410,1393,1408,1195,1490,997,1395,1844,44,45,48,49,45,97,415,669,745,854,947,972,976,1058,932,1162,1107,1270,1321,1175,1309,1333,1166,1190,1115,994,1213,1032,1214,1175,1042,910,934,790,665,721,628,315,47,45,44,45,50,1315,876,743,811,1133,1290,1278,1004,1015,1009,1083,743,731,763,975,988,1097,1165,1117,1185,1276,1258,1202,1359,1366,1336,1349,1278,1320,1206,926,797,555,546,553,793,891,801,806,882,1034,947,883,1010,1240,1039,993,1036,821,1093,1239,1081,1043,965,1091,837,1374,732,1095,1145,1628,1201,1255,1340,1466,1466,1476,1649,1756,1794,1831,1816,1805,1721,1725,1616,1685,1768,1607,1669,1621,1649,1565,1482,1649,1679,1591,1558,1576,1591,1549,1416,1172,1067,1401,1616,1517,1584,1571,1443,1348,1435,1441,2018,696,744,1055,1111,1159,1316,1401,1317,1267,1532,1439,1296,751,930,1168,1302,1434,1248,1208,1220,1117,1166,1197,1199,1299,1187,1328,1416,1239,1268,1364,1391,1336,1299,1231,1248,1215,948,979,1148,1137,1293,1176,1442,620,1411,858,973,1251,1745,1695,818,956,1067,1703,807,847,820,1053,1094,1014,982,1032,1227,1344,1579,1653,1649,1636,1490,1341,1448,1516,1692,1595,1702,1630,1633,1616,1565,1484,1512,1660,1822,1855,1844,1827,1740,1747,1454,1386,1328,1358,1342,1236,1017,626,1013,1136,1119,1139,836,1241,835,1048,1104,937,854,1126,1266,1461,754,609,561,712,608,624,594,852,825,1130,1063,810,1095,796,812,784,828,787,967,876,905,923,888,864,913,903,904,991,1028,969,791,636,658,764,750,738,922,885,755,903,785,839,793,1056,766,1442,1807,2048,1560,2057,433,92,176,195,77,94,351,657,731,823,947,952,957,1030,947,1153,1126,1292,1338,1186,1309,1303,1170,1205,1034,1068,1199,1023,1216,1119,988,902,887,651,673,741,493,126,81,190,182,92,425,1503,711,719,995,1142,1382,1025,952,1049,932,806,669,764,946,923,969,1088,1061,1067,1156,1197,1096,1358,1413,1386,1272,1226,1363,1161,924,731,509,536,541,790,907,782,817,923,1023,904,912,1035,1179,1046,1382,697,1028,1112,1323,810,1373,631,1046,1218,963,1062,924,965,994,1078,1155,1075,1979,1134,1217,1389,1345,1509,1431,1578,1684,1786,1824,1817,1803,1709,1750,1675,1616,1781,1631,1647,1576,1644,1606,1479,1620,1675,1666,1521,1586,1561,1591,1495,1304,1067,1211,1632,1547,1598,1566,1542,1341,1362,1444,1783,1202,681,1000,1093,1121,1280,1335,1382,1281,1464,1486,1331,947,822,1044,1281,1384,1264,1242,1281,1110,1189,1143,1222,1316,1219,1214,1391,1358,1241,1319,1367,1315,1331,1259,1247,1199,1087,975,1077,1158,1261,1183,1347,772,1006,1165,1185,780,1749,1314,864,635,731,651,961,703,1330,1755,809,877,788,1071,1100,984,1019,1032,1186,1338,1572,1656,1649,1639,1492,1342,1405,1508,1661,1606,1694,1634,1631,1620,1579,1470,1514,1646,1822,1853,1850,1832,1743,1751,1497,1417,1324,1352,1359,1242,1006,614,978,1159,1105,1201,806,1232,854,1004,1106,1238,773,566,967,708,1286,1188,2003,1895,1847,1705,1754,1719,1714,1742,1923,1890,2057,464,45,48,49,45,41,45,48,49,45,44,45,148,784,1053,1417,1404,1569,1569,1429,1514,1549,1592,1670,1708,1764,1747,1666,1721,1624,1671,1637,1623,1567,1599,1440,1317,1280,1125,1166,895,476,322,208,139,44,45,48,47,45,44,45,50,47,45,44,45,1359,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1368,1226,1202,1234,1242,1094,1131,1137,1220,1202,1275,1281,1165,1321,1269,1459,1701,1554,1535,1365,1367,1515,1573,1439,1381,1600,1610,1549,1497,1488,1537,1431,1375,1394,1466,1452,1489,1268,1213,1335,1266,1266,1187,1099,869,1043,1033,1134,1001,824,686,742,817,689,640,624,534,1880,1664,1153,1079,1140,1004,1199,1281,1349,1141,1226,1193,1277,1350,1266,1586,1529,1779,1786,1685,1752,1784,1603,1463,1553,1477,1381,1585,1618,1456,1465,1631,1574,1654,1483,1711,1532,1376,1279,1373,1236,1109,1128,1018,1001,1085,914,990,1037,1050,1042,900,859,686,596,434,434,376,1371,1364,660,691,673,665,669,653,681,689,686,625,677,678,1226,1583,1502,1550,1583,1678,1611,1553,1499,1403,1081,887,1272,1462,1447,1551,1523,1447,1502,1419,1326,1144,949,1151,1418,1515,1482,1456,1493,1391,1232,936,696,639,677,701,674,674,655,676,710,665,648,666,1176,1741,698,661,635,665,702,697,655,656,695,705,712,661,821,1401,1624,1595,1631,1715,1689,1566,1513,1434,1370,1318,1362,1274,1312,1346,1327,1302,1276,1281,1151,1664,1677,1627,1618,1661,1595,1538,1389,1097,991,737,757,672,669,677,623,690,687,655,644,640,692,660,808,2028,850,400,544,652,629,717,871,914,996,1118,1030,1137,1346,1503,1507,1577,1559,1559,1518,1468,1434,1470,1454,1442,1489,1485,1422,1416,1399,1259,1360,1394,1416,1598,1618,1560,1447,1319,1118,1156,1266,1230,1228,1279,1152,1126,1017,941,1020,1013,1002,967,900,877,693,610,394,1227,1292,326,490,520,675,741,826,887,913,1011,1031,1162,1239,1343,1514,1620,1667,1722,1656,1633,1487,1432,1373,1306,1304,1374,1426,1465,1403,1447,1492,1443,1453,1412,1461,1450,1556,1683,1648,1530,1350,1301,1214,1239,1211,1210,1219,1178,1078,1058,1061,1003,907,795,763,684,514,884,1761,303,490,629,641,672,780,905,920,1065,1078,1036,1355,1555,1500,1490,1583,1517,1463,1314,1296,1320,1356,1322,1442,1389,1412,1364,1258,1402,1369,1371,1296,1349,1338,1293,1356,1538,1547,1620,1423,1468,1401,1370,1215,1186,1229,1221,1152,1084,1019,983,935,886,777,648,494,402,1750,1743,1723,1796,1701,2053,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2028,1976,2053,2012,2053,1990,2048,1960,2048,1971,2048,2004,1975,1876,2029,1997,1771,1883,1962,1997,1984,1969,1962,1962,1996,1939,1006,765,817,899,992,999,1127,1023,1070,847,783,964,1032,863,939,893,902,985,824,802,877,838,978,1087,884,687,881,1350,1283,1267,1373,1127,560,539,504,598,556,797,933,941,1052,958,708,996,726,943,998,1012,750,1060,817,514,539,686,734,708,1268,470,791,656,694,745,634,1134,903,1015,1039,740,745,540,542,543,696,747,808,823,662,694,884,973,1169,806,778,1011,999,999,1037,741,945,740,809,977,925,925,428,539,903,772,775,531,649,913,648,621,641,671,837,764,848,681,726,750,741,1638,1689,1707,1467,1435,1420,1355,1547,1671,1921,1742,1791,1462,1439,1421,1428,1556,1772,1966,1640,1635,1738,1636,1619,1688,1748,1799,1786,1751,1725,1655,1268,1185,1191,1455,1596,1614,1715,1769,1730,1776,1671,1752,1705,1739,1666,1752,1672,1759,1771,1658,1774,1799,1687,1740,1789,1764,1639,1574,1609,1411,1302,1311,1393,1531,1523,1612,1646,1561,1619,1616,1531,1576,1639,1615,1720,2034,1410,1405,1487,1546,1446,1480,1561,1477,1463,1532,1629,1568,1439,1642,1672,1648,1708,1778,1718,1672,1681,1570,1572,1508,1588,1605,1594,1568,1631,1641,1581,1555,1568,1650,1623,1641,1611,1612,1573,1566,1604,1642,1595,1566,1234,1250,1474,1508,1396,1393,1479,1555,1622,1613,1453,1399,1491,2051,1366,1230,1222,1257,1225,1259,1232,1245,1248,1282,1301,1403,1457,1291,1283,1293,1311,1310,1313,1271,1245,1289,1268,1253,1262,1258,1233,1254,1255,1252,1230,1188,1189,1248,1225,1246,1237,1237,1277,1245,1269,1246,1281,1300,1323,1575,1295,1276,1317,1335,1309,1291,1232,1255,1292,1274,1225,1820,1914,1727,1780,1787,1802,1810,1777,1774,1785,1784,1755,1724,1728,1710,1703,1670,1633,1624,1610,1654,1652,1594,1578,1713,1707,1701,1716,1762,1744,1803,1739,1766,1746,1735,1713,1589,1712,1682,1677,1661,1661,1671,1741,1711,1721,1730,1731,1745,1789,1797,1746,1744,1738,1756,1748,1752,1776,1509,1089,1624,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1680,654,603,582,643,598,591,596,629,632,612,623,1331,641,519,596,591,534,379,396,493,1693,1739,1383,1031,1125,1055,1303,1518,1475,1136,1357,1753,1223,1037,1440,396,428,449,474,515,467,511,434,355,261,279,280,402,1686,1898,1754,1704,1703,1775,1015,1176,1142,915,900,1121,1106,883,1181,593,1104,916,977,984,1369,629,1299,1077,1067,990,1046,921,1039,1248,954,897,842,1317,629,1172,1018,1308,1158,1027,1185,581,1131,1081,1158,927,915,1277,511,305,301,476,1307,1045,1254,791,1305,913,1807,933,1726,1307,1950,1462,1497,1558,1574,1598,1629,1631,1628,1685,1620,1654,1675,1590,1665,1639,1592,1620,1641,1740,1719,1685,1750,1749,1775,1696,1676,1772,1799,1813,1810,1854,1891,1893,1891,1906,1875,1761,1779,1827,1813,1810,1783,1791,1801,1752,1760,1572,1588,1624,1619,1566,1458,1493,1612,1560,1710,1666,2048,1411,1402,1501,1556,1496,1503,1558,1466,1470,1520,1629,1595,1396,1618,1681,1630,1696,1775,1737,1655,1710,1569,1595,1525,1561,1605,1600,1579,1609,1642,1590,1544,1548,1631,1608,1620,1587,1621,1563,1584,1612,1651,1619,1582,1273,1218,1477,1488,1418,1328,1490,1537,1608,1613,1431,1382,1475,1975,982,582,712,488,616,736,834,733,1000,958,1144,898,1186,1251,1295,1320,1336,1354,1379,1389,1406,1475,1358,1402,1456,1566,1443,1405,1474,1321,1028,980,911,1212,1260,1267,1265,1041,1114,959,936,994,882,919,1029,873,764,845,900,845,482,648,819,614,703,655,602,1408,1424,733,742,884,974,1053,1127,1039,1113,1161,1105,956,828,732,1009,1334,1309,1423,1443,1518,1475,1522,1343,1489,1548,1603,1543,1516,1610,1642,1703,1669,1564,1500,1542,1586,1480,1478,1469,1276,1312,1209,1084,930,1029,1074,1090,1061,1163,1218,1235,1102,995,833,734,813,771,1022,931,1652,2021,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2055,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2022,1906,1981,2048,2048,2056,1914,2009,2048,2057,2048,2048,1867,2023,2055,2051,2056,1939,1994,2048,2045,1995,1931,1993,1993,2003,1863,1979,1993,2007,1863,1975,2027,2005,1914,1982,1995,1943,1993,1870,2030,2042,1896,1922,1933,1878,1984,1858,1975,1863,1947,1907,1904,1946,1919,1959,1859,2011,1858,1974,1863,2016,1863,1933,1906,1925,1933,1899,1984,1829,2031,1870,1994,1890,1912,1937,1932,1939,1950,1940,1921,1962,1892,1987,1916,1983,1853,2030,1875,2028,1867,1979,1863,1968,1878,1958,1890,1931,1918,1945,1919,1922,1939,1913,1960,1873,1979,1895,2005,1865,2011,1889,1937,1915,1985,1921,2010,1849,1994,1935,1972,1881,2022,1979,1977,1888,1981,2008,1903,1943,1907,1908,1939,1963,1898,1979,1869,1942,1896,1941,1907,1903,1951,1992,1868,1981,1865,1993,1863,1933,1914,1980,1870,2029,1867,1955,1894,1908,1939,1825,2018,1875,1985,1870,2016,2048,2027,1900,1979,2048,1981,1976,2016,2048,1863,1978,2044,2014,1918,1929,1933,1986,1879,1978,1864,1975,1866,1952,1907,1948,1901,1938,1917,1878,1986,1834,1945,1896,1909,1946,1807,2031,1864,1926,1932,1932,1933,1923,1946,1912,1977,1924,1977,1891,1981,1882,2015,1875,2029,1870,1960,1903,1948,1914,1942,1905,1938,1915,1926,1933,1930,1939,1888,1980,1928,1979,1898,2009,1890,2005,1896,2006,1896,2005,1912,2006,1903,2009,2019,1916,1940,1919,1929,1933,1930,1933,1928,1946,1884,1978,1855,2028,1865,1975,1864,1931,1910,1921,1937,1874,1981,1969,1960,1940,1937,1953,1905,1946,1903,1951,1900,1946,1907,1939,1909,1939,1902,1941,1917,1937,1930,1960,1907,1947,1901,1940,1910,1941,1907,1941,1914,1930,1932,1934,1939,1886,1979,1855,2014,1864,1957,1914,1944,1907,1942,1907,1940,1907,1938,1906,1942,1916,1942,1906,1938,1906,1941,1906,1949,1896,1937,1917,1908,1957,1800,2030,1864,1950,1915,1943,1910,1982,1864,1938,1898,1914,1932,1938,1951,1834,2009,1850,1977,1870,1975,1863,1981,1865,1979,1871,2029,1865,1943,1914,1983,1953,1980,1984,1946,1847,2009,1852,1998,1864,1981,1867,1964,1881,1914,1933,1951,1915,1939,1906,1908,1903,1950,1898,1904,1946,1832,2009,1859,2029,1866,1978,1870,1939,1896,1941,1917,1919,1939,1901,1979,1857,2006,1865,1978,1879,1976,1865,1945,1895,1979,1865,2014,1964,1980,1860,2033,2048,2048,1864,1997,2048,2029,1906,1981,2057,2030,1919,1992,2043,1870,1976,2048,2055,1863,1977,1864,1978,1931,2009,1975,1957,1875,1980,1878,2023,1877,2030,1864,1994,1864,1941,1907,1983,1881,2030,2048,1882,2030,2048,1870,2030,2033,1863,1973,2048,1870,1998,2048,1879,1976,2048,1871,1978,2048,1877,2030,1865,2014,2048,1876,1979,2048,2055,1880,1975,2048,1946,1979,1950,1987,1944,1976,1903,1976,1939,1980,1942,1980,1932,1980,1854,1975,1865,1975,1865,1992,1865,1984,1870,1975,1879,1976,1860,2009,1940,1978,1928,1979,1922,1980,1855,2030,1876,2030,1876,2029,1870,2032,1911,2008,1931,1979,1921,1996,2050,2057,2048,1985,1970,1988,1985,1941,1986,2019,1988,1867,1984,2048,2057,2055,1865,1998,1966,1989,1973,1920,1899,1977,1812,2030,1862,1910,1933,1843,2009,1851,1936,1907,1949,1900,1952,1896,1951,1900,1951,1896,1953,1895,1936,1903,1942,1915,1894,1973,1815,2030,1880,2032,1878,2029,1866,1994,1863,1968,1883,1932,1919,1950,1915,1941,1917,1950,1909,1981,1867,1977,1865,1977,1875,2019,1866,1978,1864,1996,1863,1963,1884,1943,1896,1946,1896,1945,1902,1916,1944,1892,1984,1842,2030,1867,1954,1901,1947,1903,1948,1901,1944,1905,1936,1927,1933,1936,1920,1946,1906,1977,1894,1979,1893,2005,1902,2010,1857,2032,1880,2032,1875,2030,1880,2028,1867,1951,1898,1915,1934,1927,1957,1925,1963,1881,1974,1893,2008,1866,2030,1880,1979,1870,1967,1882,1943,1907,1938,1902,1941,1917,1928,1937,1897,1977,1901,1982,1968,1977,1940,1946,1913,1977,1931,1958,1924,1963,1918,1957,1828,2005,2048,1865,1977,2014,1946,1876,1980,1953,1987,1950,1963,1922,1946,1830,2008,1857,1950,1905,1884,1986,1829,1945,1898,1903,1946,1993,1998,1964,1873,1982,1986,1946,1917,1961,1979,1890,1934,1910,1905,1946,1956,1915,1987,1864,1952,1907,1895,1960,1926,1946,1920,1964,1912,1977,1903,1977,1974,1959,1909,1977,1940,1961,1847,2009,1964,1977,1884,1982,1959,1983,1850,2017,1862,1934,1905,1882,1982,1906,1983,1853,1976,1862,1935,1913,1920,1937,1899,1986,1828,1977,1868,2030,1992,1962,1998,1861,1971,1862,1939,1896,1986,1880,2028,2048,1861,1972,1879,2033,2048,2048,2040,1919,1954,1903,1983,2048,1862,1978,1989,1959,1932,1950,1993,1861,1972,2048,2035,1924,1993,2048,1862,1943,1906,1985,1850,1975,1864,1992,1862,1927,1916,1923,1937,1918,1950,1997,2048,2025,1902,1947,1896,1984,1880,2028,1872,2029,2011,1933,1932,1934,1929,1933,2005,2048,2009,1937,1952,1905,1939,1906,1981,1862,1972,1871,2050,1868,1995,1880,2029,1988,1963,1954,1917,1989,1854,2031,2048,1890,1975,1871,1971,1862,1936,1908,1962,1893,1977,1945,1980,1896,2010,1964,1977,1940,1946,1905,1962,1919,1963,1996,1867,1972,2048,1876,1962,1882,1975,2010,1946,1993,1862,1962,1867,1972,1871,1938,1896,1945,1910,1920,1937,1996,1868,1971,1871,1971,1862,1973,1862,1964,1872,1939,1898,1904,1946,1958,1907,1982,1949,1979,2052,1909,2009,2053,2019,1931,2001,2021,1933,2002,2048,1870,2030,2020,1933,2004,1866,1978,1865,1979,1994,1960,1996,2048,1864,1998,2048,1964,1978,2052,1945,1979,2052,1864,1989,2013,1940,1995,1873,1979,2027,1902,1950,1901,1951,1895,1933,1906,1895,1958,1825,2005,1867,1958,1896,1916,1938,1963,1897,1980,1889,2031,2008,1938,1949,1920,1964,1892,1918,1932,1995,1945,1980,2052,1867,2013,1862,1972,2032,1895,1979,2048,1862,1978,2048,1863,1981,2048,1872,1975,2037,1894,1980,1100,1132,1145,1149,971,976,1918,1688,1854,1784,1866,1590,1204,1319,1975,2048,2048,1047,34,34,34,34,34,34,34,187,893,969,1071,1103,1068,946,878,729,946,949,998,917,1060,888,981,1128,976,1069,1024,927,885,851,848,1002,1117,910,923,835,901,969,908,913,1010,870,751,871,1074,1206,958,951,1347,1284,1269,1226,1290,1267,1476,1294,1511,1394,1406,1008,882,1062,1024,906,971,1051,1011,901,1144,987,1137,1027,1041,1088,1094,1034,1076,1185,1191,1105,1245,1330,1280,1093,913,347,777,906,1118,1081,1073,985,522,1252,1545,1521,1317,1462,1314,1397,1333,1073,1145,1189,913,1779,1293,1349,1282,1206,1195,1222,1147,1234,1479,1447,1381,1295,1308,1227,1311,1470,1535,1656,1570,1577,1611,1535,1563,1596,1511,1530,1493,1460,1389,1374,1360,1595,2054,2048,2048,2048,2048,2048,2055,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1472,1357,1440,1380,1351,1389,1447,1465,1495,1659,1657,1520,1450,1425,1289,1554,1667,1723,1756,1645,1646,1516,1432,1571,1645,1645,1660,1649,1581,1550,1433,1591,1978,2055,2055,1991,2048,2009,2022,2048,2018,2021,2048,1994,2041,2048,2022,2048,2048,2038,2055,2048,2029,1958,1926,2048,2043,1915,1527,1587,1612,1561,1572,1587,785,239,206,230,214,272,695,242,213,222,219,219,1167,1238,1335,1246,1162,1123,1232,1168,1269,1191,1183,1196,1110,1111,458,159,1670,1329,1872,2049,2034,2048,1446,878,2048,2048,2048,2048,2048,2048,1447,881,2048,2048,2048,2048,2048,2048,2048,1449,875,2051,2048,2048,2048,2048,2048,1417,947,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1715,1157,1019,81,424,2017,2048,2048,2048,2048,2048,2048,2048,2048,2048,2051,2048,2048,2048,2048,2039,2048,2048,2048,2048,2057,2056,2048,2048,2048,2048,2047,1927,2048,2048,2048,2048,2048,2055,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2045,2048,2048,2048,2048,2032,2048,2048,2048,2048,2048,2033,2048,2048,2048,2013,2036,2048,2024,2048,2048,2032,2048,2025,1997,2048,2034,2057,2035,2048,2048,2034,2048,2048,2048,2054,2048,2056,2056,2048,1903,909,2054,2053,2048,1448,875,1947,2054,2048,1998,2048,2048,2048,2048,2048,2048,2056,2057,2048,2048,2048,2048,2048,2048,2035,2048,2053,2048,2048,2048,2049,2015,2048,2011,2048,2048,2057,2013,2048,1936,2048,2036,2048,2033,2048,2022,1990,2048,2033,2048,2032,2048,1912,2057,2035,2048,2035,2048,1933,2048,2051,2048,2052,2056,2001,2002,2048,2016,2048,2041,2036,2044,2048,2057,2048,2048,2048,2048,2055,2048,2032,2048,2023,2034,2048,2048,2048,2017,2048,2048,2048,2050,2048,2048,2048,2048,2048,2048,2056,2034,2037,2048,2048,2048,2048,2048,2016,2020,2007,2038,2041,2048,2043,2048,2024,1997,2048,2025,2048,2025,2057,1925,2048,2045,2048,2047,2048,1928,2048,2046,2048,2048,2048,1979,1990,2048,2028,2048,2016,2031,1952,2048,2030,2048,2033,2048,1910,2056,2044,2057,2044,2057,1916,1424,135,135,880,2048,1734,167,878,2045,1443,1140,1976,1980,2033,2013,2054,2014,258,874,2048,1377,936,2034,1726,136,880,2032,1338,131,137,427,284,874,2048,665,134,137,441,181,454,1014,899,864,905,976,927,869,805,924,891,898,805,1023,1120,908,941,1010,792,1082,1110,1092,966,1143,918,848,1179,1083,1097,1105,633,632,385,828,1238,955,1002,451,345,346,426,382,471,535,626,458,1488,1245,969,968,1296,1449,1575,1497,1339,1384,1275,1565,1428,1223,1108,1239,1493,1410,1583,1535,1366,1250,1184,1348,1418,1470,1544,1462,1137,1207,1456,1421,1562,1587,1310,1160,1186,1528,1425,1570,1537,1228,1118,1221,1506,1489,1553,1465,1296,1234,1393,1317,1377,648,557,548,697,600,633,603,939,953,865,715,807,926,833,753,818,934,824,665,460,754,576,892,816,721,827,678,884,518,710,610,445,732,740,713,741,759,664,600,610,598,631,519,518,672,450,422,577,564,648,1047,449,439,1500,1150,1302,1434,1585,1371,1211,1274,1149,1246,1061,1392,1247,1213,1447,1155,1149,1123,1089,1429,866,1556,985,877,906,1558,958,947,845,978,902,1214,859,1099,1014,1060,779,873,973,832,966,1039,927,984,1134,1073,968,1110,854,669,1070,963,1109,1109,701,977,1069,571,586,481,479,765,654,613,939,725,643,651,669,827,773,1083,930,1134,833,506,879,839,788,857,637,756,768,370,434,562,792,714,941,804,1109,616,869,818,813,906,880,836,900,864,877,843,840,962,710,846,844,903,793,969,657,823,1167,804,842,520,821,913,851,825,834,721,785,858,861,855,831,816,533,748,589,736,554,850,356,668,731,712,578,1024,402,1346,708,768,1594,1751,1819,1770,2014,1879,2048,2048,2055,1744,1369,1698,1785,2049,2043,1876,1806,2048,1879,1755,2050,2048,2048,1963,1829,1943,1923,1775,2029,2005,1800,1909,1301,1154,589,644,492,1831,2056,1938,1560,1392,1247,1146,1322,2014,1814,1240,1272,1105,1124,1684,1468,1383,1034,504,142,450,2032,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2036,1922,1371,2048,2048,2048,2048,2048,2048,2056,2057,597,116,2021,2031,2048,2057,1984,1340,1923,2002,2034,1983,2000,2048,2048,2048,2048,2028,1860,2048,2034,1931,2057,2015,2049,2048,2036,2051,2053,2033,1794,1463,1738,1888,2048,2048,2048,2048,2048,2048,2048,2048,1870,2049,1101,983,1193,1282,1245,1258,1659,1471,981,1486,1164,1331,1050,1106,1071,991,1159,1383,1715,1886,1909,1897,1903,1885,1510,1735,1700,1484,1771,1498,1154,973,1118,1192,1640,1168,1027,1038,1124,1239,1023,1045,1310,1190,1347,1046,1934,2042,2048,1980,2054,1971,2048,1987,2048,2033,1975,2043,2011,2048,2032,1985,2048,2033,1968,2036,2041,2048,2032,1979,2048,2048,1973,2048,2057,1970,2048,2048,1972,2048,2038,2012,2036,2048,1974,2043,1998,2048,2027,1980,2048,1964,2051,2048,2048,2057,1963,2048,2057,2048,2048,2048,2056,2048,2048,2015,2050,2048,2048,2048,2048,2048,2048,2048,2048,2048,1902,2048,2048,2048,2048,2048,2048,2048,2048,1899,2048,2048,2048,2048,2048,2048,2048,1894,2048,2048,2048,2048,2048,2048,1903,2048,2048,2048,2048,2048,2048,2019,1957,2048,2048,2057,2048,2048,2048,2048,1897,2048,2048,2048,2048,2048,2048,2048,2048,2048,1927,1444,1735,1221,1710,1427,1636,1737,1773,1706,1664,1442,1516,1613,1635,1689,1773,1721,1706,1419,2037,1763,1109,1638,1245,1415,1130,1106,1647,1668,1738,1682,1687,1634,1895,1936,2051,2048,1294,1149,1146,1258,1170,1122,1204,942,1277,1645,1425,1530,1319,1475,1349,1466,1525,1535,1778,1629,1643,1589,1495,1582,1676,1811,1931,1768,1756,1894,1807,1869,1705,1802,1816,1757,1218,1811,1875,1494,1027,1465,1586,1683,1188,1589,1654,1436,1500,1464,1855,1566,1666,1825,1390,548,837,1470,1193,1258,1330,1344,1858,1634,1466,1568,1536,1369,1409,1747,1731,1961,1955,1441,1718,1897,1781,1812,1790,1840,1810,1707,1786,1539,1807,1665,1845,1692,1424,1426,1421,1538,1492,1425,1186,1436,1534,1680,1655,1525,1594,1574,1124,1567,1665,1581,1525,1482,1534,1524,1516,1534,1520,1481,840,769,616,672,676,645,656,625,694,634,616,653,769,616,714,692,754,674,751,786,774,546,599,534,630,621,252,450,476,522,2019,2031,1827,1731,1737,1703,1672,1677,1678,1717,1700,1689,1695,1715,1685,1924,1974,1792,1737,1744,1624,1655,1724,1781,1701,1756,1241,1030,1023,1952,1793,1853,1664,1824,1630,1488,1484,1488,1479,1463,1481,1499,1493,993,618,552,612,653,547,559,608,606,560,628,579,638,504,464,267,507,563,380,343,521,522,355,490,279,1002,1963,1862,1657,1675,1656,1678,1675,1664,1688,1682,1693,1681,1787,1985,1606,1770,1730,1673,1744,1689,1697,816,753,780,1894,1827,1784,1567,1783,1771,1534,1525,1483,1521,1489,1484,1499,1507,1500,1486,1511,1495,1486,1502,1501,1504,1506,1507,1504,1472,1344,593,253,566,597,695,508,570,629,589,266,550,455,432,444,535,312,404,646,583,618,606,666,618,678,627,495,712,428,503,242,613,382,379,289,482,484,382,487,584,473,463,511,536,571,620,351,439,490,389,608,448,243,384,539,397,500,427,270,440,1064,1992,2019,2021,1997,2031,1877,1696,1697,1690,1720,1695,1704,1717,1714,1661,1692,1679,1664,1670,1686,1699,1725,1680,1706,1699,1704,1686,1677,1697,1688,1681,1687,1833,2048,2048,1960,1658,1707,1714,1723,1660,1719,1687,1683,1677,1584,1754,1734,1695,1677,1719,1690,1633,1758,1723,1674,1346,957,1101,1015,1410,1763,1626,1725,1668,1692,1323,1098,1015,1784,1836,1821,1852,1804,1459,1573,1484,1515,1530,1493,1458,1516,1500,1485,1494,519,589,405,462,411,421,531,377,663,649,547,560,526,579,526,208,303,128,319,495,660,497,530,447,508,362,543,446,155,335,1229,2036,2000,1762,1719,1714,1710,1686,1693,1689,1676,1686,1717,1731,1671,1685,1886,2048,1716,1654,1773,1714,1747,1669,1686,1791,1765,1695,1485,924,1333,1288,1639,1743,1776,1518,1552,1490,1496,1497,1481,1489,1494,1487,1462,1505,748,361,415,304,545,570,254,236,340,365,158,406,310,479,138,135,357,224,314,289,479,387,271,495,618,545,426,295,551,534,1637,1998,2056,1726,1699,1691,1687,1681,1694,1680,1663,1721,1688,1716,1724,1706,1960,2056,1800,1745,1786,1769,1746,1628,1884,1768,1756,1843,1848,1013,780,1110,1567,1566,1618,1667,1794,1569,1506,1492,1492,1504,1478,1249,448,348,341,380,495,150,397,476,413,389,254,476,286,252,299,483,1016,1960,1824,1696,1701,1670,1668,1700,1677,1731,1968,1807,1752,1637,1712,1750,1828,1802,900,1460,1244,1715,1646,1555,1526,1474,1492,1489,1480,1507,1506,1519,1523,418,570,579,618,510,556,605,544,622,445,595,642,693,521,584,547,587,514,611,474,452,410,584,425,373,325,570,841,1985,2027,1830,1708,1678,1673,1662,1697,1708,1690,1714,1676,1685,1653,1795,2048,1839,1761,1699,1690,1777,1767,1810,1749,1754,1437,852,813,1004,1244,1287,1177,1391,1405,1668,1580,1626,1576,1440,1503,1491,1503,1498,1481,1492,1482,1488,1514,1534,1469,1484,1501,1545,1250,446,379,400,311,253,451,453,348,245,540,479,472,422,356,362,395,503,366,416,304,121,198,417,225,247,115,108,347,396,305,346,246,433,180,408,367,364,339,296,438,372,495,164,371,366,334,406,387,295,432,418,1000,1988,1939,1964,2005,1810,1668,1655,1673,1678,1686,1692,1675,1669,1732,1690,1671,1674,1676,1662,1669,1667,1671,1694,1649,1667,1682,1696,1780,2048,2048,1694,1575,1638,1612,1657,1661,1804,1672,1700,1674,1691,1611,1632,1678,1728,1636,1725,1216,731,878,1373,1665,1557,1600,1352,1733,1841,1807,1838,1684,1558,1439,1492,1453,1484,1493,1505,1481,1501,1489,1489,1486,1492,1493,1467,1476,1374,493,594,565,639,543,578,380,507,275,324,493,265,431,449,613,439,366,378,576,541,684,627,584,299,557,486,505,587,669,596,651,541,204,91,566,639,647,528,631,612,589,629,625,554,607,583,552,584,609,474,1696,1994,1958,1986,1919,1695,1674,1694,1656,1680,1697,1685,1682,1701,1707,1711,1714,1721,1693,1716,1701,1698,1704,1684,1709,1730,1925,2048,2025,1732,1735,1700,1764,1796,1763,1736,1773,1817,1794,1786,1782,1763,1776,1697,1807,1793,1015,882,1025,921,1076,975,1185,1256,1270,1010,993,958,1354,1821,1711,1827,1848,1578,1676,1621,1496,1494,1513,1512,1490,1506,1503,1488,1492,1503,1512,1491,1494,1470,1486,1463,1478,1479,1501,1230,589,648,665,571,628,560,529,674,606,588,626,530,549,526,597,482,387,505,584,463,673,488,610,586,383,456,596,436,560,576,338,574,510,514,545,501,395,499,517,571,471,582,493,323,447,479,389,282,498,335,280,309,372,412,480,490,391,272,568,455,271,351,366,485,370,303,304,597,542,1018,2048,2048,2054,2056,2048,2048,1740,1718,1731,1732,1739,1729,1710,1719,1733,1719,1711,1703,1747,1717,1748,1749,1713,1728,1726,1732,1731,1718,1733,1739,1730,1734,1737,1745,1721,1736,1707,1742,2039,2048,2048,2048,1951,1733,1808,1851,1859,1850,1835,1777,1808,1757,1758,1813,1822,1782,1830,1800,1784,1769,1842,1802,1827,1858,1847,1827,1870,1832,1819,1859,1823,1761,1812,919,850,865,761,815,1332,1263,1570,1031,1247,1544,1364,1029,872,820,1260,1197,1543,1239,1792,1821,1782,1632,1676,1641,1593,1585,1597,1567,1553,1498,1480,1529,1527,1552,1530,1488,1531,1493,1510,1510,1519,1526,1537,1530,1465,1492,1518,1488,1532,1517,1499,1486,1491,1519,1489,1479,1475,1511,1509,607,665,593,510,597,470,393,657,762,614,629,634,682,701,548,620,633,675,706,662,696,581,672,741,703,584,677,648,619,679,517,165,510,599,640,678,438,676,700,659,488,425,607,458,550,541,499,243,326,196,520,567,254,123,186,679,201,599,540,588,632,565,572,594,580,524,656,594,594,597,565,525,467,576,471,504,503,722,576,566,516,575,500,547,579,313,573,380,534,600,575,564,489,703,597,599,1818,2031,2044,2005,1998,1948,1969,2052,1800,1701,1663,1646,1676,1713,1696,1703,1684,1722,1719,1704,1701,1680,1713,1695,1704,1684,1701,1683,1711,1720,1701,1687,1716,1673,1716,1710,1698,1686,1699,1713,1688,1710,1700,1687,1698,1677,1703,1683,1660,1649,2048,2048,2048,2048,1844,1729,1683,1778,1704,1740,1788,1699,1650,1687,1705,1710,1734,1776,1700,1779,1823,1719,1768,1699,1795,1714,1713,1762,1733,1766,1762,1725,1783,1658,1736,976,1047,951,1046,1102,1048,949,973,1046,828,620,700,687,735,850,880,949,931,879,923,981,874,837,745,830,748,943,712,749,593,295,831,695,734,1172,1662,754,1736,1725,1662,1732,1816,1845,1840,1686,1705,1592,1592,1607,1588,1486,1524,1524,1513,1481,1494,1525,1500,1492,1542,1528,1478,1486,1493,1506,1496,1512,1494,1521,1494,1512,1501,1494,1503,1513,1513,1524,1517,1522,1526,1527,1486,1488,1500,1517,1518,1490,1531,1520,1478,1509,1516,1511,1492,1508,1514,1532,1491,1519,912,679,678,713,664,809,655,668,527,670,750,781,680,684,718,398,540,698,663,753,708,653,755,647,667,421,489,725,677,587,529,762,717,701,714,673,501,697,577,679,666,612,657,601,491,363,624,637,350,725,566,668,714,554,621,477,638,744,650,621,555,658,631,656,549,652,543,639,428,549,490,634,639,695,655,693,627,635,621,680,725,745,681,790,655,675,769,741,716,616,729,696,740,696,661,731,607,678,648,577,550,248,647,594,559,642,603,590,542,517,717,386,587,380,646,554,713,617,525,736,703,637,632,614,660,607,641,430,755,464,525,630,768,559,632,689,491,451,471,365,559,676,650,681,673,591,1623,1986,1991,1963,1973,1966,1996,2022,1966,2022,1962,2026,2034,1911,1730,1724,1715,1714,1696,1683,1689,1715,1699,1684,1674,1673,1719,1722,1713,1690,1715,1701,1685,1685,1702,1676,1706,1679,1699,1733,1727,1685,1696,1688,1704,1724,1731,1746,1746,1722,1728,1746,1732,1698,1699,1689,1693,1697,1674,1689,1707,1700,1686,1701,1707,1723,1680,1671,1699,1757,1730,1729,1739,1727,1730,1827,2048,2048,2048,2048,2048,2048,1539,1615,1707,1763,1747,1727,1759,1710,1772,1804,1682,1711,1696,1675,1735,1724,1698,1800,1716,1660,1608,1713,1753,1738,1742,1791,1672,1725,1690,1705,1741,1750,1604,1765,1799,1782,1712,1720,1638,1694,1762,1746,1786,1514,1023,1033,990,978,1072,986,961,972,984,830,1201,1616,1378,1591,1632,1599,1575,1555,1625,1628,1542,1806,1400,1474,1600,1316,1273,1245,1599,1085,1403,1583,1652,1203,1399,1462,1211,1307,1246,1478,1491,1568,1477,1503,1683,1647,1612,1465,1329,1543,1513,1589,1607,1473,1412,1572,1601,1608,1432,1887,1806,1871,1905,1916,1882,1856,1790,1763,1868,1796,1858,1466,1484,1473,1495,1490,1496,1491,1478,1497,1494,967,537,415,539,504,353,536,494,411,368,321,552,447,542,430,516,553,218,418,322,429,375,391,338,429,241,285,492,169,393,362,518,1521,1946,2027,1739,1693,1706,1705,1705,1718,1687,1701,1692,1697,1669,1678,1671,1669,1672,2048,1993,1718,1754,1736,1762,1770,1728,1762,1775,1759,1720,1683,1443,806,823,1029,1556,1383,1376,1219,1595,1660,1742,1524,1451,1532,1497,1467,1457,1501,1502,1497,1485,1412,542,539,455,487,370,697,547,580,527,592,514,455,431,371,282,483,429,374,367,394,352,457,542,365,359,510,303,636,2022,2033,1796,1695,1692,1716,1734,1721,1734,1714,1690,1705,1692,1714,1679,1980,2031,1573,1788,1849,1853,1779,1808,1772,1832,1776,1769,1773,1283,666,957,1606,1621,1588,1394,1644,1717,1705,1542,1611,1542,1507,1478,1499,1472,1491,1492,1494,1487,1454,1487,1470,1497,1455,1466,1474,1502,1477,1473,1491,1461,1459,1474,1476,1501,1443,1480,1488,1488,1483,1479,1492,1504,1495,1482,1485,1514,587,666,573,658,706,678,669,553,602,552,604,712,579,592,583,641,570,616,540,578,672,620,577,593,590,650,569,579,620,583,444,497,485,682,612,529,561,532,482,570,526,582,562,668,558,379,327,199,413,441,254,513,414,379,487,563,677,546,228,161,361,248,166,205,461,383,539,463,476,545,643,506,532,571,630,594,499,509,419,489,634,526,491,577,433,257,588,456,493,460,287,211,468,591,652,521,557,384,485,641,618,487,523,682,614,591,539,457,628,1273,2004,2048,1977,1971,1983,1953,1948,1978,2044,1744,1716,1718,1713,1700,1709,1707,1704,1682,1695,1689,1702,1664,1717,1704,1715,1681,1686,1677,1706,1674,1634,1669,1648,1690,1679,1683,1691,1678,1677,1676,1663,1689,1685,1695,1670,1686,1667,1692,1680,1695,1687,1690,1657,1649,1667,1781,2048,2048,2048,2048,1843,1762,1678,1716,1716,1702,1678,1787,1755,1826,1736,1733,1685,1714,1693,1612,1709,1688,1696,1743,1724,1738,1720,1725,1779,1673,1696,1638,1694,1707,1779,1624,1618,1029,933,865,877,824,932,905,876,866,1021,1240,1076,947,1092,1091,1416,1189,1197,1097,1208,1367,1257,1243,1272,1556,1389,1491,1002,1218,1251,1109,773,699,979,608,349,662,1053,1056,1194,1009,1191,914,597,516,1017,1157,1551,1643,1842,1869,1846,1921,1947,1916,1928,1898,1627,1554,1480,1490,1505,1503,1486,1495,1452,1490,1489,1487,1512,1222,474,265,423,542,500,364,538,627,554,144,269,230,299,345,331,472,474,421,472,316,315,391,520,333,382,368,342,348,441,290,350,400,410,329,621,651,753,1979,1988,2033,1825,1708,1669,1678,1694,1692,1700,1705,1683,1669,1713,1705,1711,1682,1706,1704,1842,2048,1842,1719,1695,1702,1753,1816,1784,1724,1728,1792,1766,1737,1766,1364,704,853,1609,1708,1275,598,854,1141,1701,1833,1768,1568,1624,1501,1486,1508,1489,1516,1498,1308,571,607,593,584,426,562,535,400,432,504,411,369,297,351,388,489,468,251,434,572,167,330,640,620,1949,2016,1707,1704,1704,1696,1713,1686,1661,1686,1694,1700,1686,2042,1812,1781,1842,1748,1739,1715,1738,1770,1837,988,787,1151,1600,1522,1583,1392,1605,1676,1470,1469,1364,1470,1490,1478,1498,1457,1489,1473,1484,1494,1504,1476,1490,1494,814,495,463,586,602,467,562,480,457,679,526,516,560,650,392,318,468,536,325,409,537,414,444,491,281,231,394,698,613,659,584,592,457,636,511,277,577,366,574,545,527,381,541,470,1158,1983,2028,2001,1793,1686,1693,1720,1684,1669,1685,1668,1687,1731,1697,1654,1669,1732,1715,1713,1706,1733,1701,1731,2053,2048,1774,1712,1704,1735,1775,1666,1701,1684,1659,1715,1797,1787,1679,1765,1778,1393,918,851,956,1737,1539,1339,1563,1522,1460,1740,1853,1764,1624,1449,1435,1502,1514,1497,1464,1495,1481,1487,1475,1471,1483,1497,1483,1459,1493,1032,483,579,608,575,375,494,600,623,534,388,476,386,497,298,398,469,484,510,503,439,464,510,424,325,184,226,222,548,455,253,191,125,260,355,228,204,484,520,293,568,283,318,357,330,380,490,1286,1964,1866,1992,1939,1698,1675,1690,1682,1691,1679,1720,1706,1678,1649,1662,1669,1709,1689,1665,1652,1694,1663,1672,1667,1866,2048,2052,1764,1714,1709,1789,1697,1811,1690,1644,1689,1698,1734,1589,1687,1772,1739,1758,1308,745,875,832,1605,1272,1380,1435,1476,911,1327,1664,1737,1688,1682,1608,1605,1489,1535,1499,1509,1504,1511,1455,1485,1489,1474,1504,1522,1487,1488,1504,1496,1474,1447,1492,1501,1522,1523,611,589,624,368,394,494,545,550,578,447,524,507,556,407,132,605,562,502,460,367,322,195,269,176,563,537,573,556,532,495,455,443,392,394,597,534,573,441,433,513,264,335,346,140,165,467,558,620,552,379,374,440,435,335,358,254,185,464,396,383,446,413,461,264,485,357,546,473,584,442,850,2034,2039,1994,2004,2044,1989,1645,1646,1693,1709,1677,1718,1712,1696,1691,1670,1680,1699,1704,1713,1709,1692,1661,1670,1678,1701,1730,1686,1706,1704,1656,1675,1704,1714,1716,1734,1701,1888,2048,2048,2048,1652,1569,1774,1776,1746,1776,1739,1749,1702,1717,1766,1717,1742,1742,1680,1734,1735,1852,1720,1677,1700,1725,1762,1738,1846,1817,1036,808,763,787,553,891,1040,853,655,984,1015,966,797,648,359,680,175,942,1336,767,1119,1544,1700,1789,1753,1787,1705,1638,1665,1463,1497,1470,1478,1493,1492,1469,1458,1486,644,505,504,510,286,497,568,312,513,545,392,434,445,392,304,330,522,360,599,560,523,567,495,599,507,504,550,455,876,2008,2020,1860,1688,1697,1683,1651,1702,1702,1713,1713,1706,1692,1682,1706,2033,1926,1710,1713,1757,1839,1769,1825,1775,1749,1805,1327,884,839,951,1101,1127,1278,1659,1697,1614,1576,1602,1513,1515,1502,1484,1491,1490,1469,1493,1494,1478,1474,1475,1500,1500,1477,1485,1161,622,645,506,597,608,615,608,645,659,466,655,597,485,672,394,502,583,529,565,495,584,606,454,501,545,410,414,496,481,516,582,233,421,471,469,371,535,497,518,634,525,590,562,431,427,529,517,574,663,380,576,600,616,599,1043,2052,2041,2051,2014,1889,1707,1708,1721,1706,1713,1704,1698,1679,1703,1675,1716,1664,1741,1712,1701,1697,1699,1689,1669,1662,1709,1711,1715,1808,2048,2048,1844,1724,1793,1664,1737,1666,1761,1801,1799,1824,1817,1681,1743,1697,1826,1758,1733,1162,735,821,792,764,1537,1809,1336,1344,1751,1696,1550,994,1660,1849,1846,1750,1799,1629,1612,1446,1529,1470,1482,1495,1481,1481,1489,1470,1470,1511,1485,1453,1498,1493,1496,1535,1495,1505,1482,1493,1512,1040,386,153,248,310,434,532,469,398,500,478,655,522,281,486,387,462,294,350,534,582,448,371,303,92,578,170,315,493,513,601,594,524,374,585,506,264,372,523,359,584,622,497,591,394,182,192,366,449,358,464,512,588,550,578,641,515,546,525,389,318,458,445,249,284,366,407,462,305,471,605,1987,2044,2006,2013,2055,1881,1672,1697,1711,1688,1651,1679,1686,1642,1688,1692,1686,1681,1690,1705,1706,1675,1727,1704,1665,1690,1695,1701,1684,1706,1712,1690,1692,1706,1639,1720,2022,2048,2048,1865,1661,1744,1779,1681,1747,1606,1754,1756,1676,1745,1772,1799,1774,1819,1690,1743,1707,1610,1765,1690,1656,1512,1824,854,906,758,802,852,734,814,867,892,955,1085,1056,997,748,905,851,1144,1122,1043,1057,1106,1028,1039,1044,892,226,316,1260,1259,1661,1853,1820,1843,1818,1693,1511,1520,1533,1511,1489,1496,1486,1508,1503,1484,1518,1419,370,367,206,298,421,368,380,454,431,505,425,494,293,459,335,408,440,234,363,321,420,386,374,420,428,222,302,216,336,298,411,460,197,263,276,1123,1992,1964,1911,1682,1692,1715,1682,1685,1684,1668,1688,1668,1688,1695,1677,1667,1688,1678,1967,2048,1805,1716,1797,1701,1697,1741,1736,1730,1750,1781,1680,1681,1637,1243,809,943,1543,1562,1646,1890,1904,1738,1521,1563,1481,1505,1502,1499,1512,1509,1495,1495,1501,1492,1493,1513,1515,1516,1497,1481,1495,1498,1511,1500,1478,1499,1506,1474,1507,1517,1509,1467,1508,1517,1496,1467,1471,745,477,553,526,434,556,562,578,631,640,659,525,465,487,561,461,440,544,573,637,592,617,575,581,518,448,471,588,621,561,274,546,430,536,507,507,489,519,509,574,542,457,603,402,358,415,354,462,365,370,233,504,405,358,565,420,592,597,518,274,587,600,636,615,573,577,355,567,486,520,490,386,482,540,314,499,487,529,387,371,445,503,529,406,526,585,500,405,267,490,586,332,372,132,241,349,587,333,379,499,276,213,309,446,369,332,347,392,254,474,392,266,635,2049,2024,2056,1983,1982,2034,2002,2021,2055,1970,1735,1736,1762,1721,1700,1697,1704,1691,1696,1689,1670,1713,1693,1729,1704,1720,1729,1711,1704,1693,1682,1683,1706,1739,1722,1690,1677,1661,1667,1695,1714,1678,1649,1672,1685,1689,1686,1719,1712,1741,1754,1744,1744,1681,1699,1721,1695,1682,1650,1682,1771,2048,2048,2048,2048,2048,1804,1735,1785,1765,1684,1743,1651,1714,1633,1636,1762,1717,1721,1786,1719,1697,1714,1731,1697,1667,1653,1591,1619,1780,1723,1638,1694,1670,1606,1701,1696,1759,1787,1662,1764,1702,1588,1629,1416,797,853,791,847,822,736,802,735,1113,993,1074,1065,904,657,740,885,1022,848,819,716,961,857,717,634,744,810,923,781,852,1074,1080,1299,1058,1172,1155,1119,1509,1520,1930,1799,1811,1882,1842,1827,1882,1837,1630,1613,1554,1534,1541,1518,1499,1529,1520,1505,1500,1490,1522,1505,1510,1463,1503,1021,566,738,622,507,607,570,640,472,475,477,519,603,781,533,779,674,664,662,506,793,668,447,714,646,511,497,655,576,720,659,464,530,527,308,306,352,608,604,613,676,547,589,520,524,575,706,2055,2055,2033,2050,1714,1732,1741,1737,1721,1724,1730,1739,1708,1737,1750,1728,1706,1716,1719,1691,1695,1732,1735,1727,1716,2056,2048,2019,1763,1845,1870,1853,1837,1876,1818,1873,1849,1858,1830,1817,1770,1804,1727,1821,1816,1813,1769,972,1010,904,901,1296,1307,1145,1240,915,1159,920,1064,1036,1481,1323,1538,1675,1714,1622,1621,1529,1520,1494,1491,1501,1473,1473,1471,1492,1529,1526,1472,1465,1475,1501,1471,1477,1466,1466,1479,1459,1469,1498,1466,1463,1492,1434,575,505,597,497,477,497,506,501,525,406,435,415,285,374,223,550,311,586,406,433,350,430,457,556,515,494,487,534,536,455,405,402,482,200,357,359,401,572,430,265,484,537,495,498,434,358,350,367,561,512,353,392,331,410,485,521,394,447,493,436,492,484,639,666,668,652,534,389,284,338,303,315,505,314,284,231,467,434,461,416,556,480,1916,1931,1906,1992,1984,1949,2021,1696,1703,1689,1675,1673,1712,1663,1650,1670,1672,1682,1698,1693,1678,1657,1691,1668,1664,1715,1728,1686,1713,1628,1666,1682,1683,1688,1655,1690,1660,1627,1642,1660,1648,1685,1779,2048,2048,2048,1908,1749,1788,1774,1776,1740,1673,1710,1704,1724,1638,1635,1692,1720,1790,1721,1750,1615,1692,1631,1600,1660,1680,1626,1624,1669,1527,843,893,614,869,849,768,1064,1299,1323,1173,1002,863,1047,1175,1281,1056,933,899,975,1215,1242,829,1263,748,437,1369,1756,1736,1714,1802,1861,1808,1603,1638,1594,1631,1497,1506,1521,1515,1520,1516,1517,1526,1499,1514,1508,1511,1512,1519,1497,1518,1525,1512,1498,1507,1511,1517,1523,1503,1510,1528,1503,1493,1548,1529,1518,1555,1517,1518,1524,1502,1503,1500,1502,1502,1489,1485,1466,1482,1498,1485,1501,1265,538,480,555,425,528,584,477,375,631,657,671,709,720,657,722,684,639,654,635,723,713,566,650,580,426,476,593,590,497,720,651,612,721,611,619,573,648,484,626,526,544,683,577,542,639,502,532,564,521,616,583,651,515,587,564,563,534,519,542,529,671,447,450,619,426,564,635,526,652,575,622,592,566,584,447,630,671,540,525,505,609,432,589,540,531,653,573,407,497,661,578,598,691,590,703,738,682,628,631,712,723,706,588,559,681,674,652,597,515,465,642,637,546,634,611,544,604,608,618,610,551,593,505,357,512,520,583,518,558,570,464,596,420,477,618,594,533,374,442,586,562,475,526,485,310,492,514,552,507,473,347,342,1578,2057,2057,2034,2038,2038,2050,2042,2048,2057,2048,2021,2055,1959,1718,1719,1682,1702,1701,1733,1700,1678,1719,1690,1713,1700,1701,1704,1704,1707,1731,1735,1708,1721,1725,1733,1745,1744,1761,1763,1757,1758,1733,1715,1694,1710,1698,1681,1681,1671,1706,1741,1684,1684,1704,1711,1698,1714,1715,1751,1751,1762,1738,1747,1705,1721,1718,1740,1722,1741,1735,1762,1735,1727,1745,1755,1755,1741,1723,1759,2048,2048,2048,2048,2048,2048,2048,1970,1698,1663,1739,1741,1694,1670,1728,1785,1702,1780,1798,1761,1844,1790,1826,1819,1791,1799,1793,1755,1774,1794,1604,1574,1699,1727,1681,1625,1616,1807,1685,1720,1710,1695,1721,1837,1820,1811,1816,1827,1828,1689,1711,1586,1631,1789,1817,1797,1789,1848,1859,1814,1782,1069,945,913,940,954,915,784,981,1000,986,1307,1354,1326,1221,1290,1334,1255,1408,1359,1314,1185,1251,754,761,867,916,961,1047,1173,424,532,1365,1430,1706,1935,1750,1751,1890,1911,1846,1835,1842,1802,1853,1908,1560,1548,1574,1525,1506,1541,1530,1515,1504,1465,400,479,334,326,518,518,521,416,400,363,399,273,369,168,428,307,196,229,208,401,405,383,378,414,1355,2033,2019,1731,1703,1718,1682,1690,1689,1695,1694,1692,1690,1705,1794,2048,1905,1796,1813,1699,1797,1791,1829,1767,1755,1608,802,1396,1610,1603,1486,1592,1523,1436,1210,1516,1427,430,405,483,539,576,486,935,1829,1687,1682,1904,1723,1797,948,764,1463,1579,1503,1501,1498,1165,302,475,362,448,304,92,387,474,446,147,318,585,535,1352,1869,1679,1666,1688,1669,1675,1765,1904,1770,1684,1693,1693,1156,1373,1801,1720,1562,1446,1508,1465,1516,1506,531,436,369,372,467,384,387,308,502,452,442,376,456,593,480,538,449,1996,1818,1683,1680,1663,1659,1671,1697,1788,1923,1712,1674,1687,1770,1339,642,1283,1368,1004,1450,1634,1970,2051,2054,2035,2055,1709,1594,1548,1441,1292,1514,1557,1152,861,916,1422,2001,2033,1927,1921,1794,767,1196,1442,1183,1429,1455,1402,1339,1223,1076,663,1004,1120,1170,1005,804,935,925,856,884,1025,1173,1077,1064,887,1170,888,1099,1074,1111,1108,1085,1049,939,992,1075,1138,1002,1181,714,627,828,837,1311,1086,818,986,955,921,889,880,728,1277,1128,884,1051,982,799,939,984,780,1032,1092,475,1524,2048,1228,1099,1044,937,969,985,1137,998,1001,912,1013,1153,914,1084,1014,888,1015,877,858,719,797,856,1148,1265,1416,1556,1352,1589,1992,2048,2048,1886,1409,2028,2057,2048,2048,1998,1816,2054,1657,1946,2055,2048,2048,2048,2048,2048,2048,2054,2030,2042,2034,2032,2034,2003,1956,1803,1677,1972,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1992,1927,1824,1777,1335,1769,1929,1900,1765,1934,2048,2053,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2000,1498,1075,2040,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2024,1580,2055,2048,2048,2055,1874,1554,1385,1177,990,709,440,2004,2057,2048,2048,2055,2057,2048,2053,2048,2048,1846,1454,767,2048,2052,2021,1968,1843,1701,1514,1148,886,564,276,345,1929,2048,2048,2049,2050,2048,2048,2048,2048,2056,2048,2048,2042,1976,1816,1624,1494,1322,2052,2057,2048,2048,2056,2048,2057,2057,2048,2048,2056,2035,2022,1921,1698,1446,1024,1203,1804,1888,2021,2048,2055,2053,1930,1683,1267,988,2048,2046,2048,1821,2030,2048,2057,1771,530,74,198,33,820,2048,2048,2057,2048,2056,2048,2050,2044,1903,2048,1841,1834,2048,2048,2048,2048,2048,2048,2057,2048,2057,1924,1525,1978,2008,1582,1602,1801,1595,870,966,1717,1965,2044,2048,2048,2048,2054,2017,1774,1118,93,1750,2048,2048,2057,2053,2057,2056,2048,2057,2052,2057,1945,1836,1916,1855,1579,2048,2048,2048,2057,2048,2048,2048,2048,1902,2057,2048,2055,2048,2048,2048,2048,2048,1623,2038,1967,1971,1391,1593,2048,2056,1981,1705,1937,2048,2048,2048,2048,2057,2048,2048,2048,2048,1634,1267,1845,1969,2001,2016,2054,2047,2025,2043,2043,2057,2054,2043,2021,2014,1987,1983,2002,2052,2049,2047,2054,2026,2037,2032,2048,2050,2032,2045,2006,1875,1734,1538,1365,1264,1192,1161,1163,1041,1066,1115,992,1036,844,876,926,683,633,447,436,193,182,88,63,588,2050,2021,2054,2057,2005,1822,1741,1504,1005,1287,2048,2048,2048,2048,1892,2048,2048,2048,1963,2048,2048,2048,2014,2057,2048,2057,2048,2042,2044,2057,2056,2048,2027,2053,2005,1938,1861,1776,1762,1771,1569,2049,2056,2048,2056,2053,2055,2048,1744,2048,2056,2057,2056,2054,2048,2055,2015,1958,2048,2023,1909,1430,2056,2048,1978,1408,2008,2057,2048,2048,2048,2048,2057,2048,2048,2018,1782,1759,1483,1385,1262,1135,1828,2048,2048,2048,2053,2008,1847,1577,730,480,1141,1585,1784,1927,1940,1956,1947,2008,1865,1668,1461,1302,947,531,637,1864,2046,1992,1238,850,2057,2048,2048,2048,2048,2048,2048,2048,2015,1965,2052,1993,1746,1369,810,2008,2054,1683,1347,1955,2048,2048,2054,2048,2053,2048,2055,2055,1951,1669,1844,2048,1414,634,1899,2048,2048,2048,2048,2048,2057,2018,1757,2015,2048,2057,2048,2048,2048,2048,1651,1037,1595,1953,2032,2056,2048,1949,1164,1877,1799,2055,2048,2048,2048,2035,2009,1672,1252,864,753,397,339,188,573,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2016,1228,2057,2051,2055,2045,2057,2054,1914,1951,2057,1554,1969,1286,647,1331,1697,1961,2055,2048,2048,2048,2048,2048,2048,2048,2048,2041,1859,1642,1483,1351,1148,1083,1010,886,715,836,990,834,902,1639,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1840,1242,706,703,1779,2048,2048,2048,2007,1579,2057,2057,2055,2051,2048,2048,2056,1983,1485,1468,1649,1308,1266,2057,1883,1159,526,1831,1911,2025,2055,2052,2054,2050,2046,2002,1543,1770,1856,1935,1975,2056,2057,2048,2048,2048,2048,2048,2056,1996,1753,1496,807,757,1607,2057,2048,2048,2048,2048,2048,2048,2056,2054,2001,1734,1439,1057,973,190,468,2048,2050,1961,1931,1788,1696,1769,2048,2018,1779,1612,1255,1753,1763,2040,2048,1933,2039,1037,2048,1665,1853,1914,2048,1648,1914,1372,1461,1118,1687,2008,2024,1995,2017,2006,1979,1914,2048,2055,2055,1688,956,1325,1967,2048,2048,2048,1855,1822,1246,882,1022,2048,2048,2056,2057,1531,360,1807,2057,2045,2048,2056,2056,2057,1995,2055,2048,1482,2039,2048,1748,2048,2048,1617,2020,2048,1461,1268,1917,1558,703,2045,2048,2057,2057,1380,122,124,1315,2039,2048,2048,2057,2057,2048,2048,1749,1864,1827,1534,857,172,1041,1972,2048,1970,2048,2043,2044,2048,2032,2048,1837,2010,1639,1982,1407,1921,1239,1588,1645,1696,1302,1319,1734,2042,1972,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2053,2051,1982,1930,1806,2004,1626,1976,2051,1906,1467,1749,1795,2048,2048,2056,2048,2048,2048,2048,2048,2056,2050,1996,1773,1574,1384,1191,911,1386,2048,2048,2048,2048,2057,1486,777,2048,2048,1967,1982,2037,1973,2008,2018,2019,2056,2057,2048,2046,2021,1711,1461,2021,2048,2056,1979,1901,2025,2056,2048,2048,2048,2048,2048,2047,1952,1767,1410,703,1254,2048,2048,2048,2048,2048,1950,2048,2048,2048,2048,1980,1241,2054,2048,2048,2048,2048,2056,2048,2048,1856,1345,1957,2048,2048,2048,2048,2017,1913,2048,1178,486,454,1281,1889,2056,2048,2048,2048,2048,2048,2048,2048,2048,2056,2024,1971,1793,1788,1741,1587,1435,1252,1213,1244,1081,804,563,556,517,481,442,456,375,466,430,465,539,545,258,322,766,1206,1201,1231,1176,1076,939,885,733,526,306,147,583,1880,2053,1759,1734,1902,1956,2048,2050,2018,1997,2048,2050,2054,2048,1865,1532,1905,2029,1663,1454,1986,1817,2018,2048,2004,2024,1875,2045,2048,2037,1843,2027,2057,2034,1977,1986,1981,1750,1417,1548,2033,2020,2031,2053,2048,2008,1721,1836,1943,2048,2042,2053,2027,2048,1933,1951,1912,1755,1838,1932,1979,1855,2010,1824,2024,1943,2048,2048,2048,2051,2008,1583,1352,1761,1215,932,1326,2047,2048,2048,1991,1945,1826,1797,1879,1759,1983,1874,1896,1964,1945,1933,2046,1928,1783,1995,1502,1492,1926,2013,2009,1894,1836,1884,1859,1768,1726,1515,1852,1780,1437,1492,1318,887,1187,2005,1967,1853,1836,1740,1625,1721,1674,1354,1434,1280,1467,1267,1271,1187,1034,1335,1112,1105,1286,1405,1193,1483,1521,1840,1804,1702,1966,1989,2053,1979,2010,1827,1732,1574,1410,869,1470,1788,2027,2054,2048,2052,1154,153,1304,2057,2048,2034,1439,2052,1056,2048,2048,1490,1654,2056,2048,2048,2048,1529,2057,1945,1498,1387,2048,2048,2048,2048,2048,2056,1956,2052,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2016,2057,2048,2057,2048,2048,1960,1948,2025,2057,2048,2052,2054,2056,2048,2048,2048,2048,2055,1646,1426,2057,2048,2057,2048,2053,2040,2048,1900,1926,1780,1563,1608,1437,1759,1800,1568,1446,1334,1088,852,269,1787,1832,1896,2050,2048,2043,1965,1526,1210,2048,2057,1752,2055,2048,2048,2027,1529,1939,2056,1913,1592,1457,1841,1857,1143,796,683,1430,1412,1446,1415,1196,1395,607,721,844,431,275,462,533,325,940,872,361,409,487,479,766,474,535,649,353,292,650,695,648,737,671,1132,799,544,967,798,503,918,622,585,645,406,510,625,361,639,414,349,715,577,753,540,1181,834,1189,996,997,684,553,587,438,582,607,758,377,177,450,461,675,466,324,545,663,338,1058,1368,357,350,393,313,528,608,673,538,443,597,651,576,355,497,396,1084,1119,1043,870,306,573,355,418,450,452,260,521,200,444,558,203,249,262,557,654,296,448,517,249,755,831,531,216,385,326,495,286,224,412,521,974,539,476,443,671,507,477,426,395,672,325,331,595,504,926,839,600,271,320,281,258,521,325,344,252,158,504,565,741,622,1082,1340,1045,1037,675,651,270,469,579,844,1333,1023,516,882,574,628,555,626,568,764,750,561,648,656,568,694,840,741,1191,1186,1379,810,665,587,581,1004,1251,1202,1198,1200,1205,873,415,449,1135,1166,874,514,552,1366,359,313,342,195,339,258,210,139,230,377,446,140,133,132,391,545,619,314,595,635,440,932,401,660,162,440,499,326,273,434,714,468,595,492,307,281,320,330,412,204,277,186,225,335,145,504,277,299,172,282,186,210,522,460,542,286,701,1157,258,480,392,519,607,617,323,560,909,1029,1007,449,552,343,383,409,328,442,443,304,242,282,166,168,813,903,783,738,768,418,633,416,302,417,428,561,322,159,415,251,168,406,360,420,449,156,193,283,191,178,262,189,354,475,277,239,504,328,334,544,303,368,490,750,852,1298,824,503,471,716,473,434,598,369,450,934,1049,694,309,1224,1004,1101,1095,494,599,304,752,615,646,557,302,285,318,356,343,1075,961,416,406,434,547,387,426,468,859,764,691,858,355,396,757,848,488,838,892,890,836,800,876,1534,1886,1366,988,996,990,1702,1886,1886,989,988,990,1549,1263,1173,1089,1267,522,894,555,1160,409,442,908,831,699,681,846,724,742,708,616,593,673,636,986,319,118,175,456,472,176,122,274,470,327,469,469,723,1072,730,311,488,563,491,390,565,505,466,298,294,665,950,1190,1668,515,507,737,449,357,360,469,648,400,425,407,541,391,444,293,418,325,356,259,300,212,525,341,330,164,181,291,495,299,287,396,169,585,236,423,120,567,579,672,280,147,273,453,378,436,416,321,659,650,593,245,568,779,220,637,1003,628,314,62,158,743,677,366,613,783,517,543,348,611,604,471,457,437,469,532,295,472,676,473,595,757,830,483,683,697,337,503,486,483,785,914,703,758,521,589,612,550,746,607,826,305,724,491,931,269,309,583,198,376,176,178,231,398,111,443,460,126,258,217,157,326,127,134,711,541,467,439,399,470,212,260,360,374,301,360,929,322,459,353,461,365,660,951,862,1071,774,754,721,197,778,1024,382,877,1208,334,811,770,1195,1182,496,300,526,320,1110,1413,1071,1288,1349,1462,1459,1431,1527,1548,1491,1538,1523,1454,1501,1511,1574,1507,1541,1483,1481,1591,1427,1384,1314,1247,1220,1331,1384,1272,1198,1144,1074,1102,1635,1522,1777,1749,1747,1754,1680,1703,1704,1742,1679,1734,1732,1704,1754,1740,1761,1739,1736,1540,1671,1653,1663,1713,1680,1701,1735,1726,1682,1644,1664,1677,1615,1554,1662,1696,1799,1588,1689,1662,1623,1670,1747,1729,1742,1809,1868,1798,1806,1813,1758,1701,1734,1761,1758,1872,1828,1674,1681,1808,1757,1713,1796,1809,1760,1677,1705,1648,1508,1884,1594,1657,1595,1593,1614,1612,1682,1700,1696,1659,1719,1725,1688,1734,1728,1692,1679,1769,1712,1693,1699,1655,1657,1684,1647,1641,1610,1608,1587,1554,1497,1507,1856,1623,1569,1554,1382,1401,1559,1469,1507,1226,1231,1450,1471,1302,1350,1419,1382,1294,1423,1604,1527,1556,1528,1390,1421,1503,1396,1356,1550,1573,1425,1527,1616,1458,1828,1448,1447,1393,1419,1550,1412,1531,1437,1563,1398,1337,1224,1319,218,207,384,217,240,706,1138,1437,1206,905,1271,1291,1050,1495,1638,1120,1374,1676,1268,953,1385,1187,1647,1197,1646,1426,1654,1629,1688,1514,1272,1597,1330,1756,1255,1477,1790,1208,1720,1588,1335,1476,1294,1442,1471,1582,1747,1262,1170,1685,1701,1310,1697,1284,1400,1459,1615,1643,1401,1431,1586,1392,1770,1337,1597,1504,1299,1500,1529,1371,1445,1367,1607,1496,1707,1432,1584,1684,1030,1544,1465,1644,1028,1494,1598,1671,1401,1553,1485,1278,1682,1529,1233,1315,1505,1481,1196,1490,1511,1257,1406,1304,1684,1573,1697,1653,1323,1232,1415,1505,1319,1857,1277,1633,1412,1717,1235,1816,1536,1425,1854,1708,1813,1428,1623,1628,1237,1925,1407,1547,1613,1726,1729,1838,1420,1682,1759,1741,1534,1712,1761,1265,1677,1309,1592,1582,1765,1446,1181,1557,1656,1753,1754,1290,1827,1619,1373,1632,1492,2009,2054,2014,2018,2042,2048,2001,2044,2035,2026,2007,2035,2021,2027,2025,2051,2044,2039,2048,2004,2023,2004,2018,2015,2044,2051,2051,2042,2040,2049,2018,2022,2012,2048,2049,2029,2051,2056,2055,2011,2039,1849,1987,2024,2035,2044,2038,2026,2028,2046,2021,2000,1975,1983,1969,2012,1987,2034,2029,2026,2051,2030,1995,1959,2011,2016,1991,2001,2033,2013,2023,2053,2032,1992,1953,2008,2008,1983,2018,2040,2047,2049,2037,2022,1964,1994,2023,2025,2030,2036,2041,2053,2033,2041,2044,2037,2049,2053,2038,2038,2046,1980,1973,1984,2004,1973,1937,1999,1992,1986,1951,1962,1960,1964,1996,1998,1939,1956,1986,1990,1968,1948,2003,1997,1970,1990,1956,1991,1976,1985,1994,1955,1987,1975,1976,1992,1953,1998,1978,2005,1976,2001,1975,1972,1999,1979,1987,1947,1959,1992,1993,1975,2007,1954,1993,1969,1999,1953,1973,2007,1990,2002,1994,2006,2009,2000,1978,1986,1994,1981,1943,1856,1796,1814,1820,1763,1896,1943,1814,1713,1905,1754,1855,1682,1800,1840,1928,1939,1918,1808,1762,1923,1816,1852,1760,1658,1666,1697,1625,1765,1935,1914,1780,1785,2015,2056,2027,2030,1893,1944,1814,1913,1845,1898,1900,1703,1749,1687,1875,1871,1904,1805,1794,1821,1787,1728,1715,1900,1839,1851,1842,1830,1735,1819,1623,1886,1779,1893,1822,1892,1727,1958,1722,1807,1557,1805,1864,1840,1728,1974,1779,1903,1821,1673,1755,1709,1863,1860,1864,1755,1900,1731,1866,1548,1814,1639,1964,1907,1958,1930,1816,1927,1863,1861,1702,1955,1884,2000,1950,1949,2004,1898,1674,1966,1757,1884,1662,1810,1853,1810,1963,1816,1852,1924,1832,1839,1812,1912,1813,1860,1791,1938,1863,1728,1937,1759,1882,1745,1773,1885,1820,1757,1704,1813,1849,1716,1906,1908,1874,1917,1912,1946,1949,1935,1955,1902,1977,1904,1959,1917,1946,1949,1904,1920,1921,1999,1909,1448,1389,1416,1419,1438,1468,1587,1414,1604,1538,1522,1556,1728,1693,1520,1701,1822,1975,1970,1853,1978,1668,1888,1829,1707,1964,1933,1988,1793,2050,1754,1926,1726,1826,1898,1837,1989,1974,1833,2014,1682,1925,1813,1670,1965,1892,1989,1768,1955,1815,1765,1799,1788,1642,1943,1902,1971,1825,2028,1832,1844,1831,1826,1729,1936,1923,1920,1819,2022,1788,1923,1773,1838,1915,1936,1978,1965,1881,1987,1698,1909,1869,1779,1986,1940,1942,1957,1896,1966,1961,1940,1866,1926,1919,1674,1688,1946,2013,1959,1952,2003,2017,2007,2028,2004,2011,1986,1999,1996,1949,1981,1982,1968,1992,1994,2013,1992,1955,1995,1972,2018,1989,1991,2004,2031,2033,1984,2000,2006,2035,2021,2013,2012,2026,1980,2003,2011,2023,2024,2030,2006,2022,2006,1982,2023,2030,2020,2001,2002,1988,2014,1982,2000,2002,2019,2010,2009,2001,2004,1999,2038,2049,2003,1982,1869,1742,1783,1720,1716,1695,1647,1778,1666,1588,1644,1771,1695,1680,1768,1735,1616,1739,1753,1601,1579,1846,1586,1678,1751,1805,1708,1668,1788,1842,1726,1682,1755,1747,1778,1705,1777,1714,1970,1941,1963,2008,1992,1943,1914,1942,1949,1993,1977,1975,2012,1979,1962,1994,1992,1985,1966,1982,1958,2009,1991,1993,1984,1959,2006,1942,1968,1996,1980,2008,1996,1964,1976,1965,1986,1955,1960,1951,1912,1907,1871,1934,1885,1821,1885,1834,1832,1908,1861,1899,1847,1885,1919,1860,1869,1920,1923,1991,1965,2002,1928,1949,1911,1904,1918,1925,1938,1966,1890,1934,1951,1949,1961,1962,1890,1979,1740,1933,1876,2050,2051,2028,1998,2021,2018,2023,2012,2038,2016,2045,2030,2027,2028,2021,1974,1966,1963,2026,2050,2055,2052,2015,2044,2024,2001,2010,2029,2033,2052,2023,2055,2056,2051,2028,1987,1956,2017,2022,2008,2019,2043,2048,1979,1991,2023,1983,1959,1981,2016,2043,2026,2014,2012,1986,2017,2000,1998,1970,1994,2010,2029,2033,2027,2005,1999,2020,1987,1984,1995,1976,1993,2040,2040,2031,2044,2030,2039,1992,2016,2007,1990,1993,2025,2026,2053,2045,2044,2025,2036,2027,2051,2052,2042,2048,2046,1999,1976,2015,2008,1987,1966,1971,2027,1994,1995,1992,1946,1981,1948,1955,1958,1988,1964,1994,1998,1955,1950,1894,1926,1952,1982,1968,2019,2003,2007,1969,1995,1926,1964,1858,1960,1939,1987,1786,1909,2037,2029,2017,2036,2026,1979,1746,1980,1988,1970,1865,1901,1915,1978,1968,1902,1924,1932,1979,1948,1918,1839,1929,1990,1987,1868,1854,1955,1965,1941,1830,1888,1937,1936,1988,1882,1856,1927,1971,1956,1878,1887,1986,1929,1864,1835,1963,1923,1869,1836,1786,1924,1947,1904,1894,1899,1855,1873,1915,1879,1845,1889,1899,1831,1879,1814,1791,2026,1937,1938,1941,1904,1834,1846,1874,1854,1760,2007,2000,2012,2027,1993,2027,1789,1791,1931,1938,2042,2038,2013,1939,1980,2003,1991,1997,1975,1958,1956,2048,1986,1999,1699,1988,2033,2021,1982,1822,1970,2020,2041,1973,1901,1999,1995,2025,2024,1970,1791,1974,2001,2021,1987,1994,2022,2032,2008,2005,2008,1898,2018,2012,1979,1974,2018,2040,2025,2017,2028,2012,1842,1977,1982,2003,1984,2016,1967,1959,1970,1991,1937,1995,1895,1981,2005,1935,1941,1981,2006,1958,1852,1937,1938,1973,1852,1896,2001,1986,2017,2019,1972,1909,1903,1957,1935,1906,1911,1982,1963,1992,1990,2002,1989,1991,1975,1922,1982,1938,1962,1999,2007,1959,2036,1987,1978,1942,1981,1960,1963,1881,1975,1954,1948,1978,2008,1966,1984,2015,1975,1998,2000,1941,1972,2013,1947,1974,2007,1986,1969,1881,1970,1992,1940,1958,1961,1944,1980,1943,1958,1941,1950,1937,1860,1849,1959,1974,1911,1898,1948,1890,1961,1975,1890,1968,1993,1941,1963,2020,1906,1997,1914,1985,1978,1960,1999,2022,2000,2052,2056,1893,2023,2008,1966,2019,2031,2042,2033,2038,1972,2010,2023,1970,2024,2034,2030,2038,2036,1990,2044,2011,2002,2032,2041,2036,2051,2037,1965,1984,2025,1980,2028,2030,2045,2053,2049,1982,2002,2017,1965,2043,2035,2050,2031,2031,1964,2002,1964,2022,1786,1982,1962,1984,1988,1999,2042,2009,2006,1976,1764,2013,1999,1975,2046,1965,1964,2048,1977,1975,2025,1936,1921,1887,1817,1722,1645,1509,1454,1611,1388,1474,1355,1471,1354,1084,1629,1160,1427,1199,1597,1056,1345,1285,926,1295,1439,1390,1094,1326,1556,892,1119,1395,1219,1343,1380,1191,1385,1137,1573,1174,1345,1488,1412,1481,1381,1557,1448,1590,1540,1287,1447,1508,1365,1271,1550,1276,1371,1097,1628,1180,1458,1308,856,1621,1381,1344,1159,1234,1622,915,1119,1434,1277,1512,1146,1264,1297,1195,1615,1277,1455,1498,1256,1652,1398,1507,1543,1392,1609,1275,1495,1549,1231,1556,1263,1352,1329,1179,1580,1267,1435,1247,859,1644,1407,1289,1197,1243,1606,851,1170,1432,1213,1543,1069,1324,1314,1220,1585,1335,1484,1484,1226,1640,1372,1513,1578,1331,1573,1335,1507,1484,1136,1595,1202,1463,1277,1363,1463,1165,1462,1199,864,1572,1417,1144,1257,1347,1416,901,1276,1362,1053,1549,1119,1388,1153,1631,1089,1332,1461,1437,1429,1478,1569,1439,1577,1419,1395,1390,1469,1469,1227,1625,1190,1412,1145,1575,1175,1517,1315,921,1469,1360,1402,1091,1319,1605,987,1097,1352,1327,1307,1369,1207,1289,1146,1653,1188,1522,1499,1288,1585,1346,1514,1528,1427,1647,1258,1456,1485,1361,1488,1321,1363,1331,1120,1604,1212,1438,1213,830,1583,1365,1314,1191,1292,1591,812,1238,1419,1218,1541,1101,1340,1302,1247,1609,1292,1517,1509,1272,1630,1361,1580,1608,1366,1596,1354,1556,1536,1227,1406,1369,1311,1293,1134,1603,1175,1422,1272,859,1593,1345,1312,1187,1233,1578,819,1232,1426,1158,1477,1070,1314,1343,1296,1560,1148,1494,1547,1370,1620,1415,1573,1562,1443,1600,1351,1557,1541,1262,1294,1544,1282,1306,1141,1604,1173,1410,1285,910,1412,1406,1401,1077,1335,1559,912,1085,1355,1275,1157,1439,1165,1388,1229,1698,1119,1394,1560,1465,1419,1548,1531,1427,1564,1498,1509,1376,1509,1457,1159,1690,1144,1438,1179,1568,1209,1398,1396,955,1291,1369,1426,1085,1300,1292,1386,945,1368,1432,1218,1612,1083,1391,1174,1665,1241,1391,1433,1403,1423,1518,1592,1486,1583,1538,1459,1447,1563,1412,1184,1694,1241,1443,1175,1601,1206,1401,1390,987,1248,1398,1448,1132,1302,1164,1610,858,1289,1504,1289,1636,1086,1390,1329,1489,1429,1342,1502,1519,1236,1708,1622,1611,1622,1404,1728,1199,1234,1292,1371,1306,1812,1497,1447,1206,1258,1589,1470,1471,1814,1392,1324,1267,1561,1411,1465,1828,1419,1446,1285,1288,1489,1404,1378,1845,1410,1604,1377,1243,1477,1235,1304,1433,1747,1099,1261,1286,1460,1615,1330,1387,1406,1581,1405,1710,1707,1740,1913,1587,1967,1888,1797,1756,1856,1814,1775,1920,969,900,1737,1686,1789,1704,1709,1676,1455,743,1163,1989,1909,1745,1532,1248,1441,1517,1721,1580,1848,1806,1875,1487,1700,1713,1775,1897,1878,1890,1735,1553,1868,1417,1949,1819,1922,1775,1821,1848,1892,1726,1818,1830,1841,1900,1871,1695,1663,1651,1524,1549,1621,1531,1689,1517,1578,1597,1432,1622,1472,1578,1537,1425,1397,1827,1913,1942,1697,1853,1830,1893,1785,1891,1908,1737,1872,1866,1843,1868,2003,1952,1946,1886,1975,1980,1979,1844,1923,2009,1965,1873,1925,1769,1924,1661,2052,2035,2043,1960,1942,1895,1770,1969,1930,1919,1963,1948,1974,1930,1925,1953,1938,1940,1937,1903,1915,1961,1905,1902,1919,1915,1905,1855,1918,1737,1866,1851,1809,1746,1734,1717,1631,1291,1653,1897,1490,1827,1556,1705,1711,1579,1713,1616,1323,1186,1138,1234,1502,1755,1665,1412,1158,1512,1706,1410,1156,1822,1901,1791,1719,1783,1784,1595,1945,1831,1704,1679,1684,1727,1580,1755,1687,1509,1677,1452,1552,1598,1389,1232,1638,1639,1105,969,1595,1553,1582,1872,2030,1965,1984,1984,1924,1837,1643,1546,1868,1989,1843,1893,1906,1767,1784,1786,1759,1649,1867,1836,1756,1855,1689,1822,1614,1536,1675,1556,1707,1730,1796,1851,1497,1837,1513,1590,1432,1778,1892,1800,1745,1305,1421,1696,1738,1622,1432,1601,1699,1612,1547,1653,1518,1695,1590,1299,1583,1455,1674,1661,1290,1623,1447,1712,1651,1452,1425,1584,1579,1125,1277,1398,1163,1421,1261,1562,1160,1345,1429,1312,1529,1237,1330,1463,1486,1531,1675,1821,1242,1579,1824,1927,1816,1902,1781,1933,1490,1536,1262,1573,1646,2049,2010,1973,1419,1856,1698,1773,1831,1478,1831,1793,1801,1640,1802,1494,1602,1520,1264,1733,1877,1720,1565,1851,1282,1849,1799,1900,1466,1598,1669,1680,1795,1744,2012,1489,1508,1778,1692,1747,1643,1753,1546,477,583,462,750,623,712,402,624,1246,1989,1978,1967,1915,1966,1958,1969,1926,1871,1642,1618,1634,1817,1559,1583,1604,1604,1763,1545,1817,1352,1519,1473,1543,1366,1404,1492,1586,1322,1252,1258,1526,1389,1514,1415,1342,1570,1471,1512,1517,1393,1354,1409,1417,1427,1370,1423,1742,1753,1805,1859,1889,1881,1849,1760,1715,1814,1653,1763,1794,1831,1765,1722,1675,1559,800,804,857,978,1700,1702,1660,1616,1698,1602,1608,1652,1647,1746,1671,1738,1665,1745,1802,1832,1814,1575,1721,1498,1810,1335,1806,1569,1898,1685,1853,1787,1867,1763,1839,1796,1839,1317,1059,1042,1063,1058,1083,1077,1055,1475,1539,1571,1531,1584,1539,1566,1532,1565,1576,1468,1645,1600,1576,1014,1025,1086,1023,1515,1403,1753,1817,1576,1180,1223,1512,1373,1081,1464,1664,1290,1514,1638,1589,1547,1638,1607,1371,1225,849,1074,687,784,871,732,1413,1427,1299,553,777,537,565,808,532,877,724,922,490,586,798,653,873,516,853,693,877,528,514,954,699,849,433,814,596,692,409,273,557,257,609,212,554,220,181,628,153,524,197,523,40,238,412,232,591,246,1020,1438,1512,1171,1189,1220,1187,1241,940,983,1006,953,1006,999,986,1360,1362,1427,1400,1483,1508,1402,1389,1403,1605,1465,1491,1554,1622,1605,1513,1508,1611,1378,1405,1388,1395,1417,1404,1497,1443,1385,1407,1416,1376,1334,943,942,922,1093,959,953,961,920,1078,894,998,924,1273,1414,1469,1345,1373,915,922,955,960,1731,1582,1591,1571,1447,1582,1588,1576,1719,1363,1347,1348,1299,1307,1309,1383,1331,1606,1588,1593,1199,1401,1407,1225,1481,1621,1615,1555,1555,1582,1771,1682,1752,1652,1498,1222,1437,1426,1340,1340,1142,1476,1425,1479,1444,1448,1622,1465,1708,1657,1591,1627,1553,1587,1554,1627,1641,1701,1647,1580,1652,1415,1607,1545,1576,1682,1641,1606,1625,1566,1505,1610,1621,1569,1718,1640,1589,1664,1444,1626,1566,1601,1687,1601,1560,1537,1584,1831,1539,1556,1527,1775,1675,1623,1574,1594,1809,1584,1705,1600,1612,962,937,967,1027,1565,1486,1575,1484,1545,1283,1276,1317,1379,1118,1167,1264,1361,1222,908,963,1131,1331,1168,1094,1082,1172,1152,888,915,1356,1872,1492,1900,1548,1560,1423,1436,1328,1407,1413,1435,1340,1655,1512,1508,1542,1536,1520,1525,1532,1537,1610,1384,1374,1378,1371,1404,1371,1363,1642,1526,1521,1533,1579,1554,1514,1517,1535,1754,1591,1605,1651,1636,1595,1592,1676,1754,1494,1467,1420,1403,1440,1452,1419,1428,1797,1764,1731,1681,1748,1744,1703,1691,1819,1811,1730,1686,1650,1730,1678,1688,1664,1660,1035,1249,1122,1101,1123,1042,1338,1111,1089,963,926,674,676,661,1214,1756,1708,1754,1673,1752,1684,1736,1667,1865,1731,1721,1637,1696,1687,1707,1712,1826,1794,1752,1805,1723,1773,1774,1769,1723,1893,1717,1707,1632,1660,1667,1705,1693,1768,1410,1508,1366,1484,1351,963,1022,1022,1593,1841,1783,1836,1666,1873,1779,1852,1777,1630,1176,1214,1384,1686,1057,1016,1072,1698,1685,1613,1584,1616,1603,1619,1606,1695,1572,1472,1439,1403,1371,1476,1414,1440,1467,1676,1493,1563,1500,1498,1445,1431,1460,1634,1602,1654,1593,1564,1650,1606,1590,1720,1562,1463,1424,1481,1424,1444,1439,1425,1609,1839,1838,1841,1691,1872,1767,1846,1808,1734,1657,1600,1640,1545,1646,1603,1618,1684,1552,1481,1457,1393,1551,1469,1470,1472,1736,1812,1824,1876,1681,1872,1812,1850,1804,1658,1650,1616,1691,1553,1645,1605,1674,1612,1459,1426,1458,1368,1462,1443,1426,1545,1843,1806,1841,1893,1681,1825,1818,1864,1656,642,1764,956,737,1167,683,682,1147,698,1086,1436,648,711,786,1397,1103,1257,1362,1244,802,1127,1298,1195,1287,1223,1616,1341,1298,1008,1307,1671,1566,1752,1652,1749,1552,1600,1671,1669,1025,1009,1454,1479,1566,1019,989,991,1020,1375,1076,1138,1106,1243,1574,2013,2039,2003,2004,2023,2030,1994,2009,2032,2036,2025,2009,2014,2005,2017,1965,2032,2025,2028,1997,1989,2019,2011,1975,2004,2033,2029,2006,2008,2007,2026,2013,1947,2026,2008,1893,1922,1881,1896,1930,1845,1849,1873,1885,1889,1887,1836,1887,1817,1850,1891,1833,1668,1673,1679,1668,1666,1665,1610,1766,1657,1654,1664,1632,1659,1665,1633,1588,1714,1435,1424,1439,1408,1464,1415,1413,1455,1596,1400,1423,1640,1424,1444,1475,1675,1400,1457,1549,1623,1511,1383,1564,1556,1538,1273,1563,1347,1922,1776,1466,1645,1649,1557,1564,1527,1710,1606,1553,1583,1643,1758,1695,1574,1552,1672,1530,1577,1547,1552,1545,1549,1526,1522,1533,1471,1672,1595,1523,1646,1724,1586,1662,1737,1803,1513,1520,1966,1939,1705,1713,1817,1958,1933,1928,1981,1929,1959,1897,1934,1830,1841,1859,1904,1979,1848,1865,1832,1816,1774,1787,1773,1925,1977,1953,1955,1927,1921,1902,1907,1942,2020,1870,1897,1856,1818,1807,1842,1784,1914,2003,1984,1978,1970,1933,1935,1914,1928,1978,1797,1773,1737,1737,1760,1775,1734,1792,1918,1798,1797,1825,1767,1804,1786,1779,1892,1471,1441,1408,1436,1408,1423,1417,1449,1968,1989,1926,2048,1950,1936,1893,1902,1894,1917,1896,1967,1932,1939,1927,1882,1899,1927,1883,1940,1876,1518,1509,1602,1614,1578,1595,1515,1603,1920,1812,1793,1746,1781,1746,1733,1720,1758,1338,1295,1292,1369,1292,1343,1369,1334,1749,1663,1640,1685,1707,1743,1742,1665,1699,1480,1470,1496,1570,1563,1493,1473,1449,1687,1664,1482,1688,1679,1542,1624,1415,1356,1337,1327,1244,1266,1163,1279,1757,1883,1862,1886,1899,1876,1863,1875,1914,1953,1895,1872,1863,1893,1882,1886,1860,1877,1422,1430,1345,1397,1469,1472,1482,1453,1806,1663,1698,1770,1657,1611,1570,1537,1568,1534,1561,1590,1621,1729,1712,1701,1645,1675,1448,1485,1471,1452,1339,1402,1410,1599,1468,1513,1492,1531,1290,1493,1518,1462,1657,1486,1535,1482,1211,1498,1496,1519,1588,1984,1954,1924,1636,1427,1410,1429,885,1411,1374,1398,1591,1167,1140,1116,1162,1151,1070,1159,1202,1525,1413,1456,1954,1879,1921,1914,1898,1903,1904,1932,1676,1610,1505,1526,1446,1300,922,907,855,907,824,962,720,853,935,997,756,927,887,1094,861,1062,1280,1258,1323,1292,737,376,616,575,299,312,432,750,1356,834,920,904,1049,1228,857,1328,683,220,445,293,301,1434,1406,1504,1719,1838,1766,1812,1824,1816,1795,1754,1792,1738,1632,1648,1573,1612,1604,1651,1577,1685,1350,1296,1336,1317,1620,1691,1662,1670,1689,1638,1654,1690,1682,1680,1669,1666,972,1570,1834,1860,1767,1781,1800,1871,1795,1766,1638,1448,1489,1445,1668,1857,1842,1869,1841,1878,1872,1853,1882,1848,1130,1754,1154,1088,1248,1022,1245,2033,2003,1976,1922,1986,1943,1894,1901,1885,1976,1940,1950,1927,1910,1892,1929,2019,1736,1653,1758,1797,1809,1811,1658,1623,1913,2052,2048,2049,2053,2048,2044,2027,2053,2056,2055,2039,2038,2048,2042,2047,2057,2048,1883,1919,1853,1852,1815,1869,1820,1875,1952,1906,1873,1844,1851,1840,1850,1850,1957,1846,1860,759,812,790,676,735,447,769,899,795,421,612,806,841,740,399,735,844,871,555,454,773,820,944,435,618,1215,1022,1176,631,495,1278,1076,1120,430,736,1173,1068,1051,392,974,1076,1065,833,1265,1243,1571,1283,1703,1504,976,1156,1156,1146,1189,1104,1097,1096,1156,1159,1182,1167,1124,1105,1036,1077,1557,1096,1088,1165,1074,1073,1089,1042,1027,1002,894,1037,1046,863,890,769,889,1403,424,535,505,526,585,479,566,575,447,509,472,520,506,530,574,502,1355,1470,1486,1493,1547,1497,1508,1510,1519,1169,990,982,1371,1624,1413,1395,1294,1352,1457,1726,1648,1650,1667,1615,1612,1659,1646,1667,1908,1704,1682,1749,1685,1692,1724,1677,1801,984,1113,1234,1334,1308,1283,1323,1115,1359,1435,1395,1429,1531,1508,1550,1549,1654,1439,1029,1162,1149,1131,1173,1083,1092,1120,1146,1118,1163,1171,1094,1075,995,1104,1469,1130,1104,1182,1081,1077,1087,1052,1026,1024,870,1030,1066,863,891,791,878,1361,421,539,507,548,547,461,571,559,455,531,468,513,499,530,587,507,1615,1798,1780,1816,1781,1810,1739,1847,1397,1422,1383,1387,1657,1823,1826,1893,1848,1865,1847,1866,1867,1527,1547,1592,1506,1450,1694,1522,1699,1589,1764,1793,1862,1724,1542,1208,1137,1163,1365,1307,1724,1741,1806,1821,1745,1846,1769,1730,1791,1332,1209,1136,1106,1360,1423,1566,1885,1726,1914,1751,1811,1806,1742,1850,1763,1757,1769,1701,1625,1673,1769,1758,1770,1593,1673,1245,1775,1618,1613,1594,1587,1565,1579,1624,1767,1484,1763,1786,1473,1420,1753,1781,1549,1696,1026,1122,1143,1123,1173,1138,1086,1133,1144,1148,1125,1207,1121,1096,1029,1080,1251,1075,1209,1140,755,787,1160,1147,1069,990,977,1236,1117,875,664,1083,1237,1099,975,923,1218,1122,983,554,1146,1212,1179,990,845,1193,1136,985,440,1190,1179,1194,955,800,1156,1146,1068,430,1182,1167,1139,956,1270,1106,1085,1191,1070,1060,1118,1022,983,1014,895,1021,1031,838,820,838,980,893,1157,1222,1182,418,1051,1232,1141,855,1233,1119,1219,1187,1256,1136,1117,1227,1185,1272,1116,1104,1230,1209,1334,1078,1197,1205,1170,1301,1164,992,1037,1098,1363,1113,1000,1003,1216,1284,1046,983,1076,1315,1236,1064,915,1117,1542,577,528,511,1322,1543,1749,1859,1859,1821,1565,1373,474,514,504,532,549,1028,1520,1453,1640,1518,1453,1646,1526,1455,1635,1534,1449,1705,1675,1835,1782,1816,1748,1785,1826,1767,1833,1869,1739,1870,1730,1748,2032,1707,1841,1777,1768,1803,1877,1745,1718,1908,1692,1835,1885,1694,1880,1776,1837,1727,1851,1749,1785,1891,1755,1732,1884,1732,1846,1790,1754,1894,1709,1830,1756,1902,1736,1850,1759,1739,1904,1669,1821,1894,1739,1764,1813,1831,1717,1853,1820,1728,1896,1722,1755,1890,1804,1765,1804,1756,1852,1831,1826,1674,1905,1063,1228,1130,1272,1274,1104,1288,1056,771,731,820,854,552,468,765,823,920,464,500,810,861,853,588,387,822,899,841,941,1211,1009,1140,1179,1101,1189,1068,1108,1109,1163,1091,1196,1180,1085,1064,1091,1420,1470,1540,1639,1095,1102,1188,1095,1105,1088,1050,1045,1025,889,1026,1039,935,904,766,882,1424,1430,1455,1281,424,560,509,559,535,467,556,545,474,504,478,490,508,532,575,519,1628,1650,1674,1549,1716,1637,1675,1674,1700,1700,1766,1640,1627,1611,1668,1579,1053,636,1344,1420,1353,1379,1329,1377,1387,1312,1246,1070,1225,1055,1232,1095,1247,1113,1218,1404,1408,1455,1402,1480,1362,1425,1436,1558,1561,1463,1356,1455,1442,1433,1336,1423,1184,1111,1257,1101,1317,1167,1344,1177,1282,1145,1239,1215,1357,1153,1165,1169,1141,1467,1510,1527,1515,1707,1473,1576,1473,1458,1383,1455,1281,1090,1147,1200,1482,1361,1018,1436,916,1000,1186,1181,2023,2029,2015,2013,2018,1996,1978,1996,2023,2026,1989,2036,2020,1999,2021,1962,1975,1339,1344,1630,1513,1123,1123,1119,1127,1121,1117,1257,1608,1478,1519,1570,1803,1684,1740,1747,1854,1558,1496,1521,1618,1608,1554,1543,1598,399,99,1679,2028,1967,1889,1905,1887,1820,1880,1906,1887,1915,1906,1909,1980,1901,1864,1914,1934,1898,1823,1951,1960,1884,1909,1943,1923,1749,1770,1840,1713,1977,1921,1867,1853,1898,1921,1881,1892,1889,1951,1822,1834,1851,1919,1792,1518,1653,1690,1663,1648,1723,1675,1678,1613,1743,1615,1667,1674,1729,1659,1679,1639,1705,1785,1448,1539,1612,1616,1571,1489,1485,1590,1601,1622,1650,1482,1547,1559,1559,1558,1880,1503,1563,1652,1526,1948,1795,1747,1807,1874,1856,1853,1841,1892,1313,1298,1309,1366,1328,1354,1340,1244,1640,1443,1446,1424,1523,1471,1457,1442,1606,1458,1444,1443,1466,1501,1478,1452,1421,1635,1464,1457,1429,1502,1463,1474,1431,1535,1521,1437,1428,1450,1491,1453,1426,1415,1587,1421,1384,1432,1443,1478,1429,1416,1428,1583,1383,1385,1481,1472,1447,1379,1404,1612,1392,1395,1392,1454,1437,1427,1390,1401,1616,1390,1427,1471,1493,1497,1421,1403,1620,1459,1428,1451,1491,1483,1491,1455,1391,1598,1354,1301,1368,1390,1351,1318,1307,1477,1396,1319,1300,1398,1315,1376,1333,1263,1574,1323,1291,1340,1336,1345,1301,1373,1324,1607,1460,1431,1493,1489,1508,1458,1410,1623,1408,1398,1438,1502,1449,1472,1386,1417,1607,1358,1407,1437,1448,1469,1390,1400,1615,1420,1388,1379,1464,1487,1437,1407,1418,1617,1394,1385,1395,1493,1458,1415,1434,1561,1481,1415,1407,1438,1505,1453,1429,1403,1755,1677,1846,1728,1876,1668,1710,1796,1831,1831,1791,1709,1648,1777,1764,1738,1733,1871,1773,1893,1843,1877,1867,1878,1860,1860,1938,1827,1781,1791,1811,1797,1773,1780,1957,1748,1753,1683,1711,1703,1693,1670,1739,1846,1749,1743,1690,1725,1716,1707,1684,1832,1880,1847,1830,1801,1787,1858,1802,1807,1929,1727,1775,1738,1731,1713,1746,1790,1812,1743,1914,1841,1832,1829,1793,1755,1791,1770,1887,1680,1748,1713,1531,1766,1726,1622,1772,1817,1744,1775,1706,1618,1687,1592,1834,1894,1631,1639,1634,1656,1699,1684,1679,1654,1769,1687,1617,1631,1707,1705,1691,1656,1747,1826,1817,1737,1791,1832,1797,1814,1784,1845,1791,1720,1732,1759,1799,1758,1793,1750,1762,1706,1707,1743,1718,1747,1690,1729,1796,1693,1688,1756,1664,1677,1698,1731,1751,1780,1683,1732,1622,1651,1647,1718,1725,1817,1403,1511,1501,1547,1519,1497,1490,1508,1957,1982,1930,1973,2022,1935,1967,1978,1902,1942,2015,2031,1975,1944,1972,1986,2012,1794,927,38,40,38,318,40,39,40,73,1962,1799,1842,1858,1817,1836,1817,1789,1913,1475,1496,1441,1440,1369,1459,1447,1422,1920,1829,1774,1780,1800,1752,1774,1774,1583,835,87,32,40,40,318,40,32,40,731,1125,1572,1648,1682,1661,1708,1686,1678,1690,1743,1080,1261,1453,1156,919,1597,1411,1214,1106,1822,1605,1652,430,40,40,39,319,33,40,40,570,1276,1341,1206,1201,1695,1654,1619,1703,1691,1666,1673,1607,1567,40,38,40,40,1113,312,114,1242,1853,2012,1736,1655,1605,1652,1686,1659,1706,1732,1681,1736,1748,1754,1740,1715,1711,1691,1747,1092,1143,357,1099,1818,1757,1718,1738,1725,1799,1666,1746,1870,1849,1839,1883,1770,1927,1792,1857,1881,1839,1682,1648,1745,1652,1812,1792,1705,1882,1780,1976,1774,1955,1808,1943,1863,1881,1994,1498,1379,1302,1212,1334,1593,1554,1460,1329,1413,1237,1282,1238,1299,1312,1446,1764,598,814,874,983,1358,1672,1071,721,648,737,1482,1572,1701,1467,810,1266,1594,1361,1138,924,827,965,741,621,911,1225,1364,1214,1228,1349,1344,1408,1271,1480,1778,1723,1819,1689,1786,1698,1770,1723,1776,1753,1743,1771,1770,1801,1768,1745,1168,968,927,975,1574,1963,1704,1921,1886,1123,1220,1190,1227,2029,2019,1997,2026,1939,1918,1884,1893,1948,2040,2050,2048,2041,1758,1818,1786,1837,1811,1799,1709,1810,1721,1652,1642,1604,1709,1586,1280,1315,1637,1294,1160,1265,1284,1329,1178,1278,1228,1609,1389,1214,1204,1713,1594,783,797,1574,1645,843,744,1296,1268,1083,778,962,1572,1604,1366,1404,1608,1897,1875,1858,1873,1872,1920,1944,1963,1848,1675,1658,1655,1652,1708,1797,1793,1712,1602,1430,1411,1427,1565,1445,1431,1440,1598,1527,1446,1497,1543,1569,1510,1469,1544,1912,1981,1945,1925,2016,1972,1986,1971,2003,1762,1777,1753,1758,1791,1572,1543,1569,1892,1916,1798,1905,1932,1776,1829,1765,1842,1951,1862,1843,1898,1878,1813,1779,1817,1900,1434,1496,1588,1602,1217,1247,1598,1293,1183,1261,1209,1716,1131,1248,1298,1872,1778,1790,1768,1802,1809,1804,1781,1805,1874,1831,1801,1807,1452,889,852,810,969,1144,1183,1144,1181,1286,1206,1188,1211,1329,1399,1408,1293,1603,1835,1869,1843,1880,1852,1801,1856,1825,1956,1901,1938,1914,1930,1909,1925,1958,1886,1780,1771,1781,1659,1817,1743,1676,1512,1590,1715,1792,1802,1845,1836,1727,1857,1810,1465,1467,1401,1521,1551,1596,1784,1568,1557,1637,1642,1716,1679,1758,1744,1791,1797,1891,2056,2053,1962,1966,1972,1989,1988,1990,1934,1964,1922,1912,1105,1330,1380,1043,1752,1794,1743,1759,1727,1511,1652,1526,1646,1769,1768,1777,1730,1843,1778,1814,1757,1783,1695,1716,1732,1632,1689,1819,1790,1635,1167,1031,1065,1165,1555,544,552,652,1703,707,1410,721,1422,501,690,447,608,975,719,815,689,757,1179,1198,1196,1087,1418,1320,1448,1498,1474,1390,1437,1563,1545,1480,1409,1547,1557,1541,1358,1510,1566,1439,1328,1462,1410,1621,1443,1383,1485,930,227,234,212,791,490,449,476,842,2048,2023,2040,2041,2039,2045,2040,2031,2037,1969,1920,1973,1892,1900,1932,1904,1889,1437,1384,1426,1454,1344,1128,1166,1124,1234,1447,1361,1541,1493,1857,1811,1834,1878,1867,1824,1784,1806,1887,1770,1746,1759,1799,1746,1689,1759,1674,1562,1299,1282,1372,1550,1321,1283,1370,1702,1775,1748,1805,1740,1206,1267,1202,1267,1849,1826,1780,1795,1685,1462,1391,1516,1557,2037,2032,2035,2022,2012,1986,1973,1998,1745,1503,1497,1476,1706,1701,1659,1684,1728,1993,1979,1972,1993,1835,1723,1722,1722,1976,2052,2048,2047,1975,1581,1534,745,532,539,535,933,1425,1424,1420,1121,1296,1577,1617,1244,1354,1565,1546,1492,1641,1655,1742,1633,1911,1851,1311,1223,1344,1240,1188,933,1023,959,1332,880,986,935,843,1256,657,709,1606,1992,1985,1957,1785,1964,1994,1987,1992,1846,1905,1893,1884,1981,2011,1155,2005,1993,1878,1893,1895,1913,2005,1994,1825,2011,1640,1656,1641,1495,1491,1527,1611,1495,1571,1881,1916,1850,1850,1929,1891,1854,1866,1876,1502,1477,1448,1905,1956,1979,2011,2010,1832,1791,1801,1799,1843,1875,1892,1879,1679,1413,1476,1398,1424,1468,1531,1479,1440,1538,1676,1711,1632,1555,1549,1573,1551,1621,1734,1625,1751,1755,1652,1764,1660,1736,1667,1667,1521,1721,1656,1673,1506,1666,1744,1442,1570,1560,1548,1459,1680,1596,1626,1423,1531,1539,1486,1488,1467,1564,1720,1476,1305,1234,1521,1624,1660,1764,1410,1723,1599,1618,1784,1739,1531,1653,1508,1693,1528,1518,1635,1502,1459,1498,1804,1344,1403,1373,1251,1148,1137,1307,1180,1384,1462,1355,1357,1575,1360,1209,1366,1869,1689,1741,1567,1251,1045,1020,865,943,1071,1195,1299,1251,1581,1587,1564,1722,1944,1339,1284,1531,1462,1530,1481,1459,1399,1477,1677,1726,1697,1705,1658,1719,1794,1961,1666,1802,1767,1588,1368,1344,1328,1400,1451,1553,1617,1625,1609,1436,1434,1368,1610,1405,1372,1372,1394,1407,1384,1655,1503,1512,1465,1410,1456,1460,1474,1506,1451,1756,1798,1519,1402,1359,1393,1396,1328,1366,1494,1692,1759,1742,1600,1507,1509,1439,1427,1723,1424,1439,1389,1446,1417,1546,1685,1647,1582,1451,1518,1483,1412,1440,1488,1441,1674,1636,337,267,1601,1619,374,280,1515,1587,398,274,1525,1603,422,267,1535,1583,448,263,1459,1584,464,262,1245,1272,1280,1246,1450,1252,1292,1310,1387,1284,1241,1325,1302,1441,1268,1360,1300,1453,1526,1261,1257,1266,1232,1279,1256,1293,1227,1452,1225,1212,1228,1205,1192,1193,1191,1504,1254,1255,1256,1288,1291,1289,1297,1262,1889,1729,1785,1688,1667,1621,1830,1860,1455,1246,1375,1348,1339,1380,1345,1265,1388,1297,1442,1294,1376,1375,1417,1364,1491,1847,1622,1600,1582,1623,1610,1496,1387,1309,1380,1403,1485,1526,1546,1436,1580,1732,1890,1661,1590,1574,1625,1591,1472,1411,1308,1394,1401,1459,1550,1529,1415,1582,1704,1892,1671,1577,1589,1648,1594,1491,1460,1282,1355,1427,1457,1582,1524,1435,1515,1725,1914,1673,1587,1582,1664,1588,1501,1481,1242,1362,1402,1443,1580,1512,1430,1518,1704,1902,1266,1270,1105,945,948,1146,1058,1111,1087,1281,1283,1205,906,979,1072,1081,1643,1232,1298,1123,978,975,1126,1095,1045,1093,1278,1267,1225,952,988,1074,1070,1494,1968,1913,1910,1964,1968,1957,1951,1915,1865,1803,1777,1856,1864,1944,1920,1951,1680,1753,1971,1937,1977,2020,1985,1921,1970,1917,1122,1177,1151,1147,1286,1124,1155,1127,1706,1766,1754,1771,1779,1760,1817,1790,1731,1789,1766,1780,1751,1761,1659,2003,1948,1901,1897,1885,1980,1628,721,792,1926,1963,2016,1984,1952,1957,1992,1952,1998,1952,1955,1961,1982,1960,1974,1941,1961,1844,1577,1553,1593,1548,1601,1562,1562,1661,1776,1631,1675,1666,1627,1781,1671,1748,1635,1701,1461,1583,1430,1711,1663,1736,1670,1728,1693,1673,1766,1741,1889,1722,1843,1794,1838,1615,1690,1629,1761,1705,1776,1695,1689,1684,1517,1618,1538,1667,1611,1791,1662,1772,1700,1775,1782,1821,1616,1487,1774,1639,1812,1792,1808,1778,1821,1810,1825,1797,1769,1702,1732,1759,1557,1646,1538,1764,1651,1860,1692,1879,1756,1748,1662,1783,1768,1728,1275,1901,1916,1803,1564,1916,1880,1484,1571,1548,2001,2010,1973,1550,1392,1244,1231,1317,1158,1136,1677,1627,1608,1555,1491,1498,1538,1527,1677,1239,1134,915,918,1119,1234,1021,988,1174,1104,1902,1752,1873,1832,1824,1811,1854,1773,1904,1757,1548,1721,1634,1737,1745,1693,1780,1884,1817,1868,1856,1822,1837,1804,1811,1923,1748,1576,1716,1681,1724,1755,1777,1728,1816,1823,1906,1826,1889,1798,1927,1797,1951,1939,1873,1990,1939,1888,1965,2015,1918,1947,1800,1718,1815,1784,1814,1811,1847,1858,1364,1335,1672,1420,1191,1602,1493,1784,1402,1047,1357,1419,1120,956,631,296,1143,1235,1307,1306,1307,1437,1268,1315,1343,1313,1473,1313,1335,1307,1438,1378,1320,1357,1335,1468,1504,1334,1276,1514,1704,1894,1959,2037,2047,1998,2004,1982,1939,1647,1636,1520,1491,1727,1580,1720,1727,1688,1758,1787,1620,1758,1597,1574,1605,1640,1582,1752,1897,1927,1853,1634,1712,1790,1975,1958,1856,1729,1715,1841,1919,1841,1767,1531,1807,1925,1882,1884,1650,1706,1899,1995,1984,1920,1765,1660,1867,1876,1872,1818,1394,991,993,958,1357,1454,1587,1606,1644,1632,1680,1652,1627,1514,1918,1682,1733,1716,1592,1730,1628,1626,1684,1684,1894,1762,1719,1761,1742,1720,1743,1598,1692,1688,1731,1709,1792,1946,1780,1328,1851,1876,1858,1938,1964,1921,1885,1724,1747,1656,1673,1718,1950,1874,1912,1881,1904,1988,1914,1958,1948,1937,1829,1800,1793,1782,1865,1964,1870,1903,1885,1907,1859,1880,1746,1326,1093,1356,1723,1602,1677,1616,1871,1768,1732,1790,1756,1742,1776,1757,1772,1737,1800,1681,1078,581,620,735,1166,977,1324,1246,1244,958,1847,1709,1629,1553,1751,1602,1658,1687,1620,1413,1664,1512,1376,1164,1603,1569,1761,1685,1644,1714,1746,1569,1650,1551,1503,1595,1555,1675,1546,1679,1542,1588,1667,1564,1644,1565,1671,1538,1649,1451,1524,1615,1517,1595,1513,1509,1660,1565,1673,1536,1530,1809,1802,1812,1846,1864,1851,1855,1822,1901,1805,1824,1824,1922,1909,1863,1850,1884,1982,2019,1965,1921,1888,1891,1932,1929,1921,1910,1930,1895,1866,1870,1857,1904,1883,1794,1670,1642,1677,1709,1608,1603,1668,1615,1622,1649,1608,1740,1634,1643,1663,1649,1635,1651,1618,1642,1751,1678,1622,1635,1621,1621,1638,1671,1845,1853,1880,1836,1862,1862,1847,1863,1847,1935,1855,1835,1832,1858,1841,1824,1853,1945,1892,1856,1851,1873,1858,1842,1861,1882,1681,1399,1439,1456,1316,1441,1426,1606,1403,1344,1464,1491,1416,1446,1760,1865,1836,1842,1781,1799,1813,1909,1915,1696,1726,1714,1677,1684,1690,1748,1643,1709,1544,1789,1717,1691,1765,1769,1700,1591,1696,1855,1840,1806,1881,1614,1777,1865,1891,1857,1845,1715,1694,1789,1771,1775,1760,1532,1743,1692,1662,1825,1657,1679,1781,1838,1770,1749,1749,1641,1695,1655,1645,1765,1682,1433,1493,1500,1570,1488,1662,1452,1672,1579,1495,1618,1694,1602,1494,1573,1613,1491,1595,1523,1787,1828,1748,1767,1757,1756,1702,1411,1430,1783,1806,1802,1750,1706,1658,1468,1675,1745,1729,1623,1351,1321,1807,1751,1737,1349,1638,1421,1481,1660,1434,1695,1484,1479,1513,1522,1528,1556,1488,1303,1492,1533,1585,1544,1498,1506,1561,1607,1491,1560,1355,1444,1448,1477,1814,1838,1870,1791,1829,1833,1791,1724,1731,1490,1799,1760,1715,1807,1658,1761,1774,1736,1777,2014,2030,2001,2014,2016,1997,1767,1766,1740,1625,1738,1719,1793,1676,1698,1729,1791,1735,1671,1794,1700,1725,1661,1668,1673,1730,1658,1786,1680,1774,1661,1663,1714,1728,1686,1688,1658,1807,1603,1434,1431,1764,1752,1650,1702,1662,1417,1515,1517,1546,1427,1502,1549,1523,1600,1793,1748,1667,1771,1657,1746,1752,1741,1613,1673,1657,1679,1620,1597,1615,1711,1617,1698,1634,1637,1699,1613,1677,1630,1742,1654,1649,1634,1673,1631,1644,1637,1650,1703,1642,1646,1649,1722,1643,1605,1589,1756,1618,1677,1676,1785,1670,1641,1622,1647,1710,1603,1659,1676,1817,1626,1618,1619,1677,1647,1837,1841,1662,1634,1748,1831,1648,1723,1770,1842,1748,1825,1919,1872,1901,2027,1955,1949,1943,1953,1811,1841,1916,1981,2033,2000,2000,1878,1920,1852,1816,1864,1997,2013,2018,2035,1982,1983,1902,1912,1885,1922,1912,1930,1954,2025,1706,1877,1899,1904,1850,1811,1582,1612,1879,1826,1811,1614,1639,1599,1639,1624,1766,1039,1057,928,1079,1229,1268,1140,1338,1194,1279,1147,1270,1250,1214,1176,1243,1180,1715,1696,1757,1740,1669,1715,1689,1751,1664,1698,1706,1787,1703,1667,1644,1709,1633,1726,1628,1640,1659,1750,1668,1669,1615,1718,1678,1697,1661,1634,1837,1708,1722,1728,1673,1723,1727,1733,1809,1740,1673,1742,1783,2024,1996,2020,2041,2035,2036,2029,2024,2018,2047,2043,2048,2057,2048,2050,2041,2035,1958,1856,1867,1906,1919,1889,1911,1866,1900,1648,1718,1532,1680,1788,1682,1532,1654,1733,1693,1644,1692,1647,1696,1767,1782,1603,1723,1639,1547,1659,1450,1704,1767,1884,1713,1660,1639,1739,1958,1873,1875,1793,1770,1713,1827,1829,1868,1474,2017,1965,2025,1931,1905,1898,1680,1751,1646,1785,1705,1777,1790,1758,1673,1766,1710,1694,1692,1707,1445,1508,1489,1518,1575,1514,1521,1521,1491,1575,1500,1513,1523,1542,1519,1540,1508,1467,1010,836,1004,957,1524,1407,1289,1391,1349,1438,1339,1416,1505,1618,1728,1617,1631,1655,1600,1646,1726,1774,1696,1661,1684,1806,1776,1723,1738,1705,1675,1687,1669,1602,1036,1586,1669,1709,1883,1897,1924,1874,1866,1878,1919,1904,1910,1958,1662,1589,1488,1540,1450,1575,1738,1962,1898,1826,1642,1549,1576,1640,1825,1899,1861,1613,1665,1645,1650,1635,1688,1703,1789,1394,1505,1678,1678,1729,1730,1730,1128,1525,1239,1373,1504,1689,1765,1743,1340,1436,1492,1375,1407,1362,1363,1337,1355,1401,1505,1440,1282,1365,1340,1322,1359,1268,1339,1572,1365,1574,1515,1696,1725,1433,1130,1454,1214,1414,1476,1601,1606,1479,1269,1206,1666,1457,1374,1334,1140,1306,1277,1468,1665,1389,1577,1695,1745,1738,1682,1774,1253,1647,1339,1664,1548,1711,1695,1461,1208,1631,1532,1257,1476,1635,1635,1435,1482,1241,1655,1287,1459,1529,1690,1747,1699,1461,1542,1622,1448,1559,1425,1533,1519,1487,1413,1836,1787,1715,1750,1797,380,99,1177,457,669,589,539,483,753,634,502,1292,913,882,1429,1399,1395,1442,1415,1546,1597,1706,1605,1643,1555,1602,1851,1582,1121,1165,1183,1251,1326,1263,1301,1263,1475,1507,1598,1544,1501,1561,1674,1599,1385,1341,1384,869,25,30,25,446,692,1222,747,1458,1627,1669,1617,1633,1217,1651,1524,1606,1540,1708,1905,1935,1906,1948,1879,1869,1475,1497,1493,1346,956,954,1245,1332,1405,1441,1490,1510,1427,1527,1731,1766,1535,1606,1499,1562,1587,1517,1549,1712,2050,2048,2036,2012,1892,1933,2018,1971,1745,1911,1871,1944,1996,2036,1989,2034,1986,2021,1972,2033,2051,2011,1726,1832,2001,2006,1997,1943,1663,1613,1247,1231,1186,1424,1993,1912,1713,1750,1896,1892,1766,1785,1782,1865,2027,2028,2019,2008,2044,1975,2045,1919,1543,1558,1553,1520,1531,1553,1532,1506,1375,1395,1314,1341,1293,1303,1330,1519,2008,2024,1981,1986,1998,1982,1921,1936,2015,1838,1723,1670,1664,1718,1638,1337,225,445,1247,1318,1325,983,1017,959,1106,1159,1616,1701,1560,1706,1727,1674,1520,1579,1582,1601,1542,1590,1496,1491,1244,1382,1061,1171,1234,1341,1241,1322,1424,1490,1567,1603,1464,1449,1412,1284,955,1078,1592,1515,787,1163,1293,1368,1486,1461,1486,1514,1192,1332,1544,1694,1948,1804,1294,1339,1184,1391,1572,1637,1594,1654,1578,1600,1493,1598,1497,1457,1238,1424,1574,1554,1365,1362,1384,1402,1345,1289,557,662,446,713,1446,1524,1554,1554,1426,1478,1541,1458,1382,1344,1144,1166,1296,1394,1508,1377,1118,977,866,1166,1730,1901,1785,1777,1555,1407,1011,1120,1556,1592,1560,1555,1573,1577,1559,1703,1769,1832,1725,1822,1787,1879,1773,1758,1407,1397,1355,1417,1411,1494,1669,1772,1968,1945,1873,1933,1968,1945,1873,1965,1906,1829,1545,1278,731,752,846,1240,1482,1590,1667,1710,1478,1610,1358,1337,1236,963,602,831,821,872,614,918,1436,1228,492,534,503,958,1755,1692,1084,1137,1024,1176,1368,1356,1098,1130,905,993,1432,1472,1432,1443,1425,1561,1698,1760,1639,1791,1878,1857,1556,1403,997,1146,1138,1172,954,1013,827,1059,998,1143,1213,1152,453,546,622,664,479,522,604,648,466,533,632,705,499,555,609,680,418,486,557,1014,1879,1697,1043,1125,1033,1121,1032,1096,1107,1336,1804,1668,1678,1711,1638,1674,1736,1573,1148,1312,1663,1664,1680,1759,1876,1491,251,359,288,379,191,281,247,374,51,269,25,181,158,284,260,299,241,626,1449,1474,1616,1533,1067,1079,1067,1125,1184,1323,1467,1521,1449,1614,1853,1879,1697,1709,1380,1617,1627,1657,1371,1570,1980,1984,2029,2032,1940,1968,1957,1975,1966,1966,2010,1826,1269,1295,1620,1603,1587,1175,1651,1451,1516,1490,1494,1453,1463,1478,1533,1527,1515,1425,1001,1312,1241,1442,1119,1283,1260,1099,1057,1117,2048,1455,627,1629,2048,891,793,1910,1844,798,1142,2048,1320,610,1607,1966,2004,2048,2048,2048,1919,1989,2048,2048,2048,1900,1979,1853,1984,1879,2031,2027,1901,1973,1962,1986,1956,1946,1943,1917,1989,1914,2009,2000,1931,2001,1865,1998,1861,1972,1858,1979,2048,2048,1863,1978,2048,2048,1863,1973,1957,1987,2020,1867,1975,2048,2032,2005,1938,2021,2048,2050,1915,2008,1903,2009,1928,1981,2051,2048,2048,2031,1917,1991,2048,2048,2048,1865,1975,1976,1986,1992,1907,1983,1946,1979,2045,1867,1975,1867,1995,2044,2036,1868,2029,2053,2046,1897,2007,2048,2048,1985,1964,1996,2048,2025,1906,1981,2048,2048,1863,1971,2048,2048,1876,1978,1871,1980,1871,2028,1914,2009,1904,2009,1874,2028,1871,1971,1866,1914,1937,1837,2009,2047,2048,1865,1981,2048,2048,1865,1980,2048,2048,1864,1980,2057,2055,1863,1973,2049,1863,1998,2053,1865,1996,1945,1982,2008,1919,1929,1938,1933,1933,1914,1961,1884,1976,2015,1907,1981,1877,1977,1863,1933,1909,1980,2048,1996,1959,1995,2048,1868,2029,1880,2030,1870,2030,1874,2033,1875,1976,1975,1986,1989,1906,1941,1905,1942,1907,1939,1910,1950,1901,1981,2010,2023,1878,2030,2035,2012,1987,1960,1952,1933,1960,1907,1979,1867,1994,1915,2008,2047,1875,1979,2005,1951,1989,1872,1975,2048,2028,1892,1977,2057,2024,1896,1984,2048,2048,1870,1976,2048,2048,1972,1986,2026,2048,2048,1898,2027,2048,2048,2048,1865,1977,2048,2048,1876,2029,2051,2056,1952,1979,1855,1972,2002,1894,2005,1995,1964,1965,1942,1937,1863,1980,1972,1959,1995,1984,1960,1995,2025,2020,2028,1919,1985,2033,2006,2012,1900,1979,1937,1981,2019,1898,1980,1866,1978,1876,1978,2049,1991,1953,1991,2039,1863,1973,2048,1868,1975,2048,1870,1938,1896,1966,1892,1970,1872,1975,1864,1975,1869,1976,1863,1980,1866,1975,2056,2048,2045,1896,1983,2048,2048,2028,1933,2002,1877,1976,2007,1938,1923,1939,1920,1946,1987,1876,1977,1888,2030,2046,1942,1979,2041,1947,1980,1949,1986,1953,1946,1997,2048,2048,2013,1939,1996,2048,2048,2015,1933,1996,2048,2048,2005,1946,1997,2048,2048,1965,1986,1977,1911,1941,1915,1919,1932,2012,1987,1960,1997,1931,2009,2023,1896,1983,1944,2004,2052,2048,2057,1865,1972,2048,2048,1998,1946,1997,2048,2048,1901,2005,2048,2048,2048,1863,1977,1865,1996,1865,1971,1866,1968,1875,1975,1951,1978,2049,1864,1970,2048,1877,1976,2048,1908,2005,1874,2029,1867,1978,1903,1928,1930,1914,1957,1836,2006,1864,1975,2050,2048,1869,2024,2056,2040,1871,2019,2017,1979,1933,1979,2016,1865,1998,1943,1979,2016,1915,1977,2020,2014,1871,2003,2026,2016,1980,1951,1955,1898,1977,1874,1975,1974,1976,1868,2028,1983,1989,1865,1995,2042,1901,1985,1994,1953,1997,2055,1990,1946,1993,2055,2002,1938,1941,1932,1872,1979,1995,1937,1965,1894,1938,1910,1937,1919,1923,1950,1900,1977,1816,1999,1894,1913,1932,1920,1985,1863,2004,2055,1944,1979,2050,1957,1976,2050,1940,2001,2052,1897,2006,2030,1932,2002,1866,1978,1972,1986,1992,1903,1982,2048,2048,2048,1871,2050,2048,2048,2048,1925,1879,2054,1884,1909,2052,1881,1850,2048,1877,1845,1991,1858,1977,2031,1861,2035,1848,2033,1850,1950,1852,1864,1856,1867,1839,1877,1803,1935,1826,1989,1968,1836,1977,1916,1823,1922,1981,1920,1969,1906,1877,1885,2023,1921,1972,1863,2014,1851,2026,1862,1884,1836,1890,1878,1961,1883,1953,1916,1812,1830,1885,1892,1827,1844,1866,1837,1879,1813,1910,1848,2025,1863,2019,1961,1875,1882,1843,2029,1852,2026,1763,1893,1997,2028,1858,1891,1842,1864,1839,2039,1791,1134,1188,1506,1503,1258,1621,1601,1203,1016,1210,1167,1151,1171,1146,1214,1475,1863,1935,1908,1939,1911,1857,1862,1926,1916,1897,1977,1844,2012,1870,1963,1896,1983,2057,2048,1863,1933,1906,1981,1879,2034,1862,1831,1172,1132,1231,1042,1859,1947,1900,1904,1946,1838,2009,1856,1957,1903,1917,1932,1887,1981,1856,2012,1873,1912,1906,1895,1965,1804,2029,1863,1977,2048,2052,1887,1976,2048,2043,1913,1982,2048,2048,1901,1981,2048,1981,1969,2004,2048,1870,1976,2048,2043,1910,1982,2048,1954,1977,2050,2048,1863,1975,1862,2015,1866,1965,1322,1336,1776,1276,1153,1677,1326,993],"successes":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1,0,0,1,0,0,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}
;
            compressedData['data'] = byteArray;
            assert(typeof Module['LZ4'] === 'object', 'LZ4 not present - was your app build with -sLZ4?');
            Module['LZ4'].loadPackage({ 'metadata': metadata, 'compressedData': compressedData }, false);
            Module['removeRunDependency']('datafile_/home/dasho/Desktop/EDGE-classic/web/site/edge-classic.data');
      };
      Module['addRunDependency']('datafile_/home/dasho/Desktop/EDGE-classic/web/site/edge-classic.data');

      Module['preloadResults'] ??= {};

        function preloadFallback(error) {
          console.error(error);
          console.error('falling back to default preload behavior');
          fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, processPackageData, handleError);
        };

        openDatabase(
          (db) => checkCachedPackage(db, PACKAGE_PATH + PACKAGE_NAME,
              (useCached, metadata) => {
                Module['preloadResults'][PACKAGE_NAME] = {fromCache: useCached};
                if (useCached) {
                  fetchCachedPackage(db, PACKAGE_PATH + PACKAGE_NAME, metadata, processPackageData, preloadFallback);
                } else {
                  fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE,
                    (packageData) => {
                      cacheRemotePackage(db, PACKAGE_PATH + PACKAGE_NAME, packageData, {uuid:PACKAGE_UUID}, processPackageData,
                        (error) => {
                          console.error(error);
                          processPackageData(packageData);
                        });
                    }
                  , preloadFallback);
                }
              }, preloadFallback)
        , preloadFallback);

        Module['setStatus']?.('Downloading...');

    }
    if (Module['calledRun']) {
      runWithFS(Module);
    } else {
      (Module['preRun'] ??= []).push(runWithFS); // FS is not initialized yet, wait for it
    }

    }
    loadPackage({"files": [{"filename": "/.gitkeep", "start": 0, "end": 0}, {"filename": "/blasphem.wad", "start": 0, "end": 23224248}, {"filename": "/crosshairs/.gitignore", "start": 23224248, "end": 23224248}, {"filename": "/crosshairs/Angle.png", "start": 23224248, "end": 23224433}, {"filename": "/crosshairs/Carat.png", "start": 23224433, "end": 23224727}, {"filename": "/crosshairs/Circle.png", "start": 23224727, "end": 23226111}, {"filename": "/crosshairs/Cross.png", "start": 23226111, "end": 23226452}, {"filename": "/crosshairs/Dot.png", "start": 23226452, "end": 23226645}, {"filename": "/crosshairs/Double.png", "start": 23226645, "end": 23227064}, {"filename": "/crosshairs/Plus.png", "start": 23227064, "end": 23227249}, {"filename": "/crosshairs/Spiked.png", "start": 23227249, "end": 23227436}, {"filename": "/crosshairs/Thin.png", "start": 23227436, "end": 23227702}, {"filename": "/edge_base/blasphemer/graphics/ARTISOAR.png", "start": 23227702, "end": 23228054}, {"filename": "/edge_base/blasphemer/graphics/NULL.png", "start": 23228054, "end": 23229214}, {"filename": "/edge_base/blasphemer/graphics/STBARL.lmp", "start": 23229214, "end": 23233455}, {"filename": "/edge_base/blasphemer/graphics/STBARR.lmp", "start": 23233455, "end": 23237696}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK0.png", "start": 23237696, "end": 23239192}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK1.png", "start": 23239192, "end": 23240282}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK10.png", "start": 23240282, "end": 23241233}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK11.png", "start": 23241233, "end": 23242204}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK12.png", "start": 23242204, "end": 23243476}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK13.png", "start": 23243476, "end": 23244708}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK14.png", "start": 23244708, "end": 23246248}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK15.png", "start": 23246248, "end": 23247215}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK2.png", "start": 23247215, "end": 23248275}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK3.png", "start": 23248275, "end": 23248942}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK4.png", "start": 23248942, "end": 23249506}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK5.png", "start": 23249506, "end": 23250444}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK6.png", "start": 23250444, "end": 23251779}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK7.png", "start": 23251779, "end": 23252409}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK8.png", "start": 23252409, "end": 23253825}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK9.png", "start": 23253825, "end": 23254787}, {"filename": "/edge_base/blasphemer/scripts/anims.ddf", "start": 23254787, "end": 23256049}, {"filename": "/edge_base/blasphemer/scripts/attacks.ddf", "start": 23256049, "end": 23301046}, {"filename": "/edge_base/blasphemer/scripts/colmap.ddf", "start": 23301046, "end": 23301329}, {"filename": "/edge_base/blasphemer/scripts/flats.ddf", "start": 23301329, "end": 23301992}, {"filename": "/edge_base/blasphemer/scripts/fonts.ddf", "start": 23301992, "end": 23303076}, {"filename": "/edge_base/blasphemer/scripts/games.ddf", "start": 23303076, "end": 23305914}, {"filename": "/edge_base/blasphemer/scripts/images.ddf", "start": 23305914, "end": 23307743}, {"filename": "/edge_base/blasphemer/scripts/language.ldf", "start": 23307743, "end": 23311594}, {"filename": "/edge_base/blasphemer/scripts/levels.ddf", "start": 23311594, "end": 23323805}, {"filename": "/edge_base/blasphemer/scripts/lines.ddf", "start": 23323805, "end": 23328376}, {"filename": "/edge_base/blasphemer/scripts/lua/edge_hud.lua", "start": 23328376, "end": 23347712}, {"filename": "/edge_base/blasphemer/scripts/playlist.ddf", "start": 23347712, "end": 23349791}, {"filename": "/edge_base/blasphemer/scripts/rscript.rts", "start": 23349791, "end": 23362052}, {"filename": "/edge_base/blasphemer/scripts/sectors.ddf", "start": 23362052, "end": 23365822}, {"filename": "/edge_base/blasphemer/scripts/sounds.ddf", "start": 23365822, "end": 23376737}, {"filename": "/edge_base/blasphemer/scripts/styles.ddf", "start": 23376737, "end": 23381603}, {"filename": "/edge_base/blasphemer/scripts/switch.ddf", "start": 23381603, "end": 23381988}, {"filename": "/edge_base/blasphemer/scripts/things.ddf", "start": 23381988, "end": 23466908}, {"filename": "/edge_base/blasphemer/scripts/weapons.ddf", "start": 23466908, "end": 23478092}, {"filename": "/edge_base/chex1/graphics/M_SKULL1.png", "start": 23478092, "end": 23478659}, {"filename": "/edge_base/chex1/graphics/M_SKULL2.png", "start": 23478659, "end": 23479407}, {"filename": "/edge_base/chex1/graphics/STBAR.lmp", "start": 23479407, "end": 23502949}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT033.lmp", "start": 23502949, "end": 23503066}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT034.lmp", "start": 23503066, "end": 23503199}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT035.lmp", "start": 23503199, "end": 23503450}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT036.lmp", "start": 23503450, "end": 23503777}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT037.lmp", "start": 23503777, "end": 23504040}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT038.lmp", "start": 23504040, "end": 23504132}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT039.lmp", "start": 23504132, "end": 23504290}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT040.lmp", "start": 23504290, "end": 23504448}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT041.lmp", "start": 23504448, "end": 23504608}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT042.lmp", "start": 23504608, "end": 23504728}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT043.lmp", "start": 23504728, "end": 23504803}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT044.lmp", "start": 23504803, "end": 23504881}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT045.lmp", "start": 23504881, "end": 23504955}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT046.lmp", "start": 23504955, "end": 23505146}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT047.lmp", "start": 23505146, "end": 23505373}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT048.lmp", "start": 23505373, "end": 23505511}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT049.lmp", "start": 23505511, "end": 23505755}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT050.lmp", "start": 23505755, "end": 23506002}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT051.lmp", "start": 23506002, "end": 23506208}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT052.lmp", "start": 23506208, "end": 23506452}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT053.lmp", "start": 23506452, "end": 23506691}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT054.lmp", "start": 23506691, "end": 23506889}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT055.lmp", "start": 23506889, "end": 23507116}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT056.lmp", "start": 23507116, "end": 23507355}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT057.lmp", "start": 23507355, "end": 23507443}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT058.lmp", "start": 23507443, "end": 23507549}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT059.lmp", "start": 23507549, "end": 23507710}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT060.lmp", "start": 23507710, "end": 23507802}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT061.lmp", "start": 23507802, "end": 23507963}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT062.lmp", "start": 23507963, "end": 23508157}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT063.lmp", "start": 23508157, "end": 23508378}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT064.lmp", "start": 23508378, "end": 23508579}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT065.lmp", "start": 23508579, "end": 23508782}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT066.lmp", "start": 23508782, "end": 23509008}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT067.lmp", "start": 23509008, "end": 23509204}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT068.lmp", "start": 23509204, "end": 23509362}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT069.lmp", "start": 23509362, "end": 23509587}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT070.lmp", "start": 23509587, "end": 23509814}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT071.lmp", "start": 23509814, "end": 23509925}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT072.lmp", "start": 23509925, "end": 23510116}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT073.lmp", "start": 23510116, "end": 23510322}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT074.lmp", "start": 23510322, "end": 23510484}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT075.lmp", "start": 23510484, "end": 23510772}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT076.lmp", "start": 23510772, "end": 23510995}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT077.lmp", "start": 23510995, "end": 23511218}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT078.lmp", "start": 23511218, "end": 23511388}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT079.lmp", "start": 23511388, "end": 23511617}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT080.lmp", "start": 23511617, "end": 23511831}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT081.lmp", "start": 23511831, "end": 23512035}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT082.lmp", "start": 23512035, "end": 23512194}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT083.lmp", "start": 23512194, "end": 23512415}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT084.lmp", "start": 23512415, "end": 23512611}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT085.lmp", "start": 23512611, "end": 23512928}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT086.lmp", "start": 23512928, "end": 23513130}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT087.lmp", "start": 23513130, "end": 23513300}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT088.lmp", "start": 23513300, "end": 23513500}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT089.lmp", "start": 23513500, "end": 23513718}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT090.lmp", "start": 23513718, "end": 23513909}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT091.lmp", "start": 23513909, "end": 23514127}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT092.lmp", "start": 23514127, "end": 23514310}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT093.lmp", "start": 23514310, "end": 23514390}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT094.lmp", "start": 23514390, "end": 23514482}, {"filename": "/edge_base/chex1/graphics/credit.lmp", "start": 23514482, "end": 23633770}, {"filename": "/edge_base/chex1/graphics/help1.lmp", "start": 23633770, "end": 23753058}, {"filename": "/edge_base/chex1/graphics/titlepic.lmp", "start": 23753058, "end": 23872346}, {"filename": "/edge_base/chex1/graphics/wimap0.lmp", "start": 23872346, "end": 23991634}, {"filename": "/edge_base/chex1/scripts/attacks.ddf", "start": 23991634, "end": 23994836}, {"filename": "/edge_base/chex1/scripts/fonts.ddf", "start": 23994836, "end": 23995440}, {"filename": "/edge_base/chex1/scripts/games.ddf", "start": 23995440, "end": 23996473}, {"filename": "/edge_base/chex1/scripts/language.ldf", "start": 23996473, "end": 24002285}, {"filename": "/edge_base/chex1/scripts/levels.ddf", "start": 24002285, "end": 24005269}, {"filename": "/edge_base/chex1/scripts/styles.ddf", "start": 24005269, "end": 24008189}, {"filename": "/edge_base/chex1/scripts/things.ddf", "start": 24008189, "end": 24017307}, {"filename": "/edge_base/chex1/sprites/DOGSA1.lmp", "start": 24017307, "end": 24018442}, {"filename": "/edge_base/chex1/sprites/DOGSA2A8.lmp", "start": 24018442, "end": 24020111}, {"filename": "/edge_base/chex1/sprites/DOGSA3A7.lmp", "start": 24020111, "end": 24022021}, {"filename": "/edge_base/chex1/sprites/DOGSA4A6.lmp", "start": 24022021, "end": 24023687}, {"filename": "/edge_base/chex1/sprites/DOGSA5.lmp", "start": 24023687, "end": 24024806}, {"filename": "/edge_base/chex1/sprites/DOGSB1.lmp", "start": 24024806, "end": 24025971}, {"filename": "/edge_base/chex1/sprites/DOGSB2B8.lmp", "start": 24025971, "end": 24027659}, {"filename": "/edge_base/chex1/sprites/DOGSB3B7.lmp", "start": 24027659, "end": 24029586}, {"filename": "/edge_base/chex1/sprites/DOGSB4B6.lmp", "start": 24029586, "end": 24031292}, {"filename": "/edge_base/chex1/sprites/DOGSB5.lmp", "start": 24031292, "end": 24032406}, {"filename": "/edge_base/chex1/sprites/DOGSC1.lmp", "start": 24032406, "end": 24033541}, {"filename": "/edge_base/chex1/sprites/DOGSC2C8.lmp", "start": 24033541, "end": 24035210}, {"filename": "/edge_base/chex1/sprites/DOGSC3C7.lmp", "start": 24035210, "end": 24037120}, {"filename": "/edge_base/chex1/sprites/DOGSC4C6.lmp", "start": 24037120, "end": 24038786}, {"filename": "/edge_base/chex1/sprites/DOGSC5.lmp", "start": 24038786, "end": 24039905}, {"filename": "/edge_base/chex1/sprites/DOGSD1.lmp", "start": 24039905, "end": 24041070}, {"filename": "/edge_base/chex1/sprites/DOGSD2D8.lmp", "start": 24041070, "end": 24042758}, {"filename": "/edge_base/chex1/sprites/DOGSD3D7.lmp", "start": 24042758, "end": 24044685}, {"filename": "/edge_base/chex1/sprites/DOGSD4D6.lmp", "start": 24044685, "end": 24046391}, {"filename": "/edge_base/chex1/sprites/DOGSD5.lmp", "start": 24046391, "end": 24047505}, {"filename": "/edge_base/chex1/sprites/DOGSE1.lmp", "start": 24047505, "end": 24048643}, {"filename": "/edge_base/chex1/sprites/DOGSE2E8.lmp", "start": 24048643, "end": 24050418}, {"filename": "/edge_base/chex1/sprites/DOGSE3E7.lmp", "start": 24050418, "end": 24052474}, {"filename": "/edge_base/chex1/sprites/DOGSE4E6.lmp", "start": 24052474, "end": 24054238}, {"filename": "/edge_base/chex1/sprites/DOGSE5.lmp", "start": 24054238, "end": 24055466}, {"filename": "/edge_base/chex1/sprites/DOGSF1.lmp", "start": 24055466, "end": 24056722}, {"filename": "/edge_base/chex1/sprites/DOGSF2F8.lmp", "start": 24056722, "end": 24058689}, {"filename": "/edge_base/chex1/sprites/DOGSF3F7.lmp", "start": 24058689, "end": 24060927}, {"filename": "/edge_base/chex1/sprites/DOGSF4F6.lmp", "start": 24060927, "end": 24062836}, {"filename": "/edge_base/chex1/sprites/DOGSF5.lmp", "start": 24062836, "end": 24064189}, {"filename": "/edge_base/chex1/sprites/DOGSG1.lmp", "start": 24064189, "end": 24065445}, {"filename": "/edge_base/chex1/sprites/DOGSG2G8.lmp", "start": 24065445, "end": 24067412}, {"filename": "/edge_base/chex1/sprites/DOGSG3G7.lmp", "start": 24067412, "end": 24069650}, {"filename": "/edge_base/chex1/sprites/DOGSG4G6.lmp", "start": 24069650, "end": 24071559}, {"filename": "/edge_base/chex1/sprites/DOGSG5.lmp", "start": 24071559, "end": 24072912}, {"filename": "/edge_base/chex1/sprites/DOGSH1.lmp", "start": 24072912, "end": 24074239}, {"filename": "/edge_base/chex1/sprites/DOGSH2H8.lmp", "start": 24074239, "end": 24076127}, {"filename": "/edge_base/chex1/sprites/DOGSH3H7.lmp", "start": 24076127, "end": 24078234}, {"filename": "/edge_base/chex1/sprites/DOGSH4H6.lmp", "start": 24078234, "end": 24080110}, {"filename": "/edge_base/chex1/sprites/DOGSH5.lmp", "start": 24080110, "end": 24081511}, {"filename": "/edge_base/chex1/sprites/DOGSI0.lmp", "start": 24081511, "end": 24082845}, {"filename": "/edge_base/chex1/sprites/DOGSJ0.lmp", "start": 24082845, "end": 24084380}, {"filename": "/edge_base/chex1/sprites/DOGSK0.lmp", "start": 24084380, "end": 24086138}, {"filename": "/edge_base/chex1/sprites/DOGSL0.lmp", "start": 24086138, "end": 24087092}, {"filename": "/edge_base/chex1/sprites/DOGSM0.lmp", "start": 24087092, "end": 24087319}, {"filename": "/edge_base/chex1/sprites/DOGSN0.lmp", "start": 24087319, "end": 24087437}, {"filename": "/edge_base/chex3v/graphics/BOSSBACK.lmp", "start": 24087437, "end": 24206725}, {"filename": "/edge_base/chex3v/graphics/CQ1TITLE.lmp", "start": 24206725, "end": 24326013}, {"filename": "/edge_base/chex3v/graphics/CQ2TITLE.lmp", "start": 24326013, "end": 24445301}, {"filename": "/edge_base/chex3v/graphics/ENDPIC.lmp", "start": 24445301, "end": 24564589}, {"filename": "/edge_base/chex3v/graphics/HELP.lmp", "start": 24564589, "end": 24683877}, {"filename": "/edge_base/chex3v/graphics/HELP2.lmp", "start": 24683877, "end": 24803165}, {"filename": "/edge_base/chex3v/graphics/INTERPIC.lmp", "start": 24803165, "end": 24922453}, {"filename": "/edge_base/chex3v/graphics/M_SKULL1.png", "start": 24922453, "end": 24923020}, {"filename": "/edge_base/chex3v/graphics/M_SKULL2.png", "start": 24923020, "end": 24923768}, {"filename": "/edge_base/chex3v/graphics/PFUB0.lmp", "start": 24923768, "end": 25111216}, {"filename": "/edge_base/chex3v/graphics/PFUB1.lmp", "start": 25111216, "end": 25179384}, {"filename": "/edge_base/chex3v/graphics/PFUB2.lmp", "start": 25179384, "end": 25298672}, {"filename": "/edge_base/chex3v/graphics/STBAR.lmp", "start": 25298672, "end": 25321640}, {"filename": "/edge_base/chex3v/graphics/VICTORY2.lmp", "start": 25321640, "end": 25440928}, {"filename": "/edge_base/chex3v/graphics/WIMAP1.lmp", "start": 25440928, "end": 25560216}, {"filename": "/edge_base/chex3v/graphics/WIMAP2.lmp", "start": 25560216, "end": 25679504}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT033.lmp", "start": 25679504, "end": 25679621}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT034.lmp", "start": 25679621, "end": 25679754}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT035.lmp", "start": 25679754, "end": 25680005}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT036.lmp", "start": 25680005, "end": 25680332}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT037.lmp", "start": 25680332, "end": 25680595}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT038.lmp", "start": 25680595, "end": 25680687}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT039.lmp", "start": 25680687, "end": 25680845}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT040.lmp", "start": 25680845, "end": 25681003}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT041.lmp", "start": 25681003, "end": 25681163}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT042.lmp", "start": 25681163, "end": 25681283}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT043.lmp", "start": 25681283, "end": 25681358}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT044.lmp", "start": 25681358, "end": 25681436}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT045.lmp", "start": 25681436, "end": 25681510}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT046.lmp", "start": 25681510, "end": 25681701}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT047.lmp", "start": 25681701, "end": 25681928}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT048.lmp", "start": 25681928, "end": 25682066}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT049.lmp", "start": 25682066, "end": 25682310}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT050.lmp", "start": 25682310, "end": 25682557}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT051.lmp", "start": 25682557, "end": 25682763}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT052.lmp", "start": 25682763, "end": 25683007}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT053.lmp", "start": 25683007, "end": 25683246}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT054.lmp", "start": 25683246, "end": 25683444}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT055.lmp", "start": 25683444, "end": 25683671}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT056.lmp", "start": 25683671, "end": 25683910}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT057.lmp", "start": 25683910, "end": 25683998}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT058.lmp", "start": 25683998, "end": 25684104}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT059.lmp", "start": 25684104, "end": 25684265}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT060.lmp", "start": 25684265, "end": 25684357}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT061.lmp", "start": 25684357, "end": 25684518}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT062.lmp", "start": 25684518, "end": 25684712}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT063.lmp", "start": 25684712, "end": 25684933}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT064.lmp", "start": 25684933, "end": 25685134}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT065.lmp", "start": 25685134, "end": 25685337}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT066.lmp", "start": 25685337, "end": 25685563}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT067.lmp", "start": 25685563, "end": 25685759}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT068.lmp", "start": 25685759, "end": 25685917}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT069.lmp", "start": 25685917, "end": 25686142}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT070.lmp", "start": 25686142, "end": 25686369}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT071.lmp", "start": 25686369, "end": 25686480}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT072.lmp", "start": 25686480, "end": 25686671}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT073.lmp", "start": 25686671, "end": 25686877}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT074.lmp", "start": 25686877, "end": 25687039}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT075.lmp", "start": 25687039, "end": 25687327}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT076.lmp", "start": 25687327, "end": 25687550}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT077.lmp", "start": 25687550, "end": 25687773}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT078.lmp", "start": 25687773, "end": 25687943}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT079.lmp", "start": 25687943, "end": 25688172}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT080.lmp", "start": 25688172, "end": 25688386}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT081.lmp", "start": 25688386, "end": 25688590}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT082.lmp", "start": 25688590, "end": 25688749}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT083.lmp", "start": 25688749, "end": 25688970}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT084.lmp", "start": 25688970, "end": 25689166}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT085.lmp", "start": 25689166, "end": 25689483}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT086.lmp", "start": 25689483, "end": 25689685}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT087.lmp", "start": 25689685, "end": 25689855}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT088.lmp", "start": 25689855, "end": 25690055}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT089.lmp", "start": 25690055, "end": 25690273}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT090.lmp", "start": 25690273, "end": 25690464}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT091.lmp", "start": 25690464, "end": 25690682}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT092.lmp", "start": 25690682, "end": 25690865}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT093.lmp", "start": 25690865, "end": 25690945}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT094.lmp", "start": 25690945, "end": 25691037}, {"filename": "/edge_base/chex3v/graphics/credit.lmp", "start": 25691037, "end": 25810325}, {"filename": "/edge_base/chex3v/graphics/help1.lmp", "start": 25810325, "end": 25929613}, {"filename": "/edge_base/chex3v/graphics/titlepic.lmp", "start": 25929613, "end": 26048901}, {"filename": "/edge_base/chex3v/graphics/wimap0.lmp", "start": 26048901, "end": 26168189}, {"filename": "/edge_base/chex3v/scripts/UMAPINFO.txt", "start": 26168189, "end": 26172081}, {"filename": "/edge_base/chex3v/scripts/fonts.ddf", "start": 26172081, "end": 26172685}, {"filename": "/edge_base/chex3v/scripts/games.ddf", "start": 26172685, "end": 26175100}, {"filename": "/edge_base/chex3v/scripts/language.ldf", "start": 26175100, "end": 26175813}, {"filename": "/edge_base/chex3v/scripts/levels.ddf", "start": 26175813, "end": 26181029}, {"filename": "/edge_base/chex3v/scripts/rscript.rts", "start": 26181029, "end": 26181404}, {"filename": "/edge_base/chex3v/scripts/styles.ddf", "start": 26181404, "end": 26184323}, {"filename": "/edge_base/chex3v/scripts/things.ddf", "start": 26184323, "end": 26186376}, {"filename": "/edge_base/chex3vm/graphics/BOSSBACK.lmp", "start": 26186376, "end": 26305664}, {"filename": "/edge_base/chex3vm/graphics/CQ1TITLE.lmp", "start": 26305664, "end": 26424952}, {"filename": "/edge_base/chex3vm/graphics/CQ2TITLE.lmp", "start": 26424952, "end": 26544240}, {"filename": "/edge_base/chex3vm/graphics/CREDIT.lmp", "start": 26544240, "end": 26663528}, {"filename": "/edge_base/chex3vm/graphics/ENDPIC.lmp", "start": 26663528, "end": 26782816}, {"filename": "/edge_base/chex3vm/graphics/HELP.lmp", "start": 26782816, "end": 26902104}, {"filename": "/edge_base/chex3vm/graphics/HELP1.lmp", "start": 26902104, "end": 27021392}, {"filename": "/edge_base/chex3vm/graphics/HELP2.lmp", "start": 27021392, "end": 27140680}, {"filename": "/edge_base/chex3vm/graphics/INTERPIC.lmp", "start": 27140680, "end": 27259968}, {"filename": "/edge_base/chex3vm/graphics/M_SKULL1.png", "start": 27259968, "end": 27260535}, {"filename": "/edge_base/chex3vm/graphics/M_SKULL2.png", "start": 27260535, "end": 27261283}, {"filename": "/edge_base/chex3vm/graphics/PFUB0.lmp", "start": 27261283, "end": 27448731}, {"filename": "/edge_base/chex3vm/graphics/PFUB1.lmp", "start": 27448731, "end": 27516899}, {"filename": "/edge_base/chex3vm/graphics/PFUB2.lmp", "start": 27516899, "end": 27636187}, {"filename": "/edge_base/chex3vm/graphics/STBAR.lmp", "start": 27636187, "end": 27659155}, {"filename": "/edge_base/chex3vm/graphics/TITLEPIC.lmp", "start": 27659155, "end": 27778443}, {"filename": "/edge_base/chex3vm/graphics/VICTORY2.lmp", "start": 27778443, "end": 27897731}, {"filename": "/edge_base/chex3vm/graphics/WIMAP0.lmp", "start": 27897731, "end": 28017019}, {"filename": "/edge_base/chex3vm/graphics/WIMAP1.lmp", "start": 28017019, "end": 28136307}, {"filename": "/edge_base/chex3vm/graphics/WIMAP2.lmp", "start": 28136307, "end": 28255595}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT033.lmp", "start": 28255595, "end": 28255712}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT034.lmp", "start": 28255712, "end": 28255845}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT035.lmp", "start": 28255845, "end": 28256096}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT036.lmp", "start": 28256096, "end": 28256423}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT037.lmp", "start": 28256423, "end": 28256686}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT038.lmp", "start": 28256686, "end": 28256778}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT039.lmp", "start": 28256778, "end": 28256936}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT040.lmp", "start": 28256936, "end": 28257094}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT041.lmp", "start": 28257094, "end": 28257254}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT042.lmp", "start": 28257254, "end": 28257374}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT043.lmp", "start": 28257374, "end": 28257449}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT044.lmp", "start": 28257449, "end": 28257527}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT045.lmp", "start": 28257527, "end": 28257601}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT046.lmp", "start": 28257601, "end": 28257792}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT047.lmp", "start": 28257792, "end": 28258019}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT048.lmp", "start": 28258019, "end": 28258157}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT049.lmp", "start": 28258157, "end": 28258401}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT050.lmp", "start": 28258401, "end": 28258648}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT051.lmp", "start": 28258648, "end": 28258854}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT052.lmp", "start": 28258854, "end": 28259098}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT053.lmp", "start": 28259098, "end": 28259337}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT054.lmp", "start": 28259337, "end": 28259535}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT055.lmp", "start": 28259535, "end": 28259762}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT056.lmp", "start": 28259762, "end": 28260001}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT057.lmp", "start": 28260001, "end": 28260089}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT058.lmp", "start": 28260089, "end": 28260195}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT059.lmp", "start": 28260195, "end": 28260356}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT060.lmp", "start": 28260356, "end": 28260448}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT061.lmp", "start": 28260448, "end": 28260609}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT062.lmp", "start": 28260609, "end": 28260803}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT063.lmp", "start": 28260803, "end": 28261024}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT064.lmp", "start": 28261024, "end": 28261225}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT065.lmp", "start": 28261225, "end": 28261428}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT066.lmp", "start": 28261428, "end": 28261654}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT067.lmp", "start": 28261654, "end": 28261850}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT068.lmp", "start": 28261850, "end": 28262008}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT069.lmp", "start": 28262008, "end": 28262233}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT070.lmp", "start": 28262233, "end": 28262460}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT071.lmp", "start": 28262460, "end": 28262571}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT072.lmp", "start": 28262571, "end": 28262762}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT073.lmp", "start": 28262762, "end": 28262968}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT074.lmp", "start": 28262968, "end": 28263130}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT075.lmp", "start": 28263130, "end": 28263418}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT076.lmp", "start": 28263418, "end": 28263641}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT077.lmp", "start": 28263641, "end": 28263864}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT078.lmp", "start": 28263864, "end": 28264034}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT079.lmp", "start": 28264034, "end": 28264263}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT080.lmp", "start": 28264263, "end": 28264477}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT081.lmp", "start": 28264477, "end": 28264681}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT082.lmp", "start": 28264681, "end": 28264840}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT083.lmp", "start": 28264840, "end": 28265061}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT084.lmp", "start": 28265061, "end": 28265257}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT085.lmp", "start": 28265257, "end": 28265574}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT086.lmp", "start": 28265574, "end": 28265776}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT087.lmp", "start": 28265776, "end": 28265946}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT088.lmp", "start": 28265946, "end": 28266146}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT089.lmp", "start": 28266146, "end": 28266364}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT090.lmp", "start": 28266364, "end": 28266555}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT091.lmp", "start": 28266555, "end": 28266773}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT092.lmp", "start": 28266773, "end": 28266956}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT093.lmp", "start": 28266956, "end": 28267036}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT094.lmp", "start": 28267036, "end": 28267128}, {"filename": "/edge_base/chex3vm/scripts/fonts.ddf", "start": 28267128, "end": 28267732}, {"filename": "/edge_base/chex3vm/scripts/games.ddf", "start": 28267732, "end": 28268612}, {"filename": "/edge_base/chex3vm/scripts/language.ldf", "start": 28268612, "end": 28269257}, {"filename": "/edge_base/chex3vm/scripts/levels.ddf", "start": 28269257, "end": 28276248}, {"filename": "/edge_base/chex3vm/scripts/styles.ddf", "start": 28276248, "end": 28279167}, {"filename": "/edge_base/chex3vm/scripts/things.ddf", "start": 28279167, "end": 28282183}, {"filename": "/edge_base/doom/doom_wadfix.wad", "start": 28282183, "end": 28282297}, {"filename": "/edge_base/doom/graphics/CREDIT.lmp", "start": 28282297, "end": 28401585}, {"filename": "/edge_base/doom/graphics/ENDPIC.lmp", "start": 28401585, "end": 28520873}, {"filename": "/edge_base/doom/graphics/HELP1.lmp", "start": 28520873, "end": 28640161}, {"filename": "/edge_base/doom/graphics/INTERPIC.lmp", "start": 28640161, "end": 28759449}, {"filename": "/edge_base/doom/graphics/PFUB1.lmp", "start": 28759449, "end": 28878737}, {"filename": "/edge_base/doom/graphics/PFUB2.lmp", "start": 28878737, "end": 28998025}, {"filename": "/edge_base/doom/graphics/TITLEPIC.lmp", "start": 28998025, "end": 29117313}, {"filename": "/edge_base/doom/graphics/VICTORY2.lmp", "start": 29117313, "end": 29236601}, {"filename": "/edge_base/doom/graphics/WIA20000.lmp", "start": 29236601, "end": 29265721}, {"filename": "/edge_base/doom/graphics/WIA20001.lmp", "start": 29265721, "end": 29294841}, {"filename": "/edge_base/doom/graphics/WIA20002.lmp", "start": 29294841, "end": 29323961}, {"filename": "/edge_base/doom/graphics/WIA20400.lmp", "start": 29323961, "end": 29329559}, {"filename": "/edge_base/doom/graphics/WIA20401.lmp", "start": 29329559, "end": 29335157}, {"filename": "/edge_base/doom/graphics/WIA20402.lmp", "start": 29335157, "end": 29340755}, {"filename": "/edge_base/doom/graphics/WIA20500.lmp", "start": 29340755, "end": 29353963}, {"filename": "/edge_base/doom/graphics/WIA20501.lmp", "start": 29353963, "end": 29367171}, {"filename": "/edge_base/doom/graphics/WIA20502.lmp", "start": 29367171, "end": 29380379}, {"filename": "/edge_base/doom/graphics/WIMAP0.lmp", "start": 29380379, "end": 29499667}, {"filename": "/edge_base/doom/graphics/WIMAP1.lmp", "start": 29499667, "end": 29618955}, {"filename": "/edge_base/doom/graphics/WIMAP2.lmp", "start": 29618955, "end": 29738243}, {"filename": "/edge_base/doom/scripts/games.ddf", "start": 29738243, "end": 29738654}, {"filename": "/edge_base/doom/scripts/images.ddf", "start": 29738654, "end": 29740377}, {"filename": "/edge_base/doom/textures/SKY1_B.png", "start": 29740377, "end": 29755020}, {"filename": "/edge_base/doom/textures/SKY1_E.png", "start": 29755020, "end": 29778199}, {"filename": "/edge_base/doom/textures/SKY1_N.png", "start": 29778199, "end": 29801086}, {"filename": "/edge_base/doom/textures/SKY1_S.png", "start": 29801086, "end": 29823711}, {"filename": "/edge_base/doom/textures/SKY1_T.png", "start": 29823711, "end": 29850903}, {"filename": "/edge_base/doom/textures/SKY1_W.png", "start": 29850903, "end": 29873746}, {"filename": "/edge_base/doom/textures/SKY2_B.png", "start": 29873746, "end": 29890613}, {"filename": "/edge_base/doom/textures/SKY2_E.png", "start": 29890613, "end": 29917182}, {"filename": "/edge_base/doom/textures/SKY2_N.png", "start": 29917182, "end": 29944038}, {"filename": "/edge_base/doom/textures/SKY2_S.png", "start": 29944038, "end": 29971538}, {"filename": "/edge_base/doom/textures/SKY2_T.png", "start": 29971538, "end": 29995892}, {"filename": "/edge_base/doom/textures/SKY2_W.png", "start": 29995892, "end": 30022079}, {"filename": "/edge_base/doom/textures/SKY3_B.png", "start": 30022079, "end": 30034062}, {"filename": "/edge_base/doom/textures/SKY3_E.png", "start": 30034062, "end": 30053628}, {"filename": "/edge_base/doom/textures/SKY3_N.png", "start": 30053628, "end": 30073329}, {"filename": "/edge_base/doom/textures/SKY3_S.png", "start": 30073329, "end": 30093663}, {"filename": "/edge_base/doom/textures/SKY3_T.png", "start": 30093663, "end": 30118106}, {"filename": "/edge_base/doom/textures/SKY3_W.png", "start": 30118106, "end": 30137151}, {"filename": "/edge_base/doom/textures/SKY4_B.png", "start": 30137151, "end": 30175487}, {"filename": "/edge_base/doom/textures/SKY4_E.png", "start": 30175487, "end": 30188096}, {"filename": "/edge_base/doom/textures/SKY4_N.png", "start": 30188096, "end": 30199812}, {"filename": "/edge_base/doom/textures/SKY4_S.png", "start": 30199812, "end": 30211528}, {"filename": "/edge_base/doom/textures/SKY4_T.png", "start": 30211528, "end": 30249864}, {"filename": "/edge_base/doom/textures/SKY4_W.png", "start": 30249864, "end": 30262473}, {"filename": "/edge_base/doom1/doom1_wadfix.wad", "start": 30262473, "end": 30262587}, {"filename": "/edge_base/doom1/graphics/CREDIT.lmp", "start": 30262587, "end": 30381875}, {"filename": "/edge_base/doom1/graphics/HELP1.lmp", "start": 30381875, "end": 30501163}, {"filename": "/edge_base/doom1/graphics/HELP2.lmp", "start": 30501163, "end": 30620451}, {"filename": "/edge_base/doom1/graphics/TITLEPIC.lmp", "start": 30620451, "end": 30739739}, {"filename": "/edge_base/doom1/graphics/WIMAP0.lmp", "start": 30739739, "end": 30859027}, {"filename": "/edge_base/doom1/scripts/images.ddf", "start": 30859027, "end": 30860759}, {"filename": "/edge_base/doom1/textures/SKY1_B.png", "start": 30860759, "end": 30875402}, {"filename": "/edge_base/doom1/textures/SKY1_E.png", "start": 30875402, "end": 30898581}, {"filename": "/edge_base/doom1/textures/SKY1_N.png", "start": 30898581, "end": 30921468}, {"filename": "/edge_base/doom1/textures/SKY1_S.png", "start": 30921468, "end": 30944093}, {"filename": "/edge_base/doom1/textures/SKY1_T.png", "start": 30944093, "end": 30971285}, {"filename": "/edge_base/doom1/textures/SKY1_W.png", "start": 30971285, "end": 30994128}, {"filename": "/edge_base/doom2/graphics/BOSSBACK.lmp", "start": 30994128, "end": 31113416}, {"filename": "/edge_base/doom2/graphics/CREDIT.lmp", "start": 31113416, "end": 31232704}, {"filename": "/edge_base/doom2/graphics/HELP.lmp", "start": 31232704, "end": 31351992}, {"filename": "/edge_base/doom2/graphics/INTERPIC.lmp", "start": 31351992, "end": 31471280}, {"filename": "/edge_base/doom2/graphics/TITLEPIC.lmp", "start": 31471280, "end": 31590568}, {"filename": "/edge_base/doom2/scripts/games.ddf", "start": 31590568, "end": 31590999}, {"filename": "/edge_base/doom2/scripts/images.ddf", "start": 31590999, "end": 31592337}, {"filename": "/edge_base/doom2/textures/SKY1_B.png", "start": 31592337, "end": 31613617}, {"filename": "/edge_base/doom2/textures/SKY1_E.png", "start": 31613617, "end": 31631297}, {"filename": "/edge_base/doom2/textures/SKY1_N.png", "start": 31631297, "end": 31648977}, {"filename": "/edge_base/doom2/textures/SKY1_S.png", "start": 31648977, "end": 31666657}, {"filename": "/edge_base/doom2/textures/SKY1_T.png", "start": 31666657, "end": 31687937}, {"filename": "/edge_base/doom2/textures/SKY1_W.png", "start": 31687937, "end": 31705617}, {"filename": "/edge_base/doom2/textures/SKY2_B.png", "start": 31705617, "end": 31719540}, {"filename": "/edge_base/doom2/textures/SKY2_E.png", "start": 31719540, "end": 31744759}, {"filename": "/edge_base/doom2/textures/SKY2_N.png", "start": 31744759, "end": 31769991}, {"filename": "/edge_base/doom2/textures/SKY2_S.png", "start": 31769991, "end": 31795194}, {"filename": "/edge_base/doom2/textures/SKY2_T.png", "start": 31795194, "end": 31819946}, {"filename": "/edge_base/doom2/textures/SKY2_W.png", "start": 31819946, "end": 31845150}, {"filename": "/edge_base/doom2/textures/SKY3_B.png", "start": 31845150, "end": 31928720}, {"filename": "/edge_base/doom2/textures/SKY3_E.png", "start": 31928720, "end": 32023529}, {"filename": "/edge_base/doom2/textures/SKY3_N.png", "start": 32023529, "end": 32122300}, {"filename": "/edge_base/doom2/textures/SKY3_S.png", "start": 32122300, "end": 32221071}, {"filename": "/edge_base/doom2/textures/SKY3_T.png", "start": 32221071, "end": 32407562}, {"filename": "/edge_base/doom2/textures/SKY3_W.png", "start": 32407562, "end": 32502371}, {"filename": "/edge_base/freedoom1/freedoom_wadfix.wad", "start": 32502371, "end": 32502485}, {"filename": "/edge_base/freedoom1/graphics/STBARL.lmp", "start": 32502485, "end": 32505896}, {"filename": "/edge_base/freedoom1/graphics/STBARR.lmp", "start": 32505896, "end": 32509307}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT033.png", "start": 32509307, "end": 32509652}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT034.png", "start": 32509652, "end": 32509999}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT035.png", "start": 32509999, "end": 32510430}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT036.png", "start": 32510430, "end": 32510839}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT037.png", "start": 32510839, "end": 32511260}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT038.png", "start": 32511260, "end": 32511707}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT039.png", "start": 32511707, "end": 32512028}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT040.png", "start": 32512028, "end": 32512418}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT041.png", "start": 32512418, "end": 32512807}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT042.png", "start": 32512807, "end": 32513258}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT043.png", "start": 32513258, "end": 32513617}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT044.png", "start": 32513617, "end": 32513941}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT045.png", "start": 32513941, "end": 32514254}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT046.png", "start": 32514254, "end": 32514550}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT047.png", "start": 32514550, "end": 32514973}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT048.png", "start": 32514973, "end": 32515378}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT049.png", "start": 32515378, "end": 32515758}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT050.png", "start": 32515758, "end": 32516166}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT051.png", "start": 32516166, "end": 32516629}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT052.png", "start": 32516629, "end": 32517048}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT053.png", "start": 32517048, "end": 32517456}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT054.png", "start": 32517456, "end": 32517864}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT055.png", "start": 32517864, "end": 32518268}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT056.png", "start": 32518268, "end": 32518740}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT057.png", "start": 32518740, "end": 32519155}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT058.png", "start": 32519155, "end": 32519503}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT059.png", "start": 32519503, "end": 32519864}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT060.png", "start": 32519864, "end": 32520233}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT061.png", "start": 32520233, "end": 32520574}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT062.png", "start": 32520574, "end": 32520995}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT063.png", "start": 32520995, "end": 32521398}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT064.png", "start": 32521398, "end": 32521816}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT065.png", "start": 32521816, "end": 32522319}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT066.png", "start": 32522319, "end": 32522744}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT067.png", "start": 32522744, "end": 32523147}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT068.png", "start": 32523147, "end": 32523580}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT069.png", "start": 32523580, "end": 32523996}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT070.png", "start": 32523996, "end": 32524401}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT071.png", "start": 32524401, "end": 32524820}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT072.png", "start": 32524820, "end": 32525245}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT073.png", "start": 32525245, "end": 32525647}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT074.png", "start": 32525647, "end": 32526116}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT075.png", "start": 32526116, "end": 32526550}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT076.png", "start": 32526550, "end": 32526939}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT077.png", "start": 32526939, "end": 32527394}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT078.png", "start": 32527394, "end": 32527904}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT079.png", "start": 32527904, "end": 32528314}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT080.png", "start": 32528314, "end": 32528721}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT081.png", "start": 32528721, "end": 32529138}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT082.png", "start": 32529138, "end": 32529557}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT083.png", "start": 32529557, "end": 32529983}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT084.png", "start": 32529983, "end": 32530368}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT085.png", "start": 32530368, "end": 32530783}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT086.png", "start": 32530783, "end": 32531207}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT087.png", "start": 32531207, "end": 32531652}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT088.png", "start": 32531652, "end": 32532078}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT089.png", "start": 32532078, "end": 32532543}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT090.png", "start": 32532543, "end": 32532961}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT091.png", "start": 32532961, "end": 32533348}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT092.png", "start": 32533348, "end": 32533782}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT093.png", "start": 32533782, "end": 32534178}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT094.png", "start": 32534178, "end": 32534529}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT095.png", "start": 32534529, "end": 32534842}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT096.png", "start": 32534842, "end": 32535162}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT097.png", "start": 32535162, "end": 32535620}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT098.png", "start": 32535620, "end": 32536020}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT099.png", "start": 32536020, "end": 32536454}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT100.png", "start": 32536454, "end": 32536861}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT101.png", "start": 32536861, "end": 32537257}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT102.png", "start": 32537257, "end": 32537648}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT103.png", "start": 32537648, "end": 32538092}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT104.png", "start": 32538092, "end": 32538494}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT105.png", "start": 32538494, "end": 32538874}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT106.png", "start": 32538874, "end": 32539318}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT107.png", "start": 32539318, "end": 32539787}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT108.png", "start": 32539787, "end": 32540161}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT109.png", "start": 32540161, "end": 32540582}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT110.png", "start": 32540582, "end": 32540998}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT111.png", "start": 32540998, "end": 32541447}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT112.png", "start": 32541447, "end": 32541837}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT113.png", "start": 32541837, "end": 32542295}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT114.png", "start": 32542295, "end": 32542692}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT115.png", "start": 32542692, "end": 32543103}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT116.png", "start": 32543103, "end": 32543537}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT117.png", "start": 32543537, "end": 32543939}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT118.png", "start": 32543939, "end": 32544400}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT119.png", "start": 32544400, "end": 32544817}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT120.png", "start": 32544817, "end": 32545261}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT121.png", "start": 32545261, "end": 32545654}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT122.png", "start": 32545654, "end": 32546089}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT123.png", "start": 32546089, "end": 32546479}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT124.png", "start": 32546479, "end": 32546840}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT125.png", "start": 32546840, "end": 32547228}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT126.png", "start": 32547228, "end": 32547618}, {"filename": "/edge_base/freedoom1/scripts/attacks.ddf", "start": 32547618, "end": 32567906}, {"filename": "/edge_base/freedoom1/scripts/fonts.ddf", "start": 32567906, "end": 32568544}, {"filename": "/edge_base/freedoom1/scripts/games.ddf", "start": 32568544, "end": 32568955}, {"filename": "/edge_base/freedoom1/scripts/images.ddf", "start": 32568955, "end": 32576151}, {"filename": "/edge_base/freedoom1/scripts/language.ldf", "start": 32576151, "end": 32586988}, {"filename": "/edge_base/freedoom1/scripts/styles.ddf", "start": 32586988, "end": 32591916}, {"filename": "/edge_base/freedoom1/scripts/things.ddf", "start": 32591916, "end": 32600234}, {"filename": "/edge_base/freedoom2/graphics/STBARL.lmp", "start": 32600234, "end": 32603645}, {"filename": "/edge_base/freedoom2/graphics/STBARR.lmp", "start": 32603645, "end": 32607056}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT033.png", "start": 32607056, "end": 32607401}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT034.png", "start": 32607401, "end": 32607748}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT035.png", "start": 32607748, "end": 32608179}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT036.png", "start": 32608179, "end": 32608588}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT037.png", "start": 32608588, "end": 32609009}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT038.png", "start": 32609009, "end": 32609456}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT039.png", "start": 32609456, "end": 32609777}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT040.png", "start": 32609777, "end": 32610167}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT041.png", "start": 32610167, "end": 32610556}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT042.png", "start": 32610556, "end": 32611007}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT043.png", "start": 32611007, "end": 32611366}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT044.png", "start": 32611366, "end": 32611690}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT045.png", "start": 32611690, "end": 32612003}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT046.png", "start": 32612003, "end": 32612299}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT047.png", "start": 32612299, "end": 32612722}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT048.png", "start": 32612722, "end": 32613127}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT049.png", "start": 32613127, "end": 32613507}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT050.png", "start": 32613507, "end": 32613915}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT051.png", "start": 32613915, "end": 32614378}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT052.png", "start": 32614378, "end": 32614797}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT053.png", "start": 32614797, "end": 32615205}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT054.png", "start": 32615205, "end": 32615613}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT055.png", "start": 32615613, "end": 32616017}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT056.png", "start": 32616017, "end": 32616489}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT057.png", "start": 32616489, "end": 32616904}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT058.png", "start": 32616904, "end": 32617252}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT059.png", "start": 32617252, "end": 32617613}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT060.png", "start": 32617613, "end": 32617982}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT061.png", "start": 32617982, "end": 32618323}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT062.png", "start": 32618323, "end": 32618744}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT063.png", "start": 32618744, "end": 32619147}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT064.png", "start": 32619147, "end": 32619565}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT065.png", "start": 32619565, "end": 32620068}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT066.png", "start": 32620068, "end": 32620493}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT067.png", "start": 32620493, "end": 32620896}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT068.png", "start": 32620896, "end": 32621329}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT069.png", "start": 32621329, "end": 32621745}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT070.png", "start": 32621745, "end": 32622150}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT071.png", "start": 32622150, "end": 32622569}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT072.png", "start": 32622569, "end": 32622994}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT073.png", "start": 32622994, "end": 32623396}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT074.png", "start": 32623396, "end": 32623865}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT075.png", "start": 32623865, "end": 32624299}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT076.png", "start": 32624299, "end": 32624688}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT077.png", "start": 32624688, "end": 32625143}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT078.png", "start": 32625143, "end": 32625653}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT079.png", "start": 32625653, "end": 32626063}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT080.png", "start": 32626063, "end": 32626470}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT081.png", "start": 32626470, "end": 32626887}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT082.png", "start": 32626887, "end": 32627306}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT083.png", "start": 32627306, "end": 32627732}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT084.png", "start": 32627732, "end": 32628117}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT085.png", "start": 32628117, "end": 32628532}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT086.png", "start": 32628532, "end": 32628956}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT087.png", "start": 32628956, "end": 32629401}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT088.png", "start": 32629401, "end": 32629827}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT089.png", "start": 32629827, "end": 32630292}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT090.png", "start": 32630292, "end": 32630710}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT091.png", "start": 32630710, "end": 32631097}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT092.png", "start": 32631097, "end": 32631531}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT093.png", "start": 32631531, "end": 32631927}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT094.png", "start": 32631927, "end": 32632278}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT095.png", "start": 32632278, "end": 32632591}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT096.png", "start": 32632591, "end": 32632911}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT097.png", "start": 32632911, "end": 32633369}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT098.png", "start": 32633369, "end": 32633769}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT099.png", "start": 32633769, "end": 32634203}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT100.png", "start": 32634203, "end": 32634610}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT101.png", "start": 32634610, "end": 32635006}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT102.png", "start": 32635006, "end": 32635397}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT103.png", "start": 32635397, "end": 32635841}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT104.png", "start": 32635841, "end": 32636243}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT105.png", "start": 32636243, "end": 32636623}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT106.png", "start": 32636623, "end": 32637067}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT107.png", "start": 32637067, "end": 32637536}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT108.png", "start": 32637536, "end": 32637910}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT109.png", "start": 32637910, "end": 32638331}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT110.png", "start": 32638331, "end": 32638747}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT111.png", "start": 32638747, "end": 32639196}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT112.png", "start": 32639196, "end": 32639586}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT113.png", "start": 32639586, "end": 32640044}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT114.png", "start": 32640044, "end": 32640441}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT115.png", "start": 32640441, "end": 32640852}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT116.png", "start": 32640852, "end": 32641286}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT117.png", "start": 32641286, "end": 32641688}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT118.png", "start": 32641688, "end": 32642149}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT119.png", "start": 32642149, "end": 32642566}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT120.png", "start": 32642566, "end": 32643010}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT121.png", "start": 32643010, "end": 32643403}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT122.png", "start": 32643403, "end": 32643838}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT123.png", "start": 32643838, "end": 32644228}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT124.png", "start": 32644228, "end": 32644589}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT125.png", "start": 32644589, "end": 32644977}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT126.png", "start": 32644977, "end": 32645367}, {"filename": "/edge_base/freedoom2/scripts/attacks.ddf", "start": 32645367, "end": 32665655}, {"filename": "/edge_base/freedoom2/scripts/fonts.ddf", "start": 32665655, "end": 32666293}, {"filename": "/edge_base/freedoom2/scripts/games.ddf", "start": 32666293, "end": 32666724}, {"filename": "/edge_base/freedoom2/scripts/images.ddf", "start": 32666724, "end": 32673920}, {"filename": "/edge_base/freedoom2/scripts/language.ldf", "start": 32673920, "end": 32684621}, {"filename": "/edge_base/freedoom2/scripts/styles.ddf", "start": 32684621, "end": 32689191}, {"filename": "/edge_base/freedoom2/scripts/things.ddf", "start": 32689191, "end": 32697504}, {"filename": "/edge_base/hacx/graphics/CREDIT.lmp", "start": 32697504, "end": 32816792}, {"filename": "/edge_base/hacx/graphics/ENDOOM.bin", "start": 32816792, "end": 32820792}, {"filename": "/edge_base/hacx/graphics/HELP.lmp", "start": 32820792, "end": 32940080}, {"filename": "/edge_base/hacx/graphics/INTERPIC.lmp", "start": 32940080, "end": 33059368}, {"filename": "/edge_base/hacx/graphics/STBARL.lmp", "start": 33059368, "end": 33062779}, {"filename": "/edge_base/hacx/graphics/STBARR.lmp", "start": 33062779, "end": 33066190}, {"filename": "/edge_base/hacx/graphics/TITLEPIC.lmp", "start": 33066190, "end": 33185478}, {"filename": "/edge_base/hacx/scripts/anims.ddf", "start": 33185478, "end": 33188413}, {"filename": "/edge_base/hacx/scripts/attacks.ddf", "start": 33188413, "end": 33195587}, {"filename": "/edge_base/hacx/scripts/colmap.ddf", "start": 33195587, "end": 33195855}, {"filename": "/edge_base/hacx/scripts/flats.ddf", "start": 33195855, "end": 33196235}, {"filename": "/edge_base/hacx/scripts/fonts.ddf", "start": 33196235, "end": 33196862}, {"filename": "/edge_base/hacx/scripts/games.ddf", "start": 33196862, "end": 33197293}, {"filename": "/edge_base/hacx/scripts/language.ldf", "start": 33197293, "end": 33202953}, {"filename": "/edge_base/hacx/scripts/levels.ddf", "start": 33202953, "end": 33207622}, {"filename": "/edge_base/hacx/scripts/lines.ddf", "start": 33207622, "end": 33208470}, {"filename": "/edge_base/hacx/scripts/playlist.ddf", "start": 33208470, "end": 33209903}, {"filename": "/edge_base/hacx/scripts/styles.ddf", "start": 33209903, "end": 33212508}, {"filename": "/edge_base/hacx/scripts/switch.ddf", "start": 33212508, "end": 33215529}, {"filename": "/edge_base/hacx/scripts/things.ddf", "start": 33215529, "end": 33299316}, {"filename": "/edge_base/hacx/scripts/weapons.ddf", "start": 33299316, "end": 33304333}, {"filename": "/edge_base/hacx/sprites/CHGFA0.lmp", "start": 33304333, "end": 33319137}, {"filename": "/edge_base/hacx/sprites/CHGFB0.lmp", "start": 33319137, "end": 33334163}, {"filename": "/edge_base/hacx/sprites/CHGGA0.lmp", "start": 33334163, "end": 33348737}, {"filename": "/edge_base/hacx/sprites/CHGGB0.lmp", "start": 33348737, "end": 33355094}, {"filename": "/edge_base/hacx/sprites/CRYXHRA0.lmp", "start": 33355094, "end": 33356194}, {"filename": "/edge_base/hacx/sprites/MISFA0.lmp", "start": 33356194, "end": 33396466}, {"filename": "/edge_base/hacx/sprites/MISFB0.lmp", "start": 33396466, "end": 33431632}, {"filename": "/edge_base/hacx/sprites/MISFC0.lmp", "start": 33431632, "end": 33464785}, {"filename": "/edge_base/hacx/sprites/MISFD0.lmp", "start": 33464785, "end": 33501168}, {"filename": "/edge_base/hacx/sprites/MISGA0.lmp", "start": 33501168, "end": 33532698}, {"filename": "/edge_base/hacx/sprites/MISGB0.lmp", "start": 33532698, "end": 33567804}, {"filename": "/edge_base/hacx/sprites/PISGD0.lmp", "start": 33567804, "end": 33591947}, {"filename": "/edge_base/hacx/sprites/PISGE0.lmp", "start": 33591947, "end": 33621613}, {"filename": "/edge_base/hacx/sprites/PLSGA0.lmp", "start": 33621613, "end": 33632477}, {"filename": "/edge_base/hacx/sprites/PLSGB0.lmp", "start": 33632477, "end": 33645871}, {"filename": "/edge_base/hacx/sprites/SAWGA0.lmp", "start": 33645871, "end": 33660320}, {"filename": "/edge_base/hacx/sprites/SAWGB0.lmp", "start": 33660320, "end": 33674428}, {"filename": "/edge_base/hacx/sprites/SAWGC0.lmp", "start": 33674428, "end": 33683513}, {"filename": "/edge_base/hacx/sprites/SAWGD0.lmp", "start": 33683513, "end": 33692598}, {"filename": "/edge_base/hacx/sprites/SHT2A0.lmp", "start": 33692598, "end": 33708109}, {"filename": "/edge_base/hacx/sprites/SHT2B0.lmp", "start": 33708109, "end": 33723850}, {"filename": "/edge_base/hacx/sprites/SHT2C0.lmp", "start": 33723850, "end": 33739883}, {"filename": "/edge_base/hacx/sprites/SHT2D0.lmp", "start": 33739883, "end": 33756010}, {"filename": "/edge_base/hacx/sprites/SHT2E0.lmp", "start": 33756010, "end": 33772296}, {"filename": "/edge_base/hacx/sprites/SHT2F0.lmp", "start": 33772296, "end": 33788450}, {"filename": "/edge_base/hacx/sprites/SHT2G0.lmp", "start": 33788450, "end": 33804266}, {"filename": "/edge_base/hacx/sprites/SHT2H0.lmp", "start": 33804266, "end": 33819777}, {"filename": "/edge_base/hacx/sprites/SHT2I0.lmp", "start": 33819777, "end": 33835460}, {"filename": "/edge_base/hacx/sprites/SHT2J0.lmp", "start": 33835460, "end": 33851665}, {"filename": "/edge_base/hacx/sprites/SHTFA0.lmp", "start": 33851665, "end": 33860727}, {"filename": "/edge_base/hacx/sprites/SHTFB0.lmp", "start": 33860727, "end": 33870218}, {"filename": "/edge_base/hacx/sprites/SHTGA0.lmp", "start": 33870218, "end": 33878877}, {"filename": "/edge_base/hacx/sprites/SHTGB0.lmp", "start": 33878877, "end": 33891959}, {"filename": "/edge_base/hacx/sprites/SHTGC0.lmp", "start": 33891959, "end": 33911198}, {"filename": "/edge_base/hacx/sprites/SHTGD0.lmp", "start": 33911198, "end": 33929445}, {"filename": "/edge_base/harmony/ENDOOM.bin", "start": 33929445, "end": 33933445}, {"filename": "/edge_base/harmony/graphics/BOSSBACK.lmp", "start": 33933445, "end": 34024191}, {"filename": "/edge_base/harmony/graphics/CREDIT.lmp", "start": 34024191, "end": 34114937}, {"filename": "/edge_base/harmony/graphics/CWILV00.lmp", "start": 34114937, "end": 34116987}, {"filename": "/edge_base/harmony/graphics/CWILV01.lmp", "start": 34116987, "end": 34119139}, {"filename": "/edge_base/harmony/graphics/CWILV02.lmp", "start": 34119139, "end": 34120917}, {"filename": "/edge_base/harmony/graphics/CWILV03.lmp", "start": 34120917, "end": 34123517}, {"filename": "/edge_base/harmony/graphics/CWILV04.lmp", "start": 34123517, "end": 34125608}, {"filename": "/edge_base/harmony/graphics/CWILV05.lmp", "start": 34125608, "end": 34129474}, {"filename": "/edge_base/harmony/graphics/CWILV06.lmp", "start": 34129474, "end": 34133062}, {"filename": "/edge_base/harmony/graphics/CWILV07.lmp", "start": 34133062, "end": 34135557}, {"filename": "/edge_base/harmony/graphics/CWILV08.lmp", "start": 34135557, "end": 34138396}, {"filename": "/edge_base/harmony/graphics/CWILV09.lmp", "start": 34138396, "end": 34142231}, {"filename": "/edge_base/harmony/graphics/CWILV10.lmp", "start": 34142231, "end": 34143849}, {"filename": "/edge_base/harmony/graphics/CWILV11.lmp", "start": 34143849, "end": 34145578}, {"filename": "/edge_base/harmony/graphics/HELP.lmp", "start": 34145578, "end": 34234620}, {"filename": "/edge_base/harmony/graphics/INTERPIC.lmp", "start": 34234620, "end": 34325366}, {"filename": "/edge_base/harmony/graphics/M_EPISOD.lmp", "start": 34325366, "end": 34328563}, {"filename": "/edge_base/harmony/graphics/M_JKILL.lmp", "start": 34328563, "end": 34329981}, {"filename": "/edge_base/harmony/graphics/M_NEWG.lmp", "start": 34329981, "end": 34332355}, {"filename": "/edge_base/harmony/graphics/M_NGAME.lmp", "start": 34332355, "end": 34333305}, {"filename": "/edge_base/harmony/graphics/M_RDTHIS.lmp", "start": 34333305, "end": 34335164}, {"filename": "/edge_base/harmony/graphics/M_SAVEG.lmp", "start": 34335164, "end": 34336177}, {"filename": "/edge_base/harmony/graphics/M_THERML.png", "start": 34336177, "end": 34337117}, {"filename": "/edge_base/harmony/graphics/M_THERMM.png", "start": 34337117, "end": 34338046}, {"filename": "/edge_base/harmony/graphics/M_THERMO.png", "start": 34338046, "end": 34338961}, {"filename": "/edge_base/harmony/graphics/M_THERMR.png", "start": 34338961, "end": 34339899}, {"filename": "/edge_base/harmony/graphics/STBARL.lmp", "start": 34339899, "end": 34343310}, {"filename": "/edge_base/harmony/graphics/STBARR.lmp", "start": 34343310, "end": 34346721}, {"filename": "/edge_base/harmony/graphics/TITLEPIC.lmp", "start": 34346721, "end": 34435763}, {"filename": "/edge_base/harmony/graphics/WICOLON.lmp", "start": 34435763, "end": 34435865}, {"filename": "/edge_base/harmony/graphics/WIF.lmp", "start": 34435865, "end": 34435913}, {"filename": "/edge_base/harmony/graphics/WIFRGS.lmp", "start": 34435913, "end": 34437044}, {"filename": "/edge_base/harmony/graphics/WIKILRS.lmp", "start": 34437044, "end": 34437517}, {"filename": "/edge_base/harmony/graphics/WIMINUS.lmp", "start": 34437517, "end": 34437637}, {"filename": "/edge_base/harmony/graphics/WIMSTT.lmp", "start": 34437637, "end": 34438737}, {"filename": "/edge_base/harmony/graphics/WINUM0.lmp", "start": 34438737, "end": 34438987}, {"filename": "/edge_base/harmony/graphics/WINUM1.lmp", "start": 34438987, "end": 34439133}, {"filename": "/edge_base/harmony/graphics/WINUM2.lmp", "start": 34439133, "end": 34439419}, {"filename": "/edge_base/harmony/graphics/WINUM3.lmp", "start": 34439419, "end": 34439672}, {"filename": "/edge_base/harmony/graphics/WINUM4.lmp", "start": 34439672, "end": 34439896}, {"filename": "/edge_base/harmony/graphics/WINUM5.lmp", "start": 34439896, "end": 34440151}, {"filename": "/edge_base/harmony/graphics/WINUM6.lmp", "start": 34440151, "end": 34440413}, {"filename": "/edge_base/harmony/graphics/WINUM7.lmp", "start": 34440413, "end": 34440630}, {"filename": "/edge_base/harmony/graphics/WINUM8.lmp", "start": 34440630, "end": 34440892}, {"filename": "/edge_base/harmony/graphics/WINUM9.lmp", "start": 34440892, "end": 34441151}, {"filename": "/edge_base/harmony/graphics/WIOSTF.lmp", "start": 34441151, "end": 34441391}, {"filename": "/edge_base/harmony/graphics/WIOSTI.lmp", "start": 34441391, "end": 34442839}, {"filename": "/edge_base/harmony/graphics/WIOSTK.lmp", "start": 34442839, "end": 34444184}, {"filename": "/edge_base/harmony/graphics/WIOSTS.lmp", "start": 34444184, "end": 34445353}, {"filename": "/edge_base/harmony/graphics/WIPAR.lmp", "start": 34445353, "end": 34446330}, {"filename": "/edge_base/harmony/graphics/WIPCNT.lmp", "start": 34446330, "end": 34446579}, {"filename": "/edge_base/harmony/graphics/WISCRT2.lmp", "start": 34446579, "end": 34448354}, {"filename": "/edge_base/harmony/graphics/WISUCKS.lmp", "start": 34448354, "end": 34450063}, {"filename": "/edge_base/harmony/graphics/WITIME.lmp", "start": 34450063, "end": 34450910}, {"filename": "/edge_base/harmony/graphics/WIVCTMS.lmp", "start": 34450910, "end": 34451710}, {"filename": "/edge_base/harmony/scripts/attacks.ddf", "start": 34451710, "end": 34459233}, {"filename": "/edge_base/harmony/scripts/colmap.ddf", "start": 34459233, "end": 34459532}, {"filename": "/edge_base/harmony/scripts/flats.ddf", "start": 34459532, "end": 34459853}, {"filename": "/edge_base/harmony/scripts/games.ddf", "start": 34459853, "end": 34460284}, {"filename": "/edge_base/harmony/scripts/language.ldf", "start": 34460284, "end": 34463885}, {"filename": "/edge_base/harmony/scripts/levels.ddf", "start": 34463885, "end": 34479265}, {"filename": "/edge_base/harmony/scripts/lua/edge_hud.lua", "start": 34479265, "end": 34482488}, {"filename": "/edge_base/harmony/scripts/playlist.ddf", "start": 34482488, "end": 34483917}, {"filename": "/edge_base/harmony/scripts/styles.ddf", "start": 34483917, "end": 34486248}, {"filename": "/edge_base/harmony/scripts/things.ddf", "start": 34486248, "end": 34553179}, {"filename": "/edge_base/harmony/scripts/weapons.ddf", "start": 34553179, "end": 34556752}, {"filename": "/edge_base/harmony/sprites/CELLA0.png", "start": 34556752, "end": 34558494}, {"filename": "/edge_base/harmony/sprites/CLIPA0.png", "start": 34558494, "end": 34561180}, {"filename": "/edge_base/harmony/sprites/ROCKA0.png", "start": 34561180, "end": 34562611}, {"filename": "/edge_base/harmony/sprites/SHELA0.png", "start": 34562611, "end": 34564795}, {"filename": "/edge_base/harmonyc/graphics/BOSSBACK.lmp", "start": 34564795, "end": 34653837}, {"filename": "/edge_base/harmonyc/graphics/CREDIT.lmp", "start": 34653837, "end": 34742879}, {"filename": "/edge_base/harmonyc/graphics/CWILV00.lmp", "start": 34742879, "end": 34744929}, {"filename": "/edge_base/harmonyc/graphics/CWILV01.lmp", "start": 34744929, "end": 34747081}, {"filename": "/edge_base/harmonyc/graphics/CWILV02.lmp", "start": 34747081, "end": 34751100}, {"filename": "/edge_base/harmonyc/graphics/CWILV03.lmp", "start": 34751100, "end": 34753700}, {"filename": "/edge_base/harmonyc/graphics/CWILV04.lmp", "start": 34753700, "end": 34755791}, {"filename": "/edge_base/harmonyc/graphics/CWILV05.lmp", "start": 34755791, "end": 34759657}, {"filename": "/edge_base/harmonyc/graphics/CWILV06.lmp", "start": 34759657, "end": 34763245}, {"filename": "/edge_base/harmonyc/graphics/CWILV07.lmp", "start": 34763245, "end": 34765740}, {"filename": "/edge_base/harmonyc/graphics/CWILV08.lmp", "start": 34765740, "end": 34768574}, {"filename": "/edge_base/harmonyc/graphics/CWILV09.lmp", "start": 34768574, "end": 34772409}, {"filename": "/edge_base/harmonyc/graphics/CWILV10.lmp", "start": 34772409, "end": 34774027}, {"filename": "/edge_base/harmonyc/graphics/CWILV11.lmp", "start": 34774027, "end": 34775580}, {"filename": "/edge_base/harmonyc/graphics/CWILV12.lmp", "start": 34775580, "end": 34777230}, {"filename": "/edge_base/harmonyc/graphics/CWILV13.lmp", "start": 34777230, "end": 34779082}, {"filename": "/edge_base/harmonyc/graphics/CWILV14.lmp", "start": 34779082, "end": 34781398}, {"filename": "/edge_base/harmonyc/graphics/CWILV30.lmp", "start": 34781398, "end": 34783250}, {"filename": "/edge_base/harmonyc/graphics/HELP.lmp", "start": 34783250, "end": 34872292}, {"filename": "/edge_base/harmonyc/graphics/INTERPIC.lmp", "start": 34872292, "end": 34963038}, {"filename": "/edge_base/harmonyc/graphics/M_EPISOD.lmp", "start": 34963038, "end": 34966235}, {"filename": "/edge_base/harmonyc/graphics/M_JKILL.lmp", "start": 34966235, "end": 34967653}, {"filename": "/edge_base/harmonyc/graphics/M_NEWG.lmp", "start": 34967653, "end": 34970027}, {"filename": "/edge_base/harmonyc/graphics/M_NGAME.lmp", "start": 34970027, "end": 34970977}, {"filename": "/edge_base/harmonyc/graphics/M_RDTHIS.lmp", "start": 34970977, "end": 34972836}, {"filename": "/edge_base/harmonyc/graphics/M_SAVEG.lmp", "start": 34972836, "end": 34973849}, {"filename": "/edge_base/harmonyc/graphics/M_THERML.lmp", "start": 34973849, "end": 34973989}, {"filename": "/edge_base/harmonyc/graphics/M_THERMM.lmp", "start": 34973989, "end": 34974195}, {"filename": "/edge_base/harmonyc/graphics/M_THERMO.lmp", "start": 34974195, "end": 34974303}, {"filename": "/edge_base/harmonyc/graphics/M_THERMR.lmp", "start": 34974303, "end": 34974443}, {"filename": "/edge_base/harmonyc/graphics/STBAR.lmp", "start": 34974443, "end": 34991917}, {"filename": "/edge_base/harmonyc/graphics/TITLEPIC.lmp", "start": 34991917, "end": 35080959}, {"filename": "/edge_base/harmonyc/graphics/WICOLON.lmp", "start": 35080959, "end": 35081061}, {"filename": "/edge_base/harmonyc/graphics/WIF.lmp", "start": 35081061, "end": 35081109}, {"filename": "/edge_base/harmonyc/graphics/WIFRGS.lmp", "start": 35081109, "end": 35082240}, {"filename": "/edge_base/harmonyc/graphics/WIKILRS.lmp", "start": 35082240, "end": 35082713}, {"filename": "/edge_base/harmonyc/graphics/WIMINUS.lmp", "start": 35082713, "end": 35082833}, {"filename": "/edge_base/harmonyc/graphics/WIMSTT.lmp", "start": 35082833, "end": 35083933}, {"filename": "/edge_base/harmonyc/graphics/WINUM0.lmp", "start": 35083933, "end": 35084183}, {"filename": "/edge_base/harmonyc/graphics/WINUM1.lmp", "start": 35084183, "end": 35084329}, {"filename": "/edge_base/harmonyc/graphics/WINUM2.lmp", "start": 35084329, "end": 35084615}, {"filename": "/edge_base/harmonyc/graphics/WINUM3.lmp", "start": 35084615, "end": 35084868}, {"filename": "/edge_base/harmonyc/graphics/WINUM4.lmp", "start": 35084868, "end": 35085092}, {"filename": "/edge_base/harmonyc/graphics/WINUM5.lmp", "start": 35085092, "end": 35085347}, {"filename": "/edge_base/harmonyc/graphics/WINUM6.lmp", "start": 35085347, "end": 35085609}, {"filename": "/edge_base/harmonyc/graphics/WINUM7.lmp", "start": 35085609, "end": 35085826}, {"filename": "/edge_base/harmonyc/graphics/WINUM8.lmp", "start": 35085826, "end": 35086088}, {"filename": "/edge_base/harmonyc/graphics/WINUM9.lmp", "start": 35086088, "end": 35086347}, {"filename": "/edge_base/harmonyc/graphics/WIOSTF.lmp", "start": 35086347, "end": 35086587}, {"filename": "/edge_base/harmonyc/graphics/WIOSTI.lmp", "start": 35086587, "end": 35088035}, {"filename": "/edge_base/harmonyc/graphics/WIOSTK.lmp", "start": 35088035, "end": 35089380}, {"filename": "/edge_base/harmonyc/graphics/WIOSTS.lmp", "start": 35089380, "end": 35090549}, {"filename": "/edge_base/harmonyc/graphics/WIPAR.lmp", "start": 35090549, "end": 35091526}, {"filename": "/edge_base/harmonyc/graphics/WIPCNT.lmp", "start": 35091526, "end": 35091775}, {"filename": "/edge_base/harmonyc/graphics/WISCRT2.lmp", "start": 35091775, "end": 35093550}, {"filename": "/edge_base/harmonyc/graphics/WISUCKS.lmp", "start": 35093550, "end": 35095259}, {"filename": "/edge_base/harmonyc/graphics/WITIME.lmp", "start": 35095259, "end": 35096106}, {"filename": "/edge_base/harmonyc/graphics/WIVCTMS.lmp", "start": 35096106, "end": 35096906}, {"filename": "/edge_base/harmonyc/scripts/attacks.ddf", "start": 35096906, "end": 35099793}, {"filename": "/edge_base/harmonyc/scripts/colmap.ddf", "start": 35099793, "end": 35100092}, {"filename": "/edge_base/harmonyc/scripts/language.ldf", "start": 35100092, "end": 35100834}, {"filename": "/edge_base/harmonyc/scripts/levels.ddf", "start": 35100834, "end": 35105377}, {"filename": "/edge_base/harmonyc/scripts/lua/edge_hud.lua", "start": 35105377, "end": 35110173}, {"filename": "/edge_base/harmonyc/scripts/styles.ddf", "start": 35110173, "end": 35112504}, {"filename": "/edge_base/harmonyc/scripts/weapons.ddf", "start": 35112504, "end": 35113147}, {"filename": "/edge_base/heretic/graphics/BARBACK.lmp", "start": 35113147, "end": 35133661}, {"filename": "/edge_base/heretic/graphics/CREDIT.lmp", "start": 35133661, "end": 35252949}, {"filename": "/edge_base/heretic/graphics/E2END.png", "start": 35252949, "end": 35309373}, {"filename": "/edge_base/heretic/graphics/FINAL1.lmp", "start": 35309373, "end": 35428661}, {"filename": "/edge_base/heretic/graphics/FINAL2.lmp", "start": 35428661, "end": 35547949}, {"filename": "/edge_base/heretic/graphics/HELP1.lmp", "start": 35547949, "end": 35667237}, {"filename": "/edge_base/heretic/graphics/HELP2.lmp", "start": 35667237, "end": 35786525}, {"filename": "/edge_base/heretic/graphics/LTFCTOP.lmp", "start": 35786525, "end": 35787216}, {"filename": "/edge_base/heretic/graphics/MAPE1.lmp", "start": 35787216, "end": 35906504}, {"filename": "/edge_base/heretic/graphics/MAPE2.lmp", "start": 35906504, "end": 36025792}, {"filename": "/edge_base/heretic/graphics/MAPE3.lmp", "start": 36025792, "end": 36145080}, {"filename": "/edge_base/heretic/graphics/NULL.png", "start": 36145080, "end": 36146240}, {"filename": "/edge_base/heretic/graphics/RTFCTOP.lmp", "start": 36146240, "end": 36146989}, {"filename": "/edge_base/heretic/graphics/STBARL.lmp", "start": 36146989, "end": 36151230}, {"filename": "/edge_base/heretic/graphics/STBARR.lmp", "start": 36151230, "end": 36155471}, {"filename": "/edge_base/heretic/graphics/TITLE.png", "start": 36155471, "end": 36206094}, {"filename": "/edge_base/heretic/graphics/_WIENTER.png", "start": 36206094, "end": 36206993}, {"filename": "/edge_base/heretic/graphics/_WIF.png", "start": 36206993, "end": 36207739}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL00.png", "start": 36207739, "end": 36208915}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL01.png", "start": 36208915, "end": 36210124}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL02.png", "start": 36210124, "end": 36211389}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL03.png", "start": 36211389, "end": 36212701}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL04.png", "start": 36212701, "end": 36214115}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL05.png", "start": 36214115, "end": 36215429}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL06.png", "start": 36215429, "end": 36216816}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL07.png", "start": 36216816, "end": 36218090}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL08.png", "start": 36218090, "end": 36219144}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL09.png", "start": 36219144, "end": 36220142}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL10.png", "start": 36220142, "end": 36221234}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL11.png", "start": 36221234, "end": 36222491}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL12.png", "start": 36222491, "end": 36223974}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL13.png", "start": 36223974, "end": 36225324}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL14.png", "start": 36225324, "end": 36226928}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL15.png", "start": 36226928, "end": 36228429}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL16.png", "start": 36228429, "end": 36229707}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL17.png", "start": 36229707, "end": 36230939}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK0.png", "start": 36230939, "end": 36231921}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK1.png", "start": 36231921, "end": 36232797}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK10.png", "start": 36232797, "end": 36233438}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK11.png", "start": 36233438, "end": 36234082}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK12.png", "start": 36234082, "end": 36234910}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK13.png", "start": 36234910, "end": 36235866}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK14.png", "start": 36235866, "end": 36237058}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK15.png", "start": 36237058, "end": 36238078}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK2.png", "start": 36238078, "end": 36238828}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK3.png", "start": 36238828, "end": 36239382}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK4.png", "start": 36239382, "end": 36240014}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK5.png", "start": 36240014, "end": 36240647}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK6.png", "start": 36240647, "end": 36241236}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK7.png", "start": 36241236, "end": 36241739}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK8.png", "start": 36241739, "end": 36242420}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK9.png", "start": 36242420, "end": 36243004}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY0.png", "start": 36243004, "end": 36244129}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY1.png", "start": 36244129, "end": 36245235}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY10.png", "start": 36245235, "end": 36246161}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY11.png", "start": 36246161, "end": 36246867}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY12.png", "start": 36246867, "end": 36247793}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY13.png", "start": 36247793, "end": 36248913}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY14.png", "start": 36248913, "end": 36250048}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY15.png", "start": 36250048, "end": 36251221}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY2.png", "start": 36251221, "end": 36252133}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY3.png", "start": 36252133, "end": 36252833}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY4.png", "start": 36252833, "end": 36253754}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY5.png", "start": 36253754, "end": 36254856}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY6.png", "start": 36254856, "end": 36255954}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY7.png", "start": 36255954, "end": 36257068}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY8.png", "start": 36257068, "end": 36258185}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY9.png", "start": 36258185, "end": 36259290}, {"filename": "/edge_base/heretic/scripts/anims.ddf", "start": 36259290, "end": 36260926}, {"filename": "/edge_base/heretic/scripts/attacks.ddf", "start": 36260926, "end": 36306875}, {"filename": "/edge_base/heretic/scripts/colmap.ddf", "start": 36306875, "end": 36307157}, {"filename": "/edge_base/heretic/scripts/flats.ddf", "start": 36307157, "end": 36307820}, {"filename": "/edge_base/heretic/scripts/fonts.ddf", "start": 36307820, "end": 36308904}, {"filename": "/edge_base/heretic/scripts/games.ddf", "start": 36308904, "end": 36311717}, {"filename": "/edge_base/heretic/scripts/images.ddf", "start": 36311717, "end": 36314725}, {"filename": "/edge_base/heretic/scripts/language.ldf", "start": 36314725, "end": 36324433}, {"filename": "/edge_base/heretic/scripts/levels.ddf", "start": 36324433, "end": 36337340}, {"filename": "/edge_base/heretic/scripts/lines.ddf", "start": 36337340, "end": 36341911}, {"filename": "/edge_base/heretic/scripts/lua/edge_hud.lua", "start": 36341911, "end": 36361252}, {"filename": "/edge_base/heretic/scripts/playlist.ddf", "start": 36361252, "end": 36363331}, {"filename": "/edge_base/heretic/scripts/rscript.rts", "start": 36363331, "end": 36375594}, {"filename": "/edge_base/heretic/scripts/sectors.ddf", "start": 36375594, "end": 36379364}, {"filename": "/edge_base/heretic/scripts/sounds.ddf", "start": 36379364, "end": 36390279}, {"filename": "/edge_base/heretic/scripts/styles.ddf", "start": 36390279, "end": 36395532}, {"filename": "/edge_base/heretic/scripts/switch.ddf", "start": 36395532, "end": 36395957}, {"filename": "/edge_base/heretic/scripts/things.ddf", "start": 36395957, "end": 36480877}, {"filename": "/edge_base/heretic/scripts/weapons.ddf", "start": 36480877, "end": 36492061}, {"filename": "/edge_base/heretic/sprites/STFFC0.lmp", "start": 36492061, "end": 36509191}, {"filename": "/edge_base/heretic/sprites/STFFH0.lmp", "start": 36509191, "end": 36527237}, {"filename": "/edge_base/plutonia/graphics/BOSSBACK.lmp", "start": 36527237, "end": 36646525}, {"filename": "/edge_base/plutonia/graphics/CREDIT.lmp", "start": 36646525, "end": 36765813}, {"filename": "/edge_base/plutonia/graphics/INTERPIC.lmp", "start": 36765813, "end": 36885101}, {"filename": "/edge_base/plutonia/graphics/TITLEPIC.lmp", "start": 36885101, "end": 37004389}, {"filename": "/edge_base/plutonia/scripts/games.ddf", "start": 37004389, "end": 37004820}, {"filename": "/edge_base/plutonia/scripts/images.ddf", "start": 37004820, "end": 37006155}, {"filename": "/edge_base/plutonia/scripts/language.ldf", "start": 37006155, "end": 37009224}, {"filename": "/edge_base/plutonia/textures/SKY1_B.png", "start": 37009224, "end": 37024255}, {"filename": "/edge_base/plutonia/textures/SKY1_E.png", "start": 37024255, "end": 37039251}, {"filename": "/edge_base/plutonia/textures/SKY1_N.png", "start": 37039251, "end": 37052330}, {"filename": "/edge_base/plutonia/textures/SKY1_S.png", "start": 37052330, "end": 37065409}, {"filename": "/edge_base/plutonia/textures/SKY1_T.png", "start": 37065409, "end": 37080440}, {"filename": "/edge_base/plutonia/textures/SKY1_W.png", "start": 37080440, "end": 37095436}, {"filename": "/edge_base/plutonia/textures/SKY2_B.png", "start": 37095436, "end": 37123371}, {"filename": "/edge_base/plutonia/textures/SKY2_E.png", "start": 37123371, "end": 37135011}, {"filename": "/edge_base/plutonia/textures/SKY2_N.png", "start": 37135011, "end": 37146920}, {"filename": "/edge_base/plutonia/textures/SKY2_S.png", "start": 37146920, "end": 37158829}, {"filename": "/edge_base/plutonia/textures/SKY2_T.png", "start": 37158829, "end": 37186764}, {"filename": "/edge_base/plutonia/textures/SKY2_W.png", "start": 37186764, "end": 37198404}, {"filename": "/edge_base/plutonia/textures/SKY3_B.png", "start": 37198404, "end": 37397154}, {"filename": "/edge_base/plutonia/textures/SKY3_E.png", "start": 37397154, "end": 37487747}, {"filename": "/edge_base/plutonia/textures/SKY3_N.png", "start": 37487747, "end": 37571131}, {"filename": "/edge_base/plutonia/textures/SKY3_S.png", "start": 37571131, "end": 37654515}, {"filename": "/edge_base/plutonia/textures/SKY3_T.png", "start": 37654515, "end": 37853265}, {"filename": "/edge_base/plutonia/textures/SKY3_W.png", "start": 37853265, "end": 37943858}, {"filename": "/edge_base/rekkr/graphics/M_DOOM.lmp", "start": 37943858, "end": 37969149}, {"filename": "/edge_base/rekkr/graphics/M_EPISOD.lmp", "start": 37969149, "end": 37986619}, {"filename": "/edge_base/rekkr/graphics/M_HURT.lmp", "start": 37986619, "end": 37988758}, {"filename": "/edge_base/rekkr/graphics/M_JKILL.lmp", "start": 37988758, "end": 37991517}, {"filename": "/edge_base/rekkr/graphics/M_LGTTL.lmp", "start": 37991517, "end": 37993704}, {"filename": "/edge_base/rekkr/graphics/M_LOADG.lmp", "start": 37993704, "end": 37995821}, {"filename": "/edge_base/rekkr/graphics/M_NEWG.lmp", "start": 37995821, "end": 37999096}, {"filename": "/edge_base/rekkr/graphics/M_NGAME.lmp", "start": 37999096, "end": 38001144}, {"filename": "/edge_base/rekkr/graphics/M_NMARE.lmp", "start": 38001144, "end": 38003578}, {"filename": "/edge_base/rekkr/graphics/M_OPTION.lmp", "start": 38003578, "end": 38005415}, {"filename": "/edge_base/rekkr/graphics/M_QUITG.lmp", "start": 38005415, "end": 38007483}, {"filename": "/edge_base/rekkr/graphics/M_RDTHIS.lmp", "start": 38007483, "end": 38008728}, {"filename": "/edge_base/rekkr/graphics/M_ROUGH.lmp", "start": 38008728, "end": 38011297}, {"filename": "/edge_base/rekkr/graphics/M_SAVEG.lmp", "start": 38011297, "end": 38013517}, {"filename": "/edge_base/rekkr/graphics/M_SGTTL.lmp", "start": 38013517, "end": 38015737}, {"filename": "/edge_base/rekkr/graphics/M_SKILL.lmp", "start": 38015737, "end": 38043829}, {"filename": "/edge_base/rekkr/graphics/M_SKULL1.png", "start": 38043829, "end": 38044417}, {"filename": "/edge_base/rekkr/graphics/M_SKULL2.png", "start": 38044417, "end": 38044999}, {"filename": "/edge_base/rekkr/graphics/M_SKULL3.png", "start": 38044999, "end": 38045594}, {"filename": "/edge_base/rekkr/graphics/M_SKULL4.png", "start": 38045594, "end": 38046182}, {"filename": "/edge_base/rekkr/graphics/M_ULTRA.lmp", "start": 38046182, "end": 38048556}, {"filename": "/edge_base/rekkr/graphics/STBARL.lmp", "start": 38048556, "end": 38051967}, {"filename": "/edge_base/rekkr/graphics/STBARR.lmp", "start": 38051967, "end": 38055378}, {"filename": "/edge_base/rekkr/graphics/WIENTER.lmp", "start": 38055378, "end": 38057303}, {"filename": "/edge_base/rekkr/graphics/WIF.lmp", "start": 38057303, "end": 38059084}, {"filename": "/edge_base/rekkr/graphics/WILV00.lmp", "start": 38059084, "end": 38060683}, {"filename": "/edge_base/rekkr/graphics/WILV01.lmp", "start": 38060683, "end": 38061699}, {"filename": "/edge_base/rekkr/graphics/WILV02.lmp", "start": 38061699, "end": 38063726}, {"filename": "/edge_base/rekkr/graphics/WILV03.lmp", "start": 38063726, "end": 38066293}, {"filename": "/edge_base/rekkr/graphics/WILV04.lmp", "start": 38066293, "end": 38068008}, {"filename": "/edge_base/rekkr/graphics/WILV05.lmp", "start": 38068008, "end": 38069736}, {"filename": "/edge_base/rekkr/graphics/WILV06.lmp", "start": 38069736, "end": 38073120}, {"filename": "/edge_base/rekkr/graphics/WILV07.lmp", "start": 38073120, "end": 38076624}, {"filename": "/edge_base/rekkr/graphics/WILV08.lmp", "start": 38076624, "end": 38079467}, {"filename": "/edge_base/rekkr/graphics/WILV10.lmp", "start": 38079467, "end": 38080846}, {"filename": "/edge_base/rekkr/graphics/WILV11.lmp", "start": 38080846, "end": 38082482}, {"filename": "/edge_base/rekkr/graphics/WILV12.lmp", "start": 38082482, "end": 38084802}, {"filename": "/edge_base/rekkr/graphics/WILV13.lmp", "start": 38084802, "end": 38086012}, {"filename": "/edge_base/rekkr/graphics/WILV14.lmp", "start": 38086012, "end": 38088709}, {"filename": "/edge_base/rekkr/graphics/WILV15.lmp", "start": 38088709, "end": 38091796}, {"filename": "/edge_base/rekkr/graphics/WILV16.lmp", "start": 38091796, "end": 38093437}, {"filename": "/edge_base/rekkr/graphics/WILV17.lmp", "start": 38093437, "end": 38095325}, {"filename": "/edge_base/rekkr/graphics/WILV18.lmp", "start": 38095325, "end": 38096512}, {"filename": "/edge_base/rekkr/graphics/WILV20.lmp", "start": 38096512, "end": 38098473}, {"filename": "/edge_base/rekkr/graphics/WILV21.lmp", "start": 38098473, "end": 38101589}, {"filename": "/edge_base/rekkr/graphics/WILV22.lmp", "start": 38101589, "end": 38103350}, {"filename": "/edge_base/rekkr/graphics/WILV23.lmp", "start": 38103350, "end": 38106209}, {"filename": "/edge_base/rekkr/graphics/WILV24.lmp", "start": 38106209, "end": 38107922}, {"filename": "/edge_base/rekkr/graphics/WILV25.lmp", "start": 38107922, "end": 38110186}, {"filename": "/edge_base/rekkr/graphics/WILV26.lmp", "start": 38110186, "end": 38111419}, {"filename": "/edge_base/rekkr/graphics/WILV27.lmp", "start": 38111419, "end": 38112162}, {"filename": "/edge_base/rekkr/graphics/WILV28.lmp", "start": 38112162, "end": 38115940}, {"filename": "/edge_base/rekkr/graphics/WILV30.lmp", "start": 38115940, "end": 38117792}, {"filename": "/edge_base/rekkr/graphics/WILV31.lmp", "start": 38117792, "end": 38119430}, {"filename": "/edge_base/rekkr/graphics/WILV32.lmp", "start": 38119430, "end": 38120552}, {"filename": "/edge_base/rekkr/graphics/WILV33.lmp", "start": 38120552, "end": 38122891}, {"filename": "/edge_base/rekkr/graphics/WILV34.lmp", "start": 38122891, "end": 38124894}, {"filename": "/edge_base/rekkr/graphics/WILV35.lmp", "start": 38124894, "end": 38127028}, {"filename": "/edge_base/rekkr/graphics/WILV36.lmp", "start": 38127028, "end": 38130094}, {"filename": "/edge_base/rekkr/graphics/WILV37.lmp", "start": 38130094, "end": 38132089}, {"filename": "/edge_base/rekkr/graphics/WILV38.lmp", "start": 38132089, "end": 38133949}, {"filename": "/edge_base/rekkr/graphics/WIOSTF.lmp", "start": 38133949, "end": 38134211}, {"filename": "/edge_base/rekkr/graphics/WIOSTI.lmp", "start": 38134211, "end": 38135417}, {"filename": "/edge_base/rekkr/graphics/WIOSTK.lmp", "start": 38135417, "end": 38136482}, {"filename": "/edge_base/rekkr/graphics/WIOSTS.lmp", "start": 38136482, "end": 38137512}, {"filename": "/edge_base/rekkr/graphics/WIPAR.lmp", "start": 38137512, "end": 38138274}, {"filename": "/edge_base/rekkr/graphics/WISCRT2.lmp", "start": 38138274, "end": 38139841}, {"filename": "/edge_base/rekkr/graphics/WITIME.lmp", "start": 38139841, "end": 38140755}, {"filename": "/edge_base/rekkr/scripts/anims.ddf", "start": 38140755, "end": 38140889}, {"filename": "/edge_base/rekkr/scripts/attacks.ddf", "start": 38140889, "end": 38141582}, {"filename": "/edge_base/rekkr/scripts/fonts.ddf", "start": 38141582, "end": 38141825}, {"filename": "/edge_base/rekkr/scripts/games.ddf", "start": 38141825, "end": 38142236}, {"filename": "/edge_base/rekkr/scripts/images.ddf", "start": 38142236, "end": 38149945}, {"filename": "/edge_base/rekkr/scripts/language.ldf", "start": 38149945, "end": 38151459}, {"filename": "/edge_base/rekkr/scripts/styles.ddf", "start": 38151459, "end": 38155587}, {"filename": "/edge_base/rekkr/scripts/things.ddf", "start": 38155587, "end": 38157757}, {"filename": "/edge_base/rekkr/scripts/weapons.ddf", "start": 38157757, "end": 38159622}, {"filename": "/edge_base/rekkr/sprites/SSWVA1.lmp", "start": 38159622, "end": 38160247}, {"filename": "/edge_base/rekkr/sprites/SSWVA2A8.lmp", "start": 38160247, "end": 38161222}, {"filename": "/edge_base/rekkr/sprites/SSWVA3A7.lmp", "start": 38161222, "end": 38162197}, {"filename": "/edge_base/rekkr/sprites/SSWVA4A6.lmp", "start": 38162197, "end": 38163172}, {"filename": "/edge_base/rekkr/sprites/SSWVA5.lmp", "start": 38163172, "end": 38163803}, {"filename": "/edge_base/rekkr/sprites/SSWVB1.lmp", "start": 38163803, "end": 38164386}, {"filename": "/edge_base/rekkr/sprites/SSWVB2B8.lmp", "start": 38164386, "end": 38165353}, {"filename": "/edge_base/rekkr/sprites/SSWVB3B7.lmp", "start": 38165353, "end": 38166320}, {"filename": "/edge_base/rekkr/sprites/SSWVB4B6.lmp", "start": 38166320, "end": 38167287}, {"filename": "/edge_base/rekkr/sprites/SSWVB5.lmp", "start": 38167287, "end": 38167869}, {"filename": "/edge_base/strife/games.ddf", "start": 38167869, "end": 38168689}, {"filename": "/edge_base/strife/images.ddf", "start": 38168689, "end": 38169025}, {"filename": "/edge_base/strife/playlist.ddf", "start": 38169025, "end": 38169999}, {"filename": "/edge_base/tnt/graphics/BOSSBACK.lmp", "start": 38169999, "end": 38289287}, {"filename": "/edge_base/tnt/graphics/CREDIT.lmp", "start": 38289287, "end": 38408575}, {"filename": "/edge_base/tnt/graphics/INTERPIC.lmp", "start": 38408575, "end": 38527863}, {"filename": "/edge_base/tnt/graphics/TITLEPIC.lmp", "start": 38527863, "end": 38647151}, {"filename": "/edge_base/tnt/scripts/games.ddf", "start": 38647151, "end": 38647582}, {"filename": "/edge_base/tnt/scripts/images.ddf", "start": 38647582, "end": 38648919}, {"filename": "/edge_base/tnt/scripts/language.ldf", "start": 38648919, "end": 38652275}, {"filename": "/edge_base/tnt/textures/SKY1_B.png", "start": 38652275, "end": 38668268}, {"filename": "/edge_base/tnt/textures/SKY1_E.png", "start": 38668268, "end": 38687734}, {"filename": "/edge_base/tnt/textures/SKY1_N.png", "start": 38687734, "end": 38705160}, {"filename": "/edge_base/tnt/textures/SKY1_S.png", "start": 38705160, "end": 38721067}, {"filename": "/edge_base/tnt/textures/SKY1_T.png", "start": 38721067, "end": 38761185}, {"filename": "/edge_base/tnt/textures/SKY1_W.png", "start": 38761185, "end": 38780509}, {"filename": "/edge_base/tnt/textures/SKY2_B.png", "start": 38780509, "end": 38781820}, {"filename": "/edge_base/tnt/textures/SKY2_E.png", "start": 38781820, "end": 38786343}, {"filename": "/edge_base/tnt/textures/SKY2_N.png", "start": 38786343, "end": 38787572}, {"filename": "/edge_base/tnt/textures/SKY2_S.png", "start": 38787572, "end": 38793789}, {"filename": "/edge_base/tnt/textures/SKY2_T.png", "start": 38793789, "end": 38797916}, {"filename": "/edge_base/tnt/textures/SKY2_W.png", "start": 38797916, "end": 38799458}, {"filename": "/edge_base/tnt/textures/SKY3_B.png", "start": 38799458, "end": 38823929}, {"filename": "/edge_base/tnt/textures/SKY3_E.png", "start": 38823929, "end": 38831631}, {"filename": "/edge_base/tnt/textures/SKY3_N.png", "start": 38831631, "end": 38839510}, {"filename": "/edge_base/tnt/textures/SKY3_S.png", "start": 38839510, "end": 38846858}, {"filename": "/edge_base/tnt/textures/SKY3_T.png", "start": 38846858, "end": 38871329}, {"filename": "/edge_base/tnt/textures/SKY3_W.png", "start": 38871329, "end": 38878670}, {"filename": "/edge_defs/SNDFONT.sf3", "start": 38878670, "end": 41236840}, {"filename": "/edge_defs/colormaps/AUTOMAPS.dat", "start": 41236840, "end": 41237352}, {"filename": "/edge_defs/colormaps/LAVAMAP.cmp", "start": 41237352, "end": 41246056}, {"filename": "/edge_defs/colormaps/NITEVMAP.cmp", "start": 41246056, "end": 41246312}, {"filename": "/edge_defs/colormaps/PLYRMAPS.dat", "start": 41246312, "end": 41250152}, {"filename": "/edge_defs/colormaps/SARGMAPS.dat", "start": 41250152, "end": 41251688}, {"filename": "/edge_defs/colormaps/SHADEMAP.cmp", "start": 41251688, "end": 41251944}, {"filename": "/edge_defs/colormaps/SKINMAPS.dat", "start": 41251944, "end": 41253224}, {"filename": "/edge_defs/colormaps/SLIMEMAP.cmp", "start": 41253224, "end": 41261928}, {"filename": "/edge_defs/colormaps/TEXTMAPS.dat", "start": 41261928, "end": 41263720}, {"filename": "/edge_defs/colormaps/TXTBLUES.dat", "start": 41263720, "end": 41265000}, {"filename": "/edge_defs/colormaps/TXTBRNS1.dat", "start": 41265000, "end": 41266280}, {"filename": "/edge_defs/colormaps/TXTBRNS2.dat", "start": 41266280, "end": 41267560}, {"filename": "/edge_defs/colormaps/TXTGREYS.dat", "start": 41267560, "end": 41268840}, {"filename": "/edge_defs/colormaps/TXTGRNS.dat", "start": 41268840, "end": 41270120}, {"filename": "/edge_defs/colormaps/TXTORANS.dat", "start": 41270120, "end": 41271400}, {"filename": "/edge_defs/colormaps/TXTPNKS1.dat", "start": 41271400, "end": 41272680}, {"filename": "/edge_defs/colormaps/TXTPNKS2.dat", "start": 41272680, "end": 41273960}, {"filename": "/edge_defs/colormaps/TXTPURPS.dat", "start": 41273960, "end": 41275240}, {"filename": "/edge_defs/colormaps/TXTREDS.dat", "start": 41275240, "end": 41276520}, {"filename": "/edge_defs/colormaps/TXTYLWS1.dat", "start": 41276520, "end": 41277800}, {"filename": "/edge_defs/colormaps/TXTYLWS2.dat", "start": 41277800, "end": 41279080}, {"filename": "/edge_defs/colormaps/WATERMAP.cmp", "start": 41279080, "end": 41287784}, {"filename": "/edge_defs/graphics/CREDIT2.lmp", "start": 41287784, "end": 41354672}, {"filename": "/edge_defs/graphics/DLITEXPN.png", "start": 41354672, "end": 41369015}, {"filename": "/edge_defs/graphics/EDGECRED.png", "start": 41369015, "end": 41536614}, {"filename": "/edge_defs/graphics/EDGETTL.lmp", "start": 41536614, "end": 41603502}, {"filename": "/edge_defs/graphics/ENDFONT.png", "start": 41603502, "end": 41610606}, {"filename": "/edge_defs/graphics/FONTVERD.png", "start": 41610606, "end": 41655237}, {"filename": "/edge_defs/graphics/MOUSE.lmp", "start": 41655237, "end": 41655420}, {"filename": "/edge_defs/graphics/M_EPI5.lmp", "start": 41655420, "end": 41656564}, {"filename": "/edge_defs/graphics/M_EPI6.lmp", "start": 41656564, "end": 41659594}, {"filename": "/edge_defs/graphics/STBARL.lmp", "start": 41659594, "end": 41663005}, {"filename": "/edge_defs/graphics/STBARR.lmp", "start": 41663005, "end": 41666416}, {"filename": "/edge_defs/graphics/STCFN000.lmp", "start": 41666416, "end": 41666560}, {"filename": "/edge_defs/graphics/STCFN132.lmp", "start": 41666560, "end": 41666702}, {"filename": "/edge_defs/graphics/STCFN134.lmp", "start": 41666702, "end": 41666829}, {"filename": "/edge_defs/graphics/STCFN148.lmp", "start": 41666829, "end": 41666964}, {"filename": "/edge_defs/graphics/STDESYNC.lmp", "start": 41666964, "end": 41669561}, {"filename": "/edge_defs/graphics/STFB0.lmp", "start": 41669561, "end": 41670969}, {"filename": "/edge_defs/graphics/STFB1.lmp", "start": 41670969, "end": 41672377}, {"filename": "/edge_defs/graphics/STFB2.lmp", "start": 41672377, "end": 41673785}, {"filename": "/edge_defs/graphics/STFB3.lmp", "start": 41673785, "end": 41675193}, {"filename": "/edge_defs/graphics/STFB4.lmp", "start": 41675193, "end": 41676601}, {"filename": "/edge_defs/graphics/STFB5.lmp", "start": 41676601, "end": 41678009}, {"filename": "/edge_defs/graphics/STFB6.lmp", "start": 41678009, "end": 41679417}, {"filename": "/edge_defs/graphics/STFB7.lmp", "start": 41679417, "end": 41680825}, {"filename": "/edge_defs/graphics/STKEYS6.lmp", "start": 41680825, "end": 41680945}, {"filename": "/edge_defs/graphics/STKEYS7.lmp", "start": 41680945, "end": 41681065}, {"filename": "/edge_defs/graphics/STKEYS8.lmp", "start": 41681065, "end": 41681185}, {"filename": "/edge_defs/graphics/STKEYS9.PNG", "start": 41681185, "end": 41681369}, {"filename": "/edge_defs/graphics/STKEYSA.PNG", "start": 41681369, "end": 41681621}, {"filename": "/edge_defs/graphics/STPB0.lmp", "start": 41681621, "end": 41683099}, {"filename": "/edge_defs/graphics/STPB1.lmp", "start": 41683099, "end": 41684577}, {"filename": "/edge_defs/graphics/STPB2.lmp", "start": 41684577, "end": 41686055}, {"filename": "/edge_defs/graphics/STPB3.lmp", "start": 41686055, "end": 41687533}, {"filename": "/edge_defs/graphics/STPB4.lmp", "start": 41687533, "end": 41689011}, {"filename": "/edge_defs/graphics/STPB5.lmp", "start": 41689011, "end": 41690489}, {"filename": "/edge_defs/graphics/STPB6.lmp", "start": 41690489, "end": 41691967}, {"filename": "/edge_defs/graphics/STPB7.lmp", "start": 41691967, "end": 41693445}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN001.png", "start": 41693445, "end": 41693802}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN002.png", "start": 41693802, "end": 41694147}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN003.png", "start": 41694147, "end": 41694503}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN004.png", "start": 41694503, "end": 41694851}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN005.png", "start": 41694851, "end": 41695190}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN006.png", "start": 41695190, "end": 41695508}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN007.png", "start": 41695508, "end": 41695858}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN008.png", "start": 41695858, "end": 41696214}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN009.png", "start": 41696214, "end": 41696493}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN010.png", "start": 41696493, "end": 41696818}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN011.png", "start": 41696818, "end": 41697187}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN012.png", "start": 41697187, "end": 41697511}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN013.png", "start": 41697511, "end": 41697877}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN014.png", "start": 41697877, "end": 41698233}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN015.png", "start": 41698233, "end": 41698606}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN016.png", "start": 41698606, "end": 41698940}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN017.png", "start": 41698940, "end": 41699315}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN018.png", "start": 41699315, "end": 41699673}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN019.png", "start": 41699673, "end": 41700024}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN020.png", "start": 41700024, "end": 41700343}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN021.png", "start": 41700343, "end": 41700689}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN022.png", "start": 41700689, "end": 41701018}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN023.png", "start": 41701018, "end": 41701373}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN024.png", "start": 41701373, "end": 41701724}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN025.png", "start": 41701724, "end": 41702073}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN026.png", "start": 41702073, "end": 41702411}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN027.png", "start": 41702411, "end": 41702700}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN028.png", "start": 41702700, "end": 41703014}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN029.png", "start": 41703014, "end": 41703257}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN030.png", "start": 41703257, "end": 41703500}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN031.png", "start": 41703500, "end": 41703766}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN032.png", "start": 41703766, "end": 41703999}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN033.png", "start": 41703999, "end": 41704337}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN034.png", "start": 41704337, "end": 41704630}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN035.png", "start": 41704630, "end": 41704968}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN036.png", "start": 41704968, "end": 41705297}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN037.png", "start": 41705297, "end": 41705626}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN038.png", "start": 41705626, "end": 41705959}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN039.png", "start": 41705959, "end": 41706295}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN040.png", "start": 41706295, "end": 41706592}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN041.png", "start": 41706592, "end": 41706932}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN042.png", "start": 41706932, "end": 41707272}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN043.png", "start": 41707272, "end": 41707507}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN044.png", "start": 41707507, "end": 41707827}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN045.png", "start": 41707827, "end": 41708111}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN046.png", "start": 41708111, "end": 41708441}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN047.png", "start": 41708441, "end": 41708779}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN048.png", "start": 41708779, "end": 41709094}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN049.png", "start": 41709094, "end": 41709423}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN050.png", "start": 41709423, "end": 41709745}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN051.png", "start": 41709745, "end": 41710062}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN052.png", "start": 41710062, "end": 41710401}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN053.png", "start": 41710401, "end": 41710721}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN054.png", "start": 41710721, "end": 41710995}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN055.png", "start": 41710995, "end": 41711302}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN056.png", "start": 41711302, "end": 41711647}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN057.png", "start": 41711647, "end": 41711945}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN058.png", "start": 41711945, "end": 41712299}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN059.png", "start": 41712299, "end": 41712638}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN060.png", "start": 41712638, "end": 41712977}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN061.png", "start": 41712977, "end": 41713301}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN062.png", "start": 41713301, "end": 41713641}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN063.png", "start": 41713641, "end": 41713966}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN064.png", "start": 41713966, "end": 41714305}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN065.png", "start": 41714305, "end": 41714611}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN066.png", "start": 41714611, "end": 41714945}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN067.png", "start": 41714945, "end": 41715277}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN068.png", "start": 41715277, "end": 41715625}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN069.png", "start": 41715625, "end": 41715966}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN070.png", "start": 41715966, "end": 41716291}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN071.png", "start": 41716291, "end": 41716623}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN072.png", "start": 41716623, "end": 41716952}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN073.png", "start": 41716952, "end": 41717186}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN074.png", "start": 41717186, "end": 41717432}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN075.png", "start": 41717432, "end": 41717758}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN076.png", "start": 41717758, "end": 41718045}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN077.png", "start": 41718045, "end": 41718363}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN078.png", "start": 41718363, "end": 41718683}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN079.png", "start": 41718683, "end": 41718994}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN080.png", "start": 41718994, "end": 41719311}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN081.png", "start": 41719311, "end": 41719626}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN082.png", "start": 41719626, "end": 41719928}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN083.png", "start": 41719928, "end": 41720256}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN084.png", "start": 41720256, "end": 41720588}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN085.png", "start": 41720588, "end": 41720836}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN086.png", "start": 41720836, "end": 41721087}, {"filename": "/edge_defs/movies/ECINTRO.mpg", "start": 41721087, "end": 42398975}, {"filename": "/edge_defs/scripts/anims.ddf", "start": 42398975, "end": 42401003}, {"filename": "/edge_defs/scripts/attacks.ddf", "start": 42401003, "end": 42425244}, {"filename": "/edge_defs/scripts/coal_api.ec", "start": 42425244, "end": 42440118}, {"filename": "/edge_defs/scripts/coal_hud.ec", "start": 42440118, "end": 42457178}, {"filename": "/edge_defs/scripts/colmap.ddf", "start": 42457178, "end": 42461356}, {"filename": "/edge_defs/scripts/flats.ddf", "start": 42461356, "end": 42466633}, {"filename": "/edge_defs/scripts/fonts.ddf", "start": 42466633, "end": 42468094}, {"filename": "/edge_defs/scripts/games.ddf", "start": 42468094, "end": 42472509}, {"filename": "/edge_defs/scripts/images.ddf", "start": 42472509, "end": 42491986}, {"filename": "/edge_defs/scripts/language.ldf", "start": 42491986, "end": 42600385}, {"filename": "/edge_defs/scripts/levels.ddf", "start": 42600385, "end": 42615682}, {"filename": "/edge_defs/scripts/lines.ddf", "start": 42615682, "end": 42709540}, {"filename": "/edge_defs/scripts/lua/core/base64.lua", "start": 42709540, "end": 42716719}, {"filename": "/edge_defs/scripts/lua/core/debugger.lua", "start": 42716719, "end": 42738137}, {"filename": "/edge_defs/scripts/lua/core/json.lua", "start": 42738137, "end": 42747774}, {"filename": "/edge_defs/scripts/lua/core/mat2.lua", "start": 42747774, "end": 42752461}, {"filename": "/edge_defs/scripts/lua/core/mat3.lua", "start": 42752461, "end": 42760763}, {"filename": "/edge_defs/scripts/lua/core/mat4.lua", "start": 42760763, "end": 42773867}, {"filename": "/edge_defs/scripts/lua/core/mat4Extended.lua", "start": 42773867, "end": 42777742}, {"filename": "/edge_defs/scripts/lua/core/quat.lua", "start": 42777742, "end": 42781618}, {"filename": "/edge_defs/scripts/lua/core/vec2.lua", "start": 42781618, "end": 42784584}, {"filename": "/edge_defs/scripts/lua/core/vec3.lua", "start": 42784584, "end": 42788108}, {"filename": "/edge_defs/scripts/lua/core/vec4.lua", "start": 42788108, "end": 42791980}, {"filename": "/edge_defs/scripts/lua/edge_api.lua", "start": 42791980, "end": 42800738}, {"filename": "/edge_defs/scripts/lua/edge_hud.lua", "start": 42800738, "end": 42819022}, {"filename": "/edge_defs/scripts/movies.ddf", "start": 42819022, "end": 42819072}, {"filename": "/edge_defs/scripts/playlist.ddf", "start": 42819072, "end": 42821890}, {"filename": "/edge_defs/scripts/reverbs.ddf", "start": 42821890, "end": 42822023}, {"filename": "/edge_defs/scripts/rscript.rts", "start": 42822023, "end": 42823626}, {"filename": "/edge_defs/scripts/sectors.ddf", "start": 42823626, "end": 42841675}, {"filename": "/edge_defs/scripts/sounds.ddf", "start": 42841675, "end": 42854992}, {"filename": "/edge_defs/scripts/styles.ddf", "start": 42854992, "end": 42861069}, {"filename": "/edge_defs/scripts/switch.ddf", "start": 42861069, "end": 42865120}, {"filename": "/edge_defs/scripts/things.ddf", "start": 42865120, "end": 42998047}, {"filename": "/edge_defs/scripts/wadfixes.ddf", "start": 42998047, "end": 42998741}, {"filename": "/edge_defs/scripts/weapons.ddf", "start": 42998741, "end": 43004225}, {"filename": "/edge_defs/sounds/DPBAREXP.lmp", "start": 43004225, "end": 43004308}, {"filename": "/edge_defs/sounds/DPBDCLS.lmp", "start": 43004308, "end": 43004354}, {"filename": "/edge_defs/sounds/DPBDOPN.lmp", "start": 43004354, "end": 43004395}, {"filename": "/edge_defs/sounds/DPBFG.lmp", "start": 43004395, "end": 43004583}, {"filename": "/edge_defs/sounds/DPBGACT.lmp", "start": 43004583, "end": 43004682}, {"filename": "/edge_defs/sounds/DPBGDTH1.lmp", "start": 43004682, "end": 43004771}, {"filename": "/edge_defs/sounds/DPBGDTH2.lmp", "start": 43004771, "end": 43004860}, {"filename": "/edge_defs/sounds/DPBGSIT1.lmp", "start": 43004860, "end": 43004971}, {"filename": "/edge_defs/sounds/DPBGSIT2.lmp", "start": 43004971, "end": 43005082}, {"filename": "/edge_defs/sounds/DPBOSCUB.lmp", "start": 43005082, "end": 43005118}, {"filename": "/edge_defs/sounds/DPBOSDTH.lmp", "start": 43005118, "end": 43005397}, {"filename": "/edge_defs/sounds/DPBOSPIT.lmp", "start": 43005397, "end": 43005442}, {"filename": "/edge_defs/sounds/DPBOSPN.lmp", "start": 43005442, "end": 43005480}, {"filename": "/edge_defs/sounds/DPBOSSIT.lmp", "start": 43005480, "end": 43005614}, {"filename": "/edge_defs/sounds/DPBRSDTH.lmp", "start": 43005614, "end": 43005726}, {"filename": "/edge_defs/sounds/DPBRSSIT.lmp", "start": 43005726, "end": 43005834}, {"filename": "/edge_defs/sounds/DPBSPACT.lmp", "start": 43005834, "end": 43005890}, {"filename": "/edge_defs/sounds/DPBSPDTH.lmp", "start": 43005890, "end": 43005981}, {"filename": "/edge_defs/sounds/DPBSPSIT.lmp", "start": 43005981, "end": 43006120}, {"filename": "/edge_defs/sounds/DPBSPWLK.lmp", "start": 43006120, "end": 43006165}, {"filename": "/edge_defs/sounds/DPCACDTH.lmp", "start": 43006165, "end": 43006254}, {"filename": "/edge_defs/sounds/DPCACSIT.lmp", "start": 43006254, "end": 43006366}, {"filename": "/edge_defs/sounds/DPCLAW.lmp", "start": 43006366, "end": 43006412}, {"filename": "/edge_defs/sounds/DPCYBDTH.lmp", "start": 43006412, "end": 43006549}, {"filename": "/edge_defs/sounds/DPCYBSIT.lmp", "start": 43006549, "end": 43006698}, {"filename": "/edge_defs/sounds/DPDBCLS.lmp", "start": 43006698, "end": 43006709}, {"filename": "/edge_defs/sounds/DPDBLOAD.lmp", "start": 43006709, "end": 43006720}, {"filename": "/edge_defs/sounds/DPDBOPN.lmp", "start": 43006720, "end": 43006731}, {"filename": "/edge_defs/sounds/DPDMACT.lmp", "start": 43006731, "end": 43006758}, {"filename": "/edge_defs/sounds/DPDMPAIN.lmp", "start": 43006758, "end": 43006799}, {"filename": "/edge_defs/sounds/DPDORCLS.lmp", "start": 43006799, "end": 43006870}, {"filename": "/edge_defs/sounds/DPDOROPN.lmp", "start": 43006870, "end": 43006943}, {"filename": "/edge_defs/sounds/DPDSHTGN.lmp", "start": 43006943, "end": 43006986}, {"filename": "/edge_defs/sounds/DPFIRSHT.lmp", "start": 43006986, "end": 43007021}, {"filename": "/edge_defs/sounds/DPFIRXPL.lmp", "start": 43007021, "end": 43007038}, {"filename": "/edge_defs/sounds/DPFLAME.lmp", "start": 43007038, "end": 43007115}, {"filename": "/edge_defs/sounds/DPFLAMST.lmp", "start": 43007115, "end": 43007129}, {"filename": "/edge_defs/sounds/DPGETPOW.lmp", "start": 43007129, "end": 43007266}, {"filename": "/edge_defs/sounds/DPHOOF.lmp", "start": 43007266, "end": 43007346}, {"filename": "/edge_defs/sounds/DPITEMUP.lmp", "start": 43007346, "end": 43007433}, {"filename": "/edge_defs/sounds/DPITMBK.lmp", "start": 43007433, "end": 43007518}, {"filename": "/edge_defs/sounds/DPKEENDT.lmp", "start": 43007518, "end": 43007624}, {"filename": "/edge_defs/sounds/DPKEENPN.lmp", "start": 43007624, "end": 43007680}, {"filename": "/edge_defs/sounds/DPKNTDTH.lmp", "start": 43007680, "end": 43007803}, {"filename": "/edge_defs/sounds/DPKNTSIT.lmp", "start": 43007803, "end": 43007869}, {"filename": "/edge_defs/sounds/DPMANATK.lmp", "start": 43007869, "end": 43007935}, {"filename": "/edge_defs/sounds/DPMANDTH.lmp", "start": 43007935, "end": 43008013}, {"filename": "/edge_defs/sounds/DPMANSIT.lmp", "start": 43008013, "end": 43008110}, {"filename": "/edge_defs/sounds/DPMETAL.lmp", "start": 43008110, "end": 43008129}, {"filename": "/edge_defs/sounds/DPMNPAIN.lmp", "start": 43008129, "end": 43008189}, {"filename": "/edge_defs/sounds/DPNOWAY.lmp", "start": 43008189, "end": 43008230}, {"filename": "/edge_defs/sounds/DPOOF.lmp", "start": 43008230, "end": 43008249}, {"filename": "/edge_defs/sounds/DPPDIEHI.lmp", "start": 43008249, "end": 43008327}, {"filename": "/edge_defs/sounds/DPPEDTH.lmp", "start": 43008327, "end": 43008436}, {"filename": "/edge_defs/sounds/DPPEPAIN.lmp", "start": 43008436, "end": 43008486}, {"filename": "/edge_defs/sounds/DPPESIT.lmp", "start": 43008486, "end": 43008603}, {"filename": "/edge_defs/sounds/DPPISTOL.lmp", "start": 43008603, "end": 43008621}, {"filename": "/edge_defs/sounds/DPPLASMA.lmp", "start": 43008621, "end": 43008663}, {"filename": "/edge_defs/sounds/DPPLDETH.lmp", "start": 43008663, "end": 43008812}, {"filename": "/edge_defs/sounds/DPPLPAIN.lmp", "start": 43008812, "end": 43008842}, {"filename": "/edge_defs/sounds/DPPODTH1.lmp", "start": 43008842, "end": 43008931}, {"filename": "/edge_defs/sounds/DPPODTH2.lmp", "start": 43008931, "end": 43009020}, {"filename": "/edge_defs/sounds/DPPODTH3.lmp", "start": 43009020, "end": 43009109}, {"filename": "/edge_defs/sounds/DPPOPAIN.lmp", "start": 43009109, "end": 43009147}, {"filename": "/edge_defs/sounds/DPPOSACT.lmp", "start": 43009147, "end": 43009177}, {"filename": "/edge_defs/sounds/DPPOSIT1.lmp", "start": 43009177, "end": 43009288}, {"filename": "/edge_defs/sounds/DPPOSIT2.lmp", "start": 43009288, "end": 43009399}, {"filename": "/edge_defs/sounds/DPPOSIT3.lmp", "start": 43009399, "end": 43009510}, {"filename": "/edge_defs/sounds/DPPSTART.lmp", "start": 43009510, "end": 43009551}, {"filename": "/edge_defs/sounds/DPPSTOP.lmp", "start": 43009551, "end": 43009568}, {"filename": "/edge_defs/sounds/DPPUNCH.lmp", "start": 43009568, "end": 43009605}, {"filename": "/edge_defs/sounds/DPRADIO.lmp", "start": 43009605, "end": 43009657}, {"filename": "/edge_defs/sounds/DPRLAUNC.lmp", "start": 43009657, "end": 43009720}, {"filename": "/edge_defs/sounds/DPRXPLOD.lmp", "start": 43009720, "end": 43009892}, {"filename": "/edge_defs/sounds/DPSAWFUL.lmp", "start": 43009892, "end": 43009920}, {"filename": "/edge_defs/sounds/DPSAWHIT.lmp", "start": 43009920, "end": 43009948}, {"filename": "/edge_defs/sounds/DPSAWIDL.lmp", "start": 43009948, "end": 43009953}, {"filename": "/edge_defs/sounds/DPSAWUP.lmp", "start": 43009953, "end": 43010041}, {"filename": "/edge_defs/sounds/DPSGCOCK.lmp", "start": 43010041, "end": 43010104}, {"filename": "/edge_defs/sounds/DPSGTATK.lmp", "start": 43010104, "end": 43010178}, {"filename": "/edge_defs/sounds/DPSGTDTH.lmp", "start": 43010178, "end": 43010267}, {"filename": "/edge_defs/sounds/DPSGTSIT.lmp", "start": 43010267, "end": 43010378}, {"filename": "/edge_defs/sounds/DPSHOTGN.lmp", "start": 43010378, "end": 43010420}, {"filename": "/edge_defs/sounds/DPSKEACT.lmp", "start": 43010420, "end": 43010460}, {"filename": "/edge_defs/sounds/DPSKEATK.lmp", "start": 43010460, "end": 43010519}, {"filename": "/edge_defs/sounds/DPSKEDTH.lmp", "start": 43010519, "end": 43010599}, {"filename": "/edge_defs/sounds/DPSKEPCH.lmp", "start": 43010599, "end": 43010636}, {"filename": "/edge_defs/sounds/DPSKESIT.lmp", "start": 43010636, "end": 43010742}, {"filename": "/edge_defs/sounds/DPSKESWG.lmp", "start": 43010742, "end": 43010782}, {"filename": "/edge_defs/sounds/DPSKLATK.lmp", "start": 43010782, "end": 43010862}, {"filename": "/edge_defs/sounds/DPSKLDTH.lmp", "start": 43010862, "end": 43010879}, {"filename": "/edge_defs/sounds/DPSLOP.lmp", "start": 43010879, "end": 43010988}, {"filename": "/edge_defs/sounds/DPSPIDTH.lmp", "start": 43010988, "end": 43011101}, {"filename": "/edge_defs/sounds/DPSPISIT.lmp", "start": 43011101, "end": 43011249}, {"filename": "/edge_defs/sounds/DPSSDTH.lmp", "start": 43011249, "end": 43011338}, {"filename": "/edge_defs/sounds/DPSSSIT.lmp", "start": 43011338, "end": 43011449}, {"filename": "/edge_defs/sounds/DPSTNMOV.lmp", "start": 43011449, "end": 43011457}, {"filename": "/edge_defs/sounds/DPSWTCHN.lmp", "start": 43011457, "end": 43011485}, {"filename": "/edge_defs/sounds/DPSWTCHX.lmp", "start": 43011485, "end": 43011514}, {"filename": "/edge_defs/sounds/DPTELEPT.lmp", "start": 43011514, "end": 43011616}, {"filename": "/edge_defs/sounds/DPTINK.lmp", "start": 43011616, "end": 43011668}, {"filename": "/edge_defs/sounds/DPVILACT.lmp", "start": 43011668, "end": 43011723}, {"filename": "/edge_defs/sounds/DPVILATK.lmp", "start": 43011723, "end": 43011786}, {"filename": "/edge_defs/sounds/DPVILDTH.lmp", "start": 43011786, "end": 43012054}, {"filename": "/edge_defs/sounds/DPVILSIT.lmp", "start": 43012054, "end": 43012130}, {"filename": "/edge_defs/sounds/DPVIPAIN.lmp", "start": 43012130, "end": 43012241}, {"filename": "/edge_defs/sounds/DPWPNUP.lmp", "start": 43012241, "end": 43012285}, {"filename": "/edge_defs/sounds/DSACIDFT.ogg", "start": 43012285, "end": 43019835, "audio": 1}, {"filename": "/edge_defs/sounds/DSCRUSH.lmp", "start": 43019835, "end": 43026853}, {"filename": "/edge_defs/sounds/DSDGACT.ogg", "start": 43026853, "end": 43034514, "audio": 1}, {"filename": "/edge_defs/sounds/DSDGATK.ogg", "start": 43034514, "end": 43041320, "audio": 1}, {"filename": "/edge_defs/sounds/DSDGDTH.ogg", "start": 43041320, "end": 43052136, "audio": 1}, {"filename": "/edge_defs/sounds/DSDGPAIN.ogg", "start": 43052136, "end": 43058128, "audio": 1}, {"filename": "/edge_defs/sounds/DSDGSIT.ogg", "start": 43058128, "end": 43064291, "audio": 1}, {"filename": "/edge_defs/sounds/DSFSWAT1.wav", "start": 43064291, "end": 43079635, "audio": 1}, {"filename": "/edge_defs/sounds/DSFSWAT2.wav", "start": 43079635, "end": 43095107, "audio": 1}, {"filename": "/edge_defs/sounds/DSFSWAT3.wav", "start": 43095107, "end": 43107347, "audio": 1}, {"filename": "/edge_defs/sounds/DSFSWAT4.wav", "start": 43107347, "end": 43122713, "audio": 1}, {"filename": "/edge_defs/sounds/DSGLSBRK.wav", "start": 43122713, "end": 43155311, "audio": 1}, {"filename": "/edge_defs/sounds/DSJPDOWN.lmp", "start": 43155311, "end": 43171899}, {"filename": "/edge_defs/sounds/DSJPFLOW.lmp", "start": 43171899, "end": 43175821}, {"filename": "/edge_defs/sounds/DSJPIDLE.lmp", "start": 43175821, "end": 43178788}, {"filename": "/edge_defs/sounds/DSJPMOVE.lmp", "start": 43178788, "end": 43180205}, {"filename": "/edge_defs/sounds/DSJPRISE.lmp", "start": 43180205, "end": 43188025}, {"filename": "/edge_defs/sounds/DSMUCKFT.ogg", "start": 43188025, "end": 43194099, "audio": 1}, {"filename": "/edge_defs/sounds/DSSECRET.ogg", "start": 43194099, "end": 43206940, "audio": 1}, {"filename": "/edge_defs/sounds/DSWATRFT.ogg", "start": 43206940, "end": 43214601, "audio": 1}, {"filename": "/edge_defs/sounds/DSWTDIVE.wav", "start": 43214601, "end": 43237077, "audio": 1}, {"filename": "/edge_defs/sounds/HEARTBT1.ogg", "start": 43237077, "end": 43257432, "audio": 1}, {"filename": "/edge_defs/sprites/ARM3A0.png", "start": 43257432, "end": 43258182}, {"filename": "/edge_defs/sprites/ARM3B0.png", "start": 43258182, "end": 43258860}, {"filename": "/edge_defs/sprites/ARM4A0.png", "start": 43258860, "end": 43259654}, {"filename": "/edge_defs/sprites/ARM4B0.png", "start": 43259654, "end": 43260355}, {"filename": "/edge_defs/sprites/ARM5A0.png", "start": 43260355, "end": 43260858}, {"filename": "/edge_defs/sprites/ARM5B0.png", "start": 43260858, "end": 43261373}, {"filename": "/edge_defs/sprites/BSPHA0.png", "start": 43261373, "end": 43262589}, {"filename": "/edge_defs/sprites/BSPHB0.png", "start": 43262589, "end": 43263810}, {"filename": "/edge_defs/sprites/BSPHC0.png", "start": 43263810, "end": 43265020}, {"filename": "/edge_defs/sprites/BSPHD0.png", "start": 43265020, "end": 43266221}, {"filename": "/edge_defs/sprites/BSPHE0.png", "start": 43266221, "end": 43267502}, {"filename": "/edge_defs/sprites/BSPHF0.png", "start": 43267502, "end": 43268845}, {"filename": "/edge_defs/sprites/BSPHG0.png", "start": 43268845, "end": 43270249}, {"filename": "/edge_defs/sprites/BSPHH0.png", "start": 43270249, "end": 43271594}, {"filename": "/edge_defs/sprites/BSPHI0.png", "start": 43271594, "end": 43272901}, {"filename": "/edge_defs/sprites/BSPHJ0.png", "start": 43272901, "end": 43274168}, {"filename": "/edge_defs/sprites/BSPHK0.png", "start": 43274168, "end": 43275405}, {"filename": "/edge_defs/sprites/GLS1A0.lmp", "start": 43275405, "end": 43275499}, {"filename": "/edge_defs/sprites/GLS2A0.lmp", "start": 43275499, "end": 43275713}, {"filename": "/edge_defs/sprites/GLS3A0.lmp", "start": 43275713, "end": 43276017}, {"filename": "/edge_defs/sprites/GLS4A0.lmp", "start": 43276017, "end": 43276385}, {"filename": "/edge_defs/sprites/GLS5A0.lmp", "start": 43276385, "end": 43276780}, {"filename": "/edge_defs/sprites/GLS6A0.lmp", "start": 43276780, "end": 43277216}, {"filename": "/edge_defs/sprites/GLS7A0.lmp", "start": 43277216, "end": 43277686}, {"filename": "/edge_defs/sprites/GLS8A0.lmp", "start": 43277686, "end": 43278118}, {"filename": "/edge_defs/sprites/GLS9A0.lmp", "start": 43278118, "end": 43278481}, {"filename": "/edge_defs/sprites/JPCKA0.lmp", "start": 43278481, "end": 43279297}, {"filename": "/edge_defs/sprites/JPCKB0.lmp", "start": 43279297, "end": 43280115}, {"filename": "/edge_defs/sprites/JPCKC0.lmp", "start": 43280115, "end": 43280933}, {"filename": "/edge_defs/sprites/LVASA0.png", "start": 43280933, "end": 43282231}, {"filename": "/edge_defs/sprites/LVASB0.png", "start": 43282231, "end": 43283614}, {"filename": "/edge_defs/sprites/LVASC0.png", "start": 43283614, "end": 43284968}, {"filename": "/edge_defs/sprites/LVASD0.png", "start": 43284968, "end": 43286268}, {"filename": "/edge_defs/sprites/LVASE0.png", "start": 43286268, "end": 43287537}, {"filename": "/edge_defs/sprites/LVASF0.png", "start": 43287537, "end": 43288760}, {"filename": "/edge_defs/sprites/MUDSA0.png", "start": 43288760, "end": 43289970}, {"filename": "/edge_defs/sprites/MUDSB0.png", "start": 43289970, "end": 43291182}, {"filename": "/edge_defs/sprites/MUDSC0.png", "start": 43291182, "end": 43292373}, {"filename": "/edge_defs/sprites/MUDSD0.png", "start": 43292373, "end": 43293558}, {"filename": "/edge_defs/sprites/MUDSE0.png", "start": 43293558, "end": 43294809}, {"filename": "/edge_defs/sprites/MUDSF0.png", "start": 43294809, "end": 43296050}, {"filename": "/edge_defs/sprites/MUDSG0.png", "start": 43296050, "end": 43297299}, {"filename": "/edge_defs/sprites/MUDSH0.png", "start": 43297299, "end": 43298521}, {"filename": "/edge_defs/sprites/NVSCA0.lmp", "start": 43298521, "end": 43299125}, {"filename": "/edge_defs/sprites/NVSCB0.lmp", "start": 43299125, "end": 43299729}, {"filename": "/edge_defs/sprites/PLAYX1.lmp", "start": 43299729, "end": 43300652}, {"filename": "/edge_defs/sprites/PLAYX2X8.lmp", "start": 43300652, "end": 43301868}, {"filename": "/edge_defs/sprites/PLAYX3X7.lmp", "start": 43301868, "end": 43303263}, {"filename": "/edge_defs/sprites/PLAYX4X6.lmp", "start": 43303263, "end": 43304392}, {"filename": "/edge_defs/sprites/PLAYX5.lmp", "start": 43304392, "end": 43305194}, {"filename": "/edge_defs/sprites/PLAYY1.lmp", "start": 43305194, "end": 43306142}, {"filename": "/edge_defs/sprites/PLAYY2Y8.lmp", "start": 43306142, "end": 43307370}, {"filename": "/edge_defs/sprites/PLAYY3Y7.lmp", "start": 43307370, "end": 43308756}, {"filename": "/edge_defs/sprites/PLAYY4Y6.lmp", "start": 43308756, "end": 43309894}, {"filename": "/edge_defs/sprites/PLAYY5.lmp", "start": 43309894, "end": 43310691}, {"filename": "/edge_defs/sprites/PLS1A0.lmp", "start": 43310691, "end": 43311076}, {"filename": "/edge_defs/sprites/PLS1B0.lmp", "start": 43311076, "end": 43311475}, {"filename": "/edge_defs/sprites/PLS1C0.lmp", "start": 43311475, "end": 43311860}, {"filename": "/edge_defs/sprites/PLS1D0.lmp", "start": 43311860, "end": 43312259}, {"filename": "/edge_defs/sprites/PLS1E0.lmp", "start": 43312259, "end": 43314617}, {"filename": "/edge_defs/sprites/PLS1F0.lmp", "start": 43314617, "end": 43316975}, {"filename": "/edge_defs/sprites/PLS1G0.lmp", "start": 43316975, "end": 43319202}, {"filename": "/edge_defs/sprites/PLS2A0.lmp", "start": 43319202, "end": 43319418}, {"filename": "/edge_defs/sprites/PLS2B0.lmp", "start": 43319418, "end": 43319661}, {"filename": "/edge_defs/sprites/PLS2C0.lmp", "start": 43319661, "end": 43319873}, {"filename": "/edge_defs/sprites/PLS2D0.lmp", "start": 43319873, "end": 43320263}, {"filename": "/edge_defs/sprites/PLS2E0.lmp", "start": 43320263, "end": 43320957}, {"filename": "/edge_defs/sprites/PRT1A0.png", "start": 43320957, "end": 43321829}, {"filename": "/edge_defs/sprites/PRT2A0.png", "start": 43321829, "end": 43322701}, {"filename": "/edge_defs/sprites/PRT3A0.png", "start": 43322701, "end": 43322830}, {"filename": "/edge_defs/sprites/SLDGA0.png", "start": 43322830, "end": 43324046}, {"filename": "/edge_defs/sprites/SLDGB0.png", "start": 43324046, "end": 43325264}, {"filename": "/edge_defs/sprites/SLDGC0.png", "start": 43325264, "end": 43326460}, {"filename": "/edge_defs/sprites/SLDGD0.png", "start": 43326460, "end": 43327647}, {"filename": "/edge_defs/sprites/SLDGE0.png", "start": 43327647, "end": 43328898}, {"filename": "/edge_defs/sprites/SLDGF0.png", "start": 43328898, "end": 43330139}, {"filename": "/edge_defs/sprites/SLDGG0.png", "start": 43330139, "end": 43331388}, {"filename": "/edge_defs/sprites/SLDGH0.png", "start": 43331388, "end": 43332610}, {"filename": "/edge_defs/sprites/SLIMA0.png", "start": 43332610, "end": 43333811}, {"filename": "/edge_defs/sprites/SLIMB0.png", "start": 43333811, "end": 43335016}, {"filename": "/edge_defs/sprites/SLIMC0.png", "start": 43335016, "end": 43336203}, {"filename": "/edge_defs/sprites/SLIMD0.png", "start": 43336203, "end": 43337381}, {"filename": "/edge_defs/sprites/SLIME0.png", "start": 43337381, "end": 43338626}, {"filename": "/edge_defs/sprites/SLIMF0.png", "start": 43338626, "end": 43339862}, {"filename": "/edge_defs/sprites/SLIMG0.png", "start": 43339862, "end": 43341107}, {"filename": "/edge_defs/sprites/SLIMH0.png", "start": 43341107, "end": 43342323}, {"filename": "/edge_defs/sprites/SPSHA0.png", "start": 43342323, "end": 43343540}, {"filename": "/edge_defs/sprites/SPSHB0.png", "start": 43343540, "end": 43344760}, {"filename": "/edge_defs/sprites/SPSHC0.png", "start": 43344760, "end": 43345971}, {"filename": "/edge_defs/sprites/SPSHD0.png", "start": 43345971, "end": 43347172}, {"filename": "/edge_defs/sprites/SPSHE0.png", "start": 43347172, "end": 43348452}, {"filename": "/edge_defs/sprites/SPSHF0.png", "start": 43348452, "end": 43349803}, {"filename": "/edge_defs/sprites/SPSHG0.png", "start": 43349803, "end": 43351210}, {"filename": "/edge_defs/sprites/SPSHH0.png", "start": 43351210, "end": 43352562}, {"filename": "/edge_defs/sprites/SPSHI0.png", "start": 43352562, "end": 43353873}, {"filename": "/edge_defs/sprites/SPSHJ0.png", "start": 43353873, "end": 43355141}, {"filename": "/edge_defs/sprites/SPSHK0.png", "start": 43355141, "end": 43356378}, {"filename": "/edge_defs/sprites/TSTPA0.png", "start": 43356378, "end": 43357503}, {"filename": "/edge_defs/sprites/TSTPB0.lmp", "start": 43357503, "end": 43357845}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA1.png", "start": 43357845, "end": 43359125}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA2.png", "start": 43359125, "end": 43360678}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA3.png", "start": 43360678, "end": 43362309}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA4.png", "start": 43362309, "end": 43363842}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA5.png", "start": 43363842, "end": 43365028}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA6.png", "start": 43365028, "end": 43366544}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA7.png", "start": 43366544, "end": 43368137}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA8.png", "start": 43368137, "end": 43369655}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB1.png", "start": 43369655, "end": 43370885}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB2.png", "start": 43370885, "end": 43372405}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB3.png", "start": 43372405, "end": 43374012}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB4.png", "start": 43374012, "end": 43375545}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB5.png", "start": 43375545, "end": 43376755}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB6.png", "start": 43376755, "end": 43378253}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB7.png", "start": 43378253, "end": 43379845}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB8.png", "start": 43379845, "end": 43381359}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC1.png", "start": 43381359, "end": 43382656}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC2.png", "start": 43382656, "end": 43384162}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC3.png", "start": 43384162, "end": 43385733}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC4.png", "start": 43385733, "end": 43387264}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC5.png", "start": 43387264, "end": 43388601}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC6.png", "start": 43388601, "end": 43390121}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC7.png", "start": 43390121, "end": 43391657}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC8.png", "start": 43391657, "end": 43393146}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD1.png", "start": 43393146, "end": 43394457}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD2.png", "start": 43394457, "end": 43395975}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD3.png", "start": 43395975, "end": 43397563}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD4.png", "start": 43397563, "end": 43399088}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD5.png", "start": 43399088, "end": 43400414}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD6.png", "start": 43400414, "end": 43401956}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD7.png", "start": 43401956, "end": 43403529}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD8.png", "start": 43403529, "end": 43405032}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE1.png", "start": 43405032, "end": 43406394}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE2.png", "start": 43406394, "end": 43407911}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE3.png", "start": 43407911, "end": 43409459}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE4.png", "start": 43409459, "end": 43411057}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE5.png", "start": 43411057, "end": 43412495}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE6.png", "start": 43412495, "end": 43414045}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE7.png", "start": 43414045, "end": 43415599}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE8.png", "start": 43415599, "end": 43417158}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF1.png", "start": 43417158, "end": 43418555}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF2.png", "start": 43418555, "end": 43420126}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF3.png", "start": 43420126, "end": 43421728}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF4.png", "start": 43421728, "end": 43423294}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF5.png", "start": 43423294, "end": 43424697}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF6.png", "start": 43424697, "end": 43426214}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF7.png", "start": 43426214, "end": 43427810}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF8.png", "start": 43427810, "end": 43429418}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG1.png", "start": 43429418, "end": 43430807}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG2.png", "start": 43430807, "end": 43432395}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG3.png", "start": 43432395, "end": 43434039}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG4.png", "start": 43434039, "end": 43435559}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG5.png", "start": 43435559, "end": 43436909}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG6.png", "start": 43436909, "end": 43438430}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG7.png", "start": 43438430, "end": 43440052}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG8.png", "start": 43440052, "end": 43441622}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH1.png", "start": 43441622, "end": 43442932}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH2.png", "start": 43442932, "end": 43444463}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH3.png", "start": 43444463, "end": 43446055}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH4.png", "start": 43446055, "end": 43447538}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH5.png", "start": 43447538, "end": 43448832}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH6.png", "start": 43448832, "end": 43450299}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH7.png", "start": 43450299, "end": 43451877}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH8.png", "start": 43451877, "end": 43453446}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDI0.png", "start": 43453446, "end": 43455136}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDJ0.png", "start": 43455136, "end": 43456918}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDK0.png", "start": 43456918, "end": 43458664}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDL0.png", "start": 43458664, "end": 43460384}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDM0.png", "start": 43460384, "end": 43462111}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDN0.png", "start": 43462111, "end": 43463850}, {"filename": "/edge_defs/textures/FUZZMAP8.png", "start": 43463850, "end": 43478650}, {"filename": "/edge_defs/textures/PORTAL7A.jpg", "start": 43478650, "end": 43500768}, {"filename": "/edge_defs/textures/PORTAL7B.jpg", "start": 43500768, "end": 43519121}, {"filename": "/edge_defs/textures/PORTAL7C.jpg", "start": 43519121, "end": 43534612}, {"filename": "/edge_defs/textures/PORTAL7D.jpg", "start": 43534612, "end": 43549906}, {"filename": "/edge_defs/textures/PORTAL7E.jpg", "start": 43549906, "end": 43564773}, {"filename": "/edge_defs/textures/PORTAL7F.jpg", "start": 43564773, "end": 43581774}, {"filename": "/edge_defs/textures/PORTAL7G.jpg", "start": 43581774, "end": 43602482}, {"filename": "/edge_defs/ttf/ECFONT01.ttf", "start": 43602482, "end": 43639962}, {"filename": "/edge_defs/ttf/ECFONT02.ttf", "start": 43639962, "end": 43828454}, {"filename": "/edge_defs/ttf/ECFONT03.ttf", "start": 43828454, "end": 43893542}, {"filename": "/edge_defs/version.txt", "start": 43893542, "end": 43893546}, {"filename": "/freedoom2.wad", "start": 43893546, "end": 72681294}, {"filename": "/overlays/.gitignore", "start": 72681294, "end": 72681294}, {"filename": "/overlays/Grill-1x.png", "start": 72681294, "end": 72688630}, {"filename": "/overlays/Grill-2x.png", "start": 72688630, "end": 72696019}, {"filename": "/overlays/Lines-1x.png", "start": 72696019, "end": 72696183}, {"filename": "/overlays/Linex-2x.png", "start": 72696183, "end": 72696357}, {"filename": "/overlays/Vertical-1x.png", "start": 72696357, "end": 72703660}, {"filename": "/overlays/Vertical-2x.png", "start": 72703660, "end": 72710995}, {"filename": "/soundfont/16-Bit Game Station.sf3", "start": 72710995, "end": 74063687}, {"filename": "/soundfont/ChipFreak.sf3", "start": 74063687, "end": 74127361}, {"filename": "/soundfont/ProtoSquare!.sf3", "start": 74127361, "end": 74264287}], "remote_package_size": 51540996, "package_uuid": "sha256-44304bda52697f89cc9526be846e11811bc029093f223f0adc1d4b6c5bd9c52b"});

  })();
// end include: /home/dasho/Desktop/EDGE-classic/web/site/edge-classic-data.js


var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var readAsync, readBinary;

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  try {
    scriptDirectory = new URL('.', _scriptName).href; // includes trailing slash
  } catch {
    // Must be a `blob:` or `data:` URL (e.g. `blob:http://site.com/etc/etc`), we cannot
    // infer anything from them.
  }

  {
// include: web_or_worker_shell_read.js
readAsync = async (url) => {
    var response = await fetch(url, { credentials: 'same-origin' });
    if (response.ok) {
      return response.arrayBuffer();
    }
    throw new Error(response.status + ' : ' + response.url);
  };
// end include: web_or_worker_shell_read.js
  }
} else
{
}

var out = console.log.bind(console);
var err = console.error.bind(console);

// end include: shell.js

// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
// don't define it at all in release modes.  This matches the behaviour of
// MINIMAL_RUNTIME.
// TODO(sbc): Make this the default even without STRICT enabled.
/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    // This build was created without ASSERTIONS defined.  `assert()` should not
    // ever be called in this configuration but in case there are callers in
    // the wild leave this simple abort() implementation here for now.
    abort(text);
  }
}

// Memory management

var HEAP,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/* BigInt64Array type is not correctly defined in closure
/** not-@type {!BigInt64Array} */
  HEAP64,
/* BigUint64Array type is not correctly defined in closure
/** not-t@type {!BigUint64Array} */
  HEAPU64,
/** @type {!Float64Array} */
  HEAPF64;

var runtimeInitialized = false;

/**
 * Indicates whether filename is delivered via file protocol (as opposed to http/https)
 * @noinline
 */
var isFileURI = (filename) => filename.startsWith('file://');

// include: runtime_shared.js
// include: runtime_stack_check.js
// end include: runtime_stack_check.js
// include: runtime_exceptions.js
// end include: runtime_exceptions.js
// include: runtime_debug.js
// end include: runtime_debug.js
// include: memoryprofiler.js
// end include: memoryprofiler.js


function updateMemoryViews() {
  var b = wasmMemory.buffer;
  HEAP8 = new Int8Array(b);
  HEAP16 = new Int16Array(b);
  HEAPU8 = new Uint8Array(b);
  HEAPU16 = new Uint16Array(b);
  HEAP32 = new Int32Array(b);
  HEAPU32 = new Uint32Array(b);
  HEAPF32 = new Float32Array(b);
  HEAPF64 = new Float64Array(b);
  HEAP64 = new BigInt64Array(b);
  HEAPU64 = new BigUint64Array(b);
}

// end include: runtime_shared.js
function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  // Begin ATPRERUNS hooks
  callRuntimeCallbacks(onPreRuns);
  // End ATPRERUNS hooks
}

function initRuntime() {
  runtimeInitialized = true;

  // Begin ATINITS hooks
  if (!Module['noFSInit'] && !FS.initialized) FS.init();
TTY.init();
  // End ATINITS hooks

  wasmExports['__wasm_call_ctors']();

  // Begin ATPOSTCTORS hooks
  FS.ignorePermissions = false;
  // End ATPOSTCTORS hooks
}

function preMain() {
  // No ATMAINS hooks
}

function postRun() {
   // PThreads reuse the runtime from the main thread.

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  // Begin ATPOSTRUNS hooks
  callRuntimeCallbacks(onPostRuns);
  // End ATPOSTRUNS hooks
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  Module['monitorRunDependencies']?.(runDependencies);

}

function removeRunDependency(id) {
  runDependencies--;

  Module['monitorRunDependencies']?.(runDependencies);

  if (runDependencies == 0) {
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  Module['onAbort']?.(what);

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;

  what += '. Build with -sASSERTIONS for more info.';

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // definition for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

var wasmBinaryFile;

function findWasmBinary() {
    return locateFile('edge-classic.wasm');
}

function getBinarySync(file) {
  if (file == wasmBinaryFile && wasmBinary) {
    return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
    return readBinary(file);
  }
  throw 'both async and sync fetching of the wasm failed';
}

async function getWasmBinary(binaryFile) {
  // If we don't have the binary yet, load it asynchronously using readAsync.
  if (!wasmBinary) {
    // Fetch the binary using readAsync
    try {
      var response = await readAsync(binaryFile);
      return new Uint8Array(response);
    } catch {
      // Fall back to getBinarySync below;
    }
  }

  // Otherwise, getBinarySync should be able to get it synchronously
  return getBinarySync(binaryFile);
}

async function instantiateArrayBuffer(binaryFile, imports) {
  try {
    var binary = await getWasmBinary(binaryFile);
    var instance = await WebAssembly.instantiate(binary, imports);
    return instance;
  } catch (reason) {
    err(`failed to asynchronously prepare wasm: ${reason}`);

    abort(reason);
  }
}

async function instantiateAsync(binary, binaryFile, imports) {
  if (!binary && typeof WebAssembly.instantiateStreaming == 'function'
     ) {
    try {
      var response = fetch(binaryFile, { credentials: 'same-origin' });
      var instantiationResult = await WebAssembly.instantiateStreaming(response, imports);
      return instantiationResult;
    } catch (reason) {
      // We expect the most common failure cause to be a bad MIME type for the binary,
      // in which case falling back to ArrayBuffer instantiation should work.
      err(`wasm streaming compile failed: ${reason}`);
      err('falling back to ArrayBuffer instantiation');
      // fall back of instantiateArrayBuffer below
    };
  }
  return instantiateArrayBuffer(binaryFile, imports);
}

function getWasmImports() {
  // prepare imports
  return {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports,
  }
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
async function createWasm() {
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    wasmExports = instance.exports;

    wasmExports = Asyncify.instrumentWasmExports(wasmExports);

    

    wasmMemory = wasmExports['memory'];
    
    updateMemoryViews();

    wasmTable = wasmExports['__indirect_function_table'];
    

    removeRunDependency('wasm-instantiate');
    return wasmExports;
  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above PTHREADS-enabled path.
    return receiveInstance(result['instance']);
  }

  var info = getWasmImports();

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module['instantiateWasm']) {
    return new Promise((resolve, reject) => {
        Module['instantiateWasm'](info, (mod, inst) => {
          resolve(receiveInstance(mod, inst));
        });
    });
  }

  wasmBinaryFile ??= findWasmBinary();
  try {
    var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
    var exports = receiveInstantiationResult(result);
    return exports;
  } catch (e) {
    // If instantiation fails, reject the module ready promise.
    readyPromiseReject(e);
    return Promise.reject(e);
  }
}

// end include: preamble.js

// Begin JS library code


  class ExitStatus {
      name = 'ExitStatus';
      constructor(status) {
        this.message = `Program terminated with exit(${status})`;
        this.status = status;
      }
    }

  var callRuntimeCallbacks = (callbacks) => {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    };
  var onPostRuns = [];
  var addOnPostRun = (cb) => onPostRuns.push(cb);

  var onPreRuns = [];
  var addOnPreRun = (cb) => onPreRuns.push(cb);


  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': return HEAP8[ptr];
      case 'i8': return HEAP8[ptr];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP64[((ptr)>>3)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      case '*': return HEAPU32[((ptr)>>2)];
      default: abort(`invalid type for getValue: ${type}`);
    }
  }

  var noExitRuntime = true;

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': HEAP8[ptr] = value; break;
      case 'i8': HEAP8[ptr] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': HEAP64[((ptr)>>3)] = BigInt(value); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      case '*': HEAPU32[((ptr)>>2)] = value; break;
      default: abort(`invalid type for setValue: ${type}`);
    }
  }

  var stackRestore = (val) => __emscripten_stack_restore(val);

  var stackSave = () => _emscripten_stack_get_current();

  var PATH = {
  isAbs:(path) => path.charAt(0) === '/',
  splitPath:(filename) => {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },
  normalizeArray:(parts, allowAboveRoot) => {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },
  normalize:(path) => {
        var isAbsolute = PATH.isAbs(path),
            trailingSlash = path.slice(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },
  dirname:(path) => {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.slice(0, -1);
        }
        return root + dir;
      },
  basename:(path) => path && path.match(/([^\/]+|\/)\/*$/)[1],
  join:(...paths) => PATH.normalize(paths.join('/')),
  join2:(l, r) => PATH.normalize(l + '/' + r),
  };
  
  var initRandomFill = () => {
  
      return (view) => crypto.getRandomValues(view);
    };
  var randomFill = (view) => {
      // Lazily init on the first invocation.
      (randomFill = initRandomFill())(view);
    };
  
  
  
  var PATH_FS = {
  resolve:(...args) => {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? args[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path != 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = PATH.isAbs(path);
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },
  relative:(from, to) => {
        from = PATH_FS.resolve(from).slice(1);
        to = PATH_FS.resolve(to).slice(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      },
  };
  
  
  var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;
  
    /**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number=} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */
  var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.  Also, use the length info to avoid running tiny
      // strings through TextDecoder, since .subarray() allocates garbage.
      // (As a tiny code save trick, compare endPtr against endIdx using a negation,
      // so that undefined/NaN means Infinity)
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = '';
      // If building with TextDecoder, we have already computed the string length
      // above, so test loop end condition against that
      while (idx < endPtr) {
        // For UTF8 byte structure, see:
        // http://en.wikipedia.org/wiki/UTF-8#Description
        // https://www.ietf.org/rfc/rfc2279.txt
        // https://tools.ietf.org/html/rfc3629
        var u0 = heapOrArray[idx++];
        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 0xF0) == 0xE0) {
          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
        }
  
        if (u0 < 0x10000) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        }
      }
      return str;
    };
  
  var FS_stdin_getChar_buffer = [];
  
  var lengthBytesUTF8 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var c = str.charCodeAt(i); // possibly a lead surrogate
        if (c <= 0x7F) {
          len++;
        } else if (c <= 0x7FF) {
          len += 2;
        } else if (c >= 0xD800 && c <= 0xDFFF) {
          len += 4; ++i;
        } else {
          len += 3;
        }
      }
      return len;
    };
  
  var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
      // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
      // undefined and false each don't write out any bytes.
      if (!(maxBytesToWrite > 0))
        return 0;
  
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
        // and https://www.ietf.org/rfc/rfc2279.txt
        // and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) {
          var u1 = str.charCodeAt(++i);
          u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
        }
        if (u <= 0x7F) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 0x7FF) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 0xC0 | (u >> 6);
          heap[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 0xE0 | (u >> 12);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        } else {
          if (outIdx + 3 >= endIdx) break;
          heap[outIdx++] = 0xF0 | (u >> 18);
          heap[outIdx++] = 0x80 | ((u >> 12) & 63);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        }
      }
      // Null-terminate the pointer to the buffer.
      heap[outIdx] = 0;
      return outIdx - startIdx;
    };
  /** @type {function(string, boolean=, number=)} */
  var intArrayFromString = (stringy, dontAddNull, length) => {
      var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
      var u8array = new Array(len);
      var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
      if (dontAddNull) u8array.length = numBytesWritten;
      return u8array;
    };
  var FS_stdin_getChar = () => {
      if (!FS_stdin_getChar_buffer.length) {
        var result = null;
        if (typeof window != 'undefined' &&
          typeof window.prompt == 'function') {
          // Browser.
          result = window.prompt('Input: ');  // returns null on cancel
          if (result !== null) {
            result += '\n';
          }
        } else
        {}
        if (!result) {
          return null;
        }
        FS_stdin_getChar_buffer = intArrayFromString(result, true);
      }
      return FS_stdin_getChar_buffer.shift();
    };
  var TTY = {
  ttys:[],
  init() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process.stdin.setEncoding('utf8');
        // }
      },
  shutdown() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process.stdin.pause();
        // }
      },
  register(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },
  stream_ops:{
  open(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },
  close(stream) {
          // flush any pending line data
          stream.tty.ops.fsync(stream.tty);
        },
  fsync(stream) {
          stream.tty.ops.fsync(stream.tty);
        },
  read(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.atime = Date.now();
          }
          return bytesRead;
        },
  write(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.mtime = stream.node.ctime = Date.now();
          }
          return i;
        },
  },
  default_tty_ops:{
  get_char(tty) {
          return FS_stdin_getChar();
        },
  put_char(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },
  fsync(tty) {
          if (tty.output?.length > 0) {
            out(UTF8ArrayToString(tty.output));
            tty.output = [];
          }
        },
  ioctl_tcgets(tty) {
          // typical setting
          return {
            c_iflag: 25856,
            c_oflag: 5,
            c_cflag: 191,
            c_lflag: 35387,
            c_cc: [
              0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a, 0x00,
              0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            ]
          };
        },
  ioctl_tcsets(tty, optional_actions, data) {
          // currently just ignore
          return 0;
        },
  ioctl_tiocgwinsz(tty) {
          return [24, 80];
        },
  },
  default_tty1_ops:{
  put_char(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },
  fsync(tty) {
          if (tty.output?.length > 0) {
            err(UTF8ArrayToString(tty.output));
            tty.output = [];
          }
        },
  },
  };
  
  
  var mmapAlloc = (size) => {
      abort();
    };
  var MEMFS = {
  ops_table:null,
  mount(mount) {
        return MEMFS.createNode(null, '/', 16895, 0);
      },
  createNode(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        MEMFS.ops_table ||= {
          dir: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              lookup: MEMFS.node_ops.lookup,
              mknod: MEMFS.node_ops.mknod,
              rename: MEMFS.node_ops.rename,
              unlink: MEMFS.node_ops.unlink,
              rmdir: MEMFS.node_ops.rmdir,
              readdir: MEMFS.node_ops.readdir,
              symlink: MEMFS.node_ops.symlink
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek
            }
          },
          file: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek,
              read: MEMFS.stream_ops.read,
              write: MEMFS.stream_ops.write,
              mmap: MEMFS.stream_ops.mmap,
              msync: MEMFS.stream_ops.msync
            }
          },
          link: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              readlink: MEMFS.node_ops.readlink
            },
            stream: {}
          },
          chrdev: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: FS.chrdev_stream_ops
          }
        };
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.atime = node.mtime = node.ctime = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.atime = parent.mtime = parent.ctime = node.atime;
        }
        return node;
      },
  getFileDataAsTypedArray(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },
  expandFileStorage(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },
  resizeFileStorage(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },
  node_ops:{
  getattr(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.atime);
          attr.mtime = new Date(node.mtime);
          attr.ctime = new Date(node.ctime);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },
  setattr(node, attr) {
          for (const key of ["mode", "atime", "mtime", "ctime"]) {
            if (attr[key] != null) {
              node[key] = attr[key];
            }
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },
  lookup(parent, name) {
          throw MEMFS.doesNotExistError;
        },
  mknod(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },
  rename(old_node, new_dir, new_name) {
          var new_node;
          try {
            new_node = FS.lookupNode(new_dir, new_name);
          } catch (e) {}
          if (new_node) {
            if (FS.isDir(old_node.mode)) {
              // if we're overwriting a directory at new_name, make sure it's empty.
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
            FS.hashRemoveNode(new_node);
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          new_dir.contents[new_name] = old_node;
          old_node.name = new_name;
          new_dir.ctime = new_dir.mtime = old_node.parent.ctime = old_node.parent.mtime = Date.now();
        },
  unlink(parent, name) {
          delete parent.contents[name];
          parent.ctime = parent.mtime = Date.now();
        },
  rmdir(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.ctime = parent.mtime = Date.now();
        },
  readdir(node) {
          return ['.', '..', ...Object.keys(node.contents)];
        },
  symlink(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0o777 | 40960, 0);
          node.link = oldpath;
          return node;
        },
  readlink(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        },
  },
  stream_ops:{
  read(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },
  write(stream, buffer, offset, length, position, canOwn) {
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.mtime = node.ctime = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },
  llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
  mmap(stream, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the
            // buffer we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            if (contents) {
              // Try to avoid unnecessary slices.
              if (position > 0 || position + length < contents.length) {
                if (contents.subarray) {
                  contents = contents.subarray(position, position + length);
                } else {
                  contents = Array.prototype.slice.call(contents, position, position + length);
                }
              }
              HEAP8.set(contents, ptr);
            }
          }
          return { ptr, allocated };
        },
  msync(stream, buffer, offset, length, mmapFlags) {
          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        },
  },
  };
  
  var asyncLoad = async (url) => {
      var arrayBuffer = await readAsync(url);
      return new Uint8Array(arrayBuffer);
    };
  asyncLoad.isAsync = true;
  
  
  var FS_createDataFile = (...args) => FS.createDataFile(...args);
  
  var preloadPlugins = [];
  var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {
      // Ensure plugins are ready.
      if (typeof Browser != 'undefined') Browser.init();
  
      var handled = false;
      preloadPlugins.forEach((plugin) => {
        if (handled) return;
        if (plugin['canHandle'](fullname)) {
          plugin['handle'](byteArray, fullname, finish, onerror);
          handled = true;
        }
      });
      return handled;
    };
  var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
      // TODO we should allow people to just pass in a complete filename instead
      // of parent and name being that we just join them anyways
      var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
      var dep = getUniqueRunDependency(`cp ${fullname}`); // might have several active requests for the same fullname
      function processData(byteArray) {
        function finish(byteArray) {
          preFinish?.();
          if (!dontCreateFile) {
            FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
          }
          onload?.();
          removeRunDependency(dep);
        }
        if (FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {
          onerror?.();
          removeRunDependency(dep);
        })) {
          return;
        }
        finish(byteArray);
      }
      addRunDependency(dep);
      if (typeof url == 'string') {
        asyncLoad(url).then(processData, onerror);
      } else {
        processData(url);
      }
    };
  
  var FS_modeStringToFlags = (str) => {
      var flagModes = {
        'r': 0,
        'r+': 2,
        'w': 512 | 64 | 1,
        'w+': 512 | 64 | 2,
        'a': 1024 | 64 | 1,
        'a+': 1024 | 64 | 2,
      };
      var flags = flagModes[str];
      if (typeof flags == 'undefined') {
        throw new Error(`Unknown file open mode: ${str}`);
      }
      return flags;
    };
  
  var FS_getMode = (canRead, canWrite) => {
      var mode = 0;
      if (canRead) mode |= 292 | 73;
      if (canWrite) mode |= 146;
      return mode;
    };
  
  
  
  
  
  
  var IDBFS = {
  dbs:{
  },
  indexedDB:() => {
        if (typeof indexedDB != 'undefined') return indexedDB;
        var ret = null;
        if (typeof window == 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        return ret;
      },
  DB_VERSION:21,
  DB_STORE_NAME:"FILE_DATA",
  queuePersist:(mount) => {
        function onPersistComplete() {
          if (mount.idbPersistState === 'again') startPersist(); // If a new sync request has appeared in between, kick off a new sync
          else mount.idbPersistState = 0; // Otherwise reset sync state back to idle to wait for a new sync later
        }
        function startPersist() {
          mount.idbPersistState = 'idb'; // Mark that we are currently running a sync operation
          IDBFS.syncfs(mount, /*populate:*/false, onPersistComplete);
        }
  
        if (!mount.idbPersistState) {
          // Programs typically write/copy/move multiple files in the in-memory
          // filesystem within a single app frame, so when a filesystem sync
          // command is triggered, do not start it immediately, but only after
          // the current frame is finished. This way all the modified files
          // inside the main loop tick will be batched up to the same sync.
          mount.idbPersistState = setTimeout(startPersist, 0);
        } else if (mount.idbPersistState === 'idb') {
          // There is an active IndexedDB sync operation in-flight, but we now
          // have accumulated more files to sync. We should therefore queue up
          // a new sync after the current one finishes so that all writes
          // will be properly persisted.
          mount.idbPersistState = 'again';
        }
      },
  mount:(mount) => {
        // reuse core MEMFS functionality
        var mnt = MEMFS.mount(mount);
        // If the automatic IDBFS persistence option has been selected, then automatically persist
        // all modifications to the filesystem as they occur.
        if (mount?.opts?.autoPersist) {
          mnt.idbPersistState = 0; // IndexedDB sync starts in idle state
          var memfs_node_ops = mnt.node_ops;
          mnt.node_ops = {...mnt.node_ops}; // Clone node_ops to inject write tracking
          mnt.node_ops.mknod = (parent, name, mode, dev) => {
            var node = memfs_node_ops.mknod(parent, name, mode, dev);
            // Propagate injected node_ops to the newly created child node
            node.node_ops = mnt.node_ops;
            // Remember for each IDBFS node which IDBFS mount point they came from so we know which mount to persist on modification.
            node.idbfs_mount = mnt.mount;
            // Remember original MEMFS stream_ops for this node
            node.memfs_stream_ops = node.stream_ops;
            // Clone stream_ops to inject write tracking
            node.stream_ops = {...node.stream_ops};
  
            // Track all file writes
            node.stream_ops.write = (stream, buffer, offset, length, position, canOwn) => {
              // This file has been modified, we must persist IndexedDB when this file closes
              stream.node.isModified = true;
              return node.memfs_stream_ops.write(stream, buffer, offset, length, position, canOwn);
            };
  
            // Persist IndexedDB on file close
            node.stream_ops.close = (stream) => {
              var n = stream.node;
              if (n.isModified) {
                IDBFS.queuePersist(n.idbfs_mount);
                n.isModified = false;
              }
              if (n.memfs_stream_ops.close) return n.memfs_stream_ops.close(stream);
            };
  
            return node;
          };
          // Also kick off persisting the filesystem on other operations that modify the filesystem.
          mnt.node_ops.mkdir   = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.mkdir(...args));
          mnt.node_ops.rmdir   = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.rmdir(...args));
          mnt.node_ops.symlink = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.symlink(...args));
          mnt.node_ops.unlink  = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.unlink(...args));
          mnt.node_ops.rename  = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.rename(...args));
        }
        return mnt;
      },
  syncfs:(mount, populate, callback) => {
        IDBFS.getLocalSet(mount, (err, local) => {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, (err, remote) => {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },
  quit:() => {
        Object.values(IDBFS.dbs).forEach((value) => value.close());
        IDBFS.dbs = {};
      },
  getDB:(name, callback) => {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = (e) => {
          var db = /** @type {IDBDatabase} */ (e.target.result);
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = () => {
          db = /** @type {IDBDatabase} */ (req.result);
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = (e) => {
          callback(e.target.error);
          e.preventDefault();
        };
      },
  getLocalSet:(mount, callback) => {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return (p) => PATH.join2(root, p);
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push(...FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { 'timestamp': stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },
  getRemoteSet:(mount, callback) => {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, (err, db) => {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = (e) => {
              callback(e.target.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = (event) => {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db, entries });
              }
  
              entries[cursor.primaryKey] = { 'timestamp': cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },
  loadLocalEntry:(path, callback) => {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { 'timestamp': stat.mtime, 'mode': stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { 'timestamp': stat.mtime, 'mode': stat.mode, 'contents': node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },
  storeLocalEntry:(path, entry, callback) => {
        try {
          if (FS.isDir(entry['mode'])) {
            FS.mkdirTree(path, entry['mode']);
          } else if (FS.isFile(entry['mode'])) {
            FS.writeFile(path, entry['contents'], { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry['mode']);
          FS.utime(path, entry['timestamp'], entry['timestamp']);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },
  removeLocalEntry:(path, callback) => {
        try {
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },
  loadRemoteEntry:(store, path, callback) => {
        var req = store.get(path);
        req.onsuccess = (event) => callback(null, event.target.result);
        req.onerror = (e) => {
          callback(e.target.error);
          e.preventDefault();
        };
      },
  storeRemoteEntry:(store, path, entry, callback) => {
        try {
          var req = store.put(entry, path);
        } catch (e) {
          callback(e);
          return;
        }
        req.onsuccess = (event) => callback();
        req.onerror = (e) => {
          callback(e.target.error);
          e.preventDefault();
        };
      },
  removeRemoteEntry:(store, path, callback) => {
        var req = store.delete(path);
        req.onsuccess = (event) => callback();
        req.onerror = (e) => {
          callback(e.target.error);
          e.preventDefault();
        };
      },
  reconcile:(src, dst, callback) => {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach((key) => {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e['timestamp'].getTime() != e2['timestamp'].getTime()) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach((key) => {
          if (!src.entries[key]) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err && !errored) {
            errored = true;
            return callback(err);
          }
        };
  
        // transaction may abort if (for example) there is a QuotaExceededError
        transaction.onerror = transaction.onabort = (e) => {
          done(e.target.error);
          e.preventDefault();
        };
  
        transaction.oncomplete = (e) => {
          if (!errored) {
            callback(null);
          }
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach((path) => {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, (err, entry) => {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, (err, entry) => {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach((path) => {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      },
  };
  
  
  var LZ4 = {
  DIR_MODE:16895,
  FILE_MODE:33279,
  CHUNK_SIZE:-1,
  codec:null,
  init() {
        if (LZ4.codec) return;
        LZ4.codec = (() => {
          /*
  MiniLZ4: Minimal LZ4 block decoding and encoding.
  
  based off of node-lz4, https://github.com/pierrec/node-lz4
  
  ====
  Copyright (c) 2012 Pierre Curto
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  ====
  
  changes have the same license
  */
  
  var MiniLZ4 = (function() {
  
  var exports = {};
  
  /**
   * Decode a block. Assumptions: input contains all sequences of a 
   * chunk, output is large enough to receive the decoded data.
   * If the output buffer is too small, an error will be thrown.
   * If the returned value is negative, an error occured at the returned offset.
   *
   * @param {ArrayBufferView} input input data
   * @param {ArrayBufferView} output output data
   * @param {number=} sIdx
   * @param {number=} eIdx
   * @return {number} number of decoded bytes
   * @private
   */
  exports.uncompress = function (input, output, sIdx, eIdx) {
  	sIdx = sIdx || 0
  	eIdx = eIdx || (input.length - sIdx)
  	// Process each sequence in the incoming data
  	for (var i = sIdx, n = eIdx, j = 0; i < n;) {
  		var token = input[i++]
  
  		// Literals
  		var literals_length = (token >> 4)
  		if (literals_length > 0) {
  			// length of literals
  			var l = literals_length + 240
  			while (l === 255) {
  				l = input[i++]
  				literals_length += l
  			}
  
  			// Copy the literals
  			var end = i + literals_length
  			while (i < end) output[j++] = input[i++]
  
  			// End of buffer?
  			if (i === n) return j
  		}
  
  		// Match copy
  		// 2 bytes offset (little endian)
  		var offset = input[i++] | (input[i++] << 8)
  
  		// XXX 0 is an invalid offset value
  		if (offset === 0) return j
  		if (offset > j) return -(i-2)
  
  		// length of match copy
  		var match_length = (token & 0xf)
  		var l = match_length + 240
  		while (l === 255) {
  			l = input[i++]
  			match_length += l
  		}
  
  		// Copy the match
  		var pos = j - offset // position of the match copy in the current output
  		var end = j + match_length + 4 // minmatch = 4
  		while (j < end) output[j++] = output[pos++]
  	}
  
  	return j
  }
  
  var
  	maxInputSize	= 0x7E000000
  ,	minMatch		= 4
  // uint32() optimization
  ,	hashLog			= 16
  ,	hashShift		= (minMatch * 8) - hashLog
  ,	hashSize		= 1 << hashLog
  
  ,	copyLength		= 8
  ,	lastLiterals	= 5
  ,	mfLimit			= copyLength + minMatch
  ,	skipStrength	= 6
  
  ,	mlBits  		= 4
  ,	mlMask  		= (1 << mlBits) - 1
  ,	runBits 		= 8 - mlBits
  ,	runMask 		= (1 << runBits) - 1
  
  ,	hasher 			= /* XXX uint32( */ 2654435761 /* ) */
  
  assert(hashShift === 16);
  var hashTable = new Int16Array(1<<16);
  var empty = new Int16Array(hashTable.length);
  
  // CompressBound returns the maximum length of a lz4 block, given it's uncompressed length
  exports.compressBound = function (isize) {
  	return isize > maxInputSize
  		? 0
  		: (isize + (isize/255) + 16) | 0
  }
  
  /** @param {number=} sIdx
  	@param {number=} eIdx */
  exports.compress = function (src, dst, sIdx, eIdx) {
  	hashTable.set(empty);
  	return compressBlock(src, dst, 0, sIdx || 0, eIdx || dst.length)
  }
  
  function compressBlock (src, dst, pos, sIdx, eIdx) {
  	// XXX var Hash = uint32() // Reusable unsigned 32 bits integer
  	var dpos = sIdx
  	var dlen = eIdx - sIdx
  	var anchor = 0
  
  	if (src.length >= maxInputSize) throw new Error("input too large")
  
  	// Minimum of input bytes for compression (LZ4 specs)
  	if (src.length > mfLimit) {
  		var n = exports.compressBound(src.length)
  		if ( dlen < n ) throw Error("output too small: " + dlen + " < " + n)
  
  		var 
  			step  = 1
  		,	findMatchAttempts = (1 << skipStrength) + 3
  		// Keep last few bytes incompressible (LZ4 specs):
  		// last 5 bytes must be literals
  		,	srcLength = src.length - mfLimit
  
  		while (pos + minMatch < srcLength) {
  			// Find a match
  			// min match of 4 bytes aka sequence
  			var sequenceLowBits = src[pos+1]<<8 | src[pos]
  			var sequenceHighBits = src[pos+3]<<8 | src[pos+2]
  			// compute hash for the current sequence
  			var hash = Math.imul(sequenceLowBits | (sequenceHighBits << 16), hasher) >>> hashShift;
  			/* XXX Hash.fromBits(sequenceLowBits, sequenceHighBits)
  							.multiply(hasher)
  							.shiftr(hashShift)
  							.toNumber() */
  			// get the position of the sequence matching the hash
  			// NB. since 2 different sequences may have the same hash
  			// it is double-checked below
  			// do -1 to distinguish between initialized and uninitialized values
  			var ref = hashTable[hash] - 1
  			// save position of current sequence in hash table
  			hashTable[hash] = pos + 1
  
  			// first reference or within 64k limit or current sequence !== hashed one: no match
  			if ( ref < 0 ||
  				((pos - ref) >>> 16) > 0 ||
  				(
  					((src[ref+3]<<8 | src[ref+2]) != sequenceHighBits) ||
  					((src[ref+1]<<8 | src[ref]) != sequenceLowBits )
  				)
  			) {
  				// increase step if nothing found within limit
  				step = findMatchAttempts++ >> skipStrength
  				pos += step
  				continue
  			}
  
  			findMatchAttempts = (1 << skipStrength) + 3
  
  			// got a match
  			var literals_length = pos - anchor
  			var offset = pos - ref
  
  			// minMatch already verified
  			pos += minMatch
  			ref += minMatch
  
  			// move to the end of the match (>=minMatch)
  			var match_length = pos
  			while (pos < srcLength && src[pos] == src[ref]) {
  				pos++
  				ref++
  			}
  
  			// match length
  			match_length = pos - match_length
  
  			// token
  			var token = match_length < mlMask ? match_length : mlMask
  
  			// encode literals length
  			if (literals_length >= runMask) {
  				// add match length to the token
  				dst[dpos++] = (runMask << mlBits) + token
  				for (var len = literals_length - runMask; len > 254; len -= 255) {
  					dst[dpos++] = 255
  				}
  				dst[dpos++] = len
  			} else {
  				// add match length to the token
  				dst[dpos++] = (literals_length << mlBits) + token
  			}
  
  			// write literals
  			for (var i = 0; i < literals_length; i++) {
  				dst[dpos++] = src[anchor+i]
  			}
  
  			// encode offset
  			dst[dpos++] = offset
  			dst[dpos++] = (offset >> 8)
  
  			// encode match length
  			if (match_length >= mlMask) {
  				match_length -= mlMask
  				while (match_length >= 255) {
  					match_length -= 255
  					dst[dpos++] = 255
  				}
  
  				dst[dpos++] = match_length
  			}
  
  			anchor = pos
  		}
  	}
  
  	// cannot compress input
  	if (anchor == 0) return 0
  
  	// Write last literals
  	// encode literals length
  	literals_length = src.length - anchor
  	if (literals_length >= runMask) {
  		// add match length to the token
  		dst[dpos++] = (runMask << mlBits)
  		for (var ln = literals_length - runMask; ln > 254; ln -= 255) {
  			dst[dpos++] = 255
  		}
  		dst[dpos++] = ln
  	} else {
  		// add match length to the token
  		dst[dpos++] = (literals_length << mlBits)
  	}
  
  	// write literals
  	pos = anchor
  	while (pos < src.length) {
  		dst[dpos++] = src[pos++]
  	}
  
  	return dpos
  }
  
  exports.CHUNK_SIZE = 2048; // musl libc does readaheads of 1024 bytes, so a multiple of that is a good idea
  
  exports.compressPackage = function(data, verify) {
    if (verify) {
      var temp = new Uint8Array(exports.CHUNK_SIZE);
    }
    // compress the data in chunks
    assert(data instanceof ArrayBuffer);
    data = new Uint8Array(data);
    console.log('compressing package of size ' + data.length);
    var compressedChunks = [];
    var successes = [];
    var offset = 0;
    var total = 0;
    while (offset < data.length) {
      var chunk = data.subarray(offset, offset + exports.CHUNK_SIZE);
      //console.log('compress a chunk ' + [offset, total, data.length]);
      offset += exports.CHUNK_SIZE;
      var bound = exports.compressBound(chunk.length);
      var compressed = new Uint8Array(bound);
      var compressedSize = exports.compress(chunk, compressed);
      if (compressedSize > 0) {
        assert(compressedSize <= bound);
        compressed = compressed.subarray(0, compressedSize);
        compressedChunks.push(compressed);
        total += compressedSize;
        successes.push(1);
        if (verify) {
          var back = exports.uncompress(compressed, temp);
          assert(back === chunk.length, [back, chunk.length]);
          for (var i = 0; i < chunk.length; i++) {
            assert(chunk[i] === temp[i]);
          }
        }
      } else {
        assert(compressedSize === 0);
        // failure to compress :(
        compressedChunks.push(chunk);
        total += chunk.length; // last chunk may not be the full exports.CHUNK_SIZE size
        successes.push(0);
      }
    }
    data = null; // XXX null out pack['data'] too?
    var compressedData = {
      'data': new Uint8Array(total + exports.CHUNK_SIZE*2), // store all the compressed data, plus room for two cached decompressed chunk, in one fast array
      'cachedOffset': total,
      'cachedIndexes': [-1, -1], // cache last two blocks, so that reading 1,2,3 + preloading another block won't trigger decompress thrashing
      'cachedChunks': [null, null],
      'offsets': [], // chunk# => start in compressed data
      'sizes': [],
      'successes': successes, // 1 if chunk is compressed
    };
    offset = 0;
    for (var i = 0; i < compressedChunks.length; i++) {
      compressedData['data'].set(compressedChunks[i], offset);
      compressedData['offsets'][i] = offset;
      compressedData['sizes'][i] = compressedChunks[i].length
      offset += compressedChunks[i].length;
    }
    console.log('compressed package into ' + [compressedData['data'].length]);
    assert(offset === total);
    return compressedData;
  };
  
  assert(exports.CHUNK_SIZE < (1 << 15)); // we use 16-bit ints as the type of the hash table, chunk size must be smaller
  
  return exports;
  
  })();
  
  if (typeof module != 'undefined') {
    module.exports = MiniLZ4;
  }
  ;
          return MiniLZ4;
        })();
        LZ4.CHUNK_SIZE = LZ4.codec.CHUNK_SIZE;
      },
  loadPackage(pack, preloadPlugin) {
        LZ4.init();
        var compressedData = pack['compressedData'] || LZ4.codec.compressPackage(pack['data']);
        assert(compressedData['cachedIndexes'].length === compressedData['cachedChunks'].length);
        for (var i = 0; i < compressedData['cachedIndexes'].length; i++) {
          compressedData['cachedIndexes'][i] = -1;
          compressedData['cachedChunks'][i] = compressedData['data'].subarray(compressedData['cachedOffset'] + i*LZ4.CHUNK_SIZE,
                                                                        compressedData['cachedOffset'] + (i+1)*LZ4.CHUNK_SIZE);
          assert(compressedData['cachedChunks'][i].length === LZ4.CHUNK_SIZE);
        }
        pack['metadata'].files.forEach((file) => {
          var dir = PATH.dirname(file.filename);
          var name = PATH.basename(file.filename);
          FS.createPath('', dir, true, true);
          var parent = FS.analyzePath(dir).object;
          LZ4.createNode(parent, name, LZ4.FILE_MODE, 0, {
            compressedData,
            start: file.start,
            end: file.end,
          });
        });
        // Preload files if necessary. This code is largely similar to
        // createPreloadedFile in library_fs.js. However, a main difference here
        // is that we only decompress the file if it can be preloaded.
        // Abstracting out the common parts seems to be more effort than it is
        // worth.
        if (preloadPlugin) {
          Browser.init();
          pack['metadata'].files.forEach((file) => {
            var handled = false;
            var fullname = file.filename;
            preloadPlugins.forEach((plugin) => {
              if (handled) return;
              if (plugin['canHandle'](fullname)) {
                var dep = getUniqueRunDependency('fp ' + fullname);
                addRunDependency(dep);
                var finish = () => removeRunDependency(dep);
                var byteArray = FS.readFile(fullname);
                plugin['handle'](byteArray, fullname, finish, finish);
                handled = true;
              }
            });
          });
        }
      },
  createNode(parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = LZ4.node_ops;
        node.stream_ops = LZ4.stream_ops;
        this.atime = this.mtime = this.ctime = (mtime || new Date).getTime();
        assert(LZ4.FILE_MODE !== LZ4.DIR_MODE);
        if (mode === LZ4.FILE_MODE) {
          node.size = contents.end - contents.start;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },
  node_ops:{
  getattr(node) {
          return {
            dev: 1,
            ino: node.id,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: 0,
            size: node.size,
            atime: new Date(node.atime),
            mtime: new Date(node.mtime),
            ctime: new Date(node.ctime),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },
  setattr(node, attr) {
          for (const key of ['mode', 'atime', 'mtime', 'ctime']) {
            if (attr[key]) {
              node[key] = attr[key];
            }
          }
        },
  lookup(parent, name) {
          throw new FS.ErrnoError(44);
        },
  mknod(parent, name, mode, dev) {
          throw new FS.ErrnoError(63);
        },
  rename(oldNode, newDir, newName) {
          throw new FS.ErrnoError(63);
        },
  unlink(parent, name) {
          throw new FS.ErrnoError(63);
        },
  rmdir(parent, name) {
          throw new FS.ErrnoError(63);
        },
  readdir(node) {
          throw new FS.ErrnoError(63);
        },
  symlink(parent, newName, oldPath) {
          throw new FS.ErrnoError(63);
        },
  },
  stream_ops:{
  read(stream, buffer, offset, length, position) {
          //out('LZ4 read ' + [offset, length, position]);
          length = Math.min(length, stream.node.size - position);
          if (length <= 0) return 0;
          var contents = stream.node.contents;
          var compressedData = contents.compressedData;
          var written = 0;
          while (written < length) {
            var start = contents.start + position + written; // start index in uncompressed data
            var desired = length - written;
            //out('current read: ' + ['start', start, 'desired', desired]);
            var chunkIndex = Math.floor(start / LZ4.CHUNK_SIZE);
            var compressedStart = compressedData['offsets'][chunkIndex];
            var compressedSize = compressedData['sizes'][chunkIndex];
            var currChunk;
            if (compressedData['successes'][chunkIndex]) {
              var found = compressedData['cachedIndexes'].indexOf(chunkIndex);
              if (found >= 0) {
                currChunk = compressedData['cachedChunks'][found];
              } else {
                // decompress the chunk
                compressedData['cachedIndexes'].pop();
                compressedData['cachedIndexes'].unshift(chunkIndex);
                currChunk = compressedData['cachedChunks'].pop();
                compressedData['cachedChunks'].unshift(currChunk);
                if (compressedData['debug']) {
                  out('decompressing chunk ' + chunkIndex);
                  Module['decompressedChunks'] = (Module['decompressedChunks'] || 0) + 1;
                }
                var compressed = compressedData['data'].subarray(compressedStart, compressedStart + compressedSize);
                //var t = Date.now();
                var originalSize = LZ4.codec.uncompress(compressed, currChunk);
                //out('decompress time: ' + (Date.now() - t));
                if (chunkIndex < compressedData['successes'].length-1) assert(originalSize === LZ4.CHUNK_SIZE); // all but the last chunk must be full-size
              }
            } else {
              // uncompressed
              currChunk = compressedData['data'].subarray(compressedStart, compressedStart + LZ4.CHUNK_SIZE);
            }
            var startInChunk = start % LZ4.CHUNK_SIZE;
            var endInChunk = Math.min(startInChunk + desired, LZ4.CHUNK_SIZE);
            buffer.set(currChunk.subarray(startInChunk, endInChunk), offset + written);
            var currWritten = endInChunk - startInChunk;
            written += currWritten;
          }
          return written;
        },
  write(stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(29);
        },
  llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
  },
  };
  var FS = {
  root:null,
  mounts:[],
  devices:{
  },
  streams:[],
  nextInode:1,
  nameTable:null,
  currentPath:"/",
  initialized:false,
  ignorePermissions:true,
  filesystems:null,
  syncFSRequests:0,
  readFiles:{
  },
  ErrnoError:class {
        name = 'ErrnoError';
        // We set the `name` property to be able to identify `FS.ErrnoError`
        // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.
        // - when using PROXYFS, an error can come from an underlying FS
        // as different FS objects have their own FS.ErrnoError each,
        // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.
        // we'll use the reliable test `err.name == "ErrnoError"` instead
        constructor(errno) {
          this.errno = errno;
        }
      },
  FSStream:class {
        shared = {};
        get object() {
          return this.node;
        }
        set object(val) {
          this.node = val;
        }
        get isRead() {
          return (this.flags & 2097155) !== 1;
        }
        get isWrite() {
          return (this.flags & 2097155) !== 0;
        }
        get isAppend() {
          return (this.flags & 1024);
        }
        get flags() {
          return this.shared.flags;
        }
        set flags(val) {
          this.shared.flags = val;
        }
        get position() {
          return this.shared.position;
        }
        set position(val) {
          this.shared.position = val;
        }
      },
  FSNode:class {
        node_ops = {};
        stream_ops = {};
        readMode = 292 | 73;
        writeMode = 146;
        mounted = null;
        constructor(parent, name, mode, rdev) {
          if (!parent) {
            parent = this;  // root node sets parent to itself
          }
          this.parent = parent;
          this.mount = parent.mount;
          this.id = FS.nextInode++;
          this.name = name;
          this.mode = mode;
          this.rdev = rdev;
          this.atime = this.mtime = this.ctime = Date.now();
        }
        get read() {
          return (this.mode & this.readMode) === this.readMode;
        }
        set read(val) {
          val ? this.mode |= this.readMode : this.mode &= ~this.readMode;
        }
        get write() {
          return (this.mode & this.writeMode) === this.writeMode;
        }
        set write(val) {
          val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;
        }
        get isFolder() {
          return FS.isDir(this.mode);
        }
        get isDevice() {
          return FS.isChrdev(this.mode);
        }
      },
  lookupPath(path, opts = {}) {
        if (!path) {
          throw new FS.ErrnoError(44);
        }
        opts.follow_mount ??= true
  
        if (!PATH.isAbs(path)) {
          path = FS.cwd() + '/' + path;
        }
  
        // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
        linkloop: for (var nlinks = 0; nlinks < 40; nlinks++) {
          // split the absolute path
          var parts = path.split('/').filter((p) => !!p);
  
          // start at the root
          var current = FS.root;
          var current_path = '/';
  
          for (var i = 0; i < parts.length; i++) {
            var islast = (i === parts.length-1);
            if (islast && opts.parent) {
              // stop resolving
              break;
            }
  
            if (parts[i] === '.') {
              continue;
            }
  
            if (parts[i] === '..') {
              current_path = PATH.dirname(current_path);
              if (FS.isRoot(current)) {
                path = current_path + '/' + parts.slice(i + 1).join('/');
                continue linkloop;
              } else {
                current = current.parent;
              }
              continue;
            }
  
            current_path = PATH.join2(current_path, parts[i]);
            try {
              current = FS.lookupNode(current, parts[i]);
            } catch (e) {
              // if noent_okay is true, suppress a ENOENT in the last component
              // and return an object with an undefined node. This is needed for
              // resolving symlinks in the path when creating a file.
              if ((e?.errno === 44) && islast && opts.noent_okay) {
                return { path: current_path };
              }
              throw e;
            }
  
            // jump to the mount's root node if this is a mountpoint
            if (FS.isMountpoint(current) && (!islast || opts.follow_mount)) {
              current = current.mounted.root;
            }
  
            // by default, lookupPath will not follow a symlink if it is the final path component.
            // setting opts.follow = true will override this behavior.
            if (FS.isLink(current.mode) && (!islast || opts.follow)) {
              if (!current.node_ops.readlink) {
                throw new FS.ErrnoError(52);
              }
              var link = current.node_ops.readlink(current);
              if (!PATH.isAbs(link)) {
                link = PATH.dirname(current_path) + '/' + link;
              }
              path = link + '/' + parts.slice(i + 1).join('/');
              continue linkloop;
            }
          }
          return { path: current_path, node: current };
        }
        throw new FS.ErrnoError(32);
      },
  getPath(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? `${mount}/${path}` : mount + path;
          }
          path = path ? `${node.name}/${path}` : node.name;
          node = node.parent;
        }
      },
  hashName(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },
  hashAddNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },
  hashRemoveNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },
  lookupNode(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },
  createNode(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },
  destroyNode(node) {
        FS.hashRemoveNode(node);
      },
  isRoot(node) {
        return node === node.parent;
      },
  isMountpoint(node) {
        return !!node.mounted;
      },
  isFile(mode) {
        return (mode & 61440) === 32768;
      },
  isDir(mode) {
        return (mode & 61440) === 16384;
      },
  isLink(mode) {
        return (mode & 61440) === 40960;
      },
  isChrdev(mode) {
        return (mode & 61440) === 8192;
      },
  isBlkdev(mode) {
        return (mode & 61440) === 24576;
      },
  isFIFO(mode) {
        return (mode & 61440) === 4096;
      },
  isSocket(mode) {
        return (mode & 49152) === 49152;
      },
  flagsToPermissionString(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },
  nodePermissions(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },
  mayLookup(dir) {
        if (!FS.isDir(dir.mode)) return 54;
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },
  mayCreate(dir, name) {
        if (!FS.isDir(dir.mode)) {
          return 54;
        }
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },
  mayDelete(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },
  mayOpen(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' // opening for write
              || (flags & (512 | 64))) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },
  checkOpExists(op, err) {
        if (!op) {
          throw new FS.ErrnoError(err);
        }
        return op;
      },
  MAX_OPEN_FDS:4096,
  nextfd() {
        for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },
  getStreamChecked(fd) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        return stream;
      },
  getStream:(fd) => FS.streams[fd],
  createStream(stream, fd = -1) {
  
        // clone it, so we can return an instance of FSStream
        stream = Object.assign(new FS.FSStream(), stream);
        if (fd == -1) {
          fd = FS.nextfd();
        }
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },
  closeStream(fd) {
        FS.streams[fd] = null;
      },
  dupStream(origStream, fd = -1) {
        var stream = FS.createStream(origStream, fd);
        stream.stream_ops?.dup?.(stream);
        return stream;
      },
  doSetAttr(stream, node, attr) {
        var setattr = stream?.stream_ops.setattr;
        var arg = setattr ? stream : node;
        setattr ??= node.node_ops.setattr;
        FS.checkOpExists(setattr, 63)
        setattr(arg, attr);
      },
  chrdev_stream_ops:{
  open(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          stream.stream_ops.open?.(stream);
        },
  llseek() {
          throw new FS.ErrnoError(70);
        },
  },
  major:(dev) => ((dev) >> 8),
  minor:(dev) => ((dev) & 0xff),
  makedev:(ma, mi) => ((ma) << 8 | (mi)),
  registerDevice(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },
  getDevice:(dev) => FS.devices[dev],
  getMounts(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push(...m.mounts);
        }
  
        return mounts;
      },
  syncfs(populate, callback) {
        if (typeof populate == 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach((mount) => {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },
  mount(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type,
          opts,
          mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },
  unmount(mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach((hash) => {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
      },
  lookup(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },
  mknod(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name) {
          throw new FS.ErrnoError(28);
        }
        if (name === '.' || name === '..') {
          throw new FS.ErrnoError(20);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },
  statfs(path) {
        return FS.statfsNode(FS.lookupPath(path, {follow: true}).node);
      },
  statfsStream(stream) {
        // We keep a separate statfsStream function because noderawfs overrides
        // it. In noderawfs, stream.node is sometimes null. Instead, we need to
        // look at stream.path.
        return FS.statfsNode(stream.node);
      },
  statfsNode(node) {
        // NOTE: None of the defaults here are true. We're just returning safe and
        //       sane values. Currently nodefs and rawfs replace these defaults,
        //       other file systems leave them alone.
        var rtn = {
          bsize: 4096,
          frsize: 4096,
          blocks: 1e6,
          bfree: 5e5,
          bavail: 5e5,
          files: FS.nextInode,
          ffree: FS.nextInode - 1,
          fsid: 42,
          flags: 2,
          namelen: 255,
        };
  
        if (node.node_ops.statfs) {
          Object.assign(rtn, node.node_ops.statfs(node.mount.opts.root));
        }
        return rtn;
      },
  create(path, mode = 0o666) {
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },
  mkdir(path, mode = 0o777) {
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },
  mkdirTree(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var dir of dirs) {
          if (!dir) continue;
          if (d || PATH.isAbs(path)) d += '/';
          d += dir;
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },
  mkdev(path, mode, dev) {
        if (typeof dev == 'undefined') {
          dev = mode;
          mode = 0o666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },
  symlink(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },
  rename(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existent directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
          // update old node (we do this here to avoid each backend
          // needing to)
          old_node.parent = new_dir;
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },
  rmdir(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },
  readdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        var readdir = FS.checkOpExists(node.node_ops.readdir, 54);
        return readdir(node);
      },
  unlink(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },
  readlink(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return link.node_ops.readlink(link);
      },
  stat(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        var getattr = FS.checkOpExists(node.node_ops.getattr, 63);
        return getattr(node);
      },
  fstat(fd) {
        var stream = FS.getStreamChecked(fd);
        var node = stream.node;
        var getattr = stream.stream_ops.getattr;
        var arg = getattr ? stream : node;
        getattr ??= node.node_ops.getattr;
        FS.checkOpExists(getattr, 63)
        return getattr(arg);
      },
  lstat(path) {
        return FS.stat(path, true);
      },
  doChmod(stream, node, mode, dontFollow) {
        FS.doSetAttr(stream, node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          ctime: Date.now(),
          dontFollow
        });
      },
  chmod(path, mode, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        FS.doChmod(null, node, mode, dontFollow);
      },
  lchmod(path, mode) {
        FS.chmod(path, mode, true);
      },
  fchmod(fd, mode) {
        var stream = FS.getStreamChecked(fd);
        FS.doChmod(stream, stream.node, mode, false);
      },
  doChown(stream, node, dontFollow) {
        FS.doSetAttr(stream, node, {
          timestamp: Date.now(),
          dontFollow
          // we ignore the uid / gid for now
        });
      },
  chown(path, uid, gid, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        FS.doChown(null, node, dontFollow);
      },
  lchown(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },
  fchown(fd, uid, gid) {
        var stream = FS.getStreamChecked(fd);
        FS.doChown(stream, stream.node, false);
      },
  doTruncate(stream, node, len) {
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.doSetAttr(stream, node, {
          size: len,
          timestamp: Date.now()
        });
      },
  truncate(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        FS.doTruncate(null, node, len);
      },
  ftruncate(fd, len) {
        var stream = FS.getStreamChecked(fd);
        if (len < 0 || (stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.doTruncate(stream, stream.node, len);
      },
  utime(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
        setattr(node, {
          atime: atime,
          mtime: mtime
        });
      },
  open(path, flags, mode = 0o666) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags == 'string' ? FS_modeStringToFlags(flags) : flags;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        var isDirPath;
        if (typeof path == 'object') {
          node = path;
        } else {
          isDirPath = path.endsWith("/");
          // noent_okay makes it so that if the final component of the path
          // doesn't exist, lookupPath returns `node: undefined`. `path` will be
          // updated to point to the target of all symlinks.
          var lookup = FS.lookupPath(path, {
            follow: !(flags & 131072),
            noent_okay: true
          });
          node = lookup.node;
          path = lookup.path;
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else if (isDirPath) {
            throw new FS.ErrnoError(31);
          } else {
            // node doesn't exist, try to create it
            // Ignore the permission bits here to ensure we can `open` this new
            // file below. We use chmod below the apply the permissions once the
            // file is open.
            node = FS.mknod(path, mode | 0o777, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512) && !created) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        });
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (created) {
          FS.chmod(node, mode & 0o777);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },
  close(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },
  isClosed(stream) {
        return stream.fd === null;
      },
  llseek(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },
  read(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },
  write(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },
  mmap(stream, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        if (!length) {
          throw new FS.ErrnoError(28);
        }
        return stream.stream_ops.mmap(stream, length, position, prot, flags);
      },
  msync(stream, buffer, offset, length, mmapFlags) {
        if (!stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },
  ioctl(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },
  readFile(path, opts = {}) {
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error(`Invalid encoding type "${opts.encoding}"`);
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },
  writeFile(path, data, opts = {}) {
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data == 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },
  cwd:() => FS.currentPath,
  chdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },
  createDefaultDirectories() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },
  createDefaultDevices() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: () => 0,
          write: (stream, buffer, offset, length, pos) => length,
          llseek: () => 0,
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        // use a buffer to avoid overhead of individual crypto calls per byte
        var randomBuffer = new Uint8Array(1024), randomLeft = 0;
        var randomByte = () => {
          if (randomLeft === 0) {
            randomFill(randomBuffer);
            randomLeft = randomBuffer.byteLength;
          }
          return randomBuffer[--randomLeft];
        };
        FS.createDevice('/dev', 'random', randomByte);
        FS.createDevice('/dev', 'urandom', randomByte);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },
  createSpecialDirectories() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount() {
            var node = FS.createNode(proc_self, 'fd', 16895, 73);
            node.stream_ops = {
              llseek: MEMFS.stream_ops.llseek,
            };
            node.node_ops = {
              lookup(parent, name) {
                var fd = +name;
                var stream = FS.getStreamChecked(fd);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: () => stream.path },
                  id: fd + 1,
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              },
              readdir() {
                return Array.from(FS.streams.entries())
                  .filter(([k, v]) => v)
                  .map(([k, v]) => k.toString());
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },
  createStandardStreams(input, output, error) {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (input) {
          FS.createDevice('/dev', 'stdin', input);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (output) {
          FS.createDevice('/dev', 'stdout', null, output);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (error) {
          FS.createDevice('/dev', 'stderr', null, error);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
      },
  staticInit() {
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
        };
      },
  init(input, output, error) {
        FS.initialized = true;
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input ??= Module['stdin'];
        output ??= Module['stdout'];
        error ??= Module['stderr'];
  
        FS.createStandardStreams(input, output, error);
      },
  quit() {
        FS.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        // close all of our streams
        for (var stream of FS.streams) {
          if (stream) {
            FS.close(stream);
          }
        }
      },
  findObject(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (!ret.exists) {
          return null;
        }
        return ret.object;
      },
  analyzePath(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },
  createPath(parent, path, canRead, canWrite) {
        parent = typeof parent == 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            if (e.errno != 20) throw e;
          }
          parent = current;
        }
        return current;
      },
  createFile(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(canRead, canWrite);
        return FS.create(path, mode);
      },
  createDataFile(parent, name, data, canRead, canWrite, canOwn) {
        var path = name;
        if (parent) {
          parent = typeof parent == 'string' ? parent : FS.getPath(parent);
          path = name ? PATH.join2(parent, name) : parent;
        }
        var mode = FS_getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data == 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
      },
  createDevice(parent, name, input, output) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(!!input, !!output);
        FS.createDevice.major ??= 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open(stream) {
            stream.seekable = false;
          },
          close(stream) {
            // flush any pending line data
            if (output?.buffer?.length) {
              output(10);
            }
          },
          read(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.atime = Date.now();
            }
            return bytesRead;
          },
          write(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.mtime = stream.node.ctime = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },
  forceLoadFile(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest != 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else { // Command-line.
          try {
            obj.contents = readBinary(obj.url);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        }
      },
  createLazyFile(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array).
        // Actual getting is abstracted away for eventual reuse.
        class LazyUint8Array {
          lengthKnown = false;
          chunks = []; // Loaded chunks. Index is the chunk number
          get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = (idx / this.chunkSize)|0;
            return this.getter(chunkNum)[chunkOffset];
          }
          setDataGetter(getter) {
            this.getter = getter;
          }
          cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (from, to) => {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
              }
              return intArrayFromString(xhr.responseText || '', true);
            };
            var lazyArray = this;
            lazyArray.setDataGetter((chunkNum) => {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');
              return lazyArray.chunks[chunkNum];
            });
  
            if (usesGzip || !datalength) {
              // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
              chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
              datalength = this.getter(0).length;
              chunkSize = datalength;
              out("LazyFiles on gzip forces download of the whole file when length is accessed");
            }
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
          }
          get length() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._length;
          }
          get chunkSize() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._chunkSize;
          }
        }
  
        if (typeof XMLHttpRequest != 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((key) => {
          var fn = node.stream_ops[key];
          stream_ops[key] = (...args) => {
            FS.forceLoadFile(node);
            return fn(...args);
          };
        });
        function writeChunks(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        }
        // use a custom read function
        stream_ops.read = (stream, buffer, offset, length, position) => {
          FS.forceLoadFile(node);
          return writeChunks(stream, buffer, offset, length, position)
        };
        // use a custom mmap function
        stream_ops.mmap = (stream, length, position, prot, flags) => {
          FS.forceLoadFile(node);
          var ptr = mmapAlloc(length);
          if (!ptr) {
            throw new FS.ErrnoError(48);
          }
          writeChunks(stream, HEAP8, ptr, length, position);
          return { ptr, allocated: true };
        };
        node.stream_ops = stream_ops;
        return node;
      },
  };
  
  
    /**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index (i.e. maxBytesToRead will not
     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
     *   JS JIT optimizations off, so it is worth to consider consistently using one
     * @return {string}
     */
  var UTF8ToString = (ptr, maxBytesToRead) => {
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
    };
  var SYSCALLS = {
  DEFAULT_POLLMASK:5,
  calculateAt(dirfd, path, allowEmpty) {
        if (PATH.isAbs(path)) {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = SYSCALLS.getStreamFromFD(dirfd);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return dir + '/' + path;
      },
  writeStat(buf, stat) {
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = stat.mode;
        HEAPU32[(((buf)+(8))>>2)] = stat.nlink;
        HEAP32[(((buf)+(12))>>2)] = stat.uid;
        HEAP32[(((buf)+(16))>>2)] = stat.gid;
        HEAP32[(((buf)+(20))>>2)] = stat.rdev;
        HEAP64[(((buf)+(24))>>3)] = BigInt(stat.size);
        HEAP32[(((buf)+(32))>>2)] = 4096;
        HEAP32[(((buf)+(36))>>2)] = stat.blocks;
        var atime = stat.atime.getTime();
        var mtime = stat.mtime.getTime();
        var ctime = stat.ctime.getTime();
        HEAP64[(((buf)+(40))>>3)] = BigInt(Math.floor(atime / 1000));
        HEAPU32[(((buf)+(48))>>2)] = (atime % 1000) * 1000 * 1000;
        HEAP64[(((buf)+(56))>>3)] = BigInt(Math.floor(mtime / 1000));
        HEAPU32[(((buf)+(64))>>2)] = (mtime % 1000) * 1000 * 1000;
        HEAP64[(((buf)+(72))>>3)] = BigInt(Math.floor(ctime / 1000));
        HEAPU32[(((buf)+(80))>>2)] = (ctime % 1000) * 1000 * 1000;
        HEAP64[(((buf)+(88))>>3)] = BigInt(stat.ino);
        return 0;
      },
  writeStatFs(buf, stats) {
        HEAP32[(((buf)+(4))>>2)] = stats.bsize;
        HEAP32[(((buf)+(40))>>2)] = stats.bsize;
        HEAP32[(((buf)+(8))>>2)] = stats.blocks;
        HEAP32[(((buf)+(12))>>2)] = stats.bfree;
        HEAP32[(((buf)+(16))>>2)] = stats.bavail;
        HEAP32[(((buf)+(20))>>2)] = stats.files;
        HEAP32[(((buf)+(24))>>2)] = stats.ffree;
        HEAP32[(((buf)+(28))>>2)] = stats.fsid;
        HEAP32[(((buf)+(44))>>2)] = stats.flags;  // ST_NOSUID
        HEAP32[(((buf)+(36))>>2)] = stats.namelen;
      },
  doMsync(addr, stream, len, flags, offset) {
        if (!FS.isFile(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (flags & 2) {
          // MAP_PRIVATE calls need not to be synced back to underlying fs
          return 0;
        }
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },
  getStreamFromFD(fd) {
        var stream = FS.getStreamChecked(fd);
        return stream;
      },
  varargs:undefined,
  getStr(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },
  };
  function ___syscall_dup3(fd, newfd, flags) {
  try {
  
      var old = SYSCALLS.getStreamFromFD(fd);
      if (old.fd === newfd) return -28;
      // Check newfd is within range of valid open file descriptors.
      if (newfd < 0 || newfd >= FS.MAX_OPEN_FDS) return -8;
      var existing = FS.getStream(newfd);
      if (existing) FS.close(existing);
      return FS.dupStream(old, newfd).fd;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_faccessat(dirfd, path, amode, flags) {
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      if (amode & ~7) {
        // need a valid mode
        return -28;
      }
      var lookup = FS.lookupPath(path, { follow: true });
      var node = lookup.node;
      if (!node) {
        return -44;
      }
      var perms = '';
      if (amode & 4) perms += 'r';
      if (amode & 2) perms += 'w';
      if (amode & 1) perms += 'x';
      if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
        return -2;
      }
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  /** @suppress {duplicate } */
  var syscallGetVarargI = () => {
      // the `+` prepended here is necessary to convince the JSCompiler that varargs is indeed a number.
      var ret = HEAP32[((+SYSCALLS.varargs)>>2)];
      SYSCALLS.varargs += 4;
      return ret;
    };
  var syscallGetVarargP = syscallGetVarargI;
  
  
  function ___syscall_fcntl64(fd, cmd, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = syscallGetVarargI();
          if (arg < 0) {
            return -28;
          }
          while (FS.streams[arg]) {
            arg++;
          }
          var newStream;
          newStream = FS.dupStream(stream, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = syscallGetVarargI();
          stream.flags |= arg;
          return 0;
        }
        case 12: {
          var arg = syscallGetVarargP();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)] = 2;
          return 0;
        }
        case 13:
        case 14:
          // Pretend that the locking is successful. These are process-level locks,
          // and Emscripten programs are a single process. If we supported linking a
          // filesystem between programs, we'd need to do more here.
          // See https://github.com/emscripten-core/emscripten/issues/23697
          return 0;
      }
      return -28;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_fstat64(fd, buf) {
  try {
  
      return SYSCALLS.writeStat(buf, FS.fstat(fd));
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    };
  
  function ___syscall_getdents64(fd, dirp, count) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd)
      stream.getdents ||= FS.readdir(stream.path);
  
      var struct_size = 280;
      var pos = 0;
      var off = FS.llseek(stream, 0, 1);
  
      var startIdx = Math.floor(off / struct_size);
      var endIdx = Math.min(stream.getdents.length, startIdx + Math.floor(count/struct_size))
      for (var idx = startIdx; idx < endIdx; idx++) {
        var id;
        var type;
        var name = stream.getdents[idx];
        if (name === '.') {
          id = stream.node.id;
          type = 4; // DT_DIR
        }
        else if (name === '..') {
          var lookup = FS.lookupPath(stream.path, { parent: true });
          id = lookup.node.id;
          type = 4; // DT_DIR
        }
        else {
          var child;
          try {
            child = FS.lookupNode(stream.node, name);
          } catch (e) {
            // If the entry is not a directory, file, or symlink, nodefs
            // lookupNode will raise EINVAL. Skip these and continue.
            if (e?.errno === 28) {
              continue;
            }
            throw e;
          }
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP64[((dirp + pos)>>3)] = BigInt(id);
        HEAP64[(((dirp + pos)+(8))>>3)] = BigInt((idx + 1) * struct_size);
        HEAP16[(((dirp + pos)+(16))>>1)] = 280;
        HEAP8[(dirp + pos)+(18)] = type;
        stringToUTF8(name, dirp + pos + 19, 256);
        pos += struct_size;
      }
      FS.llseek(stream, idx * struct_size, 0);
      return pos;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  
  function ___syscall_ioctl(fd, op, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21505: {
          if (!stream.tty) return -59;
          if (stream.tty.ops.ioctl_tcgets) {
            var termios = stream.tty.ops.ioctl_tcgets(stream);
            var argp = syscallGetVarargP();
            HEAP32[((argp)>>2)] = termios.c_iflag || 0;
            HEAP32[(((argp)+(4))>>2)] = termios.c_oflag || 0;
            HEAP32[(((argp)+(8))>>2)] = termios.c_cflag || 0;
            HEAP32[(((argp)+(12))>>2)] = termios.c_lflag || 0;
            for (var i = 0; i < 32; i++) {
              HEAP8[(argp + i)+(17)] = termios.c_cc[i] || 0;
            }
            return 0;
          }
          return 0;
        }
        case 21510:
        case 21511:
        case 21512: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          if (stream.tty.ops.ioctl_tcsets) {
            var argp = syscallGetVarargP();
            var c_iflag = HEAP32[((argp)>>2)];
            var c_oflag = HEAP32[(((argp)+(4))>>2)];
            var c_cflag = HEAP32[(((argp)+(8))>>2)];
            var c_lflag = HEAP32[(((argp)+(12))>>2)];
            var c_cc = []
            for (var i = 0; i < 32; i++) {
              c_cc.push(HEAP8[(argp + i)+(17)]);
            }
            return stream.tty.ops.ioctl_tcsets(stream.tty, op, { c_iflag, c_oflag, c_cflag, c_lflag, c_cc });
          }
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = syscallGetVarargP();
          HEAP32[((argp)>>2)] = 0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = syscallGetVarargP();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          if (stream.tty.ops.ioctl_tiocgwinsz) {
            var winsize = stream.tty.ops.ioctl_tiocgwinsz(stream.tty);
            var argp = syscallGetVarargP();
            HEAP16[((argp)>>1)] = winsize[0];
            HEAP16[(((argp)+(2))>>1)] = winsize[1];
          }
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        case 21515: {
          if (!stream.tty) return -59;
          return 0;
        }
        default: return -28; // not supported
      }
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_lstat64(path, buf) {
  try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.writeStat(buf, FS.lstat(path));
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_mkdirat(dirfd, path, mode) {
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      FS.mkdir(path, mode, 0);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_newfstatat(dirfd, path, buf, flags) {
  try {
  
      path = SYSCALLS.getStr(path);
      var nofollow = flags & 256;
      var allowEmpty = flags & 4096;
      flags = flags & (~6400);
      path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);
      return SYSCALLS.writeStat(buf, nofollow ? FS.lstat(path) : FS.stat(path));
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  
  function ___syscall_openat(dirfd, path, flags, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      var mode = varargs ? syscallGetVarargI() : 0;
      return FS.open(path, flags, mode).fd;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  
  
  function ___syscall_readlinkat(dirfd, path, buf, bufsize) {
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      if (bufsize <= 0) return -28;
      var ret = FS.readlink(path);
  
      var len = Math.min(bufsize, lengthBytesUTF8(ret));
      var endChar = HEAP8[buf+len];
      stringToUTF8(ret, buf, bufsize+1);
      // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
      // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
      HEAP8[buf+len] = endChar;
      return len;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_renameat(olddirfd, oldpath, newdirfd, newpath) {
  try {
  
      oldpath = SYSCALLS.getStr(oldpath);
      newpath = SYSCALLS.getStr(newpath);
      oldpath = SYSCALLS.calculateAt(olddirfd, oldpath);
      newpath = SYSCALLS.calculateAt(newdirfd, newpath);
      FS.rename(oldpath, newpath);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_rmdir(path) {
  try {
  
      path = SYSCALLS.getStr(path);
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_stat64(path, buf) {
  try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.writeStat(buf, FS.stat(path));
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_unlinkat(dirfd, path, flags) {
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      if (flags === 0) {
        FS.unlink(path);
      } else if (flags === 512) {
        FS.rmdir(path);
      } else {
        abort('Invalid flags passed to unlinkat');
      }
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  var __abort_js = () =>
      abort('');

  var __emscripten_system = (command) => {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      if (!command) return 0; // no shell available
      return -52;
    };

  var __emscripten_throw_longjmp = () => {
      throw Infinity;
    };

  var INT53_MAX = 9007199254740992;
  
  var INT53_MIN = -9007199254740992;
  var bigintToI53Checked = (num) => (num < INT53_MIN || num > INT53_MAX) ? NaN : Number(num);
  function __gmtime_js(time, tmPtr) {
    time = bigintToI53Checked(time);
  
  
      var date = new Date(time * 1000);
      HEAP32[((tmPtr)>>2)] = date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)] = date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)] = date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)] = date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)] = date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)] = date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)] = date.getUTCDay();
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)] = yday;
    ;
  }

  var isLeapYear = (year) => year%4 === 0 && (year%100 !== 0 || year%400 === 0);
  
  var MONTH_DAYS_LEAP_CUMULATIVE = [0,31,60,91,121,152,182,213,244,274,305,335];
  
  var MONTH_DAYS_REGULAR_CUMULATIVE = [0,31,59,90,120,151,181,212,243,273,304,334];
  var ydayFromDate = (date) => {
      var leap = isLeapYear(date.getFullYear());
      var monthDaysCumulative = (leap ? MONTH_DAYS_LEAP_CUMULATIVE : MONTH_DAYS_REGULAR_CUMULATIVE);
      var yday = monthDaysCumulative[date.getMonth()] + date.getDate() - 1; // -1 since it's days since Jan 1
  
      return yday;
    };
  
  function __localtime_js(time, tmPtr) {
    time = bigintToI53Checked(time);
  
  
      var date = new Date(time*1000);
      HEAP32[((tmPtr)>>2)] = date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)] = date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)] = date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)] = date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)] = date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)] = date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)] = date.getDay();
  
      var yday = ydayFromDate(date)|0;
      HEAP32[(((tmPtr)+(28))>>2)] = yday;
      HEAP32[(((tmPtr)+(36))>>2)] = -(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)] = dst;
    ;
  }

  
  var __mktime_js = function(tmPtr) {
  
  var ret = (() => { 
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        // Attention: some regions don't have DST at all.
        HEAP32[(((tmPtr)+(32))>>2)] = Number(summerOffset != winterOffset && dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)] = date.getDay();
      var yday = ydayFromDate(date)|0;
      HEAP32[(((tmPtr)+(28))>>2)] = yday;
      // To match expected behavior, update fields from date
      HEAP32[((tmPtr)>>2)] = date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)] = date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)] = date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)] = date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)] = date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)] = date.getYear();
  
      var timeMs = date.getTime();
      if (isNaN(timeMs)) {
        return -1;
      }
      // Return time in microseconds
      return timeMs / 1000;
     })();
  return BigInt(ret);
  };

  var __tzset_js = (timezone, daylight, std_name, dst_name) => {
      // TODO: Use (malleable) environment variables instead of system settings.
      var currentYear = new Date().getFullYear();
      var winter = new Date(currentYear, 0, 1);
      var summer = new Date(currentYear, 6, 1);
      var winterOffset = winter.getTimezoneOffset();
      var summerOffset = summer.getTimezoneOffset();
  
      // Local standard timezone offset. Local standard time is not adjusted for
      // daylight savings.  This code uses the fact that getTimezoneOffset returns
      // a greater value during Standard Time versus Daylight Saving Time (DST).
      // Thus it determines the expected output during Standard Time, and it
      // compares whether the output of the given date the same (Standard) or less
      // (DST).
      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by stdTimezoneOffset.
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAPU32[((timezone)>>2)] = stdTimezoneOffset * 60;
  
      HEAP32[((daylight)>>2)] = Number(winterOffset != summerOffset);
  
      var extractZone = (timezoneOffset) => {
        // Why inverse sign?
        // Read here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
        var sign = timezoneOffset >= 0 ? "-" : "+";
  
        var absOffset = Math.abs(timezoneOffset)
        var hours = String(Math.floor(absOffset / 60)).padStart(2, "0");
        var minutes = String(absOffset % 60).padStart(2, "0");
  
        return `UTC${sign}${hours}${minutes}`;
      }
  
      var winterName = extractZone(winterOffset);
      var summerName = extractZone(summerOffset);
      if (summerOffset < winterOffset) {
        // Northern hemisphere
        stringToUTF8(winterName, std_name, 17);
        stringToUTF8(summerName, dst_name, 17);
      } else {
        stringToUTF8(winterName, dst_name, 17);
        stringToUTF8(summerName, std_name, 17);
      }
    };

  var _emscripten_get_now = () => performance.now();
  
  var _emscripten_date_now = () => Date.now();
  
  var nowIsMonotonic = 1;
  
  var checkWasiClock = (clock_id) => clock_id >= 0 && clock_id <= 3;
  
  function _clock_time_get(clk_id, ignored_precision, ptime) {
    ignored_precision = bigintToI53Checked(ignored_precision);
  
  
      if (!checkWasiClock(clk_id)) {
        return 28;
      }
      var now;
      // all wasi clocks but realtime are monotonic
      if (clk_id === 0) {
        now = _emscripten_date_now();
      } else if (nowIsMonotonic) {
        now = _emscripten_get_now();
      } else {
        return 52;
      }
      // "now" is in ms, and wasi times are in ns.
      var nsec = Math.round(now * 1000 * 1000);
      HEAP64[((ptime)>>3)] = BigInt(nsec);
      return 0;
    ;
  }

  var handleException = (e) => {
      // Certain exception types we do not treat as errors since they are used for
      // internal control flow.
      // 1. ExitStatus, which is thrown by exit()
      // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
      //    that wish to return to JS event loop.
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      quit_(1, e);
    };
  
  
  var runtimeKeepaliveCounter = 0;
  var keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0;
  var _proc_exit = (code) => {
      EXITSTATUS = code;
      if (!keepRuntimeAlive()) {
        Module['onExit']?.(code);
        ABORT = true;
      }
      quit_(code, new ExitStatus(code));
    };
  /** @suppress {duplicate } */
  /** @param {boolean|number=} implicit */
  var exitJS = (status, implicit) => {
      EXITSTATUS = status;
  
      _proc_exit(status);
    };
  var _exit = exitJS;
  
  
  var maybeExit = () => {
      if (!keepRuntimeAlive()) {
        try {
          _exit(EXITSTATUS);
        } catch (e) {
          handleException(e);
        }
      }
    };
  var callUserCallback = (func) => {
      if (ABORT) {
        return;
      }
      try {
        func();
        maybeExit();
      } catch (e) {
        handleException(e);
      }
    };
  
  /** @param {number=} timeout */
  var safeSetTimeout = (func, timeout) => {
      
      return setTimeout(() => {
        
        callUserCallback(func);
      }, timeout);
    };
  
  var warnOnce = (text) => {
      warnOnce.shown ||= {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        err(text);
      }
    };
  
  
  var Browser = {
  useWebGL:false,
  isFullscreen:false,
  pointerLock:false,
  moduleContextCreatedCallbacks:[],
  workers:[],
  preloadedImages:{
  },
  preloadedAudios:{
  },
  getCanvas:() => Module['canvas'],
  init() {
        if (Browser.initted) return;
        Browser.initted = true;
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module['noImageDecoding'] && /\.(jpg|jpeg|png|bmp|webp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
          if (b.size !== byteArray.length) { // Safari bug #118630
            // Safari's Blob can only take an ArrayBuffer
            b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
          }
          var url = URL.createObjectURL(b);
          var img = new Image();
          img.onload = () => {
            var canvas = /** @type {!HTMLCanvasElement} */ (document.createElement('canvas'));
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Browser.preloadedImages[name] = canvas;
            URL.revokeObjectURL(url);
            onload?.(byteArray);
          };
          img.onerror = (event) => {
            err(`Image ${url} could not be decoded`);
            onerror?.();
          };
          img.src = url;
        };
        preloadPlugins.push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module['noAudioDecoding'] && name.slice(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Browser.preloadedAudios[name] = audio;
            onload?.(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Browser.preloadedAudios[name] = new Audio(); // empty shim
            onerror?.();
          }
          var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
          var url = URL.createObjectURL(b); // XXX we never revoke this!
          var audio = new Audio();
          audio.addEventListener('canplaythrough', () => finish(audio), false); // use addEventListener due to chromium bug 124926
          audio.onerror = function audio_onerror(event) {
            if (done) return;
            err(`warning: browser could not fully decode audio ${name}, trying slower base64 approach`);
            function encode64(data) {
              var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
              var PAD = '=';
              var ret = '';
              var leftchar = 0;
              var leftbits = 0;
              for (var i = 0; i < data.length; i++) {
                leftchar = (leftchar << 8) | data[i];
                leftbits += 8;
                while (leftbits >= 6) {
                  var curr = (leftchar >> (leftbits-6)) & 0x3f;
                  leftbits -= 6;
                  ret += BASE[curr];
                }
              }
              if (leftbits == 2) {
                ret += BASE[(leftchar&3) << 4];
                ret += PAD + PAD;
              } else if (leftbits == 4) {
                ret += BASE[(leftchar&0xf) << 2];
                ret += PAD;
              }
              return ret;
            }
            audio.src = 'data:audio/x-' + name.slice(-3) + ';base64,' + encode64(byteArray);
            finish(audio); // we don't wait for confirmation this worked - but it's worth trying
          };
          audio.src = url;
          // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
          safeSetTimeout(() => {
            finish(audio); // try to use it even though it is not necessarily ready to play
          }, 10000);
        };
        preloadPlugins.push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          var canvas = Browser.getCanvas();
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        var canvas = Browser.getCanvas();
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      (() => {});
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   (() => {}); // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", (ev) => {
              if (!Browser.pointerLock && Browser.getCanvas().requestPointerLock) {
                Browser.getCanvas().requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },
  createContext(/** @type {HTMLCanvasElement} */ canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module['ctx'] && canvas == Browser.getCanvas()) return Module['ctx']; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 2,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL != 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          Module['ctx'] = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Browser.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach((callback) => callback());
          Browser.init();
        }
        return ctx;
      },
  fullscreenHandlersInstalled:false,
  lockPointer:undefined,
  resizeCanvas:undefined,
  requestFullscreen(lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer == 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas == 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Browser.getCanvas();
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          Module['onFullScreen']?.(Browser.isFullscreen);
          Module['onFullscreen']?.(Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? () => canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? () => canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) : null);
  
        canvasContainer.requestFullscreen();
      },
  exitFullscreen() {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (() => {});
        CFS.apply(document, []);
        return true;
      },
  safeSetTimeout(func, timeout) {
        // Legacy function, this is used by the SDL2 port so we need to keep it
        // around at least until that is updated.
        // See https://github.com/libsdl-org/SDL/pull/6304
        return safeSetTimeout(func, timeout);
      },
  getMimetype(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.slice(name.lastIndexOf('.')+1)];
      },
  getUserMedia(func) {
        window.getUserMedia ||= navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        window.getUserMedia(func);
      },
  getMovementX(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },
  getMovementY(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },
  getMouseWheelDelta(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch (event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },
  mouseX:0,
  mouseY:0,
  mouseMovementX:0,
  mouseMovementY:0,
  touches:{
  },
  lastTouches:{
  },
  calculateMouseCoords(pageX, pageY) {
        // Calculate the movement based on the changes
        // in the coordinates.
        var canvas = Browser.getCanvas();
        var rect = canvas.getBoundingClientRect();
  
        // Neither .scrollX or .pageXOffset are defined in a spec, but
        // we prefer .scrollX because it is currently in a spec draft.
        // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
        var scrollX = ((typeof window.scrollX != 'undefined') ? window.scrollX : window.pageXOffset);
        var scrollY = ((typeof window.scrollY != 'undefined') ? window.scrollY : window.pageYOffset);
        var adjustedX = pageX - (scrollX + rect.left);
        var adjustedY = pageY - (scrollY + rect.top);
  
        // the canvas might be CSS-scaled compared to its backbuffer;
        // SDL-using content will want mouse coordinates in terms
        // of backbuffer units.
        adjustedX = adjustedX * (canvas.width / rect.width);
        adjustedY = adjustedY * (canvas.height / rect.height);
  
        return { x: adjustedX, y: adjustedY };
      },
  setMouseCoords(pageX, pageY) {
        const {x, y} = Browser.calculateMouseCoords(pageX, pageY);
        Browser.mouseMovementX = x - Browser.mouseX;
        Browser.mouseMovementY = y - Browser.mouseY;
        Browser.mouseX = x;
        Browser.mouseY = y;
      },
  calculateMouseEvent(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // add the mouse delta to the current absolute mouse position
          Browser.mouseX += Browser.mouseMovementX;
          Browser.mouseY += Browser.mouseMovementY;
        } else {
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var coords = Browser.calculateMouseCoords(touch.pageX, touch.pageY);
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              last ||= coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          Browser.setMouseCoords(event.pageX, event.pageY);
        }
      },
  resizeListeners:[],
  updateResizeListeners() {
        var canvas = Browser.getCanvas();
        Browser.resizeListeners.forEach((listener) => listener(canvas.width, canvas.height));
      },
  setCanvasSize(width, height, noUpdates) {
        var canvas = Browser.getCanvas();
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },
  windowedWidth:0,
  windowedHeight:0,
  setFullscreenCanvasSize() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)] = flags;
        }
        Browser.updateCanvasDimensions(Browser.getCanvas());
        Browser.updateResizeListeners();
      },
  setWindowedCanvasSize() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)] = flags;
        }
        Browser.updateCanvasDimensions(Browser.getCanvas());
        Browser.updateResizeListeners();
      },
  updateCanvasDimensions(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },
  };
  
  var EGL = {
  errorCode:12288,
  defaultDisplayInitialized:false,
  currentContext:0,
  currentReadSurface:0,
  currentDrawSurface:0,
  contextAttributes:{
  alpha:false,
  depth:false,
  stencil:false,
  antialias:false,
  },
  stringCache:{
  },
  setErrorCode(code) {
        EGL.errorCode = code;
      },
  chooseConfig(display, attribList, config, config_size, numConfigs) {
        if (display != 62000) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
  
        if (attribList) {
          // read attribList if it is non-null
          for (;;) {
            var param = HEAP32[((attribList)>>2)];
            if (param == 0x3021 /*EGL_ALPHA_SIZE*/) {
              var alphaSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.alpha = (alphaSize > 0);
            } else if (param == 0x3025 /*EGL_DEPTH_SIZE*/) {
              var depthSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.depth = (depthSize > 0);
            } else if (param == 0x3026 /*EGL_STENCIL_SIZE*/) {
              var stencilSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.stencil = (stencilSize > 0);
            } else if (param == 0x3031 /*EGL_SAMPLES*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples > 0);
            } else if (param == 0x3032 /*EGL_SAMPLE_BUFFERS*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples == 1);
            } else if (param == 0x3100 /*EGL_CONTEXT_PRIORITY_LEVEL_IMG*/) {
              var requestedPriority = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.lowLatency = (requestedPriority != 0x3103 /*EGL_CONTEXT_PRIORITY_LOW_IMG*/);
            } else if (param == 0x3038 /*EGL_NONE*/) {
                break;
            }
            attribList += 8;
          }
        }
  
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)] = 1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAPU32[((config)>>2)] = 62002;
        }
  
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      },
  };
  var _eglBindAPI = (api) => {
      if (api == 0x30A0 /* EGL_OPENGL_ES_API */) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }
      // if (api == 0x30A1 /* EGL_OPENVG_API */ || api == 0x30A2 /* EGL_OPENGL_API */) {
      EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
      return 0;
    };

  var _eglChooseConfig = (display, attrib_list, configs, config_size, numConfigs) =>
      EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs);

  var GLctx;
  
  var webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance = (ctx) =>
      // Closure is expected to be allowed to minify the '.dibvbi' property, so not accessing it quoted.
      !!(ctx.dibvbi = ctx.getExtension('WEBGL_draw_instanced_base_vertex_base_instance'));
  
  var webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance = (ctx) => {
      // Closure is expected to be allowed to minify the '.mdibvbi' property, so not accessing it quoted.
      return !!(ctx.mdibvbi = ctx.getExtension('WEBGL_multi_draw_instanced_base_vertex_base_instance'));
    };
  
  var webgl_enable_EXT_polygon_offset_clamp = (ctx) =>
      !!(ctx.extPolygonOffsetClamp = ctx.getExtension('EXT_polygon_offset_clamp'));
  
  var webgl_enable_EXT_clip_control = (ctx) =>
      !!(ctx.extClipControl = ctx.getExtension('EXT_clip_control'));
  
  var webgl_enable_WEBGL_polygon_mode = (ctx) =>
      !!(ctx.webglPolygonMode = ctx.getExtension('WEBGL_polygon_mode'));
  
  var webgl_enable_WEBGL_multi_draw = (ctx) =>
      // Closure is expected to be allowed to minify the '.multiDrawWebgl' property, so not accessing it quoted.
      !!(ctx.multiDrawWebgl = ctx.getExtension('WEBGL_multi_draw'));
  
  var getEmscriptenSupportedExtensions = (ctx) => {
      // Restrict the list of advertised extensions to those that we actually
      // support.
      var supportedExtensions = [
        // WebGL 2 extensions
        'EXT_color_buffer_float',
        'EXT_conservative_depth',
        'EXT_disjoint_timer_query_webgl2',
        'EXT_texture_norm16',
        'NV_shader_noperspective_interpolation',
        'WEBGL_clip_cull_distance',
        // WebGL 1 and WebGL 2 extensions
        'EXT_clip_control',
        'EXT_color_buffer_half_float',
        'EXT_depth_clamp',
        'EXT_float_blend',
        'EXT_polygon_offset_clamp',
        'EXT_texture_compression_bptc',
        'EXT_texture_compression_rgtc',
        'EXT_texture_filter_anisotropic',
        'KHR_parallel_shader_compile',
        'OES_texture_float_linear',
        'WEBGL_blend_func_extended',
        'WEBGL_compressed_texture_astc',
        'WEBGL_compressed_texture_etc',
        'WEBGL_compressed_texture_etc1',
        'WEBGL_compressed_texture_s3tc',
        'WEBGL_compressed_texture_s3tc_srgb',
        'WEBGL_debug_renderer_info',
        'WEBGL_debug_shaders',
        'WEBGL_lose_context',
        'WEBGL_multi_draw',
        'WEBGL_polygon_mode'
      ];
      // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
      return (ctx.getSupportedExtensions() || []).filter(ext => supportedExtensions.includes(ext));
    };
  
  
  var GL = {
  counter:1,
  buffers:[],
  programs:[],
  framebuffers:[],
  renderbuffers:[],
  textures:[],
  shaders:[],
  vaos:[],
  contexts:[],
  offscreenCanvases:{
  },
  queries:[],
  samplers:[],
  transformFeedbacks:[],
  syncs:[],
  stringCache:{
  },
  stringiCache:{
  },
  unpackAlignment:4,
  unpackRowLength:0,
  recordError:(errorCode) => {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },
  getNewId:(table) => {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },
  genObject:(n, buffers, createFunction, objectTable
        ) => {
        for (var i = 0; i < n; i++) {
          var buffer = GLctx[createFunction]();
          var id = buffer && GL.getNewId(objectTable);
          if (buffer) {
            buffer.name = id;
            objectTable[id] = buffer;
          } else {
            GL.recordError(0x502 /* GL_INVALID_OPERATION */);
          }
          HEAP32[(((buffers)+(i*4))>>2)] = id;
        }
      },
  getSource:(shader, count, string, length) => {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAPU32[(((length)+(i*4))>>2)] : undefined;
          source += UTF8ToString(HEAPU32[(((string)+(i*4))>>2)], len);
        }
        return source;
      },
  createContext:(/** @type {HTMLCanvasElement} */ canvas, webGLContextAttributes) => {
  
        // BUG: Workaround Safari WebGL issue: After successfully acquiring WebGL
        // context on a canvas, calling .getContext() will always return that
        // context independent of which 'webgl' or 'webgl2'
        // context version was passed. See:
        //   https://bugs.webkit.org/show_bug.cgi?id=222758
        // and:
        //   https://github.com/emscripten-core/emscripten/issues/13295.
        // TODO: Once the bug is fixed and shipped in Safari, adjust the Safari
        // version field in above check.
        if (!canvas.getContextSafariWebGL2Fixed) {
          canvas.getContextSafariWebGL2Fixed = canvas.getContext;
          /** @type {function(this:HTMLCanvasElement, string, (Object|null)=): (Object|null)} */
          function fixedGetContext(ver, attrs) {
            var gl = canvas.getContextSafariWebGL2Fixed(ver, attrs);
            return ((ver == 'webgl') == (gl instanceof WebGLRenderingContext)) ? gl : null;
          }
          canvas.getContext = fixedGetContext;
        }
  
        var ctx = canvas.getContext("webgl2", webGLContextAttributes);
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
        return handle;
      },
  registerContext:(ctx, webGLContextAttributes) => {
        // without pthreads a context is just an integer ID
        var handle = GL.getNewId(GL.contexts);
  
        var context = {
          handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
        // Store the created context object so that we can access the context
        // given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault == 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
        return handle;
      },
  makeContextCurrent:(contextHandle) => {
  
        // Active Emscripten GL layer context object.
        GL.currentContext = GL.contexts[contextHandle];
        // Active WebGL context object.
        Module['ctx'] = GLctx = GL.currentContext?.GLctx;
        return !(contextHandle && !GLctx);
      },
  getContext:(contextHandle) => {
        return GL.contexts[contextHandle];
      },
  deleteContext:(contextHandle) => {
        if (GL.currentContext === GL.contexts[contextHandle]) {
          GL.currentContext = null;
        }
        if (typeof JSEvents == 'object') {
          // Release all JS event handlers on the DOM element that the GL context is
          // associated with since the context is now deleted.
          JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
        }
        // Make sure the canvas object no longer refers to the context object so
        // there are no GC surprises.
        if (GL.contexts[contextHandle]?.GLctx.canvas) {
          GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
        }
        GL.contexts[contextHandle] = null;
      },
  initExtensions:(context) => {
        // If this function is called without a specific context object, init the
        // extensions of the currently active context.
        context ||= GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, ction GL interop
        // layer itself will need to know if they exist.
  
        // Extensions that are available in both WebGL 1 and WebGL 2
        webgl_enable_WEBGL_multi_draw(GLctx);
        webgl_enable_EXT_polygon_offset_clamp(GLctx);
        webgl_enable_EXT_clip_control(GLctx);
        webgl_enable_WEBGL_polygon_mode(GLctx);
        // Extensions that are available from WebGL >= 2 (no-op if called on a WebGL 1 context active)
        webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance(GLctx);
        webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance(GLctx);
  
        // On WebGL 2, EXT_disjoint_timer_query is replaced with an alternative
        // that's based on core APIs, and exposes only the queryCounterEXT()
        // entrypoint.
        if (context.version >= 2) {
          GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query_webgl2");
        }
  
        // However, Firefox exposes the WebGL 1 version on WebGL 2 as well and
        // thus we look for the WebGL 1 version again if the WebGL 2 version
        // isn't present. https://bugzilla.mozilla.org/show_bug.cgi?id=1328882
        if (context.version < 2 || !GLctx.disjointTimerQueryExt)
        {
          GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
        }
  
        getEmscriptenSupportedExtensions(GLctx).forEach((ext) => {
          // WEBGL_lose_context, WEBGL_debug_renderer_info and WEBGL_debug_shaders
          // are not enabled by default.
          if (!ext.includes('lose_context') && !ext.includes('debug')) {
            // Call .getExtension() to enable that extension permanently.
            GLctx.getExtension(ext);
          }
        });
      },
  };
  
  var _eglCreateContext = (display, config, hmm, contextAttribs) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
  
      // EGL 1.4 spec says default EGL_CONTEXT_CLIENT_VERSION is GLES1, but this is not supported by Emscripten.
      // So user must pass EGL_CONTEXT_CLIENT_VERSION == 2 to initialize EGL.
      var glesContextVersion = 1;
      for (;;) {
        var param = HEAP32[((contextAttribs)>>2)];
        if (param == 0x3098 /*EGL_CONTEXT_CLIENT_VERSION*/) {
          glesContextVersion = HEAP32[(((contextAttribs)+(4))>>2)];
        } else if (param == 0x3038 /*EGL_NONE*/) {
          break;
        } else {
          /* EGL1.4 specifies only EGL_CONTEXT_CLIENT_VERSION as supported attribute */
          EGL.setErrorCode(0x3004 /*EGL_BAD_ATTRIBUTE*/);
          return 0;
        }
        contextAttribs += 8;
      }
      if (glesContextVersion < 2 || glesContextVersion > 3) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0; /* EGL_NO_CONTEXT */
      }
  
      EGL.contextAttributes.majorVersion = glesContextVersion - 1; // WebGL 1 is GLES 2, WebGL2 is GLES3
      EGL.contextAttributes.minorVersion = 0;
  
      EGL.context = GL.createContext(Browser.getCanvas(), EGL.contextAttributes);
  
      if (EGL.context != 0) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
  
        // Run callbacks so that GL emulation works
        GL.makeContextCurrent(EGL.context);
        Browser.useWebGL = true;
        Browser.moduleContextCreatedCallbacks.forEach((callback) => callback());
  
        // Note: This function only creates a context, but it shall not make it active.
        GL.makeContextCurrent(null);
        return 62004;
      } else {
        EGL.setErrorCode(0x3009 /* EGL_BAD_MATCH */); // By the EGL 1.4 spec, an implementation that does not support GLES2 (WebGL in this case), this error code is set.
        return 0; /* EGL_NO_CONTEXT */
      }
    };

  var _eglCreateWindowSurface = (display, config, win, attrib_list) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      // TODO: Examine attrib_list! Parameters that can be present there are:
      // - EGL_RENDER_BUFFER (must be EGL_BACK_BUFFER)
      // - EGL_VG_COLORSPACE (can't be set)
      // - EGL_VG_ALPHA_FORMAT (can't be set)
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 62006; /* Magic ID for Emscripten 'default surface' */
    };

  
  var _eglDestroyContext = (display, context) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (context != 62004) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
  
      GL.deleteContext(EGL.context);
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      if (EGL.currentContext == context) {
        EGL.currentContext = 0;
      }
      return 1 /* EGL_TRUE */;
    };

  var _eglDestroySurface = (display, surface) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (surface != 62006 /* Magic ID for the only EGLSurface supported by Emscripten */) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 1;
      }
      if (EGL.currentReadSurface == surface) {
        EGL.currentReadSurface = 0;
      }
      if (EGL.currentDrawSurface == surface) {
        EGL.currentDrawSurface = 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1; /* Magic ID for Emscripten 'default surface' */
    };

  var _eglGetConfigAttrib = (display, config, attribute, value) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      if (!value) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      switch (attribute) {
      case 0x3020: // EGL_BUFFER_SIZE
        HEAP32[((value)>>2)] = EGL.contextAttributes.alpha ? 32 : 24;
        return 1;
      case 0x3021: // EGL_ALPHA_SIZE
        HEAP32[((value)>>2)] = EGL.contextAttributes.alpha ? 8 : 0;
        return 1;
      case 0x3022: // EGL_BLUE_SIZE
        HEAP32[((value)>>2)] = 8;
        return 1;
      case 0x3023: // EGL_GREEN_SIZE
        HEAP32[((value)>>2)] = 8;
        return 1;
      case 0x3024: // EGL_RED_SIZE
        HEAP32[((value)>>2)] = 8;
        return 1;
      case 0x3025: // EGL_DEPTH_SIZE
        HEAP32[((value)>>2)] = EGL.contextAttributes.depth ? 24 : 0;
        return 1;
      case 0x3026: // EGL_STENCIL_SIZE
        HEAP32[((value)>>2)] = EGL.contextAttributes.stencil ? 8 : 0;
        return 1;
      case 0x3027: // EGL_CONFIG_CAVEAT
        // We can return here one of EGL_NONE (0x3038), EGL_SLOW_CONFIG (0x3050) or EGL_NON_CONFORMANT_CONFIG (0x3051).
        HEAP32[((value)>>2)] = 0x3038;
        return 1;
      case 0x3028: // EGL_CONFIG_ID
        HEAP32[((value)>>2)] = 62002;
        return 1;
      case 0x3029: // EGL_LEVEL
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x302A: // EGL_MAX_PBUFFER_HEIGHT
        HEAP32[((value)>>2)] = 4096;
        return 1;
      case 0x302B: // EGL_MAX_PBUFFER_PIXELS
        HEAP32[((value)>>2)] = 16777216;
        return 1;
      case 0x302C: // EGL_MAX_PBUFFER_WIDTH
        HEAP32[((value)>>2)] = 4096;
        return 1;
      case 0x302D: // EGL_NATIVE_RENDERABLE
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x302E: // EGL_NATIVE_VISUAL_ID
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x302F: // EGL_NATIVE_VISUAL_TYPE
        HEAP32[((value)>>2)] = 0x3038;
        return 1;
      case 0x3031: // EGL_SAMPLES
        HEAP32[((value)>>2)] = EGL.contextAttributes.antialias ? 4 : 0;
        return 1;
      case 0x3032: // EGL_SAMPLE_BUFFERS
        HEAP32[((value)>>2)] = EGL.contextAttributes.antialias ? 1 : 0;
        return 1;
      case 0x3033: // EGL_SURFACE_TYPE
        HEAP32[((value)>>2)] = 0x4;
        return 1;
      case 0x3034: // EGL_TRANSPARENT_TYPE
        // If this returns EGL_TRANSPARENT_RGB (0x3052), transparency is used through color-keying. No such thing applies to Emscripten canvas.
        HEAP32[((value)>>2)] = 0x3038;
        return 1;
      case 0x3035: // EGL_TRANSPARENT_BLUE_VALUE
      case 0x3036: // EGL_TRANSPARENT_GREEN_VALUE
      case 0x3037: // EGL_TRANSPARENT_RED_VALUE
        // "If EGL_TRANSPARENT_TYPE is EGL_NONE, then the values for EGL_TRANSPARENT_RED_VALUE, EGL_TRANSPARENT_GREEN_VALUE, and EGL_TRANSPARENT_BLUE_VALUE are undefined."
        HEAP32[((value)>>2)] = -1;
        return 1;
      case 0x3039: // EGL_BIND_TO_TEXTURE_RGB
      case 0x303A: // EGL_BIND_TO_TEXTURE_RGBA
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x303B: // EGL_MIN_SWAP_INTERVAL
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x303C: // EGL_MAX_SWAP_INTERVAL
        HEAP32[((value)>>2)] = 1;
        return 1;
      case 0x303D: // EGL_LUMINANCE_SIZE
      case 0x303E: // EGL_ALPHA_MASK_SIZE
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x303F: // EGL_COLOR_BUFFER_TYPE
        // EGL has two types of buffers: EGL_RGB_BUFFER and EGL_LUMINANCE_BUFFER.
        HEAP32[((value)>>2)] = 0x308E;
        return 1;
      case 0x3040: // EGL_RENDERABLE_TYPE
        // A bit combination of EGL_OPENGL_ES_BIT,EGL_OPENVG_BIT,EGL_OPENGL_ES2_BIT and EGL_OPENGL_BIT.
        HEAP32[((value)>>2)] = 0x4;
        return 1;
      case 0x3042: // EGL_CONFORMANT
        // "EGL_CONFORMANT is a mask indicating if a client API context created with respect to the corresponding EGLConfig will pass the required conformance tests for that API."
        HEAP32[((value)>>2)] = 0;
        return 1;
      default:
        EGL.setErrorCode(0x3004 /* EGL_BAD_ATTRIBUTE */);
        return 0;
      }
    };

  var _eglGetDisplay = (nativeDisplayType) => {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      // Emscripten EGL implementation "emulates" X11, and eglGetDisplay is
      // expected to accept/receive a pointer to an X11 Display object (or
      // EGL_DEFAULT_DISPLAY).
      if (nativeDisplayType != 0 /* EGL_DEFAULT_DISPLAY */ && nativeDisplayType != 1 /* see library_xlib.js */) {
        return 0; // EGL_NO_DISPLAY
      }
      return 62000;
    };

  var _eglGetError = () => EGL.errorCode;

  var _eglInitialize = (display, majorVersion, minorVersion) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (majorVersion) {
        HEAP32[((majorVersion)>>2)] = 1; // Advertise EGL Major version: '1'
      }
      if (minorVersion) {
        HEAP32[((minorVersion)>>2)] = 4; // Advertise EGL Minor version: '4'
      }
      EGL.defaultDisplayInitialized = true;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };

  
  var _eglMakeCurrent = (display, draw, read, context) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0 /* EGL_FALSE */;
      }
      //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy.
      if (context != 0 && context != 62004) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
      if ((read != 0 && read != 62006) || (draw != 0 && draw != 62006 /* Magic ID for Emscripten 'default surface' */)) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 0;
      }
  
      GL.makeContextCurrent(context ? EGL.context : null);
  
      EGL.currentContext = context;
      EGL.currentDrawSurface = draw;
      EGL.currentReadSurface = read;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1 /* EGL_TRUE */;
    };

  
  
  var stringToNewUTF8 = (str) => {
      var size = lengthBytesUTF8(str) + 1;
      var ret = _malloc(size);
      if (ret) stringToUTF8(str, ret, size);
      return ret;
    };
  
  var _eglQueryString = (display, name) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy.
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      if (EGL.stringCache[name]) return EGL.stringCache[name];
      var ret;
      switch (name) {
        case 0x3053 /* EGL_VENDOR */: ret = stringToNewUTF8("Emscripten"); break;
        case 0x3054 /* EGL_VERSION */: ret = stringToNewUTF8("1.4 Emscripten EGL"); break;
        case 0x3055 /* EGL_EXTENSIONS */:  ret = stringToNewUTF8(""); break; // Currently not supporting any EGL extensions.
        case 0x308D /* EGL_CLIENT_APIS */: ret = stringToNewUTF8("OpenGL_ES"); break;
        default:
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
      }
      EGL.stringCache[name] = ret;
      return ret;
    };

  
  var _eglSwapBuffers = (dpy, surface) => {
  
      if (!EGL.defaultDisplayInitialized) {
        EGL.setErrorCode(0x3001 /* EGL_NOT_INITIALIZED */);
      } else if (!GLctx) {
        EGL.setErrorCode(0x3002 /* EGL_BAD_ACCESS */);
      } else if (GLctx.isContextLost()) {
        EGL.setErrorCode(0x300E /* EGL_CONTEXT_LOST */);
      } else {
        // According to documentation this does an implicit flush.
        // Due to discussion at https://github.com/emscripten-core/emscripten/pull/1871
        // the flush was removed since this _may_ result in slowing code down.
        //_glFlush();
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1 /* EGL_TRUE */;
      }
      return 0 /* EGL_FALSE */;
    };

  
  
  
  
    /**
     * @param {number=} arg
     * @param {boolean=} noSetTiming
     */
  var setMainLoop = (iterFunc, fps, simulateInfiniteLoop, arg, noSetTiming) => {
      MainLoop.func = iterFunc;
      MainLoop.arg = arg;
  
      var thisMainLoopId = MainLoop.currentlyRunningMainloop;
      function checkIsRunning() {
        if (thisMainLoopId < MainLoop.currentlyRunningMainloop) {
          
          maybeExit();
          return false;
        }
        return true;
      }
  
      // We create the loop runner here but it is not actually running until
      // _emscripten_set_main_loop_timing is called (which might happen a
      // later time).  This member signifies that the current runner has not
      // yet been started so that we can call runtimeKeepalivePush when it
      // gets it timing set for the first time.
      MainLoop.running = false;
      MainLoop.runner = function MainLoop_runner() {
        if (ABORT) return;
        if (MainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = MainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (MainLoop.remainingBlockers) {
            var remaining = MainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              MainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              MainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          MainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (!checkIsRunning()) return;
  
          setTimeout(MainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (!checkIsRunning()) return;
  
        // Implement very basic swap interval control
        MainLoop.currentFrameNumber = MainLoop.currentFrameNumber + 1 | 0;
        if (MainLoop.timingMode == 1 && MainLoop.timingValue > 1 && MainLoop.currentFrameNumber % MainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          MainLoop.scheduler();
          return;
        } else if (MainLoop.timingMode == 0) {
          MainLoop.tickStartTime = _emscripten_get_now();
        }
  
        MainLoop.runIter(iterFunc);
  
        // catch pauses from the main loop itself
        if (!checkIsRunning()) return;
  
        MainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps > 0) {
          _emscripten_set_main_loop_timing(0, 1000.0 / fps);
        } else {
          // Do rAF by rendering each frame (no decimating)
          _emscripten_set_main_loop_timing(1, 1);
        }
  
        MainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'unwind';
      }
    };
  
  
  var MainLoop = {
  running:false,
  scheduler:null,
  method:"",
  currentlyRunningMainloop:0,
  func:null,
  arg:0,
  timingMode:0,
  timingValue:0,
  currentFrameNumber:0,
  queue:[],
  preMainLoop:[],
  postMainLoop:[],
  pause() {
        MainLoop.scheduler = null;
        // Incrementing this signals the previous main loop that it's now become old, and it must return.
        MainLoop.currentlyRunningMainloop++;
      },
  resume() {
        MainLoop.currentlyRunningMainloop++;
        var timingMode = MainLoop.timingMode;
        var timingValue = MainLoop.timingValue;
        var func = MainLoop.func;
        MainLoop.func = null;
        // do not set timing and call scheduler, we will do it on the next lines
        setMainLoop(func, 0, false, MainLoop.arg, true);
        _emscripten_set_main_loop_timing(timingMode, timingValue);
        MainLoop.scheduler();
      },
  updateStatus() {
        if (Module['setStatus']) {
          var message = Module['statusMessage'] || 'Please wait...';
          var remaining = MainLoop.remainingBlockers ?? 0;
          var expected = MainLoop.expectedBlockers ?? 0;
          if (remaining) {
            if (remaining < expected) {
              Module['setStatus'](`{message} ({expected - remaining}/{expected})`);
            } else {
              Module['setStatus'](message);
            }
          } else {
            Module['setStatus']('');
          }
        }
      },
  init() {
        Module['preMainLoop'] && MainLoop.preMainLoop.push(Module['preMainLoop']);
        Module['postMainLoop'] && MainLoop.postMainLoop.push(Module['postMainLoop']);
      },
  runIter(func) {
        if (ABORT) return;
        for (var pre of MainLoop.preMainLoop) {
          if (pre() === false) {
            return; // |return false| skips a frame
          }
        }
        callUserCallback(func);
        for (var post of MainLoop.postMainLoop) {
          post();
        }
      },
  nextRAF:0,
  fakeRequestAnimationFrame(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (MainLoop.nextRAF === 0) {
          MainLoop.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= MainLoop.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            MainLoop.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(MainLoop.nextRAF - now, 0);
        setTimeout(func, delay);
      },
  requestAnimationFrame(func) {
        if (typeof requestAnimationFrame == 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = MainLoop.fakeRequestAnimationFrame;
        RAF(func);
      },
  };
  var _emscripten_set_main_loop_timing = (mode, value) => {
      MainLoop.timingMode = mode;
      MainLoop.timingValue = value;
  
      if (!MainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (!MainLoop.running) {
        
        MainLoop.running = true;
      }
      if (mode == 0) {
        MainLoop.scheduler = function MainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, MainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(MainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        MainLoop.method = 'timeout';
      } else if (mode == 1) {
        MainLoop.scheduler = function MainLoop_scheduler_rAF() {
          MainLoop.requestAnimationFrame(MainLoop.runner);
        };
        MainLoop.method = 'rAF';
      } else if (mode == 2) {
        if (typeof MainLoop.setImmediate == 'undefined') {
          if (typeof setImmediate == 'undefined') {
            // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
            var setImmediates = [];
            var emscriptenMainLoopMessageId = 'setimmediate';
            /** @param {Event} event */
            var MainLoop_setImmediate_messageHandler = (event) => {
              // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
              // so check for both cases.
              if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
                event.stopPropagation();
                setImmediates.shift()();
              }
            };
            addEventListener("message", MainLoop_setImmediate_messageHandler, true);
            MainLoop.setImmediate = /** @type{function(function(): ?, ...?): number} */((func) => {
              setImmediates.push(func);
              if (ENVIRONMENT_IS_WORKER) {
                Module['setImmediates'] ??= [];
                Module['setImmediates'].push(func);
                postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
              } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
            });
          } else {
            MainLoop.setImmediate = setImmediate;
          }
        }
        MainLoop.scheduler = function MainLoop_scheduler_setImmediate() {
          MainLoop.setImmediate(MainLoop.runner);
        };
        MainLoop.method = 'immediate';
      }
      return 0;
    };
  
  var _eglSwapInterval = (display, interval) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (interval == 0) _emscripten_set_main_loop_timing(0, 0);
      else _emscripten_set_main_loop_timing(1, interval);
  
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };

  var _eglTerminate = (display) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      EGL.currentContext = 0;
      EGL.currentReadSurface = 0;
      EGL.currentDrawSurface = 0;
      EGL.defaultDisplayInitialized = false;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };

  
  /** @suppress {duplicate } */
  var _eglWaitClient = () => {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };
  var _eglWaitGL = _eglWaitClient;

  var _eglWaitNative = (nativeEngineId) => {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };

  var readEmAsmArgsArray = [];
  var readEmAsmArgs = (sigPtr, buf) => {
      readEmAsmArgsArray.length = 0;
      var ch;
      // Most arguments are i32s, so shift the buffer pointer so it is a plain
      // index into HEAP32.
      while (ch = HEAPU8[sigPtr++]) {
        // Floats are always passed as doubles, so all types except for 'i'
        // are 8 bytes and require alignment.
        var wide = (ch != 105);
        wide &= (ch != 112);
        buf += wide && (buf % 8) ? 4 : 0;
        readEmAsmArgsArray.push(
          // Special case for pointers under wasm64 or CAN_ADDRESS_2GB mode.
          ch == 112 ? HEAPU32[((buf)>>2)] :
          ch == 106 ? HEAP64[((buf)>>3)] :
          ch == 105 ?
            HEAP32[((buf)>>2)] :
            HEAPF64[((buf)>>3)]
        );
        buf += wide ? 8 : 4;
      }
      return readEmAsmArgsArray;
    };
  var runEmAsmFunction = (code, sigPtr, argbuf) => {
      var args = readEmAsmArgs(sigPtr, argbuf);
      return ASM_CONSTS[code](...args);
    };
  var _emscripten_asm_const_int = (code, sigPtr, argbuf) => {
      return runEmAsmFunction(code, sigPtr, argbuf);
    };

  var runMainThreadEmAsm = (emAsmAddr, sigPtr, argbuf, sync) => {
      var args = readEmAsmArgs(sigPtr, argbuf);
      return ASM_CONSTS[emAsmAddr](...args);
    };
  var _emscripten_asm_const_int_sync_on_main_thread = (emAsmAddr, sigPtr, argbuf) => runMainThreadEmAsm(emAsmAddr, sigPtr, argbuf, 1);

  var _emscripten_asm_const_ptr_sync_on_main_thread = (emAsmAddr, sigPtr, argbuf) => runMainThreadEmAsm(emAsmAddr, sigPtr, argbuf, 1);


  var onExits = [];
  var addOnExit = (cb) => onExits.push(cb);
  var JSEvents = {
  memcpy(target, src, size) {
        HEAP8.set(HEAP8.subarray(src, src + size), target);
      },
  removeAllEventListeners() {
        while (JSEvents.eventHandlers.length) {
          JSEvents._removeHandler(JSEvents.eventHandlers.length - 1);
        }
        JSEvents.deferredCalls = [];
      },
  inEventHandler:0,
  deferredCalls:[],
  deferCall(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for (var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for (var call of JSEvents.deferredCalls) {
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction,
          precedence,
          argsList
        });
  
        JSEvents.deferredCalls.sort((x,y) => x.precedence < y.precedence);
      },
  removeDeferredCalls(targetFunction) {
        JSEvents.deferredCalls = JSEvents.deferredCalls.filter((call) => call.targetFunction != targetFunction);
      },
  canPerformEventHandlerRequests() {
        if (navigator.userActivation) {
          // Verify against transient activation status from UserActivation API
          // whether it is possible to perform a request here without needing to defer. See
          // https://developer.mozilla.org/en-US/docs/Web/Security/User_activation#transient_activation
          // and https://caniuse.com/mdn-api_useractivation
          // At the time of writing, Firefox does not support this API: https://bugzilla.mozilla.org/show_bug.cgi?id=1791079
          return navigator.userActivation.isActive;
        }
  
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },
  runDeferredCalls() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        var deferredCalls = JSEvents.deferredCalls;
        JSEvents.deferredCalls = [];
        for (var call of deferredCalls) {
          call.targetFunction(...call.argsList);
        }
      },
  eventHandlers:[],
  removeAllHandlersOnTarget:(target, eventTypeString) => {
        for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target &&
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },
  _removeHandler(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },
  registerOrRemoveHandler(eventHandler) {
        if (!eventHandler.target) {
          return -4;
        }
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = function(event) {
            // Increment nesting count for the event handler.
            ++JSEvents.inEventHandler;
            JSEvents.currentEventHandler = eventHandler;
            // Process any old deferred calls the user has placed.
            JSEvents.runDeferredCalls();
            // Process the actual event, calls back to user C code handler.
            eventHandler.handlerFunc(event);
            // Process any new deferred calls that were placed right now from this event handler.
            JSEvents.runDeferredCalls();
            // Out of event handler - restore nesting count.
            --JSEvents.inEventHandler;
          };
  
          eventHandler.target.addEventListener(eventHandler.eventTypeString,
                                               eventHandler.eventListenerFunc,
                                               eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
        } else {
          for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
        return 0;
      },
  getNodeNameForTarget(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return target?.nodeName || '';
      },
  fullscreenEnabled() {
        return document.fullscreenEnabled
        // Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitFullscreenEnabled.
        // TODO: If Safari at some point ships with unprefixed version, update the version check above.
        || document.webkitFullscreenEnabled
         ;
      },
  };
  
  var hideEverythingExceptGivenElement = (onlyVisibleElement) => {
      var child = onlyVisibleElement;
      var parent = child.parentNode;
      var hiddenElements = [];
      while (child != document.body) {
        var children = parent.children;
        for (var currChild of children) {
          if (currChild != child) {
            hiddenElements.push({ node: currChild, displayState: currChild.style.display });
            currChild.style.display = 'none';
          }
        }
        child = parent;
        parent = parent.parentNode;
      }
      return hiddenElements;
    };
  
  var restoreOldWindowedStyle = null;
  
  var restoreHiddenElements = (hiddenElements) => {
      for (var elem of hiddenElements) {
        elem.node.style.display = elem.displayState;
      }
    };
  
  var currentFullscreenStrategy = {
  };
  
  var setLetterbox = (element, topBottom, leftRight) => {
      // Cannot use margin to specify letterboxes in FF or Chrome, since those ignore margins in fullscreen mode.
      element.style.paddingLeft = element.style.paddingRight = leftRight + 'px';
      element.style.paddingTop = element.style.paddingBottom = topBottom + 'px';
    };
  
  
  var maybeCStringToJsString = (cString) => {
      // "cString > 2" checks if the input is a number, and isn't of the special
      // values we accept here, EMSCRIPTEN_EVENT_TARGET_* (which map to 0, 1, 2).
      // In other words, if cString > 2 then it's a pointer to a valid place in
      // memory, and points to a C string.
      return cString > 2 ? UTF8ToString(cString) : cString;
    };
  
  /** @type {Object} */
  var specialHTMLTargets = [0, document, window];
  /** @suppress {duplicate } */
  var findEventTarget = (target) => {
      target = maybeCStringToJsString(target);
      var domElement = specialHTMLTargets[target] || document.querySelector(target);
      return domElement;
    };
  var findCanvasEventTarget = findEventTarget;
  var _emscripten_get_canvas_element_size = (target, width, height) => {
      var canvas = findCanvasEventTarget(target);
      if (!canvas) return -4;
      HEAP32[((width)>>2)] = canvas.width;
      HEAP32[((height)>>2)] = canvas.height;
    };
  
  
  
  
  
  var stackAlloc = (sz) => __emscripten_stack_alloc(sz);
  var stringToUTF8OnStack = (str) => {
      var size = lengthBytesUTF8(str) + 1;
      var ret = stackAlloc(size);
      stringToUTF8(str, ret, size);
      return ret;
    };
  var getCanvasElementSize = (target) => {
      var sp = stackSave();
      var w = stackAlloc(8);
      var h = w + 4;
  
      var targetInt = stringToUTF8OnStack(target.id);
      var ret = _emscripten_get_canvas_element_size(targetInt, w, h);
      var size = [HEAP32[((w)>>2)], HEAP32[((h)>>2)]];
      stackRestore(sp);
      return size;
    };
  
  var _emscripten_set_canvas_element_size = (target, width, height) => {
      var canvas = findCanvasEventTarget(target);
      if (!canvas) return -4;
      canvas.width = width;
      canvas.height = height;
      return 0;
    };
  
  
  
  var setCanvasElementSize = (target, width, height) => {
      if (!target.controlTransferredOffscreen) {
        target.width = width;
        target.height = height;
      } else {
        // This function is being called from high-level JavaScript code instead of asm.js/Wasm,
        // and it needs to synchronously proxy over to another thread, so marshal the string onto the heap to do the call.
        var sp = stackSave();
        var targetInt = stringToUTF8OnStack(target.id);
        _emscripten_set_canvas_element_size(targetInt, width, height);
        stackRestore(sp);
      }
    };
  
  /** @suppress {checkTypes} */
  var jstoi_q = (str) => parseInt(str);
  var softFullscreenResizeWebGLRenderTarget = () => {
      var dpr = devicePixelRatio;
      var inHiDPIFullscreenMode = currentFullscreenStrategy.canvasResolutionScaleMode == 2;
      var inAspectRatioFixedFullscreenMode = currentFullscreenStrategy.scaleMode == 2;
      var inPixelPerfectFullscreenMode = currentFullscreenStrategy.canvasResolutionScaleMode != 0;
      var inCenteredWithoutScalingFullscreenMode = currentFullscreenStrategy.scaleMode == 3;
      var screenWidth = inHiDPIFullscreenMode ? Math.round(innerWidth*dpr) : innerWidth;
      var screenHeight = inHiDPIFullscreenMode ? Math.round(innerHeight*dpr) : innerHeight;
      var w = screenWidth;
      var h = screenHeight;
      var canvas = currentFullscreenStrategy.target;
      var canvasSize = getCanvasElementSize(canvas);
      var x = canvasSize[0];
      var y = canvasSize[1];
      var topMargin;
  
      if (inAspectRatioFixedFullscreenMode) {
        if (w*y < x*h) h = (w * y / x) | 0;
        else if (w*y > x*h) w = (h * x / y) | 0;
        topMargin = ((screenHeight - h) / 2) | 0;
      }
  
      if (inPixelPerfectFullscreenMode) {
        setCanvasElementSize(canvas, w, h);
        if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, w, h);
      }
  
      // Back to CSS pixels.
      if (inHiDPIFullscreenMode) {
        topMargin /= dpr;
        w /= dpr;
        h /= dpr;
        // Round to nearest 4 digits of precision.
        w = Math.round(w*1e4)/1e4;
        h = Math.round(h*1e4)/1e4;
        topMargin = Math.round(topMargin*1e4)/1e4;
      }
  
      if (inCenteredWithoutScalingFullscreenMode) {
        var t = (innerHeight - jstoi_q(canvas.style.height)) / 2;
        var b = (innerWidth - jstoi_q(canvas.style.width)) / 2;
        setLetterbox(canvas, t, b);
      } else {
        canvas.style.width = w + 'px';
        canvas.style.height = h + 'px';
        var b = (innerWidth - w) / 2;
        setLetterbox(canvas, topMargin, b);
      }
  
      if (!inCenteredWithoutScalingFullscreenMode && currentFullscreenStrategy.canvasResizedCallback) {
        ((a1, a2, a3) => dynCall_iiii(currentFullscreenStrategy.canvasResizedCallback, a1, a2, a3))(37, 0, currentFullscreenStrategy.canvasResizedCallbackUserData);
      }
    };
  
  
  
  var registerRestoreOldStyle = (canvas) => {
      var canvasSize = getCanvasElementSize(canvas);
      var oldWidth = canvasSize[0];
      var oldHeight = canvasSize[1];
      var oldCssWidth = canvas.style.width;
      var oldCssHeight = canvas.style.height;
      var oldBackgroundColor = canvas.style.backgroundColor; // Chrome reads color from here.
      var oldDocumentBackgroundColor = document.body.style.backgroundColor; // IE11 reads color from here.
      // Firefox always has black background color.
      var oldPaddingLeft = canvas.style.paddingLeft; // Chrome, FF, Safari
      var oldPaddingRight = canvas.style.paddingRight;
      var oldPaddingTop = canvas.style.paddingTop;
      var oldPaddingBottom = canvas.style.paddingBottom;
      var oldMarginLeft = canvas.style.marginLeft; // IE11
      var oldMarginRight = canvas.style.marginRight;
      var oldMarginTop = canvas.style.marginTop;
      var oldMarginBottom = canvas.style.marginBottom;
      var oldDocumentBodyMargin = document.body.style.margin;
      var oldDocumentOverflow = document.documentElement.style.overflow; // Chrome, Firefox
      var oldDocumentScroll = document.body.scroll; // IE
      var oldImageRendering = canvas.style.imageRendering;
  
      function restoreOldStyle() {
        var fullscreenElement = document.fullscreenElement
          || document.webkitFullscreenElement
          ;
        if (!fullscreenElement) {
          document.removeEventListener('fullscreenchange', restoreOldStyle);
  
          // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
          // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
          document.removeEventListener('webkitfullscreenchange', restoreOldStyle);
  
          setCanvasElementSize(canvas, oldWidth, oldHeight);
  
          canvas.style.width = oldCssWidth;
          canvas.style.height = oldCssHeight;
          canvas.style.backgroundColor = oldBackgroundColor; // Chrome
          // IE11 hack: assigning 'undefined' or an empty string to document.body.style.backgroundColor has no effect, so first assign back the default color
          // before setting the undefined value. Setting undefined value is also important, or otherwise we would later treat that as something that the user
          // had explicitly set so subsequent fullscreen transitions would not set background color properly.
          if (!oldDocumentBackgroundColor) document.body.style.backgroundColor = 'white';
          document.body.style.backgroundColor = oldDocumentBackgroundColor; // IE11
          canvas.style.paddingLeft = oldPaddingLeft; // Chrome, FF, Safari
          canvas.style.paddingRight = oldPaddingRight;
          canvas.style.paddingTop = oldPaddingTop;
          canvas.style.paddingBottom = oldPaddingBottom;
          canvas.style.marginLeft = oldMarginLeft; // IE11
          canvas.style.marginRight = oldMarginRight;
          canvas.style.marginTop = oldMarginTop;
          canvas.style.marginBottom = oldMarginBottom;
          document.body.style.margin = oldDocumentBodyMargin;
          document.documentElement.style.overflow = oldDocumentOverflow; // Chrome, Firefox
          document.body.scroll = oldDocumentScroll; // IE
          canvas.style.imageRendering = oldImageRendering;
          if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
  
          if (currentFullscreenStrategy.canvasResizedCallback) {
            ((a1, a2, a3) => dynCall_iiii(currentFullscreenStrategy.canvasResizedCallback, a1, a2, a3))(37, 0, currentFullscreenStrategy.canvasResizedCallbackUserData);
          }
        }
      }
      document.addEventListener('fullscreenchange', restoreOldStyle);
      // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
      // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
      document.addEventListener('webkitfullscreenchange', restoreOldStyle);
      return restoreOldStyle;
    };
  
  
  
  
  var getBoundingClientRect = (e) => specialHTMLTargets.indexOf(e) < 0 ? e.getBoundingClientRect() : {'left':0,'top':0};
  var JSEvents_resizeCanvasForFullscreen = (target, strategy) => {
      var restoreOldStyle = registerRestoreOldStyle(target);
      var cssWidth = strategy.softFullscreen ? innerWidth : screen.width;
      var cssHeight = strategy.softFullscreen ? innerHeight : screen.height;
      var rect = getBoundingClientRect(target);
      var windowedCssWidth = rect.width;
      var windowedCssHeight = rect.height;
      var canvasSize = getCanvasElementSize(target);
      var windowedRttWidth = canvasSize[0];
      var windowedRttHeight = canvasSize[1];
  
      if (strategy.scaleMode == 3) {
        setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
        cssWidth = windowedCssWidth;
        cssHeight = windowedCssHeight;
      } else if (strategy.scaleMode == 2) {
        if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
          var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
          setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
          cssHeight = desiredCssHeight;
        } else {
          var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
          setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
          cssWidth = desiredCssWidth;
        }
      }
  
      // If we are adding padding, must choose a background color or otherwise Chrome will give the
      // padding a default white color. Do it only if user has not customized their own background color.
      target.style.backgroundColor ||= 'black';
      // IE11 does the same, but requires the color to be set in the document body.
      document.body.style.backgroundColor ||= 'black'; // IE11
      // Firefox always shows black letterboxes independent of style color.
  
      target.style.width = cssWidth + 'px';
      target.style.height = cssHeight + 'px';
  
      if (strategy.filteringMode == 1) {
        target.style.imageRendering = 'optimizeSpeed';
        target.style.imageRendering = '-moz-crisp-edges';
        target.style.imageRendering = '-o-crisp-edges';
        target.style.imageRendering = '-webkit-optimize-contrast';
        target.style.imageRendering = 'optimize-contrast';
        target.style.imageRendering = 'crisp-edges';
        target.style.imageRendering = 'pixelated';
      }
  
      var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? devicePixelRatio : 1;
      if (strategy.canvasResolutionScaleMode != 0) {
        var newWidth = (cssWidth * dpiScale)|0;
        var newHeight = (cssHeight * dpiScale)|0;
        setCanvasElementSize(target, newWidth, newHeight);
        if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, newWidth, newHeight);
      }
      return restoreOldStyle;
    };
  
  var _emscripten_enter_soft_fullscreen = (target, fullscreenStrategy) => {
      target = findEventTarget(target);
      if (!target) return -4;
  
      var strategy = {
          scaleMode: HEAP32[((fullscreenStrategy)>>2)],
          canvasResolutionScaleMode: HEAP32[(((fullscreenStrategy)+(4))>>2)],
          filteringMode: HEAP32[(((fullscreenStrategy)+(8))>>2)],
          canvasResizedCallback: HEAP32[(((fullscreenStrategy)+(12))>>2)],
          canvasResizedCallbackUserData: HEAP32[(((fullscreenStrategy)+(16))>>2)],
          target,
          softFullscreen: true
      };
  
      var restoreOldStyle = JSEvents_resizeCanvasForFullscreen(target, strategy);
  
      document.documentElement.style.overflow = 'hidden';  // Firefox, Chrome
      document.body.scroll = "no"; // IE11
      document.body.style.margin = '0px'; // Override default document margin area on all browsers.
  
      var hiddenElements = hideEverythingExceptGivenElement(target);
  
      function restoreWindowedState() {
        restoreOldStyle();
        restoreHiddenElements(hiddenElements);
        removeEventListener('resize', softFullscreenResizeWebGLRenderTarget);
        if (strategy.canvasResizedCallback) {
          ((a1, a2, a3) => dynCall_iiii(strategy.canvasResizedCallback, a1, a2, a3))(37, 0, strategy.canvasResizedCallbackUserData);
        }
        currentFullscreenStrategy = 0;
      }
      restoreOldWindowedStyle = restoreWindowedState;
      currentFullscreenStrategy = strategy;
      addEventListener('resize', softFullscreenResizeWebGLRenderTarget);
  
      // Inform the caller that the canvas size has changed.
      if (strategy.canvasResizedCallback) {
        ((a1, a2, a3) => dynCall_iiii(strategy.canvasResizedCallback, a1, a2, a3))(37, 0, strategy.canvasResizedCallbackUserData);
      }
  
      return 0;
    };

  var _emscripten_err = (str) => err(UTF8ToString(str));

  
  
  
  var JSEvents_requestFullscreen = (target, strategy) => {
      // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
      if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
        JSEvents_resizeCanvasForFullscreen(target, strategy);
      }
  
      if (target.requestFullscreen) {
        target.requestFullscreen();
      } else if (target.webkitRequestFullscreen) {
        target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
      } else {
        return JSEvents.fullscreenEnabled() ? -3 : -1;
      }
  
      currentFullscreenStrategy = strategy;
  
      if (strategy.canvasResizedCallback) {
        ((a1, a2, a3) => dynCall_iiii(strategy.canvasResizedCallback, a1, a2, a3))(37, 0, strategy.canvasResizedCallbackUserData);
      }
  
      return 0;
    };
  var _emscripten_exit_fullscreen = () => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents_requestFullscreen);
  
      var d = specialHTMLTargets[1];
      if (d.exitFullscreen) {
        d.fullscreenElement && d.exitFullscreen();
      } else if (d.webkitExitFullscreen) {
        d.webkitFullscreenElement && d.webkitExitFullscreen();
      } else {
        return -1;
      }
  
      return 0;
    };

  
  var requestPointerLock = (target) => {
      if (target.requestPointerLock) {
        target.requestPointerLock();
      } else {
        // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
        // or if the whole browser just doesn't support the feature.
        if (document.body.requestPointerLock
          ) {
          return -3;
        }
        return -1;
      }
      return 0;
    };
  var _emscripten_exit_pointerlock = () => {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else {
        return -1;
      }
      return 0;
    };

  var _emscripten_exit_soft_fullscreen = () => {
      restoreOldWindowedStyle?.();
      restoreOldWindowedStyle = null;
  
      return 0;
    };

  var _emscripten_get_device_pixel_ratio = () => {
      return devicePixelRatio;
    };

  
  var _emscripten_get_element_css_size = (target, width, height) => {
      target = findEventTarget(target);
      if (!target) return -4;
  
      var rect = getBoundingClientRect(target);
      HEAPF64[((width)>>3)] = rect.width;
      HEAPF64[((height)>>3)] = rect.height;
  
      return 0;
    };

  
  var fillGamepadEventData = (eventStruct, e) => {
      HEAPF64[((eventStruct)>>3)] = e.timestamp;
      for (var i = 0; i < e.axes.length; ++i) {
        HEAPF64[(((eventStruct+i*8)+(16))>>3)] = e.axes[i];
      }
      for (var i = 0; i < e.buttons.length; ++i) {
        if (typeof e.buttons[i] == 'object') {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)] = e.buttons[i].value;
        } else {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)] = e.buttons[i];
        }
      }
      for (var i = 0; i < e.buttons.length; ++i) {
        if (typeof e.buttons[i] == 'object') {
          HEAP8[(eventStruct+i)+(1040)] = e.buttons[i].pressed;
        } else {
          // Assigning a boolean to HEAP32, that's ok, but Closure would like to warn about it:
          /** @suppress {checkTypes} */
          HEAP8[(eventStruct+i)+(1040)] = e.buttons[i] == 1;
        }
      }
      HEAP8[(eventStruct)+(1104)] = e.connected;
      HEAP32[(((eventStruct)+(1108))>>2)] = e.index;
      HEAP32[(((eventStruct)+(8))>>2)] = e.axes.length;
      HEAP32[(((eventStruct)+(12))>>2)] = e.buttons.length;
      stringToUTF8(e.id, eventStruct + 1112, 64);
      stringToUTF8(e.mapping, eventStruct + 1176, 64);
    };
  var _emscripten_get_gamepad_status = (index, gamepadState) => {
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    };


  var _emscripten_get_num_gamepads = () => {
      // N.B. Do not call emscripten_get_num_gamepads() unless having first called emscripten_sample_gamepad_data(), and that has returned EMSCRIPTEN_RESULT_SUCCESS.
      // Otherwise the following line will throw an exception.
      return JSEvents.lastGamepadState.length;
    };

  var _emscripten_get_screen_size = (width, height) => {
      HEAP32[((width)>>2)] = screen.width;
      HEAP32[((height)>>2)] = screen.height;
    };

  /** @suppress {duplicate } */
  var _glActiveTexture = (x0) => GLctx.activeTexture(x0);
  var _emscripten_glActiveTexture = _glActiveTexture;

  /** @suppress {duplicate } */
  var _glAttachShader = (program, shader) => {
      GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
    };
  var _emscripten_glAttachShader = _glAttachShader;

  /** @suppress {duplicate } */
  var _glBeginQuery = (target, id) => {
      GLctx.beginQuery(target, GL.queries[id]);
    };
  var _emscripten_glBeginQuery = _glBeginQuery;

  /** @suppress {duplicate } */
  var _glBeginQueryEXT = (target, id) => {
      GLctx.disjointTimerQueryExt['beginQueryEXT'](target, GL.queries[id]);
    };
  var _emscripten_glBeginQueryEXT = _glBeginQueryEXT;

  /** @suppress {duplicate } */
  var _glBeginTransformFeedback = (x0) => GLctx.beginTransformFeedback(x0);
  var _emscripten_glBeginTransformFeedback = _glBeginTransformFeedback;

  
  /** @suppress {duplicate } */
  var _glBindAttribLocation = (program, index, name) => {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    };
  var _emscripten_glBindAttribLocation = _glBindAttribLocation;

  /** @suppress {duplicate } */
  var _glBindBuffer = (target, buffer) => {
  
      if (target == 0x88EB /*GL_PIXEL_PACK_BUFFER*/) {
        // In WebGL 2 glReadPixels entry point, we need to use a different WebGL 2
        // API function call when a buffer is bound to
        // GL_PIXEL_PACK_BUFFER_BINDING point, so must keep track whether that
        // binding point is non-null to know what is the proper API function to
        // call.
        GLctx.currentPixelPackBufferBinding = buffer;
      } else if (target == 0x88EC /*GL_PIXEL_UNPACK_BUFFER*/) {
        // In WebGL 2 gl(Compressed)Tex(Sub)Image[23]D entry points, we need to
        // use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_UNPACK_BUFFER_BINDING point, so must keep track whether that
        // binding point is non-null to know what is the proper API function to
        // call.
        GLctx.currentPixelUnpackBufferBinding = buffer;
      }
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    };
  var _emscripten_glBindBuffer = _glBindBuffer;

  /** @suppress {duplicate } */
  var _glBindBufferBase = (target, index, buffer) => {
      GLctx.bindBufferBase(target, index, GL.buffers[buffer]);
    };
  var _emscripten_glBindBufferBase = _glBindBufferBase;

  /** @suppress {duplicate } */
  var _glBindBufferRange = (target, index, buffer, offset, ptrsize) => {
      GLctx.bindBufferRange(target, index, GL.buffers[buffer], offset, ptrsize);
    };
  var _emscripten_glBindBufferRange = _glBindBufferRange;

  /** @suppress {duplicate } */
  var _glBindFramebuffer = (target, framebuffer) => {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    };
  var _emscripten_glBindFramebuffer = _glBindFramebuffer;

  /** @suppress {duplicate } */
  var _glBindRenderbuffer = (target, renderbuffer) => {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    };
  var _emscripten_glBindRenderbuffer = _glBindRenderbuffer;

  /** @suppress {duplicate } */
  var _glBindSampler = (unit, sampler) => {
      GLctx.bindSampler(unit, GL.samplers[sampler]);
    };
  var _emscripten_glBindSampler = _glBindSampler;

  /** @suppress {duplicate } */
  var _glBindTexture = (target, texture) => {
      GLctx.bindTexture(target, GL.textures[texture]);
    };
  var _emscripten_glBindTexture = _glBindTexture;

  /** @suppress {duplicate } */
  var _glBindTransformFeedback = (target, id) => {
      GLctx.bindTransformFeedback(target, GL.transformFeedbacks[id]);
    };
  var _emscripten_glBindTransformFeedback = _glBindTransformFeedback;

  /** @suppress {duplicate } */
  var _glBindVertexArray = (vao) => {
      GLctx.bindVertexArray(GL.vaos[vao]);
    };
  var _emscripten_glBindVertexArray = _glBindVertexArray;

  
  /** @suppress {duplicate } */
  var _glBindVertexArrayOES = _glBindVertexArray;
  var _emscripten_glBindVertexArrayOES = _glBindVertexArrayOES;

  /** @suppress {duplicate } */
  var _glBlendColor = (x0, x1, x2, x3) => GLctx.blendColor(x0, x1, x2, x3);
  var _emscripten_glBlendColor = _glBlendColor;

  /** @suppress {duplicate } */
  var _glBlendEquation = (x0) => GLctx.blendEquation(x0);
  var _emscripten_glBlendEquation = _glBlendEquation;

  /** @suppress {duplicate } */
  var _glBlendEquationSeparate = (x0, x1) => GLctx.blendEquationSeparate(x0, x1);
  var _emscripten_glBlendEquationSeparate = _glBlendEquationSeparate;

  /** @suppress {duplicate } */
  var _glBlendFunc = (x0, x1) => GLctx.blendFunc(x0, x1);
  var _emscripten_glBlendFunc = _glBlendFunc;

  /** @suppress {duplicate } */
  var _glBlendFuncSeparate = (x0, x1, x2, x3) => GLctx.blendFuncSeparate(x0, x1, x2, x3);
  var _emscripten_glBlendFuncSeparate = _glBlendFuncSeparate;

  /** @suppress {duplicate } */
  var _glBlitFramebuffer = (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) => GLctx.blitFramebuffer(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  var _emscripten_glBlitFramebuffer = _glBlitFramebuffer;

  /** @suppress {duplicate } */
  var _glBufferData = (target, size, data, usage) => {
  
      if (true) {
        // If size is zero, WebGL would interpret uploading the whole input
        // arraybuffer (starting from given offset), which would not make sense in
        // WebAssembly, so avoid uploading if size is zero. However we must still
        // call bufferData to establish a backing storage of zero bytes.
        if (data && size) {
          GLctx.bufferData(target, HEAPU8, usage, data, size);
        } else {
          GLctx.bufferData(target, size, usage);
        }
        return;
      }
    };
  var _emscripten_glBufferData = _glBufferData;

  /** @suppress {duplicate } */
  var _glBufferSubData = (target, offset, size, data) => {
      if (true) {
        size && GLctx.bufferSubData(target, offset, HEAPU8, data, size);
        return;
      }
    };
  var _emscripten_glBufferSubData = _glBufferSubData;

  /** @suppress {duplicate } */
  var _glCheckFramebufferStatus = (x0) => GLctx.checkFramebufferStatus(x0);
  var _emscripten_glCheckFramebufferStatus = _glCheckFramebufferStatus;

  /** @suppress {duplicate } */
  var _glClear = (x0) => GLctx.clear(x0);
  var _emscripten_glClear = _glClear;

  /** @suppress {duplicate } */
  var _glClearBufferfi = (x0, x1, x2, x3) => GLctx.clearBufferfi(x0, x1, x2, x3);
  var _emscripten_glClearBufferfi = _glClearBufferfi;

  /** @suppress {duplicate } */
  var _glClearBufferfv = (buffer, drawbuffer, value) => {
  
      GLctx.clearBufferfv(buffer, drawbuffer, HEAPF32, ((value)>>2));
    };
  var _emscripten_glClearBufferfv = _glClearBufferfv;

  /** @suppress {duplicate } */
  var _glClearBufferiv = (buffer, drawbuffer, value) => {
  
      GLctx.clearBufferiv(buffer, drawbuffer, HEAP32, ((value)>>2));
    };
  var _emscripten_glClearBufferiv = _glClearBufferiv;

  /** @suppress {duplicate } */
  var _glClearBufferuiv = (buffer, drawbuffer, value) => {
  
      GLctx.clearBufferuiv(buffer, drawbuffer, HEAPU32, ((value)>>2));
    };
  var _emscripten_glClearBufferuiv = _glClearBufferuiv;

  /** @suppress {duplicate } */
  var _glClearColor = (x0, x1, x2, x3) => GLctx.clearColor(x0, x1, x2, x3);
  var _emscripten_glClearColor = _glClearColor;

  /** @suppress {duplicate } */
  var _glClearDepthf = (x0) => GLctx.clearDepth(x0);
  var _emscripten_glClearDepthf = _glClearDepthf;

  /** @suppress {duplicate } */
  var _glClearStencil = (x0) => GLctx.clearStencil(x0);
  var _emscripten_glClearStencil = _glClearStencil;

  /** @suppress {duplicate } */
  var _glClientWaitSync = (sync, flags, timeout) => {
      // WebGL2 vs GLES3 differences: in GLES3, the timeout parameter is a uint64, where 0xFFFFFFFFFFFFFFFFULL means GL_TIMEOUT_IGNORED.
      // In JS, there's no 64-bit value types, so instead timeout is taken to be signed, and GL_TIMEOUT_IGNORED is given value -1.
      // Inherently the value accepted in the timeout is lossy, and can't take in arbitrary u64 bit pattern (but most likely doesn't matter)
      // See https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.15
      timeout = Number(timeout);
      return GLctx.clientWaitSync(GL.syncs[sync], flags, timeout);
    };
  var _emscripten_glClientWaitSync = _glClientWaitSync;

  /** @suppress {duplicate } */
  var _glClipControlEXT = (origin, depth) => {
      GLctx.extClipControl['clipControlEXT'](origin, depth);
    };
  var _emscripten_glClipControlEXT = _glClipControlEXT;

  /** @suppress {duplicate } */
  var _glColorMask = (red, green, blue, alpha) => {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    };
  var _emscripten_glColorMask = _glColorMask;

  /** @suppress {duplicate } */
  var _glCompileShader = (shader) => {
      GLctx.compileShader(GL.shaders[shader]);
    };
  var _emscripten_glCompileShader = _glCompileShader;

  /** @suppress {duplicate } */
  var _glCompressedTexImage2D = (target, level, internalFormat, width, height, border, imageSize, data) => {
      // `data` may be null here, which means "allocate uniniitalized space but
      // don't upload" in GLES parlance, but `compressedTexImage2D` requires the
      // final data parameter, so we simply pass a heap view starting at zero
      // effectively uploading whatever happens to be near address zero.  See
      // https://github.com/emscripten-core/emscripten/issues/19300.
      if (true) {
        if (GLctx.currentPixelUnpackBufferBinding || !imageSize) {
          GLctx.compressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data);
          return;
        }
        GLctx.compressedTexImage2D(target, level, internalFormat, width, height, border, HEAPU8, data, imageSize);
        return;
      }
    };
  var _emscripten_glCompressedTexImage2D = _glCompressedTexImage2D;

  /** @suppress {duplicate } */
  var _glCompressedTexImage3D = (target, level, internalFormat, width, height, depth, border, imageSize, data) => {
      if (GLctx.currentPixelUnpackBufferBinding) {
        GLctx.compressedTexImage3D(target, level, internalFormat, width, height, depth, border, imageSize, data);
      } else {
        GLctx.compressedTexImage3D(target, level, internalFormat, width, height, depth, border, HEAPU8, data, imageSize);
      }
    };
  var _emscripten_glCompressedTexImage3D = _glCompressedTexImage3D;

  /** @suppress {duplicate } */
  var _glCompressedTexSubImage2D = (target, level, xoffset, yoffset, width, height, format, imageSize, data) => {
      if (true) {
        if (GLctx.currentPixelUnpackBufferBinding || !imageSize) {
          GLctx.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
          return;
        }
        GLctx.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, HEAPU8, data, imageSize);
        return;
      }
    };
  var _emscripten_glCompressedTexSubImage2D = _glCompressedTexSubImage2D;

  /** @suppress {duplicate } */
  var _glCompressedTexSubImage3D = (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) => {
      if (GLctx.currentPixelUnpackBufferBinding) {
        GLctx.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
      } else {
        GLctx.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, HEAPU8, data, imageSize);
      }
    };
  var _emscripten_glCompressedTexSubImage3D = _glCompressedTexSubImage3D;

  /** @suppress {duplicate } */
  var _glCopyBufferSubData = (x0, x1, x2, x3, x4) => GLctx.copyBufferSubData(x0, x1, x2, x3, x4);
  var _emscripten_glCopyBufferSubData = _glCopyBufferSubData;

  /** @suppress {duplicate } */
  var _glCopyTexImage2D = (x0, x1, x2, x3, x4, x5, x6, x7) => GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
  var _emscripten_glCopyTexImage2D = _glCopyTexImage2D;

  /** @suppress {duplicate } */
  var _glCopyTexSubImage2D = (x0, x1, x2, x3, x4, x5, x6, x7) => GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
  var _emscripten_glCopyTexSubImage2D = _glCopyTexSubImage2D;

  /** @suppress {duplicate } */
  var _glCopyTexSubImage3D = (x0, x1, x2, x3, x4, x5, x6, x7, x8) => GLctx.copyTexSubImage3D(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  var _emscripten_glCopyTexSubImage3D = _glCopyTexSubImage3D;

  /** @suppress {duplicate } */
  var _glCreateProgram = () => {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      // Store additional information needed for each shader program:
      program.name = id;
      // Lazy cache results of
      // glGetProgramiv(GL_ACTIVE_UNIFORM_MAX_LENGTH/GL_ACTIVE_ATTRIBUTE_MAX_LENGTH/GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH)
      program.maxUniformLength = program.maxAttributeLength = program.maxUniformBlockNameLength = 0;
      program.uniformIdCounter = 1;
      GL.programs[id] = program;
      return id;
    };
  var _emscripten_glCreateProgram = _glCreateProgram;

  /** @suppress {duplicate } */
  var _glCreateShader = (shaderType) => {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
  
      return id;
    };
  var _emscripten_glCreateShader = _glCreateShader;

  /** @suppress {duplicate } */
  var _glCullFace = (x0) => GLctx.cullFace(x0);
  var _emscripten_glCullFace = _glCullFace;

  /** @suppress {duplicate } */
  var _glDeleteBuffers = (n, buffers) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GLctx.currentPixelPackBufferBinding) GLctx.currentPixelPackBufferBinding = 0;
        if (id == GLctx.currentPixelUnpackBufferBinding) GLctx.currentPixelUnpackBufferBinding = 0;
      }
    };
  var _emscripten_glDeleteBuffers = _glDeleteBuffers;

  /** @suppress {duplicate } */
  var _glDeleteFramebuffers = (n, framebuffers) => {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    };
  var _emscripten_glDeleteFramebuffers = _glDeleteFramebuffers;

  /** @suppress {duplicate } */
  var _glDeleteProgram = (id) => {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) {
        // glDeleteProgram actually signals an error when deleting a nonexisting
        // object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
    };
  var _emscripten_glDeleteProgram = _glDeleteProgram;

  /** @suppress {duplicate } */
  var _glDeleteQueries = (n, ids) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.queries[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.deleteQuery(query);
        GL.queries[id] = null;
      }
    };
  var _emscripten_glDeleteQueries = _glDeleteQueries;

  /** @suppress {duplicate } */
  var _glDeleteQueriesEXT = (n, ids) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.queries[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.disjointTimerQueryExt['deleteQueryEXT'](query);
        GL.queries[id] = null;
      }
    };
  var _emscripten_glDeleteQueriesEXT = _glDeleteQueriesEXT;

  /** @suppress {duplicate } */
  var _glDeleteRenderbuffers = (n, renderbuffers) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    };
  var _emscripten_glDeleteRenderbuffers = _glDeleteRenderbuffers;

  /** @suppress {duplicate } */
  var _glDeleteSamplers = (n, samplers) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((samplers)+(i*4))>>2)];
        var sampler = GL.samplers[id];
        if (!sampler) continue;
        GLctx.deleteSampler(sampler);
        sampler.name = 0;
        GL.samplers[id] = null;
      }
    };
  var _emscripten_glDeleteSamplers = _glDeleteSamplers;

  /** @suppress {duplicate } */
  var _glDeleteShader = (id) => {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) {
        // glDeleteShader actually signals an error when deleting a nonexisting
        // object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    };
  var _emscripten_glDeleteShader = _glDeleteShader;

  /** @suppress {duplicate } */
  var _glDeleteSync = (id) => {
      if (!id) return;
      var sync = GL.syncs[id];
      if (!sync) { // glDeleteSync signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteSync(sync);
      sync.name = 0;
      GL.syncs[id] = null;
    };
  var _emscripten_glDeleteSync = _glDeleteSync;

  /** @suppress {duplicate } */
  var _glDeleteTextures = (n, textures) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        // GL spec: "glDeleteTextures silently ignores 0s and names that do not
        // correspond to existing textures".
        if (!texture) continue;
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    };
  var _emscripten_glDeleteTextures = _glDeleteTextures;

  /** @suppress {duplicate } */
  var _glDeleteTransformFeedbacks = (n, ids) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var transformFeedback = GL.transformFeedbacks[id];
        if (!transformFeedback) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.deleteTransformFeedback(transformFeedback);
        transformFeedback.name = 0;
        GL.transformFeedbacks[id] = null;
      }
    };
  var _emscripten_glDeleteTransformFeedbacks = _glDeleteTransformFeedbacks;

  /** @suppress {duplicate } */
  var _glDeleteVertexArrays = (n, vaos) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx.deleteVertexArray(GL.vaos[id]);
        GL.vaos[id] = null;
      }
    };
  var _emscripten_glDeleteVertexArrays = _glDeleteVertexArrays;

  
  /** @suppress {duplicate } */
  var _glDeleteVertexArraysOES = _glDeleteVertexArrays;
  var _emscripten_glDeleteVertexArraysOES = _glDeleteVertexArraysOES;

  /** @suppress {duplicate } */
  var _glDepthFunc = (x0) => GLctx.depthFunc(x0);
  var _emscripten_glDepthFunc = _glDepthFunc;

  /** @suppress {duplicate } */
  var _glDepthMask = (flag) => {
      GLctx.depthMask(!!flag);
    };
  var _emscripten_glDepthMask = _glDepthMask;

  /** @suppress {duplicate } */
  var _glDepthRangef = (x0, x1) => GLctx.depthRange(x0, x1);
  var _emscripten_glDepthRangef = _glDepthRangef;

  /** @suppress {duplicate } */
  var _glDetachShader = (program, shader) => {
      GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
    };
  var _emscripten_glDetachShader = _glDetachShader;

  /** @suppress {duplicate } */
  var _glDisable = (x0) => GLctx.disable(x0);
  var _emscripten_glDisable = _glDisable;

  /** @suppress {duplicate } */
  var _glDisableVertexAttribArray = (index) => {
      GLctx.disableVertexAttribArray(index);
    };
  var _emscripten_glDisableVertexAttribArray = _glDisableVertexAttribArray;

  /** @suppress {duplicate } */
  var _glDrawArrays = (mode, first, count) => {
  
      GLctx.drawArrays(mode, first, count);
  
    };
  var _emscripten_glDrawArrays = _glDrawArrays;

  /** @suppress {duplicate } */
  var _glDrawArraysInstanced = (mode, first, count, primcount) => {
      GLctx.drawArraysInstanced(mode, first, count, primcount);
    };
  var _emscripten_glDrawArraysInstanced = _glDrawArraysInstanced;

  
  /** @suppress {duplicate } */
  var _glDrawArraysInstancedANGLE = _glDrawArraysInstanced;
  var _emscripten_glDrawArraysInstancedANGLE = _glDrawArraysInstancedANGLE;

  
  /** @suppress {duplicate } */
  var _glDrawArraysInstancedARB = _glDrawArraysInstanced;
  var _emscripten_glDrawArraysInstancedARB = _glDrawArraysInstancedARB;

  
  /** @suppress {duplicate } */
  var _glDrawArraysInstancedEXT = _glDrawArraysInstanced;
  var _emscripten_glDrawArraysInstancedEXT = _glDrawArraysInstancedEXT;

  
  /** @suppress {duplicate } */
  var _glDrawArraysInstancedNV = _glDrawArraysInstanced;
  var _emscripten_glDrawArraysInstancedNV = _glDrawArraysInstancedNV;

  var tempFixedLengthArray = [];
  
  /** @suppress {duplicate } */
  var _glDrawBuffers = (n, bufs) => {
  
      var bufArray = tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx.drawBuffers(bufArray);
    };
  var _emscripten_glDrawBuffers = _glDrawBuffers;

  
  /** @suppress {duplicate } */
  var _glDrawBuffersEXT = _glDrawBuffers;
  var _emscripten_glDrawBuffersEXT = _glDrawBuffersEXT;

  
  /** @suppress {duplicate } */
  var _glDrawBuffersWEBGL = _glDrawBuffers;
  var _emscripten_glDrawBuffersWEBGL = _glDrawBuffersWEBGL;

  /** @suppress {duplicate } */
  var _glDrawElements = (mode, count, type, indices) => {
  
      GLctx.drawElements(mode, count, type, indices);
  
    };
  var _emscripten_glDrawElements = _glDrawElements;

  /** @suppress {duplicate } */
  var _glDrawElementsInstanced = (mode, count, type, indices, primcount) => {
      GLctx.drawElementsInstanced(mode, count, type, indices, primcount);
    };
  var _emscripten_glDrawElementsInstanced = _glDrawElementsInstanced;

  
  /** @suppress {duplicate } */
  var _glDrawElementsInstancedANGLE = _glDrawElementsInstanced;
  var _emscripten_glDrawElementsInstancedANGLE = _glDrawElementsInstancedANGLE;

  
  /** @suppress {duplicate } */
  var _glDrawElementsInstancedARB = _glDrawElementsInstanced;
  var _emscripten_glDrawElementsInstancedARB = _glDrawElementsInstancedARB;

  
  /** @suppress {duplicate } */
  var _glDrawElementsInstancedEXT = _glDrawElementsInstanced;
  var _emscripten_glDrawElementsInstancedEXT = _glDrawElementsInstancedEXT;

  
  /** @suppress {duplicate } */
  var _glDrawElementsInstancedNV = _glDrawElementsInstanced;
  var _emscripten_glDrawElementsInstancedNV = _glDrawElementsInstancedNV;

  /** @suppress {duplicate } */
  var _glDrawRangeElements = (mode, start, end, count, type, indices) => {
      // TODO: This should be a trivial pass-though function registered at the bottom of this page as
      // glFuncs[6][1] += ' drawRangeElements';
      // but due to https://bugzilla.mozilla.org/show_bug.cgi?id=1202427,
      // we work around by ignoring the range.
      _glDrawElements(mode, count, type, indices);
    };
  var _emscripten_glDrawRangeElements = _glDrawRangeElements;

  /** @suppress {duplicate } */
  var _glEnable = (x0) => GLctx.enable(x0);
  var _emscripten_glEnable = _glEnable;

  /** @suppress {duplicate } */
  var _glEnableVertexAttribArray = (index) => {
      GLctx.enableVertexAttribArray(index);
    };
  var _emscripten_glEnableVertexAttribArray = _glEnableVertexAttribArray;

  /** @suppress {duplicate } */
  var _glEndQuery = (x0) => GLctx.endQuery(x0);
  var _emscripten_glEndQuery = _glEndQuery;

  /** @suppress {duplicate } */
  var _glEndQueryEXT = (target) => {
      GLctx.disjointTimerQueryExt['endQueryEXT'](target);
    };
  var _emscripten_glEndQueryEXT = _glEndQueryEXT;

  /** @suppress {duplicate } */
  var _glEndTransformFeedback = () => GLctx.endTransformFeedback();
  var _emscripten_glEndTransformFeedback = _glEndTransformFeedback;

  /** @suppress {duplicate } */
  var _glFenceSync = (condition, flags) => {
      var sync = GLctx.fenceSync(condition, flags);
      if (sync) {
        var id = GL.getNewId(GL.syncs);
        sync.name = id;
        GL.syncs[id] = sync;
        return id;
      }
      return 0; // Failed to create a sync object
    };
  var _emscripten_glFenceSync = _glFenceSync;

  /** @suppress {duplicate } */
  var _glFinish = () => GLctx.finish();
  var _emscripten_glFinish = _glFinish;

  /** @suppress {duplicate } */
  var _glFlush = () => GLctx.flush();
  var _emscripten_glFlush = _glFlush;

  /** @suppress {duplicate } */
  var _glFramebufferRenderbuffer = (target, attachment, renderbuffertarget, renderbuffer) => {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    };
  var _emscripten_glFramebufferRenderbuffer = _glFramebufferRenderbuffer;

  /** @suppress {duplicate } */
  var _glFramebufferTexture2D = (target, attachment, textarget, texture, level) => {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    };
  var _emscripten_glFramebufferTexture2D = _glFramebufferTexture2D;

  /** @suppress {duplicate } */
  var _glFramebufferTextureLayer = (target, attachment, texture, level, layer) => {
      GLctx.framebufferTextureLayer(target, attachment, GL.textures[texture], level, layer);
    };
  var _emscripten_glFramebufferTextureLayer = _glFramebufferTextureLayer;

  /** @suppress {duplicate } */
  var _glFrontFace = (x0) => GLctx.frontFace(x0);
  var _emscripten_glFrontFace = _glFrontFace;

  /** @suppress {duplicate } */
  var _glGenBuffers = (n, buffers) => {
      GL.genObject(n, buffers, 'createBuffer', GL.buffers
        );
    };
  var _emscripten_glGenBuffers = _glGenBuffers;

  /** @suppress {duplicate } */
  var _glGenFramebuffers = (n, ids) => {
      GL.genObject(n, ids, 'createFramebuffer', GL.framebuffers
        );
    };
  var _emscripten_glGenFramebuffers = _glGenFramebuffers;

  /** @suppress {duplicate } */
  var _glGenQueries = (n, ids) => {
      GL.genObject(n, ids, 'createQuery', GL.queries
        );
    };
  var _emscripten_glGenQueries = _glGenQueries;

  /** @suppress {duplicate } */
  var _glGenQueriesEXT = (n, ids) => {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt['createQueryEXT']();
        if (!query) {
          GL.recordError(0x502 /* GL_INVALID_OPERATION */);
          while (i < n) HEAP32[(((ids)+(i++*4))>>2)] = 0;
          return;
        }
        var id = GL.getNewId(GL.queries);
        query.name = id;
        GL.queries[id] = query;
        HEAP32[(((ids)+(i*4))>>2)] = id;
      }
    };
  var _emscripten_glGenQueriesEXT = _glGenQueriesEXT;

  /** @suppress {duplicate } */
  var _glGenRenderbuffers = (n, renderbuffers) => {
      GL.genObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    };
  var _emscripten_glGenRenderbuffers = _glGenRenderbuffers;

  /** @suppress {duplicate } */
  var _glGenSamplers = (n, samplers) => {
      GL.genObject(n, samplers, 'createSampler', GL.samplers
        );
    };
  var _emscripten_glGenSamplers = _glGenSamplers;

  /** @suppress {duplicate } */
  var _glGenTextures = (n, textures) => {
      GL.genObject(n, textures, 'createTexture', GL.textures
        );
    };
  var _emscripten_glGenTextures = _glGenTextures;

  /** @suppress {duplicate } */
  var _glGenTransformFeedbacks = (n, ids) => {
      GL.genObject(n, ids, 'createTransformFeedback', GL.transformFeedbacks
        );
    };
  var _emscripten_glGenTransformFeedbacks = _glGenTransformFeedbacks;

  /** @suppress {duplicate } */
  var _glGenVertexArrays = (n, arrays) => {
      GL.genObject(n, arrays, 'createVertexArray', GL.vaos
        );
    };
  var _emscripten_glGenVertexArrays = _glGenVertexArrays;

  
  /** @suppress {duplicate } */
  var _glGenVertexArraysOES = _glGenVertexArrays;
  var _emscripten_glGenVertexArraysOES = _glGenVertexArraysOES;

  /** @suppress {duplicate } */
  var _glGenerateMipmap = (x0) => GLctx.generateMipmap(x0);
  var _emscripten_glGenerateMipmap = _glGenerateMipmap;

  
  var __glGetActiveAttribOrUniform = (funcName, program, index, bufSize, length, size, type, name) => {
      program = GL.programs[program];
      var info = GLctx[funcName](program, index);
      if (info) {
        // If an error occurs, nothing will be written to length, size and type and name.
        var numBytesWrittenExclNull = name && stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
        if (size) HEAP32[((size)>>2)] = info.size;
        if (type) HEAP32[((type)>>2)] = info.type;
      }
    };
  
  /** @suppress {duplicate } */
  var _glGetActiveAttrib = (program, index, bufSize, length, size, type, name) =>
      __glGetActiveAttribOrUniform('getActiveAttrib', program, index, bufSize, length, size, type, name);
  var _emscripten_glGetActiveAttrib = _glGetActiveAttrib;

  
  /** @suppress {duplicate } */
  var _glGetActiveUniform = (program, index, bufSize, length, size, type, name) =>
      __glGetActiveAttribOrUniform('getActiveUniform', program, index, bufSize, length, size, type, name);
  var _emscripten_glGetActiveUniform = _glGetActiveUniform;

  /** @suppress {duplicate } */
  var _glGetActiveUniformBlockName = (program, uniformBlockIndex, bufSize, length, uniformBlockName) => {
      program = GL.programs[program];
  
      var result = GLctx.getActiveUniformBlockName(program, uniformBlockIndex);
      if (!result) return; // If an error occurs, nothing will be written to uniformBlockName or length.
      if (uniformBlockName && bufSize > 0) {
        var numBytesWrittenExclNull = stringToUTF8(result, uniformBlockName, bufSize);
        if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)] = 0;
      }
    };
  var _emscripten_glGetActiveUniformBlockName = _glGetActiveUniformBlockName;

  /** @suppress {duplicate } */
  var _glGetActiveUniformBlockiv = (program, uniformBlockIndex, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
  
      if (pname == 0x8A41 /* GL_UNIFORM_BLOCK_NAME_LENGTH */) {
        var name = GLctx.getActiveUniformBlockName(program, uniformBlockIndex);
        HEAP32[((params)>>2)] = name.length+1;
        return;
      }
  
      var result = GLctx.getActiveUniformBlockParameter(program, uniformBlockIndex, pname);
      if (result === null) return; // If an error occurs, nothing should be written to params.
      if (pname == 0x8A43 /*GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES*/) {
        for (var i = 0; i < result.length; i++) {
          HEAP32[(((params)+(i*4))>>2)] = result[i];
        }
      } else {
        HEAP32[((params)>>2)] = result;
      }
    };
  var _emscripten_glGetActiveUniformBlockiv = _glGetActiveUniformBlockiv;

  /** @suppress {duplicate } */
  var _glGetActiveUniformsiv = (program, uniformCount, uniformIndices, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (uniformCount > 0 && uniformIndices == 0) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
      var ids = [];
      for (var i = 0; i < uniformCount; i++) {
        ids.push(HEAP32[(((uniformIndices)+(i*4))>>2)]);
      }
  
      var result = GLctx.getActiveUniforms(program, ids, pname);
      if (!result) return; // GL spec: If an error is generated, nothing is written out to params.
  
      var len = result.length;
      for (var i = 0; i < len; i++) {
        HEAP32[(((params)+(i*4))>>2)] = result[i];
      }
    };
  var _emscripten_glGetActiveUniformsiv = _glGetActiveUniformsiv;

  /** @suppress {duplicate } */
  var _glGetAttachedShaders = (program, maxCount, count, shaders) => {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)] = len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)] = id;
      }
    };
  var _emscripten_glGetAttachedShaders = _glGetAttachedShaders;

  
  /** @suppress {duplicate } */
  var _glGetAttribLocation = (program, name) =>
      GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
  var _emscripten_glGetAttribLocation = _glGetAttribLocation;

  var writeI53ToI64 = (ptr, num) => {
      HEAPU32[((ptr)>>2)] = num;
      var lower = HEAPU32[((ptr)>>2)];
      HEAPU32[(((ptr)+(4))>>2)] = (num - lower)/4294967296;
    };
  
  
  var webglGetExtensions = () => {
      var exts = getEmscriptenSupportedExtensions(GLctx);
      exts = exts.concat(exts.map((e) => "GL_" + e));
      return exts;
    };
  
  var emscriptenWebGLGet = (name_, p, type) => {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null
      // pointer should be treated.  Testing on desktop core GL 3, the application
      // crashes on glGetIntegerv to a null pointer, but better to report an error
      // instead of doing anything random.
      if (!p) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch (name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type != 0 && type != 1) {
            GL.recordError(0x500); // GL_INVALID_ENUM
          }
          // Do not write anything to the out pointer, since no binary formats are
          // supported.
          return;
        case 0x87FE: // GL_NUM_PROGRAM_BINARY_FORMATS
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete
          // since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be
          // queried for length), so implement it ourselves to allow C++ GLES2
          // code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
  
        case 0x821D: // GL_NUM_EXTENSIONS
          if (GL.currentContext.version < 2) {
            // Calling GLES3/WebGL2 function with a GLES2/WebGL1 context
            GL.recordError(0x502 /* GL_INVALID_OPERATION */);
            return;
          }
          ret = webglGetExtensions().length;
          break;
        case 0x821B: // GL_MAJOR_VERSION
        case 0x821C: // GL_MINOR_VERSION
          if (GL.currentContext.version < 2) {
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          }
          ret = name_ == 0x821B ? 3 : 0; // return version 3.0
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof result) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound -
              // perhaps nothing is bound), but otherwise can mean an invalid
              // name_, which we need to report as an error
              switch (name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING or DRAW_FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8F36: // COPY_READ_BUFFER_BINDING or COPY_READ_BUFFER
                case 0x8F37: // COPY_WRITE_BUFFER_BINDING or COPY_WRITE_BUFFER
                case 0x88ED: // PIXEL_PACK_BUFFER_BINDING
                case 0x88EF: // PIXEL_UNPACK_BUFFER_BINDING
                case 0x8CAA: // READ_FRAMEBUFFER_BINDING
                case 0x8919: // SAMPLER_BINDING
                case 0x8C1D: // TEXTURE_BINDING_2D_ARRAY
                case 0x806A: // TEXTURE_BINDING_3D
                case 0x8E25: // TRANSFORM_FEEDBACK_BINDING
                case 0x8C8F: // TRANSFORM_FEEDBACK_BUFFER_BINDING
                case 0x8A28: // UNIFORM_BUFFER_BINDING
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0: HEAP32[(((p)+(i*4))>>2)] = result[i]; break;
                  case 2: HEAPF32[(((p)+(i*4))>>2)] = result[i]; break;
                  case 4: HEAP8[(p)+(i)] = result[i] ? 1 : 0; break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x500); // GL_INVALID_ENUM
                err(`GL_INVALID_ENUM in glGet${type}v: Unknown object returned from WebGL getParameter(${name_})! (error: ${e})`);
                return;
              }
            }
            break;
          default:
            GL.recordError(0x500); // GL_INVALID_ENUM
            err(`GL_INVALID_ENUM in glGet${type}v: Native code calling glGet${type}v(${name_}) and it returns ${result} of type ${typeof(result)}!`);
            return;
        }
      }
  
      switch (type) {
        case 1: writeI53ToI64(p, ret); break;
        case 0: HEAP32[((p)>>2)] = ret; break;
        case 2:   HEAPF32[((p)>>2)] = ret; break;
        case 4: HEAP8[p] = ret ? 1 : 0; break;
      }
    };
  
  /** @suppress {duplicate } */
  var _glGetBooleanv = (name_, p) => emscriptenWebGLGet(name_, p, 4);
  var _emscripten_glGetBooleanv = _glGetBooleanv;

  /** @suppress {duplicate } */
  var _glGetBufferParameteri64v = (target, value, data) => {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      writeI53ToI64(data, GLctx.getBufferParameter(target, value));
    };
  var _emscripten_glGetBufferParameteri64v = _glGetBufferParameteri64v;

  /** @suppress {duplicate } */
  var _glGetBufferParameteriv = (target, value, data) => {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null
        // pointer. Since calling this function does not make sense if data ==
        // null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)] = GLctx.getBufferParameter(target, value);
    };
  var _emscripten_glGetBufferParameteriv = _glGetBufferParameteriv;

  /** @suppress {duplicate } */
  var _glGetError = () => {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    };
  var _emscripten_glGetError = _glGetError;

  
  /** @suppress {duplicate } */
  var _glGetFloatv = (name_, p) => emscriptenWebGLGet(name_, p, 2);
  var _emscripten_glGetFloatv = _glGetFloatv;

  /** @suppress {duplicate } */
  var _glGetFragDataLocation = (program, name) => {
      return GLctx.getFragDataLocation(GL.programs[program], UTF8ToString(name));
    };
  var _emscripten_glGetFragDataLocation = _glGetFragDataLocation;

  /** @suppress {duplicate } */
  var _glGetFramebufferAttachmentParameteriv = (target, attachment, pname, params) => {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)] = result;
    };
  var _emscripten_glGetFramebufferAttachmentParameteriv = _glGetFramebufferAttachmentParameteriv;

  var emscriptenWebGLGetIndexed = (target, index, data, type) => {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var result = GLctx.getIndexedParameter(target, index);
      var ret;
      switch (typeof result) {
        case 'boolean':
          ret = result ? 1 : 0;
          break;
        case 'number':
          ret = result;
          break;
        case 'object':
          if (result === null) {
            switch (target) {
              case 0x8C8F: // TRANSFORM_FEEDBACK_BUFFER_BINDING
              case 0x8A28: // UNIFORM_BUFFER_BINDING
                ret = 0;
                break;
              default: {
                GL.recordError(0x500); // GL_INVALID_ENUM
                return;
              }
            }
          } else if (result instanceof WebGLBuffer) {
            ret = result.name | 0;
          } else {
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          }
          break;
        default:
          GL.recordError(0x500); // GL_INVALID_ENUM
          return;
      }
  
      switch (type) {
        case 1: writeI53ToI64(data, ret); break;
        case 0: HEAP32[((data)>>2)] = ret; break;
        case 2: HEAPF32[((data)>>2)] = ret; break;
        case 4: HEAP8[data] = ret ? 1 : 0; break;
        default: throw 'internal emscriptenWebGLGetIndexed() error, bad type: ' + type;
      }
    };
  /** @suppress {duplicate } */
  var _glGetInteger64i_v = (target, index, data) =>
      emscriptenWebGLGetIndexed(target, index, data, 1);
  var _emscripten_glGetInteger64i_v = _glGetInteger64i_v;

  /** @suppress {duplicate } */
  var _glGetInteger64v = (name_, p) => {
      emscriptenWebGLGet(name_, p, 1);
    };
  var _emscripten_glGetInteger64v = _glGetInteger64v;

  /** @suppress {duplicate } */
  var _glGetIntegeri_v = (target, index, data) =>
      emscriptenWebGLGetIndexed(target, index, data, 0);
  var _emscripten_glGetIntegeri_v = _glGetIntegeri_v;

  
  /** @suppress {duplicate } */
  var _glGetIntegerv = (name_, p) => emscriptenWebGLGet(name_, p, 0);
  var _emscripten_glGetIntegerv = _glGetIntegerv;

  /** @suppress {duplicate } */
  var _glGetInternalformativ = (target, internalformat, pname, bufSize, params) => {
      if (bufSize < 0) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (!params) {
        // GLES3 specification does not specify how to behave if values is a null pointer. Since calling this function does not make sense
        // if values == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = GLctx.getInternalformatParameter(target, internalformat, pname);
      if (ret === null) return;
      for (var i = 0; i < ret.length && i < bufSize; ++i) {
        HEAP32[(((params)+(i*4))>>2)] = ret[i];
      }
    };
  var _emscripten_glGetInternalformativ = _glGetInternalformativ;

  /** @suppress {duplicate } */
  var _glGetProgramBinary = (program, bufSize, length, binaryFormat, binary) => {
      GL.recordError(0x502/*GL_INVALID_OPERATION*/);
    };
  var _emscripten_glGetProgramBinary = _glGetProgramBinary;

  /** @suppress {duplicate } */
  var _glGetProgramInfoLog = (program, maxLength, length, infoLog) => {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    };
  var _emscripten_glGetProgramInfoLog = _glGetProgramInfoLog;

  /** @suppress {duplicate } */
  var _glGetProgramiv = (program, pname, p) => {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null
        // pointer. Since calling this function does not make sense if p == null,
        // issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      program = GL.programs[program];
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(program);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)] = log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        if (!program.maxUniformLength) {
          var numActiveUniforms = GLctx.getProgramParameter(program, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
          for (var i = 0; i < numActiveUniforms; ++i) {
            program.maxUniformLength = Math.max(program.maxUniformLength, GLctx.getActiveUniform(program, i).name.length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (!program.maxAttributeLength) {
          var numActiveAttributes = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          for (var i = 0; i < numActiveAttributes; ++i) {
            program.maxAttributeLength = Math.max(program.maxAttributeLength, GLctx.getActiveAttrib(program, i).name.length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (!program.maxUniformBlockNameLength) {
          var numActiveUniformBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          for (var i = 0; i < numActiveUniformBlocks; ++i) {
            program.maxUniformBlockNameLength = Math.max(program.maxUniformBlockNameLength, GLctx.getActiveUniformBlockName(program, i).length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)] = GLctx.getProgramParameter(program, pname);
      }
    };
  var _emscripten_glGetProgramiv = _glGetProgramiv;

  
  /** @suppress {duplicate } */
  var _glGetQueryObjecti64vEXT = (id, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.queries[id];
      var param;
      if (GL.currentContext.version < 2)
      {
        param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      }
      else {
        param = GLctx.getQueryParameter(query, pname);
      }
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      writeI53ToI64(params, ret);
    };
  var _emscripten_glGetQueryObjecti64vEXT = _glGetQueryObjecti64vEXT;

  /** @suppress {duplicate } */
  var _glGetQueryObjectivEXT = (id, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.queries[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)] = ret;
    };
  var _emscripten_glGetQueryObjectivEXT = _glGetQueryObjectivEXT;

  
  /** @suppress {duplicate } */
  var _glGetQueryObjectui64vEXT = _glGetQueryObjecti64vEXT;
  var _emscripten_glGetQueryObjectui64vEXT = _glGetQueryObjectui64vEXT;

  /** @suppress {duplicate } */
  var _glGetQueryObjectuiv = (id, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.queries[id];
      var param = GLctx.getQueryParameter(query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)] = ret;
    };
  var _emscripten_glGetQueryObjectuiv = _glGetQueryObjectuiv;

  
  /** @suppress {duplicate } */
  var _glGetQueryObjectuivEXT = _glGetQueryObjectivEXT;
  var _emscripten_glGetQueryObjectuivEXT = _glGetQueryObjectuivEXT;

  /** @suppress {duplicate } */
  var _glGetQueryiv = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.getQuery(target, pname);
    };
  var _emscripten_glGetQueryiv = _glGetQueryiv;

  /** @suppress {duplicate } */
  var _glGetQueryivEXT = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.disjointTimerQueryExt['getQueryEXT'](target, pname);
    };
  var _emscripten_glGetQueryivEXT = _glGetQueryivEXT;

  /** @suppress {duplicate } */
  var _glGetRenderbufferParameteriv = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.getRenderbufferParameter(target, pname);
    };
  var _emscripten_glGetRenderbufferParameteriv = _glGetRenderbufferParameteriv;

  /** @suppress {duplicate } */
  var _glGetSamplerParameterfv = (sampler, pname, params) => {
      if (!params) {
        // GLES3 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)] = GLctx.getSamplerParameter(GL.samplers[sampler], pname);
    };
  var _emscripten_glGetSamplerParameterfv = _glGetSamplerParameterfv;

  /** @suppress {duplicate } */
  var _glGetSamplerParameteriv = (sampler, pname, params) => {
      if (!params) {
        // GLES3 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.getSamplerParameter(GL.samplers[sampler], pname);
    };
  var _emscripten_glGetSamplerParameteriv = _glGetSamplerParameteriv;

  
  /** @suppress {duplicate } */
  var _glGetShaderInfoLog = (shader, maxLength, length, infoLog) => {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    };
  var _emscripten_glGetShaderInfoLog = _glGetShaderInfoLog;

  /** @suppress {duplicate } */
  var _glGetShaderPrecisionFormat = (shaderType, precisionType, range, precision) => {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)] = result.rangeMin;
      HEAP32[(((range)+(4))>>2)] = result.rangeMax;
      HEAP32[((precision)>>2)] = result.precision;
    };
  var _emscripten_glGetShaderPrecisionFormat = _glGetShaderPrecisionFormat;

  /** @suppress {duplicate } */
  var _glGetShaderSource = (shader, bufSize, length, source) => {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      var numBytesWrittenExclNull = (bufSize > 0 && source) ? stringToUTF8(result, source, bufSize) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    };
  var _emscripten_glGetShaderSource = _glGetShaderSource;

  /** @suppress {duplicate } */
  var _glGetShaderiv = (shader, pname, p) => {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null
        // pointer. Since calling this function does not make sense if p == null,
        // issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        // The GLES2 specification says that if the shader has an empty info log,
        // a value of 0 is returned. Otherwise the log has a null char appended.
        // (An empty string is falsey, so we can just check that instead of
        // looking at log.length.)
        var logLength = log ? log.length + 1 : 0;
        HEAP32[((p)>>2)] = logLength;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        // source may be a null, or the empty string, both of which are falsey
        // values that we report a 0 length for.
        var sourceLength = source ? source.length + 1 : 0;
        HEAP32[((p)>>2)] = sourceLength;
      } else {
        HEAP32[((p)>>2)] = GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    };
  var _emscripten_glGetShaderiv = _glGetShaderiv;

  
  
  /** @suppress {duplicate } */
  var _glGetString = (name_) => {
      var ret = GL.stringCache[name_];
      if (!ret) {
        switch (name_) {
          case 0x1F03 /* GL_EXTENSIONS */:
            ret = stringToNewUTF8(webglGetExtensions().join(' '));
            break;
          case 0x1F00 /* GL_VENDOR */:
          case 0x1F01 /* GL_RENDERER */:
          case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
          case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
            var s = GLctx.getParameter(name_);
            if (!s) {
              GL.recordError(0x500/*GL_INVALID_ENUM*/);
            }
            ret = s ? stringToNewUTF8(s) : 0;
            break;
  
          case 0x1F02 /* GL_VERSION */:
            var webGLVersion = GLctx.getParameter(0x1F02 /*GL_VERSION*/);
            // return GLES version string corresponding to the version of the WebGL context
            var glVersion = `OpenGL ES 2.0 (${webGLVersion})`;
            if (true) glVersion = `OpenGL ES 3.0 (${webGLVersion})`;
            ret = stringToNewUTF8(glVersion);
            break;
          case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
            var glslVersion = GLctx.getParameter(0x8B8C /*GL_SHADING_LANGUAGE_VERSION*/);
            // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
            var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
            var ver_num = glslVersion.match(ver_re);
            if (ver_num !== null) {
              if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
              glslVersion = `OpenGL ES GLSL ES ${ver_num[1]} (${glslVersion})`;
            }
            ret = stringToNewUTF8(glslVersion);
            break;
          default:
            GL.recordError(0x500/*GL_INVALID_ENUM*/);
            // fall through
        }
        GL.stringCache[name_] = ret;
      }
      return ret;
    };
  var _emscripten_glGetString = _glGetString;

  
  /** @suppress {duplicate } */
  var _glGetStringi = (name, index) => {
      if (GL.currentContext.version < 2) {
        GL.recordError(0x502 /* GL_INVALID_OPERATION */); // Calling GLES3/WebGL2 function with a GLES2/WebGL1 context
        return 0;
      }
      var stringiCache = GL.stringiCache[name];
      if (stringiCache) {
        if (index < 0 || index >= stringiCache.length) {
          GL.recordError(0x501/*GL_INVALID_VALUE*/);
          return 0;
        }
        return stringiCache[index];
      }
      switch (name) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = webglGetExtensions().map(stringToNewUTF8);
          stringiCache = GL.stringiCache[name] = exts;
          if (index < 0 || index >= stringiCache.length) {
            GL.recordError(0x501/*GL_INVALID_VALUE*/);
            return 0;
          }
          return stringiCache[index];
        default:
          GL.recordError(0x500/*GL_INVALID_ENUM*/);
          return 0;
      }
    };
  var _emscripten_glGetStringi = _glGetStringi;

  /** @suppress {duplicate } */
  var _glGetSynciv = (sync, pname, bufSize, length, values) => {
      if (bufSize < 0) {
        // GLES3 specification does not specify how to behave if bufSize < 0, however in the spec wording for glGetInternalformativ, it does say that GL_INVALID_VALUE should be raised,
        // so raise GL_INVALID_VALUE here as well.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (!values) {
        // GLES3 specification does not specify how to behave if values is a null pointer. Since calling this function does not make sense
        // if values == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = GLctx.getSyncParameter(GL.syncs[sync], pname);
      if (ret !== null) {
        HEAP32[((values)>>2)] = ret;
        if (length) HEAP32[((length)>>2)] = 1; // Report a single value outputted.
      }
    };
  var _emscripten_glGetSynciv = _glGetSynciv;

  /** @suppress {duplicate } */
  var _glGetTexParameterfv = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null
        // pointer. Since calling this function does not make sense if p == null,
        // issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)] = GLctx.getTexParameter(target, pname);
    };
  var _emscripten_glGetTexParameterfv = _glGetTexParameterfv;

  /** @suppress {duplicate } */
  var _glGetTexParameteriv = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null
        // pointer. Since calling this function does not make sense if p == null,
        // issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.getTexParameter(target, pname);
    };
  var _emscripten_glGetTexParameteriv = _glGetTexParameteriv;

  /** @suppress {duplicate } */
  var _glGetTransformFeedbackVarying = (program, index, bufSize, length, size, type, name) => {
      program = GL.programs[program];
      var info = GLctx.getTransformFeedbackVarying(program, index);
      if (!info) return; // If an error occurred, the return parameters length, size, type and name will be unmodified.
  
      if (name && bufSize > 0) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)] = 0;
      }
  
      if (size) HEAP32[((size)>>2)] = info.size;
      if (type) HEAP32[((type)>>2)] = info.type;
    };
  var _emscripten_glGetTransformFeedbackVarying = _glGetTransformFeedbackVarying;

  /** @suppress {duplicate } */
  var _glGetUniformBlockIndex = (program, uniformBlockName) => {
      return GLctx.getUniformBlockIndex(GL.programs[program], UTF8ToString(uniformBlockName));
    };
  var _emscripten_glGetUniformBlockIndex = _glGetUniformBlockIndex;

  /** @suppress {duplicate } */
  var _glGetUniformIndices = (program, uniformCount, uniformNames, uniformIndices) => {
      if (!uniformIndices) {
        // GLES2 specification does not specify how to behave if uniformIndices is a null pointer. Since calling this function does not make sense
        // if uniformIndices == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (uniformCount > 0 && (uniformNames == 0 || uniformIndices == 0)) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
      var names = [];
      for (var i = 0; i < uniformCount; i++)
        names.push(UTF8ToString(HEAP32[(((uniformNames)+(i*4))>>2)]));
  
      var result = GLctx.getUniformIndices(program, names);
      if (!result) return; // GL spec: If an error is generated, nothing is written out to uniformIndices.
  
      var len = result.length;
      for (var i = 0; i < len; i++) {
        HEAP32[(((uniformIndices)+(i*4))>>2)] = result[i];
      }
    };
  var _emscripten_glGetUniformIndices = _glGetUniformIndices;

  
  /** @noinline */
  var webglGetLeftBracePos = (name) => name.slice(-1) == ']' && name.lastIndexOf('[');
  
  var webglPrepareUniformLocationsBeforeFirstUse = (program) => {
      var uniformLocsById = program.uniformLocsById, // Maps GLuint -> WebGLUniformLocation
        uniformSizeAndIdsByName = program.uniformSizeAndIdsByName, // Maps name -> [uniform array length, GLuint]
        i, j;
  
      // On the first time invocation of glGetUniformLocation on this shader program:
      // initialize cache data structures and discover which uniforms are arrays.
      if (!uniformLocsById) {
        // maps GLint integer locations to WebGLUniformLocations
        program.uniformLocsById = uniformLocsById = {};
        // maps integer locations back to uniform name strings, so that we can lazily fetch uniform array locations
        program.uniformArrayNamesById = {};
  
        var numActiveUniforms = GLctx.getProgramParameter(program, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (i = 0; i < numActiveUniforms; ++i) {
          var u = GLctx.getActiveUniform(program, i);
          var nm = u.name;
          var sz = u.size;
          var lb = webglGetLeftBracePos(nm);
          var arrayName = lb > 0 ? nm.slice(0, lb) : nm;
  
          // Assign a new location.
          var id = program.uniformIdCounter;
          program.uniformIdCounter += sz;
          // Eagerly get the location of the uniformArray[0] base element.
          // The remaining indices >0 will be left for lazy evaluation to
          // improve performance. Those may never be needed to fetch, if the
          // application fills arrays always in full starting from the first
          // element of the array.
          uniformSizeAndIdsByName[arrayName] = [sz, id];
  
          // Store placeholder integers in place that highlight that these
          // >0 index locations are array indices pending population.
          for (j = 0; j < sz; ++j) {
            uniformLocsById[id] = j;
            program.uniformArrayNamesById[id++] = arrayName;
          }
        }
      }
    };
  
  
  
  /** @suppress {duplicate } */
  var _glGetUniformLocation = (program, name) => {
  
      name = UTF8ToString(name);
  
      if (program = GL.programs[program]) {
        webglPrepareUniformLocationsBeforeFirstUse(program);
        var uniformLocsById = program.uniformLocsById; // Maps GLuint -> WebGLUniformLocation
        var arrayIndex = 0;
        var uniformBaseName = name;
  
        // Invariant: when populating integer IDs for uniform locations, we must
        // maintain the precondition that arrays reside in contiguous addresses,
        // i.e. for a 'vec4 colors[10];', colors[4] must be at location
        // colors[0]+4.  However, user might call glGetUniformLocation(program,
        // "colors") for an array, so we cannot discover based on the user input
        // arguments whether the uniform we are dealing with is an array. The only
        // way to discover which uniforms are arrays is to enumerate over all the
        // active uniforms in the program.
        var leftBrace = webglGetLeftBracePos(name);
  
        // If user passed an array accessor "[index]", parse the array index off the accessor.
        if (leftBrace > 0) {
          arrayIndex = jstoi_q(name.slice(leftBrace + 1)) >>> 0; // "index]", coerce parseInt(']') with >>>0 to treat "foo[]" as "foo[0]" and foo[-1] as unsigned out-of-bounds.
          uniformBaseName = name.slice(0, leftBrace);
        }
  
        // Have we cached the location of this uniform before?
        // A pair [array length, GLint of the uniform location]
        var sizeAndId = program.uniformSizeAndIdsByName[uniformBaseName];
  
        // If an uniform with this name exists, and if its index is within the
        // array limits (if it's even an array), query the WebGLlocation, or
        // return an existing cached location.
        if (sizeAndId && arrayIndex < sizeAndId[0]) {
          arrayIndex += sizeAndId[1]; // Add the base location of the uniform to the array index offset.
          if ((uniformLocsById[arrayIndex] = uniformLocsById[arrayIndex] || GLctx.getUniformLocation(program, name))) {
            return arrayIndex;
          }
        }
      }
      else {
        // N.b. we are currently unable to distinguish between GL program IDs that
        // never existed vs GL program IDs that have been deleted, so report
        // GL_INVALID_VALUE in both cases.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
      }
      return -1;
    };
  var _emscripten_glGetUniformLocation = _glGetUniformLocation;

  var webglGetUniformLocation = (location) => {
      var p = GLctx.currentProgram;
  
      if (p) {
        var webglLoc = p.uniformLocsById[location];
        // p.uniformLocsById[location] stores either an integer, or a
        // WebGLUniformLocation.
        // If an integer, we have not yet bound the location, so do it now. The
        // integer value specifies the array index we should bind to.
        if (typeof webglLoc == 'number') {
          p.uniformLocsById[location] = webglLoc = GLctx.getUniformLocation(p, p.uniformArrayNamesById[location] + (webglLoc > 0 ? `[${webglLoc}]` : ''));
        }
        // Else an already cached WebGLUniformLocation, return it.
        return webglLoc;
      } else {
        GL.recordError(0x502/*GL_INVALID_OPERATION*/);
      }
    };
  
  
  /** @suppress{checkTypes} */
  var emscriptenWebGLGetUniform = (program, location, params, type) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null
        // pointer. Since calling this function does not make sense if params ==
        // null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
      webglPrepareUniformLocationsBeforeFirstUse(program);
      var data = GLctx.getUniform(program, webglGetUniformLocation(location));
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)] = data; break;
          case 2: HEAPF32[((params)>>2)] = data; break;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)] = data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)] = data[i]; break;
          }
        }
      }
    };
  
  /** @suppress {duplicate } */
  var _glGetUniformfv = (program, location, params) => {
      emscriptenWebGLGetUniform(program, location, params, 2);
    };
  var _emscripten_glGetUniformfv = _glGetUniformfv;

  
  /** @suppress {duplicate } */
  var _glGetUniformiv = (program, location, params) => {
      emscriptenWebGLGetUniform(program, location, params, 0);
    };
  var _emscripten_glGetUniformiv = _glGetUniformiv;

  /** @suppress {duplicate } */
  var _glGetUniformuiv = (program, location, params) =>
      emscriptenWebGLGetUniform(program, location, params, 0);
  var _emscripten_glGetUniformuiv = _glGetUniformuiv;

  /** @suppress{checkTypes} */
  var emscriptenWebGLGetVertexAttrib = (index, pname, params, type) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null
        // pointer. Since calling this function does not make sense if params ==
        // null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)] = data && data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)] = data; break;
          case 2: HEAPF32[((params)>>2)] = data; break;
          case 5: HEAP32[((params)>>2)] = Math.fround(data); break;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)] = data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)] = data[i]; break;
            case 5: HEAP32[(((params)+(i*4))>>2)] = Math.fround(data[i]); break;
          }
        }
      }
    };
  /** @suppress {duplicate } */
  var _glGetVertexAttribIiv = (index, pname, params) => {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttribI4iv(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 0);
    };
  var _emscripten_glGetVertexAttribIiv = _glGetVertexAttribIiv;

  
  /** @suppress {duplicate } */
  var _glGetVertexAttribIuiv = _glGetVertexAttribIiv;
  var _emscripten_glGetVertexAttribIuiv = _glGetVertexAttribIuiv;

  /** @suppress {duplicate } */
  var _glGetVertexAttribPointerv = (index, pname, pointer) => {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null
        // pointer. Since calling this function does not make sense if pointer ==
        // null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)] = GLctx.getVertexAttribOffset(index, pname);
    };
  var _emscripten_glGetVertexAttribPointerv = _glGetVertexAttribPointerv;

  
  /** @suppress {duplicate } */
  var _glGetVertexAttribfv = (index, pname, params) => {
      // N.B. This function may only be called if the vertex attribute was
      // specified using the function glVertexAttrib*f(), otherwise the results
      // are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
    };
  var _emscripten_glGetVertexAttribfv = _glGetVertexAttribfv;

  
  /** @suppress {duplicate } */
  var _glGetVertexAttribiv = (index, pname, params) => {
      // N.B. This function may only be called if the vertex attribute was
      // specified using the function glVertexAttrib*f(), otherwise the results
      // are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
    };
  var _emscripten_glGetVertexAttribiv = _glGetVertexAttribiv;

  /** @suppress {duplicate } */
  var _glHint = (x0, x1) => GLctx.hint(x0, x1);
  var _emscripten_glHint = _glHint;

  /** @suppress {duplicate } */
  var _glInvalidateFramebuffer = (target, numAttachments, attachments) => {
      var list = tempFixedLengthArray[numAttachments];
      for (var i = 0; i < numAttachments; i++) {
        list[i] = HEAP32[(((attachments)+(i*4))>>2)];
      }
  
      GLctx.invalidateFramebuffer(target, list);
    };
  var _emscripten_glInvalidateFramebuffer = _glInvalidateFramebuffer;

  /** @suppress {duplicate } */
  var _glInvalidateSubFramebuffer = (target, numAttachments, attachments, x, y, width, height) => {
      var list = tempFixedLengthArray[numAttachments];
      for (var i = 0; i < numAttachments; i++) {
        list[i] = HEAP32[(((attachments)+(i*4))>>2)];
      }
  
      GLctx.invalidateSubFramebuffer(target, list, x, y, width, height);
    };
  var _emscripten_glInvalidateSubFramebuffer = _glInvalidateSubFramebuffer;

  /** @suppress {duplicate } */
  var _glIsBuffer = (buffer) => {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    };
  var _emscripten_glIsBuffer = _glIsBuffer;

  /** @suppress {duplicate } */
  var _glIsEnabled = (x0) => GLctx.isEnabled(x0);
  var _emscripten_glIsEnabled = _glIsEnabled;

  /** @suppress {duplicate } */
  var _glIsFramebuffer = (framebuffer) => {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    };
  var _emscripten_glIsFramebuffer = _glIsFramebuffer;

  /** @suppress {duplicate } */
  var _glIsProgram = (program) => {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    };
  var _emscripten_glIsProgram = _glIsProgram;

  /** @suppress {duplicate } */
  var _glIsQuery = (id) => {
      var query = GL.queries[id];
      if (!query) return 0;
      return GLctx.isQuery(query);
    };
  var _emscripten_glIsQuery = _glIsQuery;

  /** @suppress {duplicate } */
  var _glIsQueryEXT = (id) => {
      var query = GL.queries[id];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt['isQueryEXT'](query);
    };
  var _emscripten_glIsQueryEXT = _glIsQueryEXT;

  /** @suppress {duplicate } */
  var _glIsRenderbuffer = (renderbuffer) => {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    };
  var _emscripten_glIsRenderbuffer = _glIsRenderbuffer;

  /** @suppress {duplicate } */
  var _glIsSampler = (id) => {
      var sampler = GL.samplers[id];
      if (!sampler) return 0;
      return GLctx.isSampler(sampler);
    };
  var _emscripten_glIsSampler = _glIsSampler;

  /** @suppress {duplicate } */
  var _glIsShader = (shader) => {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    };
  var _emscripten_glIsShader = _glIsShader;

  /** @suppress {duplicate } */
  var _glIsSync = (sync) => GLctx.isSync(GL.syncs[sync]);
  var _emscripten_glIsSync = _glIsSync;

  /** @suppress {duplicate } */
  var _glIsTexture = (id) => {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    };
  var _emscripten_glIsTexture = _glIsTexture;

  /** @suppress {duplicate } */
  var _glIsTransformFeedback = (id) => GLctx.isTransformFeedback(GL.transformFeedbacks[id]);
  var _emscripten_glIsTransformFeedback = _glIsTransformFeedback;

  /** @suppress {duplicate } */
  var _glIsVertexArray = (array) => {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx.isVertexArray(vao);
    };
  var _emscripten_glIsVertexArray = _glIsVertexArray;

  
  /** @suppress {duplicate } */
  var _glIsVertexArrayOES = _glIsVertexArray;
  var _emscripten_glIsVertexArrayOES = _glIsVertexArrayOES;

  /** @suppress {duplicate } */
  var _glLineWidth = (x0) => GLctx.lineWidth(x0);
  var _emscripten_glLineWidth = _glLineWidth;

  /** @suppress {duplicate } */
  var _glLinkProgram = (program) => {
      program = GL.programs[program];
      GLctx.linkProgram(program);
      // Invalidate earlier computed uniform->ID mappings, those have now become stale
      program.uniformLocsById = 0; // Mark as null-like so that glGetUniformLocation() knows to populate this again.
      program.uniformSizeAndIdsByName = {};
  
    };
  var _emscripten_glLinkProgram = _glLinkProgram;

  /** @suppress {duplicate } */
  var _glPauseTransformFeedback = () => GLctx.pauseTransformFeedback();
  var _emscripten_glPauseTransformFeedback = _glPauseTransformFeedback;

  /** @suppress {duplicate } */
  var _glPixelStorei = (pname, param) => {
      if (pname == 3317) {
        GL.unpackAlignment = param;
      } else if (pname == 3314) {
        GL.unpackRowLength = param;
      }
      GLctx.pixelStorei(pname, param);
    };
  var _emscripten_glPixelStorei = _glPixelStorei;

  /** @suppress {duplicate } */
  var _glPolygonModeWEBGL = (face, mode) => {
      GLctx.webglPolygonMode['polygonModeWEBGL'](face, mode);
    };
  var _emscripten_glPolygonModeWEBGL = _glPolygonModeWEBGL;

  /** @suppress {duplicate } */
  var _glPolygonOffset = (x0, x1) => GLctx.polygonOffset(x0, x1);
  var _emscripten_glPolygonOffset = _glPolygonOffset;

  /** @suppress {duplicate } */
  var _glPolygonOffsetClampEXT = (factor, units, clamp) => {
      GLctx.extPolygonOffsetClamp['polygonOffsetClampEXT'](factor, units, clamp);
    };
  var _emscripten_glPolygonOffsetClampEXT = _glPolygonOffsetClampEXT;

  /** @suppress {duplicate } */
  var _glProgramBinary = (program, binaryFormat, binary, length) => {
      GL.recordError(0x500/*GL_INVALID_ENUM*/);
    };
  var _emscripten_glProgramBinary = _glProgramBinary;

  /** @suppress {duplicate } */
  var _glProgramParameteri = (program, pname, value) => {
      GL.recordError(0x500/*GL_INVALID_ENUM*/);
    };
  var _emscripten_glProgramParameteri = _glProgramParameteri;

  /** @suppress {duplicate } */
  var _glQueryCounterEXT = (id, target) => {
      GLctx.disjointTimerQueryExt['queryCounterEXT'](GL.queries[id], target);
    };
  var _emscripten_glQueryCounterEXT = _glQueryCounterEXT;

  /** @suppress {duplicate } */
  var _glReadBuffer = (x0) => GLctx.readBuffer(x0);
  var _emscripten_glReadBuffer = _glReadBuffer;

  var heapObjectForWebGLType = (type) => {
      // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
      // smaller values for the heap, for shorter generated code size.
      // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
      // (since most types are HEAPU16)
      type -= 0x1400;
      if (type == 0) return HEAP8;
  
      if (type == 1) return HEAPU8;
  
      if (type == 2) return HEAP16;
  
      if (type == 4) return HEAP32;
  
      if (type == 6) return HEAPF32;
  
      if (type == 5
        || type == 28922
        || type == 28520
        || type == 30779
        || type == 30782
        )
        return HEAPU32;
  
      return HEAPU16;
    };
  
  var toTypedArrayIndex = (pointer, heap) =>
      pointer >>> (31 - Math.clz32(heap.BYTES_PER_ELEMENT));
  
  /** @suppress {duplicate } */
  var _glReadPixels = (x, y, width, height, format, type, pixels) => {
      if (true) {
        if (GLctx.currentPixelPackBufferBinding) {
          GLctx.readPixels(x, y, width, height, format, type, pixels);
          return;
        }
        var heap = heapObjectForWebGLType(type);
        var target = toTypedArrayIndex(pixels, heap);
        GLctx.readPixels(x, y, width, height, format, type, heap, target);
        return;
      }
    };
  var _emscripten_glReadPixels = _glReadPixels;

  /** @suppress {duplicate } */
  var _glReleaseShaderCompiler = () => {
      // NOP (as allowed by GLES 2.0 spec)
    };
  var _emscripten_glReleaseShaderCompiler = _glReleaseShaderCompiler;

  /** @suppress {duplicate } */
  var _glRenderbufferStorage = (x0, x1, x2, x3) => GLctx.renderbufferStorage(x0, x1, x2, x3);
  var _emscripten_glRenderbufferStorage = _glRenderbufferStorage;

  /** @suppress {duplicate } */
  var _glRenderbufferStorageMultisample = (x0, x1, x2, x3, x4) => GLctx.renderbufferStorageMultisample(x0, x1, x2, x3, x4);
  var _emscripten_glRenderbufferStorageMultisample = _glRenderbufferStorageMultisample;

  /** @suppress {duplicate } */
  var _glResumeTransformFeedback = () => GLctx.resumeTransformFeedback();
  var _emscripten_glResumeTransformFeedback = _glResumeTransformFeedback;

  /** @suppress {duplicate } */
  var _glSampleCoverage = (value, invert) => {
      GLctx.sampleCoverage(value, !!invert);
    };
  var _emscripten_glSampleCoverage = _glSampleCoverage;

  /** @suppress {duplicate } */
  var _glSamplerParameterf = (sampler, pname, param) => {
      GLctx.samplerParameterf(GL.samplers[sampler], pname, param);
    };
  var _emscripten_glSamplerParameterf = _glSamplerParameterf;

  /** @suppress {duplicate } */
  var _glSamplerParameterfv = (sampler, pname, params) => {
      var param = HEAPF32[((params)>>2)];
      GLctx.samplerParameterf(GL.samplers[sampler], pname, param);
    };
  var _emscripten_glSamplerParameterfv = _glSamplerParameterfv;

  /** @suppress {duplicate } */
  var _glSamplerParameteri = (sampler, pname, param) => {
      GLctx.samplerParameteri(GL.samplers[sampler], pname, param);
    };
  var _emscripten_glSamplerParameteri = _glSamplerParameteri;

  /** @suppress {duplicate } */
  var _glSamplerParameteriv = (sampler, pname, params) => {
      var param = HEAP32[((params)>>2)];
      GLctx.samplerParameteri(GL.samplers[sampler], pname, param);
    };
  var _emscripten_glSamplerParameteriv = _glSamplerParameteriv;

  /** @suppress {duplicate } */
  var _glScissor = (x0, x1, x2, x3) => GLctx.scissor(x0, x1, x2, x3);
  var _emscripten_glScissor = _glScissor;

  /** @suppress {duplicate } */
  var _glShaderBinary = (count, shaders, binaryformat, binary, length) => {
      GL.recordError(0x500/*GL_INVALID_ENUM*/);
    };
  var _emscripten_glShaderBinary = _glShaderBinary;

  /** @suppress {duplicate } */
  var _glShaderSource = (shader, count, string, length) => {
      var source = GL.getSource(shader, count, string, length);
  
      GLctx.shaderSource(GL.shaders[shader], source);
    };
  var _emscripten_glShaderSource = _glShaderSource;

  /** @suppress {duplicate } */
  var _glStencilFunc = (x0, x1, x2) => GLctx.stencilFunc(x0, x1, x2);
  var _emscripten_glStencilFunc = _glStencilFunc;

  /** @suppress {duplicate } */
  var _glStencilFuncSeparate = (x0, x1, x2, x3) => GLctx.stencilFuncSeparate(x0, x1, x2, x3);
  var _emscripten_glStencilFuncSeparate = _glStencilFuncSeparate;

  /** @suppress {duplicate } */
  var _glStencilMask = (x0) => GLctx.stencilMask(x0);
  var _emscripten_glStencilMask = _glStencilMask;

  /** @suppress {duplicate } */
  var _glStencilMaskSeparate = (x0, x1) => GLctx.stencilMaskSeparate(x0, x1);
  var _emscripten_glStencilMaskSeparate = _glStencilMaskSeparate;

  /** @suppress {duplicate } */
  var _glStencilOp = (x0, x1, x2) => GLctx.stencilOp(x0, x1, x2);
  var _emscripten_glStencilOp = _glStencilOp;

  /** @suppress {duplicate } */
  var _glStencilOpSeparate = (x0, x1, x2, x3) => GLctx.stencilOpSeparate(x0, x1, x2, x3);
  var _emscripten_glStencilOpSeparate = _glStencilOpSeparate;

  var computeUnpackAlignedImageSize = (width, height, sizePerPixel) => {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = (GL.unpackRowLength || width) * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, GL.unpackAlignment);
      return height * alignedRowSize;
    };
  
  var colorChannelsInGlTextureFormat = (format) => {
      // Micro-optimizations for size: map format to size by subtracting smallest
      // enum value (0x1902) from all values first.  Also omit the most common
      // size value (1) from the list, which is assumed by formats not on the
      // list.
      var colorChannels = {
        // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
        // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
        5: 3,
        6: 4,
        // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
        8: 2,
        29502: 3,
        29504: 4,
        // 0x1903 /* GL_RED */ - 0x1902: 1,
        26917: 2,
        26918: 2,
        // 0x8D94 /* GL_RED_INTEGER */ - 0x1902: 1,
        29846: 3,
        29847: 4
      };
      return colorChannels[format - 0x1902]||1;
    };
  
  
  
  var emscriptenWebGLGetTexPixelData = (type, format, width, height, pixels, internalFormat) => {
      var heap = heapObjectForWebGLType(type);
      var sizePerPixel = colorChannelsInGlTextureFormat(format) * heap.BYTES_PER_ELEMENT;
      var bytes = computeUnpackAlignedImageSize(width, height, sizePerPixel);
      return heap.subarray(toTypedArrayIndex(pixels, heap), toTypedArrayIndex(pixels + bytes, heap));
    };
  
  
  
  /** @suppress {duplicate } */
  var _glTexImage2D = (target, level, internalFormat, width, height, border, format, type, pixels) => {
      if (true) {
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
          return;
        }
        if (pixels) {
          var heap = heapObjectForWebGLType(type);
          var index = toTypedArrayIndex(pixels, heap);
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, heap, index);
          return;
        }
      }
      var pixelData = pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null;
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    };
  var _emscripten_glTexImage2D = _glTexImage2D;

  
  /** @suppress {duplicate } */
  var _glTexImage3D = (target, level, internalFormat, width, height, depth, border, format, type, pixels) => {
      if (GLctx.currentPixelUnpackBufferBinding) {
        GLctx.texImage3D(target, level, internalFormat, width, height, depth, border, format, type, pixels);
      } else if (pixels) {
        var heap = heapObjectForWebGLType(type);
        GLctx.texImage3D(target, level, internalFormat, width, height, depth, border, format, type, heap, toTypedArrayIndex(pixels, heap));
      } else {
        GLctx.texImage3D(target, level, internalFormat, width, height, depth, border, format, type, null);
      }
    };
  var _emscripten_glTexImage3D = _glTexImage3D;

  /** @suppress {duplicate } */
  var _glTexParameterf = (x0, x1, x2) => GLctx.texParameterf(x0, x1, x2);
  var _emscripten_glTexParameterf = _glTexParameterf;

  /** @suppress {duplicate } */
  var _glTexParameterfv = (target, pname, params) => {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    };
  var _emscripten_glTexParameterfv = _glTexParameterfv;

  /** @suppress {duplicate } */
  var _glTexParameteri = (x0, x1, x2) => GLctx.texParameteri(x0, x1, x2);
  var _emscripten_glTexParameteri = _glTexParameteri;

  /** @suppress {duplicate } */
  var _glTexParameteriv = (target, pname, params) => {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    };
  var _emscripten_glTexParameteriv = _glTexParameteriv;

  /** @suppress {duplicate } */
  var _glTexStorage2D = (x0, x1, x2, x3, x4) => GLctx.texStorage2D(x0, x1, x2, x3, x4);
  var _emscripten_glTexStorage2D = _glTexStorage2D;

  /** @suppress {duplicate } */
  var _glTexStorage3D = (x0, x1, x2, x3, x4, x5) => GLctx.texStorage3D(x0, x1, x2, x3, x4, x5);
  var _emscripten_glTexStorage3D = _glTexStorage3D;

  
  
  
  /** @suppress {duplicate } */
  var _glTexSubImage2D = (target, level, xoffset, yoffset, width, height, format, type, pixels) => {
      if (true) {
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
          return;
        }
        if (pixels) {
          var heap = heapObjectForWebGLType(type);
          GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, heap, toTypedArrayIndex(pixels, heap));
          return;
        }
      }
      var pixelData = pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0) : null;
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    };
  var _emscripten_glTexSubImage2D = _glTexSubImage2D;

  
  /** @suppress {duplicate } */
  var _glTexSubImage3D = (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) => {
      if (GLctx.currentPixelUnpackBufferBinding) {
        GLctx.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
      } else if (pixels) {
        var heap = heapObjectForWebGLType(type);
        GLctx.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, heap, toTypedArrayIndex(pixels, heap));
      } else {
        GLctx.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, null);
      }
    };
  var _emscripten_glTexSubImage3D = _glTexSubImage3D;

  /** @suppress {duplicate } */
  var _glTransformFeedbackVaryings = (program, count, varyings, bufferMode) => {
      program = GL.programs[program];
      var vars = [];
      for (var i = 0; i < count; i++)
        vars.push(UTF8ToString(HEAP32[(((varyings)+(i*4))>>2)]));
  
      GLctx.transformFeedbackVaryings(program, vars, bufferMode);
    };
  var _emscripten_glTransformFeedbackVaryings = _glTransformFeedbackVaryings;

  
  /** @suppress {duplicate } */
  var _glUniform1f = (location, v0) => {
      GLctx.uniform1f(webglGetUniformLocation(location), v0);
    };
  var _emscripten_glUniform1f = _glUniform1f;

  
  /** @suppress {duplicate } */
  var _glUniform1fv = (location, count, value) => {
  
      count && GLctx.uniform1fv(webglGetUniformLocation(location), HEAPF32, ((value)>>2), count);
    };
  var _emscripten_glUniform1fv = _glUniform1fv;

  
  /** @suppress {duplicate } */
  var _glUniform1i = (location, v0) => {
      GLctx.uniform1i(webglGetUniformLocation(location), v0);
    };
  var _emscripten_glUniform1i = _glUniform1i;

  
  /** @suppress {duplicate } */
  var _glUniform1iv = (location, count, value) => {
  
      count && GLctx.uniform1iv(webglGetUniformLocation(location), HEAP32, ((value)>>2), count);
    };
  var _emscripten_glUniform1iv = _glUniform1iv;

  /** @suppress {duplicate } */
  var _glUniform1ui = (location, v0) => {
      GLctx.uniform1ui(webglGetUniformLocation(location), v0);
    };
  var _emscripten_glUniform1ui = _glUniform1ui;

  /** @suppress {duplicate } */
  var _glUniform1uiv = (location, count, value) => {
      count && GLctx.uniform1uiv(webglGetUniformLocation(location), HEAPU32, ((value)>>2), count);
    };
  var _emscripten_glUniform1uiv = _glUniform1uiv;

  
  /** @suppress {duplicate } */
  var _glUniform2f = (location, v0, v1) => {
      GLctx.uniform2f(webglGetUniformLocation(location), v0, v1);
    };
  var _emscripten_glUniform2f = _glUniform2f;

  
  /** @suppress {duplicate } */
  var _glUniform2fv = (location, count, value) => {
  
      count && GLctx.uniform2fv(webglGetUniformLocation(location), HEAPF32, ((value)>>2), count*2);
    };
  var _emscripten_glUniform2fv = _glUniform2fv;

  
  /** @suppress {duplicate } */
  var _glUniform2i = (location, v0, v1) => {
      GLctx.uniform2i(webglGetUniformLocation(location), v0, v1);
    };
  var _emscripten_glUniform2i = _glUniform2i;

  
  /** @suppress {duplicate } */
  var _glUniform2iv = (location, count, value) => {
  
      count && GLctx.uniform2iv(webglGetUniformLocation(location), HEAP32, ((value)>>2), count*2);
    };
  var _emscripten_glUniform2iv = _glUniform2iv;

  /** @suppress {duplicate } */
  var _glUniform2ui = (location, v0, v1) => {
      GLctx.uniform2ui(webglGetUniformLocation(location), v0, v1);
    };
  var _emscripten_glUniform2ui = _glUniform2ui;

  /** @suppress {duplicate } */
  var _glUniform2uiv = (location, count, value) => {
      count && GLctx.uniform2uiv(webglGetUniformLocation(location), HEAPU32, ((value)>>2), count*2);
    };
  var _emscripten_glUniform2uiv = _glUniform2uiv;

  
  /** @suppress {duplicate } */
  var _glUniform3f = (location, v0, v1, v2) => {
      GLctx.uniform3f(webglGetUniformLocation(location), v0, v1, v2);
    };
  var _emscripten_glUniform3f = _glUniform3f;

  
  /** @suppress {duplicate } */
  var _glUniform3fv = (location, count, value) => {
  
      count && GLctx.uniform3fv(webglGetUniformLocation(location), HEAPF32, ((value)>>2), count*3);
    };
  var _emscripten_glUniform3fv = _glUniform3fv;

  
  /** @suppress {duplicate } */
  var _glUniform3i = (location, v0, v1, v2) => {
      GLctx.uniform3i(webglGetUniformLocation(location), v0, v1, v2);
    };
  var _emscripten_glUniform3i = _glUniform3i;

  
  /** @suppress {duplicate } */
  var _glUniform3iv = (location, count, value) => {
  
      count && GLctx.uniform3iv(webglGetUniformLocation(location), HEAP32, ((value)>>2), count*3);
    };
  var _emscripten_glUniform3iv = _glUniform3iv;

  /** @suppress {duplicate } */
  var _glUniform3ui = (location, v0, v1, v2) => {
      GLctx.uniform3ui(webglGetUniformLocation(location), v0, v1, v2);
    };
  var _emscripten_glUniform3ui = _glUniform3ui;

  /** @suppress {duplicate } */
  var _glUniform3uiv = (location, count, value) => {
      count && GLctx.uniform3uiv(webglGetUniformLocation(location), HEAPU32, ((value)>>2), count*3);
    };
  var _emscripten_glUniform3uiv = _glUniform3uiv;

  
  /** @suppress {duplicate } */
  var _glUniform4f = (location, v0, v1, v2, v3) => {
      GLctx.uniform4f(webglGetUniformLocation(location), v0, v1, v2, v3);
    };
  var _emscripten_glUniform4f = _glUniform4f;

  
  /** @suppress {duplicate } */
  var _glUniform4fv = (location, count, value) => {
  
      count && GLctx.uniform4fv(webglGetUniformLocation(location), HEAPF32, ((value)>>2), count*4);
    };
  var _emscripten_glUniform4fv = _glUniform4fv;

  
  /** @suppress {duplicate } */
  var _glUniform4i = (location, v0, v1, v2, v3) => {
      GLctx.uniform4i(webglGetUniformLocation(location), v0, v1, v2, v3);
    };
  var _emscripten_glUniform4i = _glUniform4i;

  
  /** @suppress {duplicate } */
  var _glUniform4iv = (location, count, value) => {
  
      count && GLctx.uniform4iv(webglGetUniformLocation(location), HEAP32, ((value)>>2), count*4);
    };
  var _emscripten_glUniform4iv = _glUniform4iv;

  /** @suppress {duplicate } */
  var _glUniform4ui = (location, v0, v1, v2, v3) => {
      GLctx.uniform4ui(webglGetUniformLocation(location), v0, v1, v2, v3);
    };
  var _emscripten_glUniform4ui = _glUniform4ui;

  /** @suppress {duplicate } */
  var _glUniform4uiv = (location, count, value) => {
      count && GLctx.uniform4uiv(webglGetUniformLocation(location), HEAPU32, ((value)>>2), count*4);
    };
  var _emscripten_glUniform4uiv = _glUniform4uiv;

  /** @suppress {duplicate } */
  var _glUniformBlockBinding = (program, uniformBlockIndex, uniformBlockBinding) => {
      program = GL.programs[program];
  
      GLctx.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
    };
  var _emscripten_glUniformBlockBinding = _glUniformBlockBinding;

  
  /** @suppress {duplicate } */
  var _glUniformMatrix2fv = (location, count, transpose, value) => {
  
      count && GLctx.uniformMatrix2fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*4);
    };
  var _emscripten_glUniformMatrix2fv = _glUniformMatrix2fv;

  /** @suppress {duplicate } */
  var _glUniformMatrix2x3fv = (location, count, transpose, value) => {
      count && GLctx.uniformMatrix2x3fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*6);
    };
  var _emscripten_glUniformMatrix2x3fv = _glUniformMatrix2x3fv;

  /** @suppress {duplicate } */
  var _glUniformMatrix2x4fv = (location, count, transpose, value) => {
      count && GLctx.uniformMatrix2x4fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*8);
    };
  var _emscripten_glUniformMatrix2x4fv = _glUniformMatrix2x4fv;

  
  /** @suppress {duplicate } */
  var _glUniformMatrix3fv = (location, count, transpose, value) => {
  
      count && GLctx.uniformMatrix3fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*9);
    };
  var _emscripten_glUniformMatrix3fv = _glUniformMatrix3fv;

  /** @suppress {duplicate } */
  var _glUniformMatrix3x2fv = (location, count, transpose, value) => {
      count && GLctx.uniformMatrix3x2fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*6);
    };
  var _emscripten_glUniformMatrix3x2fv = _glUniformMatrix3x2fv;

  /** @suppress {duplicate } */
  var _glUniformMatrix3x4fv = (location, count, transpose, value) => {
      count && GLctx.uniformMatrix3x4fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*12);
    };
  var _emscripten_glUniformMatrix3x4fv = _glUniformMatrix3x4fv;

  
  /** @suppress {duplicate } */
  var _glUniformMatrix4fv = (location, count, transpose, value) => {
  
      count && GLctx.uniformMatrix4fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*16);
    };
  var _emscripten_glUniformMatrix4fv = _glUniformMatrix4fv;

  /** @suppress {duplicate } */
  var _glUniformMatrix4x2fv = (location, count, transpose, value) => {
      count && GLctx.uniformMatrix4x2fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*8);
    };
  var _emscripten_glUniformMatrix4x2fv = _glUniformMatrix4x2fv;

  /** @suppress {duplicate } */
  var _glUniformMatrix4x3fv = (location, count, transpose, value) => {
      count && GLctx.uniformMatrix4x3fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*12);
    };
  var _emscripten_glUniformMatrix4x3fv = _glUniformMatrix4x3fv;

  /** @suppress {duplicate } */
  var _glUseProgram = (program) => {
      program = GL.programs[program];
      GLctx.useProgram(program);
      // Record the currently active program so that we can access the uniform
      // mapping table of that program.
      GLctx.currentProgram = program;
    };
  var _emscripten_glUseProgram = _glUseProgram;

  /** @suppress {duplicate } */
  var _glValidateProgram = (program) => {
      GLctx.validateProgram(GL.programs[program]);
    };
  var _emscripten_glValidateProgram = _glValidateProgram;

  /** @suppress {duplicate } */
  var _glVertexAttrib1f = (x0, x1) => GLctx.vertexAttrib1f(x0, x1);
  var _emscripten_glVertexAttrib1f = _glVertexAttrib1f;

  /** @suppress {duplicate } */
  var _glVertexAttrib1fv = (index, v) => {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    };
  var _emscripten_glVertexAttrib1fv = _glVertexAttrib1fv;

  /** @suppress {duplicate } */
  var _glVertexAttrib2f = (x0, x1, x2) => GLctx.vertexAttrib2f(x0, x1, x2);
  var _emscripten_glVertexAttrib2f = _glVertexAttrib2f;

  /** @suppress {duplicate } */
  var _glVertexAttrib2fv = (index, v) => {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    };
  var _emscripten_glVertexAttrib2fv = _glVertexAttrib2fv;

  /** @suppress {duplicate } */
  var _glVertexAttrib3f = (x0, x1, x2, x3) => GLctx.vertexAttrib3f(x0, x1, x2, x3);
  var _emscripten_glVertexAttrib3f = _glVertexAttrib3f;

  /** @suppress {duplicate } */
  var _glVertexAttrib3fv = (index, v) => {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    };
  var _emscripten_glVertexAttrib3fv = _glVertexAttrib3fv;

  /** @suppress {duplicate } */
  var _glVertexAttrib4f = (x0, x1, x2, x3, x4) => GLctx.vertexAttrib4f(x0, x1, x2, x3, x4);
  var _emscripten_glVertexAttrib4f = _glVertexAttrib4f;

  /** @suppress {duplicate } */
  var _glVertexAttrib4fv = (index, v) => {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    };
  var _emscripten_glVertexAttrib4fv = _glVertexAttrib4fv;

  /** @suppress {duplicate } */
  var _glVertexAttribDivisor = (index, divisor) => {
      GLctx.vertexAttribDivisor(index, divisor);
    };
  var _emscripten_glVertexAttribDivisor = _glVertexAttribDivisor;

  
  /** @suppress {duplicate } */
  var _glVertexAttribDivisorANGLE = _glVertexAttribDivisor;
  var _emscripten_glVertexAttribDivisorANGLE = _glVertexAttribDivisorANGLE;

  
  /** @suppress {duplicate } */
  var _glVertexAttribDivisorARB = _glVertexAttribDivisor;
  var _emscripten_glVertexAttribDivisorARB = _glVertexAttribDivisorARB;

  
  /** @suppress {duplicate } */
  var _glVertexAttribDivisorEXT = _glVertexAttribDivisor;
  var _emscripten_glVertexAttribDivisorEXT = _glVertexAttribDivisorEXT;

  
  /** @suppress {duplicate } */
  var _glVertexAttribDivisorNV = _glVertexAttribDivisor;
  var _emscripten_glVertexAttribDivisorNV = _glVertexAttribDivisorNV;

  /** @suppress {duplicate } */
  var _glVertexAttribI4i = (x0, x1, x2, x3, x4) => GLctx.vertexAttribI4i(x0, x1, x2, x3, x4);
  var _emscripten_glVertexAttribI4i = _glVertexAttribI4i;

  /** @suppress {duplicate } */
  var _glVertexAttribI4iv = (index, v) => {
      GLctx.vertexAttribI4i(index, HEAP32[v>>2], HEAP32[v+4>>2], HEAP32[v+8>>2], HEAP32[v+12>>2]);
    };
  var _emscripten_glVertexAttribI4iv = _glVertexAttribI4iv;

  /** @suppress {duplicate } */
  var _glVertexAttribI4ui = (x0, x1, x2, x3, x4) => GLctx.vertexAttribI4ui(x0, x1, x2, x3, x4);
  var _emscripten_glVertexAttribI4ui = _glVertexAttribI4ui;

  /** @suppress {duplicate } */
  var _glVertexAttribI4uiv = (index, v) => {
      GLctx.vertexAttribI4ui(index, HEAPU32[v>>2], HEAPU32[v+4>>2], HEAPU32[v+8>>2], HEAPU32[v+12>>2]);
    };
  var _emscripten_glVertexAttribI4uiv = _glVertexAttribI4uiv;

  /** @suppress {duplicate } */
  var _glVertexAttribIPointer = (index, size, type, stride, ptr) => {
      GLctx.vertexAttribIPointer(index, size, type, stride, ptr);
    };
  var _emscripten_glVertexAttribIPointer = _glVertexAttribIPointer;

  /** @suppress {duplicate } */
  var _glVertexAttribPointer = (index, size, type, normalized, stride, ptr) => {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    };
  var _emscripten_glVertexAttribPointer = _glVertexAttribPointer;

  /** @suppress {duplicate } */
  var _glViewport = (x0, x1, x2, x3) => GLctx.viewport(x0, x1, x2, x3);
  var _emscripten_glViewport = _glViewport;

  /** @suppress {duplicate } */
  var _glWaitSync = (sync, flags, timeout) => {
      // See WebGL2 vs GLES3 difference on GL_TIMEOUT_IGNORED above (https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.15)
      timeout = Number(timeout);
      GLctx.waitSync(GL.syncs[sync], flags, timeout);
    };
  var _emscripten_glWaitSync = _glWaitSync;

  var _emscripten_has_asyncify = () => 1;

  
  
  var doRequestFullscreen = (target, strategy) => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = findEventTarget(target);
      if (!target) return -4;
  
      if (!target.requestFullscreen
        && !target.webkitRequestFullscreen
        ) {
        return -3;
      }
  
      // Queue this function call if we're not currently in an event handler and
      // the user saw it appropriate to do so.
      if (!JSEvents.canPerformEventHandlerRequests()) {
        if (strategy.deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents_requestFullscreen, 1 /* priority over pointer lock */, [target, strategy]);
          return 1;
        }
        return -2;
      }
  
      return JSEvents_requestFullscreen(target, strategy);
    };
  var _emscripten_request_fullscreen_strategy = (target, deferUntilInEventHandler, fullscreenStrategy) => {
      var strategy = {
        scaleMode: HEAP32[((fullscreenStrategy)>>2)],
        canvasResolutionScaleMode: HEAP32[(((fullscreenStrategy)+(4))>>2)],
        filteringMode: HEAP32[(((fullscreenStrategy)+(8))>>2)],
        deferUntilInEventHandler,
        canvasResizedCallback: HEAP32[(((fullscreenStrategy)+(12))>>2)],
        canvasResizedCallbackUserData: HEAP32[(((fullscreenStrategy)+(16))>>2)]
      };
  
      return doRequestFullscreen(target, strategy);
    };

  
  
  var _emscripten_request_pointerlock = (target, deferUntilInEventHandler) => {
      target = findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock
        ) {
        return -1;
      }
  
      // Queue this function call if we're not currently in an event handler and
      // the user saw it appropriate to do so.
      if (!JSEvents.canPerformEventHandlerRequests()) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        }
        return -2;
      }
  
      return requestPointerLock(target);
    };

  var getHeapMax = () =>
      // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate
      // full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side
      // for any code that deals with heap sizes, which would require special
      // casing all heap size related code to treat 0 specially.
      2147483648;
  
  var alignMemory = (size, alignment) => {
      return Math.ceil(size / alignment) * alignment;
    };
  
  var growMemory = (size) => {
      var b = wasmMemory.buffer;
      var pages = ((size - b.byteLength + 65535) / 65536) | 0;
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow(pages); // .grow() takes a delta compared to the previous size
        updateMemoryViews();
        return 1 /*success*/;
      } catch(e) {
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    };
  var _emscripten_resize_heap = (requestedSize) => {
      var oldSize = HEAPU8.length;
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      requestedSize >>>= 0;
      // With multithreaded builds, races can happen (another thread might increase the size
      // in between), so return a failure, and let the caller retry.
  
      // Memory resize rules:
      // 1.  Always increase heap size to at least the requested size, rounded up
      //     to next page multiple.
      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap
      //     geometrically: increase the heap size according to
      //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most
      //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap
      //     linearly: increase the heap size by at least
      //     MEMORY_GROWTH_LINEAR_STEP bytes.
      // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by
      //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 4.  If we were unable to allocate as much memory, it may be due to
      //     over-eager decision to excessively reserve due to (3) above.
      //     Hence if an allocation fails, cut down on the amount of excess
      //     growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit is set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      var maxHeapSize = getHeapMax();
      if (requestedSize > maxHeapSize) {
        return false;
      }
  
      // Loop through potential heap size increases. If we attempt a too eager
      // reservation that fails, cut down on the attempted size and reserve a
      // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignMemory(Math.max(requestedSize, overGrownHeapSize), 65536));
  
        var replacement = growMemory(newSize);
        if (replacement) {
  
          return true;
        }
      }
      return false;
    };

  /** @suppress {checkTypes} */
  var _emscripten_sample_gamepad_data = () => {
      try {
        if (navigator.getGamepads) return (JSEvents.lastGamepadState = navigator.getGamepads())
          ? 0 : -1;
      } catch(e) {
        navigator.getGamepads = null; // Disable getGamepads() so that it won't be attempted to be used again.
      }
      return -1;
    };

  
  
  var registerBeforeUnloadEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) => {
      var beforeUnloadEventHandlerFunc = (e = event) => {
        // Note: This is always called on the main browser thread, since it needs synchronously return a value!
        var confirmationMessage = ((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, 0, userData);
  
        if (confirmationMessage) {
          confirmationMessage = UTF8ToString(confirmationMessage);
        }
        if (confirmationMessage) {
          e.preventDefault();
          e.returnValue = confirmationMessage;
          return confirmationMessage;
        }
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString,
        callbackfunc,
        handlerFunc: beforeUnloadEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_beforeunload_callback_on_thread = (userData, callbackfunc, targetThread) => {
      if (typeof onbeforeunload == 'undefined') return -1;
      // beforeunload callback can only be registered on the main browser thread, because the page will go away immediately after returning from the handler,
      // and there is no time to start proxying it anywhere.
      if (targetThread !== 1) return -5;
      return registerBeforeUnloadEventCallback(2, userData, true, callbackfunc, 28, "beforeunload");
    };

  
  
  
  var registerFocusEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.focusEvent ||= _malloc(256);
  
      var focusEventHandlerFunc = (e = event) => {
        var nodeName = JSEvents.getNodeNameForTarget(e.target);
        var id = e.target.id ? e.target.id : '';
  
        var focusEvent = JSEvents.focusEvent;
        stringToUTF8(nodeName, focusEvent + 0, 128);
        stringToUTF8(id, focusEvent + 128, 128);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, focusEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString,
        callbackfunc,
        handlerFunc: focusEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_blur_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerFocusEventCallback(target, userData, useCapture, callbackfunc, 12, "blur", targetThread);


  var _emscripten_set_element_css_size = (target, width, height) => {
      target = findEventTarget(target);
      if (!target) return -4;
  
      target.style.width = width + "px";
      target.style.height = height + "px";
  
      return 0;
    };

  var _emscripten_set_focus_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerFocusEventCallback(target, userData, useCapture, callbackfunc, 13, "focus", targetThread);

  
  
  
  var fillFullscreenChangeEventData = (eventStruct) => {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
      var isFullscreen = !!fullscreenElement;
      // Assigning a boolean to HEAP32 with expected type coercion.
      /** @suppress{checkTypes} */
      HEAP8[eventStruct] = isFullscreen;
      HEAP8[(eventStruct)+(1)] = JSEvents.fullscreenEnabled();
      // If transitioning to fullscreen, report info about the element that is now fullscreen.
      // If transitioning to windowed mode, report info about the element that just was fullscreen.
      var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
      var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
      var id = reportedElement?.id || '';
      stringToUTF8(nodeName, eventStruct + 2, 128);
      stringToUTF8(id, eventStruct + 130, 128);
      HEAP32[(((eventStruct)+(260))>>2)] = reportedElement ? reportedElement.clientWidth : 0;
      HEAP32[(((eventStruct)+(264))>>2)] = reportedElement ? reportedElement.clientHeight : 0;
      HEAP32[(((eventStruct)+(268))>>2)] = screen.width;
      HEAP32[(((eventStruct)+(272))>>2)] = screen.height;
      if (isFullscreen) {
        JSEvents.previousFullscreenElement = fullscreenElement;
      }
    };
  
  var registerFullscreenChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.fullscreenChangeEvent ||= _malloc(276);
  
      var fullscreenChangeEventhandlerFunc = (e = event) => {
        var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
  
        fillFullscreenChangeEventData(fullscreenChangeEvent);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        eventTypeString,
        callbackfunc,
        handlerFunc: fullscreenChangeEventhandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  var _emscripten_set_fullscreenchange_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = findEventTarget(target);
      if (!target) return -4;
  
      // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
      // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
      registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
  
      return registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
    };

  
  
  
  var registerGamepadEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.gamepadEvent ||= _malloc(1240);
  
      var gamepadEventHandlerFunc = (e = event) => {
        var gamepadEvent = JSEvents.gamepadEvent;
        fillGamepadEventData(gamepadEvent, e["gamepad"]);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, gamepadEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString,
        callbackfunc,
        handlerFunc: gamepadEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  var _emscripten_set_gamepadconnected_callback_on_thread = (userData, useCapture, callbackfunc, targetThread) => {
      if (_emscripten_sample_gamepad_data()) return -1;
      return registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
    };

  
  var _emscripten_set_gamepaddisconnected_callback_on_thread = (userData, useCapture, callbackfunc, targetThread) => {
      if (_emscripten_sample_gamepad_data()) return -1;
      return registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
    };

  
  
  
  var registerKeyEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.keyEvent ||= _malloc(160);
  
      var keyEventHandlerFunc = (e) => {
  
        var keyEventData = JSEvents.keyEvent;
        HEAPF64[((keyEventData)>>3)] = e.timeStamp;
  
        var idx = ((keyEventData)>>2);
  
        HEAP32[idx + 2] = e.location;
        HEAP8[keyEventData + 12] = e.ctrlKey;
        HEAP8[keyEventData + 13] = e.shiftKey;
        HEAP8[keyEventData + 14] = e.altKey;
        HEAP8[keyEventData + 15] = e.metaKey;
        HEAP8[keyEventData + 16] = e.repeat;
        HEAP32[idx + 5] = e.charCode;
        HEAP32[idx + 6] = e.keyCode;
        HEAP32[idx + 7] = e.which;
        stringToUTF8(e.key || '', keyEventData + 32, 32);
        stringToUTF8(e.code || '', keyEventData + 64, 32);
        stringToUTF8(e.char || '', keyEventData + 96, 32);
        stringToUTF8(e.locale || '', keyEventData + 128, 32);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, keyEventData, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString,
        callbackfunc,
        handlerFunc: keyEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_keydown_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown", targetThread);

  var _emscripten_set_keypress_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);

  var _emscripten_set_keyup_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup", targetThread);

  var _emscripten_set_main_loop = (func, fps, simulateInfiniteLoop) => {
      var iterFunc = (() => dynCall_v(func));
      setMainLoop(iterFunc, fps, simulateInfiniteLoop);
    };

  
  var fillMouseEventData = (eventStruct, e, target) => {
      HEAPF64[((eventStruct)>>3)] = e.timeStamp;
      var idx = ((eventStruct)>>2);
      HEAP32[idx + 2] = e.screenX;
      HEAP32[idx + 3] = e.screenY;
      HEAP32[idx + 4] = e.clientX;
      HEAP32[idx + 5] = e.clientY;
      HEAP8[eventStruct + 24] = e.ctrlKey;
      HEAP8[eventStruct + 25] = e.shiftKey;
      HEAP8[eventStruct + 26] = e.altKey;
      HEAP8[eventStruct + 27] = e.metaKey;
      HEAP16[idx*2 + 14] = e.button;
      HEAP16[idx*2 + 15] = e.buttons;
  
      HEAP32[idx + 8] = e["movementX"]
        ;
  
      HEAP32[idx + 9] = e["movementY"]
        ;
  
      // Note: rect contains doubles (truncated to placate SAFE_HEAP, which is the same behaviour when writing to HEAP32 anyway)
      var rect = getBoundingClientRect(target);
      HEAP32[idx + 10] = e.clientX - (rect.left | 0);
      HEAP32[idx + 11] = e.clientY - (rect.top  | 0);
    };
  
  
  var registerMouseEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.mouseEvent ||= _malloc(64);
      target = findEventTarget(target);
  
      var mouseEventHandlerFunc = (e = event) => {
        // TODO: Make this access thread safe, or this could update live while app is reading it.
        fillMouseEventData(JSEvents.mouseEvent, e, target);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
        eventTypeString,
        callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_mousedown_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown", targetThread);

  var _emscripten_set_mouseenter_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter", targetThread);

  var _emscripten_set_mouseleave_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave", targetThread);

  var _emscripten_set_mousemove_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove", targetThread);

  var _emscripten_set_mouseup_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup", targetThread);

  
  
  var fillPointerlockChangeEventData = (eventStruct) => {
      var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
      var isPointerlocked = !!pointerLockElement;
      // Assigning a boolean to HEAP32 with expected type coercion.
      /** @suppress{checkTypes} */
      HEAP8[eventStruct] = isPointerlocked;
      var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
      var id = pointerLockElement?.id || '';
      stringToUTF8(nodeName, eventStruct + 1, 128);
      stringToUTF8(id, eventStruct + 129, 128);
    };
  
  var registerPointerlockChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.pointerlockChangeEvent ||= _malloc(257);
  
      var pointerlockChangeEventHandlerFunc = (e = event) => {
        var pointerlockChangeEvent = JSEvents.pointerlockChangeEvent;
        fillPointerlockChangeEventData(pointerlockChangeEvent);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, pointerlockChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        eventTypeString,
        callbackfunc,
        handlerFunc: pointerlockChangeEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  /** @suppress {missingProperties} */
  var _emscripten_set_pointerlockchange_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) => {
      // TODO: Currently not supported in pthreads or in --proxy-to-worker mode. (In pthreads mode, document object is not defined)
      if (!document || !document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
  
      target = findEventTarget(target);
      if (!target) return -4;
      registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mozpointerlockchange", targetThread);
      registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "webkitpointerlockchange", targetThread);
      registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mspointerlockchange", targetThread);
      return registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "pointerlockchange", targetThread);
    };

  
  
  var registerUiEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.uiEvent ||= _malloc(36);
  
      target = findEventTarget(target);
  
      var uiEventHandlerFunc = (e = event) => {
        if (e.target != target) {
          // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
          // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
          // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
          // causing a new scroll, etc..
          return;
        }
        var b = document.body; // Take document.body to a variable, Closure compiler does not outline access to it on its own.
        if (!b) {
          // During a page unload 'body' can be null, with "Cannot read property 'clientWidth' of null" being thrown
          return;
        }
        var uiEvent = JSEvents.uiEvent;
        HEAP32[((uiEvent)>>2)] = 0; // always zero for resize and scroll
        HEAP32[(((uiEvent)+(4))>>2)] = b.clientWidth;
        HEAP32[(((uiEvent)+(8))>>2)] = b.clientHeight;
        HEAP32[(((uiEvent)+(12))>>2)] = innerWidth;
        HEAP32[(((uiEvent)+(16))>>2)] = innerHeight;
        HEAP32[(((uiEvent)+(20))>>2)] = outerWidth;
        HEAP32[(((uiEvent)+(24))>>2)] = outerHeight;
        HEAP32[(((uiEvent)+(28))>>2)] = pageXOffset | 0; // scroll offsets are float
        HEAP32[(((uiEvent)+(32))>>2)] = pageYOffset | 0;
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, uiEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        eventTypeString,
        callbackfunc,
        handlerFunc: uiEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_resize_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize", targetThread);

  
  
  
  var registerTouchEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.touchEvent ||= _malloc(1552);
  
      target = findEventTarget(target);
  
      var touchEventHandlerFunc = (e) => {
        var t, touches = {}, et = e.touches;
        // To ease marshalling different kinds of touches that browser reports (all touches are listed in e.touches,
        // only changed touches in e.changedTouches, and touches on target at a.targetTouches), mark a boolean in
        // each Touch object so that we can later loop only once over all touches we see to marshall over to Wasm.
  
        for (let t of et) {
          // Browser might recycle the generated Touch objects between each frame (Firefox on Android), so reset any
          // changed/target states we may have set from previous frame.
          t.isChanged = t.onTarget = 0;
          touches[t.identifier] = t;
        }
        // Mark which touches are part of the changedTouches list.
        for (let t of e.changedTouches) {
          t.isChanged = 1;
          touches[t.identifier] = t;
        }
        // Mark which touches are part of the targetTouches list.
        for (let t of e.targetTouches) {
          touches[t.identifier].onTarget = 1;
        }
  
        var touchEvent = JSEvents.touchEvent;
        HEAPF64[((touchEvent)>>3)] = e.timeStamp;
        HEAP8[touchEvent + 12] = e.ctrlKey;
        HEAP8[touchEvent + 13] = e.shiftKey;
        HEAP8[touchEvent + 14] = e.altKey;
        HEAP8[touchEvent + 15] = e.metaKey;
        var idx = touchEvent + 16;
        var targetRect = getBoundingClientRect(target);
        var numTouches = 0;
        for (let t of Object.values(touches)) {
          var idx32 = ((idx)>>2); // Pre-shift the ptr to index to HEAP32 to save code size
          HEAP32[idx32 + 0] = t.identifier;
          HEAP32[idx32 + 1] = t.screenX;
          HEAP32[idx32 + 2] = t.screenY;
          HEAP32[idx32 + 3] = t.clientX;
          HEAP32[idx32 + 4] = t.clientY;
          HEAP32[idx32 + 5] = t.pageX;
          HEAP32[idx32 + 6] = t.pageY;
          HEAP8[idx + 28] = t.isChanged;
          HEAP8[idx + 29] = t.onTarget;
          HEAP32[idx32 + 8] = t.clientX - (targetRect.left | 0);
          HEAP32[idx32 + 9] = t.clientY - (targetRect.top  | 0);
  
          idx += 48;
  
          if (++numTouches > 31) {
            break;
          }
        }
        HEAP32[(((touchEvent)+(8))>>2)] = numTouches;
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, touchEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
        eventTypeString,
        callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_touchcancel_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);

  var _emscripten_set_touchend_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);

  var _emscripten_set_touchmove_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);

  var _emscripten_set_touchstart_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);

  
  var fillVisibilityChangeEventData = (eventStruct) => {
      var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
      var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
      // Assigning a boolean to HEAP32 with expected type coercion.
      /** @suppress{checkTypes} */
      HEAP8[eventStruct] = document.hidden;
      HEAP32[(((eventStruct)+(4))>>2)] = visibilityState;
    };
  
  var registerVisibilityChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.visibilityChangeEvent ||= _malloc(8);
  
      var visibilityChangeEventHandlerFunc = (e = event) => {
        var visibilityChangeEvent = JSEvents.visibilityChangeEvent;
  
        fillVisibilityChangeEventData(visibilityChangeEvent);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, visibilityChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        eventTypeString,
        callbackfunc,
        handlerFunc: visibilityChangeEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  var _emscripten_set_visibilitychange_callback_on_thread = (userData, useCapture, callbackfunc, targetThread) => {
      return registerVisibilityChangeEventCallback(specialHTMLTargets[1], userData, useCapture, callbackfunc, 21, "visibilitychange", targetThread);
    };

  
  
  var registerWheelEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.wheelEvent ||= _malloc(96);
  
      // The DOM Level 3 events spec event 'wheel'
      var wheelHandlerFunc = (e = event) => {
        var wheelEvent = JSEvents.wheelEvent;
        fillMouseEventData(wheelEvent, e, target);
        HEAPF64[(((wheelEvent)+(64))>>3)] = e["deltaX"];
        HEAPF64[(((wheelEvent)+(72))>>3)] = e["deltaY"];
        HEAPF64[(((wheelEvent)+(80))>>3)] = e["deltaZ"];
        HEAP32[(((wheelEvent)+(88))>>2)] = e["deltaMode"];
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, wheelEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        allowsDeferredCalls: true,
        eventTypeString,
        callbackfunc,
        handlerFunc: wheelHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  var _emscripten_set_wheel_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) => {
      target = findEventTarget(target);
      if (!target) return -4;
      if (typeof target.onwheel != 'undefined') {
        return registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel", targetThread);
      } else {
        return -1;
      }
    };

  
  var _emscripten_set_window_title = (title) => document.title = UTF8ToString(title);

  var _emscripten_sleep = (ms) => {
      // emscripten_sleep() does not return a value, but we still need a |return|
      // here for stack switching support (ASYNCIFY=2). In that mode this function
      // returns a Promise instead of nothing, and that Promise is what tells the
      // wasm VM to pause the stack.
      return Asyncify.handleSleep((wakeUp) => safeSetTimeout(wakeUp, ms));
    };
  _emscripten_sleep.isAsync = true;

  var ENV = {
  };
  
  var getExecutableName = () => thisProgram || './this.program';
  var getEnvStrings = () => {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator == 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          // x is a key in ENV; if ENV[x] is undefined, that means it was
          // explicitly set to be so. We allow user code to do that to
          // force variables with default values to remain unset.
          if (ENV[x] === undefined) delete env[x];
          else env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(`${x}=${env[x]}`);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    };
  
  var _environ_get = (__environ, environ_buf) => {
      var bufSize = 0;
      var envp = 0;
      for (var string of getEnvStrings()) {
        var ptr = environ_buf + bufSize;
        HEAPU32[(((__environ)+(envp))>>2)] = ptr;
        bufSize += stringToUTF8(string, ptr, Infinity) + 1;
        envp += 4;
      }
      return 0;
    };

  
  var _environ_sizes_get = (penviron_count, penviron_buf_size) => {
      var strings = getEnvStrings();
      HEAPU32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      for (var string of strings) {
        bufSize += lengthBytesUTF8(string) + 1;
      }
      HEAPU32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    };


  function _fd_close(fd) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  var doReadv = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.read(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) break; // nothing more to read
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_read(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doReadv(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  
  function _fd_seek(fd, offset, whence, newOffset) {
    offset = bigintToI53Checked(offset);
  
  
  try {
  
      if (isNaN(offset)) return 61;
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.llseek(stream, offset, whence);
      HEAP64[((newOffset)>>3)] = BigInt(stream.position);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  ;
  }

  /** @param {number=} offset */
  var doWritev = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.write(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) {
          // No more space to write.
          break;
        }
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_write(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doWritev(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }
































































































  function _random_get(buffer, size) {
  try {
  
      randomFill(HEAPU8.subarray(buffer, buffer + size));
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }




  var listenOnce = (object, event, func) =>
      object.addEventListener(event, func, { 'once': true });
  /** @param {Object=} elements */
  var autoResumeAudioContext = (ctx, elements) => {
      if (!elements) {
        elements = [document, document.getElementById('canvas')];
      }
      ['keydown', 'mousedown', 'touchstart'].forEach((event) => {
        elements.forEach((element) => {
          if (element) {
            listenOnce(element, event, () => {
              if (ctx.state === 'suspended') ctx.resume();
            });
          }
        });
      });
    };

  var dynCallLegacy = (sig, ptr, args) => {
      sig = sig.replace(/p/g, 'i')
      var f = Module['dynCall_' + sig];
      return f(ptr, ...args);
    };
  var dynCall = (sig, ptr, args = [], promising = false) => {
      var rtn = dynCallLegacy(sig, ptr, args);
      return rtn;
    };




  var ptrToString = (ptr) => {
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      ptr >>>= 0;
      return '0x' + ptr.toString(16).padStart(8, '0');
    };

  var wasmTableMirror = [];
  
  /** @type {WebAssembly.Table} */
  var wasmTable;
  var getWasmTableEntry = (funcPtr) => {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        /** @suppress {checkTypes} */
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      return func;
    };


  var runAndAbortIfError = (func) => {
      try {
        return func();
      } catch (e) {
        abort(e);
      }
    };
  
  
  var sigToWasmTypes = (sig) => {
      var typeNames = {
        'i': 'i32',
        'j': 'i64',
        'f': 'f32',
        'd': 'f64',
        'e': 'externref',
        'p': 'i32',
      };
      var type = {
        parameters: [],
        results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
      };
      for (var i = 1; i < sig.length; ++i) {
        type.parameters.push(typeNames[sig[i]]);
      }
      return type;
    };
  
  var runtimeKeepalivePush = () => {
      runtimeKeepaliveCounter += 1;
    };
  
  var runtimeKeepalivePop = () => {
      runtimeKeepaliveCounter -= 1;
    };
  
  
  var Asyncify = {
  instrumentWasmImports(imports) {
        var importPattern = /^(invoke_.*|__asyncjs__.*)$/;
  
        for (let [x, original] of Object.entries(imports)) {
          if (typeof original == 'function') {
            let isAsyncifyImport = original.isAsync || importPattern.test(x);
          }
        }
      },
  instrumentWasmExports(exports) {
        var ret = {};
        for (let [x, original] of Object.entries(exports)) {
          if (typeof original == 'function') {
            ret[x] = (...args) => {
              Asyncify.exportCallStack.push(x);
              try {
                return original(...args);
              } finally {
                if (!ABORT) {
                  var y = Asyncify.exportCallStack.pop();
                  Asyncify.maybeStopUnwind();
                }
              }
            };
          } else {
            ret[x] = original;
          }
        }
        return ret;
      },
  State:{
  Normal:0,
  Unwinding:1,
  Rewinding:2,
  Disabled:3,
  },
  state:0,
  StackSize:4096,
  currData:null,
  handleSleepReturnValue:0,
  exportCallStack:[],
  callStackNameToId:{
  },
  callStackIdToName:{
  },
  callStackId:0,
  asyncPromiseHandlers:null,
  sleepCallbacks:[],
  getCallStackId(funcName) {
        var id = Asyncify.callStackNameToId[funcName];
        if (id === undefined) {
          id = Asyncify.callStackId++;
          Asyncify.callStackNameToId[funcName] = id;
          Asyncify.callStackIdToName[id] = funcName;
        }
        return id;
      },
  maybeStopUnwind() {
        if (Asyncify.currData &&
            Asyncify.state === Asyncify.State.Unwinding &&
            Asyncify.exportCallStack.length === 0) {
          // We just finished unwinding.
          // Be sure to set the state before calling any other functions to avoid
          // possible infinite recursion here (For example in debug pthread builds
          // the dbg() function itself can call back into WebAssembly to get the
          // current pthread_self() pointer).
          Asyncify.state = Asyncify.State.Normal;
          
          // Keep the runtime alive so that a re-wind can be done later.
          runAndAbortIfError(_asyncify_stop_unwind);
          if (typeof Fibers != 'undefined') {
            Fibers.trampoline();
          }
        }
      },
  whenDone() {
        return new Promise((resolve, reject) => {
          Asyncify.asyncPromiseHandlers = { resolve, reject };
        });
      },
  allocateData() {
        // An asyncify data structure has three fields:
        //  0  current stack pos
        //  4  max stack pos
        //  8  id of function at bottom of the call stack (callStackIdToName[id] == name of js function)
        //
        // The Asyncify ABI only interprets the first two fields, the rest is for the runtime.
        // We also embed a stack in the same memory region here, right next to the structure.
        // This struct is also defined as asyncify_data_t in emscripten/fiber.h
        var ptr = _malloc(12 + Asyncify.StackSize);
        Asyncify.setDataHeader(ptr, ptr + 12, Asyncify.StackSize);
        Asyncify.setDataRewindFunc(ptr);
        return ptr;
      },
  setDataHeader(ptr, stack, stackSize) {
        HEAPU32[((ptr)>>2)] = stack;
        HEAPU32[(((ptr)+(4))>>2)] = stack + stackSize;
      },
  setDataRewindFunc(ptr) {
        var bottomOfCallStack = Asyncify.exportCallStack[0];
        var rewindId = Asyncify.getCallStackId(bottomOfCallStack);
        HEAP32[(((ptr)+(8))>>2)] = rewindId;
      },
  getDataRewindFuncName(ptr) {
        var id = HEAP32[(((ptr)+(8))>>2)];
        var name = Asyncify.callStackIdToName[id];
        return name;
      },
  getDataRewindFunc(name) {
        var func = wasmExports[name];
        return func;
      },
  doRewind(ptr) {
        var name = Asyncify.getDataRewindFuncName(ptr);
        var func = Asyncify.getDataRewindFunc(name);
        // Once we have rewound and the stack we no longer need to artificially
        // keep the runtime alive.
        
        return func();
      },
  handleSleep(startAsync) {
        if (ABORT) return;
        if (Asyncify.state === Asyncify.State.Normal) {
          // Prepare to sleep. Call startAsync, and see what happens:
          // if the code decided to call our callback synchronously,
          // then no async operation was in fact begun, and we don't
          // need to do anything.
          var reachedCallback = false;
          var reachedAfterCallback = false;
          startAsync((handleSleepReturnValue = 0) => {
            if (ABORT) return;
            Asyncify.handleSleepReturnValue = handleSleepReturnValue;
            reachedCallback = true;
            if (!reachedAfterCallback) {
              // We are happening synchronously, so no need for async.
              return;
            }
            Asyncify.state = Asyncify.State.Rewinding;
            runAndAbortIfError(() => _asyncify_start_rewind(Asyncify.currData));
            if (typeof MainLoop != 'undefined' && MainLoop.func) {
              MainLoop.resume();
            }
            var asyncWasmReturnValue, isError = false;
            try {
              asyncWasmReturnValue = Asyncify.doRewind(Asyncify.currData);
            } catch (err) {
              asyncWasmReturnValue = err;
              isError = true;
            }
            // Track whether the return value was handled by any promise handlers.
            var handled = false;
            if (!Asyncify.currData) {
              // All asynchronous execution has finished.
              // `asyncWasmReturnValue` now contains the final
              // return value of the exported async WASM function.
              //
              // Note: `asyncWasmReturnValue` is distinct from
              // `Asyncify.handleSleepReturnValue`.
              // `Asyncify.handleSleepReturnValue` contains the return
              // value of the last C function to have executed
              // `Asyncify.handleSleep()`, where as `asyncWasmReturnValue`
              // contains the return value of the exported WASM function
              // that may have called C functions that
              // call `Asyncify.handleSleep()`.
              var asyncPromiseHandlers = Asyncify.asyncPromiseHandlers;
              if (asyncPromiseHandlers) {
                Asyncify.asyncPromiseHandlers = null;
                (isError ? asyncPromiseHandlers.reject : asyncPromiseHandlers.resolve)(asyncWasmReturnValue);
                handled = true;
              }
            }
            if (isError && !handled) {
              // If there was an error and it was not handled by now, we have no choice but to
              // rethrow that error into the global scope where it can be caught only by
              // `onerror` or `onunhandledpromiserejection`.
              throw asyncWasmReturnValue;
            }
          });
          reachedAfterCallback = true;
          if (!reachedCallback) {
            // A true async operation was begun; start a sleep.
            Asyncify.state = Asyncify.State.Unwinding;
            // TODO: reuse, don't alloc/free every sleep
            Asyncify.currData = Asyncify.allocateData();
            if (typeof MainLoop != 'undefined' && MainLoop.func) {
              MainLoop.pause();
            }
            runAndAbortIfError(() => _asyncify_start_unwind(Asyncify.currData));
          }
        } else if (Asyncify.state === Asyncify.State.Rewinding) {
          // Stop a resume.
          Asyncify.state = Asyncify.State.Normal;
          runAndAbortIfError(_asyncify_stop_rewind);
          _free(Asyncify.currData);
          Asyncify.currData = null;
          // Call all sleep callbacks now that the sleep-resume is all done.
          Asyncify.sleepCallbacks.forEach(callUserCallback);
        } else {
          abort(`invalid state: ${Asyncify.state}`);
        }
        return Asyncify.handleSleepReturnValue;
      },
  handleAsync(startAsync) {
        return Asyncify.handleSleep((wakeUp) => {
          // TODO: add error handling as a second param when handleSleep implements it.
          startAsync().then(wakeUp);
        });
      },
  };


  var FS_createPath = (...args) => FS.createPath(...args);



  var FS_unlink = (...args) => FS.unlink(...args);

  var FS_createLazyFile = (...args) => FS.createLazyFile(...args);

  var FS_createDevice = (...args) => FS.createDevice(...args);

  FS.createPreloadedFile = FS_createPreloadedFile;
  FS.staticInit();;

      // This error may happen quite a bit. To avoid overhead we reuse it (and
      // suffer a lack of stack info).
      MEMFS.doesNotExistError = new FS.ErrnoError(44);
      /** @suppress {checkTypes} */
      MEMFS.doesNotExistError.stack = '<generic error, no stack>';
      ;

      // exports
      Module['requestFullscreen'] = Browser.requestFullscreen;
      Module['setCanvasSize'] = Browser.setCanvasSize;
      Module['getUserMedia'] = Browser.getUserMedia;
      Module['createContext'] = Browser.createContext;
    ;

      Module['requestAnimationFrame'] = MainLoop.requestAnimationFrame;
      Module['pauseMainLoop'] = MainLoop.pause;
      Module['resumeMainLoop'] = MainLoop.resume;
      MainLoop.init();;
for (let i = 0; i < 32; ++i) tempFixedLengthArray.push(new Array(i));;
// End JS library code

// include: postlibrary.js
// This file is included after the automatically-generated JS library code
// but before the wasm module is created.

{

  // Begin ATMODULES hooks
  if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];
if (Module['preloadPlugins']) preloadPlugins = Module['preloadPlugins'];
if (Module['print']) out = Module['print'];
if (Module['printErr']) err = Module['printErr'];
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
  // End ATMODULES hooks

  if (Module['arguments']) arguments_ = Module['arguments'];
  if (Module['thisProgram']) thisProgram = Module['thisProgram'];

}

// Begin runtime exports
  Module['addRunDependency'] = addRunDependency;
  Module['removeRunDependency'] = removeRunDependency;
  Module['FS_createPreloadedFile'] = FS_createPreloadedFile;
  Module['FS_unlink'] = FS_unlink;
  Module['FS_createPath'] = FS_createPath;
  Module['FS_createDevice'] = FS_createDevice;
  Module['FS_createDataFile'] = FS_createDataFile;
  Module['FS_createLazyFile'] = FS_createLazyFile;
  Module['LZ4'] = LZ4;
  // End runtime exports
  // Begin JS library exports
  // End JS library exports

// end include: postlibrary.js

var ASM_CONSTS = {
  561072: () => { if (Module.edgePostInit) { Module.edgePostInit(); } },  
 561128: ($0, $1) => { const args = []; for (let i = 0; i < $0; i++) { args.push(UTF8ToString(HEAP32[($1 >> 2) + i])); } console.log(`Edge command line : $ { args }`); const homeIndex = args.indexOf("-home"); if (homeIndex === -1 || homeIndex >= args.length || args[homeIndex + 1].startsWith("-")) { throw "No home command line option specified" } const homeDir = args[homeIndex + 1]; if (!FS.analyzePath(homeDir).exists) { FS.mkdirTree(homeDir); } FS.mount(IDBFS, {}, homeDir); FS.syncfs( true, function(err) { if (err) { console.error(`Error mounting home dir $ { err }`); return; } Module._WebMain($0, $1); }); },  
 561723: () => { if (Module.onFullscreen) { Module.onFullscreen(); } },  
 561779: ($0) => { if (Module.edgePreSyncFS) { Module.edgePreSyncFS(); } FS.syncfs( $0, function(err) { if (Module.edgePostSyncFS) { Module.edgePostSyncFS(); } }); },  
 561928: ($0, $1, $2, $3, $4) => { if (typeof window === 'undefined' || (window.AudioContext || window.webkitAudioContext) === undefined) { return 0; } if (typeof(window.miniaudio) === 'undefined') { window.miniaudio = { referenceCount: 0 }; window.miniaudio.device_type = {}; window.miniaudio.device_type.playback = $0; window.miniaudio.device_type.capture = $1; window.miniaudio.device_type.duplex = $2; window.miniaudio.device_state = {}; window.miniaudio.device_state.stopped = $3; window.miniaudio.device_state.started = $4; let miniaudio = window.miniaudio; miniaudio.devices = []; miniaudio.track_device = function(device) { for (var iDevice = 0; iDevice < miniaudio.devices.length; ++iDevice) { if (miniaudio.devices[iDevice] == null) { miniaudio.devices[iDevice] = device; return iDevice; } } miniaudio.devices.push(device); return miniaudio.devices.length - 1; }; miniaudio.untrack_device_by_index = function(deviceIndex) { miniaudio.devices[deviceIndex] = null; while (miniaudio.devices.length > 0) { if (miniaudio.devices[miniaudio.devices.length-1] == null) { miniaudio.devices.pop(); } else { break; } } }; miniaudio.untrack_device = function(device) { for (var iDevice = 0; iDevice < miniaudio.devices.length; ++iDevice) { if (miniaudio.devices[iDevice] == device) { return miniaudio.untrack_device_by_index(iDevice); } } }; miniaudio.get_device_by_index = function(deviceIndex) { return miniaudio.devices[deviceIndex]; }; miniaudio.unlock_event_types = (function(){ return ['touchend', 'click']; })(); miniaudio.unlock = function() { for(var i = 0; i < miniaudio.devices.length; ++i) { var device = miniaudio.devices[i]; if (device != null && device.webaudio != null && device.state === miniaudio.device_state.started) { device.webaudio.resume().then(() => { _ma_device__on_notification_unlocked(device.pDevice); }, (error) => {console.error("Failed to resume audiocontext", error); }); } } miniaudio.unlock_event_types.map(function(event_type) { document.removeEventListener(event_type, miniaudio.unlock, true); }); }; miniaudio.unlock_event_types.map(function(event_type) { document.addEventListener(event_type, miniaudio.unlock, true); }); } window.miniaudio.referenceCount += 1; return 1; },  
 564106: () => { if (typeof(window.miniaudio) !== 'undefined') { miniaudio.unlock_event_types.map(function(event_type) { document.removeEventListener(event_type, miniaudio.unlock, true); }); window.miniaudio.referenceCount -= 1; if (window.miniaudio.referenceCount === 0) { delete window.miniaudio; } } },  
 564396: () => { return (navigator.mediaDevices !== undefined && navigator.mediaDevices.getUserMedia !== undefined); },  
 564500: () => { try { var temp = new (window.AudioContext || window.webkitAudioContext)(); var sampleRate = temp.sampleRate; temp.close(); return sampleRate; } catch(e) { return 0; } },  
 564671: ($0, $1, $2, $3, $4, $5) => { var deviceType = $0; var channels = $1; var sampleRate = $2; var bufferSize = $3; var pIntermediaryBuffer = $4; var pDevice = $5; if (typeof(window.miniaudio) === 'undefined') { return -1; } var device = {}; var audioContextOptions = {}; if (deviceType == window.miniaudio.device_type.playback && sampleRate != 0) { audioContextOptions.sampleRate = sampleRate; } device.webaudio = new (window.AudioContext || window.webkitAudioContext)(audioContextOptions); device.webaudio.suspend(); device.state = window.miniaudio.device_state.stopped; var channelCountIn = 0; var channelCountOut = channels; if (deviceType != window.miniaudio.device_type.playback) { channelCountIn = channels; } device.scriptNode = device.webaudio.createScriptProcessor(bufferSize, channelCountIn, channelCountOut); device.scriptNode.onaudioprocess = function(e) { if (device.intermediaryBufferView == null || device.intermediaryBufferView.length == 0) { device.intermediaryBufferView = new Float32Array(HEAPF32.buffer, pIntermediaryBuffer, bufferSize * channels); } if (deviceType == window.miniaudio.device_type.capture || deviceType == window.miniaudio.device_type.duplex) { for (var iChannel = 0; iChannel < channels; iChannel += 1) { var inputBuffer = e.inputBuffer.getChannelData(iChannel); var intermediaryBuffer = device.intermediaryBufferView; for (var iFrame = 0; iFrame < bufferSize; iFrame += 1) { intermediaryBuffer[iFrame*channels + iChannel] = inputBuffer[iFrame]; } } _ma_device_process_pcm_frames_capture__webaudio(pDevice, bufferSize, pIntermediaryBuffer); } if (deviceType == window.miniaudio.device_type.playback || deviceType == window.miniaudio.device_type.duplex) { _ma_device_process_pcm_frames_playback__webaudio(pDevice, bufferSize, pIntermediaryBuffer); for (var iChannel = 0; iChannel < e.outputBuffer.numberOfChannels; ++iChannel) { var outputBuffer = e.outputBuffer.getChannelData(iChannel); var intermediaryBuffer = device.intermediaryBufferView; for (var iFrame = 0; iFrame < bufferSize; iFrame += 1) { outputBuffer[iFrame] = intermediaryBuffer[iFrame*channels + iChannel]; } } } else { for (var iChannel = 0; iChannel < e.outputBuffer.numberOfChannels; ++iChannel) { e.outputBuffer.getChannelData(iChannel).fill(0.0); } } }; if (deviceType == window.miniaudio.device_type.capture || deviceType == window.miniaudio.device_type.duplex) { navigator.mediaDevices.getUserMedia({audio:true, video:false}) .then(function(stream) { device.streamNode = device.webaudio.createMediaStreamSource(stream); device.streamNode.connect(device.scriptNode); device.scriptNode.connect(device.webaudio.destination); }) .catch(function(error) { console.log("Failed to get user media: " + error); }); } if (deviceType == window.miniaudio.device_type.playback) { device.scriptNode.connect(device.webaudio.destination); } device.pDevice = pDevice; return window.miniaudio.track_device(device); },  
 567548: ($0) => { return window.miniaudio.get_device_by_index($0).webaudio.sampleRate; },  
 567621: ($0) => { var device = window.miniaudio.get_device_by_index($0); if (device.scriptNode !== undefined) { device.scriptNode.onaudioprocess = function(e) {}; device.scriptNode.disconnect(); device.scriptNode = undefined; } if (device.streamNode !== undefined) { device.streamNode.disconnect(); device.streamNode = undefined; } device.webaudio.close(); device.webaudio = undefined; device.pDevice = undefined; },  
 568021: ($0) => { window.miniaudio.untrack_device_by_index($0); },  
 568071: ($0) => { var device = window.miniaudio.get_device_by_index($0); device.webaudio.resume(); device.state = window.miniaudio.device_state.started; },  
 568210: ($0) => { var device = window.miniaudio.get_device_by_index($0); device.webaudio.suspend(); device.state = window.miniaudio.device_state.stopped; },  
 568350: ($0) => { var str = UTF8ToString($0) + '\n\n' + 'Abort/Retry/Ignore/AlwaysIgnore? [ariA] :'; var reply = window.prompt(str, "i"); if (reply === null) { reply = "i"; } return allocate(intArrayFromString(reply), 'i8', ALLOC_NORMAL); },  
 568575: () => { if (typeof(AudioContext) !== 'undefined') { return true; } else if (typeof(webkitAudioContext) !== 'undefined') { return true; } return false; },  
 568722: () => { if ((typeof(navigator.mediaDevices) !== 'undefined') && (typeof(navigator.mediaDevices.getUserMedia) !== 'undefined')) { return true; } else if (typeof(navigator.webkitGetUserMedia) !== 'undefined') { return true; } return false; },  
 568956: ($0) => { if(typeof(Module['SDL2']) === 'undefined') { Module['SDL2'] = {}; } var SDL2 = Module['SDL2']; if (!$0) { SDL2.audio = {}; } else { SDL2.capture = {}; } if (!SDL2.audioContext) { if (typeof(AudioContext) !== 'undefined') { SDL2.audioContext = new AudioContext(); } else if (typeof(webkitAudioContext) !== 'undefined') { SDL2.audioContext = new webkitAudioContext(); } if (SDL2.audioContext) { if ((typeof navigator.userActivation) === 'undefined') { autoResumeAudioContext(SDL2.audioContext); } } } return SDL2.audioContext === undefined ? -1 : 0; },  
 569508: () => { var SDL2 = Module['SDL2']; return SDL2.audioContext.sampleRate; },  
 569576: ($0, $1, $2, $3) => { var SDL2 = Module['SDL2']; var have_microphone = function(stream) { if (SDL2.capture.silenceTimer !== undefined) { clearInterval(SDL2.capture.silenceTimer); SDL2.capture.silenceTimer = undefined; SDL2.capture.silenceBuffer = undefined } SDL2.capture.mediaStreamNode = SDL2.audioContext.createMediaStreamSource(stream); SDL2.capture.scriptProcessorNode = SDL2.audioContext.createScriptProcessor($1, $0, 1); SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) { if ((SDL2 === undefined) || (SDL2.capture === undefined)) { return; } audioProcessingEvent.outputBuffer.getChannelData(0).fill(0.0); SDL2.capture.currentCaptureBuffer = audioProcessingEvent.inputBuffer; dynCall('vi', $2, [$3]); }; SDL2.capture.mediaStreamNode.connect(SDL2.capture.scriptProcessorNode); SDL2.capture.scriptProcessorNode.connect(SDL2.audioContext.destination); SDL2.capture.stream = stream; }; var no_microphone = function(error) { }; SDL2.capture.silenceBuffer = SDL2.audioContext.createBuffer($0, $1, SDL2.audioContext.sampleRate); SDL2.capture.silenceBuffer.getChannelData(0).fill(0.0); var silence_callback = function() { SDL2.capture.currentCaptureBuffer = SDL2.capture.silenceBuffer; dynCall('vi', $2, [$3]); }; SDL2.capture.silenceTimer = setInterval(silence_callback, ($1 / SDL2.audioContext.sampleRate) * 1000); if ((navigator.mediaDevices !== undefined) && (navigator.mediaDevices.getUserMedia !== undefined)) { navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(have_microphone).catch(no_microphone); } else if (navigator.webkitGetUserMedia !== undefined) { navigator.webkitGetUserMedia({ audio: true, video: false }, have_microphone, no_microphone); } },  
 571269: ($0, $1, $2, $3) => { var SDL2 = Module['SDL2']; SDL2.audio.scriptProcessorNode = SDL2.audioContext['createScriptProcessor']($1, 0, $0); SDL2.audio.scriptProcessorNode['onaudioprocess'] = function (e) { if ((SDL2 === undefined) || (SDL2.audio === undefined)) { return; } if (SDL2.audio.silenceTimer !== undefined) { clearInterval(SDL2.audio.silenceTimer); SDL2.audio.silenceTimer = undefined; SDL2.audio.silenceBuffer = undefined; } SDL2.audio.currentOutputBuffer = e['outputBuffer']; dynCall('vi', $2, [$3]); }; SDL2.audio.scriptProcessorNode['connect'](SDL2.audioContext['destination']); if (SDL2.audioContext.state === 'suspended') { SDL2.audio.silenceBuffer = SDL2.audioContext.createBuffer($0, $1, SDL2.audioContext.sampleRate); SDL2.audio.silenceBuffer.getChannelData(0).fill(0.0); var silence_callback = function() { if ((typeof navigator.userActivation) !== 'undefined') { if (navigator.userActivation.hasBeenActive) { SDL2.audioContext.resume(); } } SDL2.audio.currentOutputBuffer = SDL2.audio.silenceBuffer; dynCall('vi', $2, [$3]); SDL2.audio.currentOutputBuffer = undefined; }; SDL2.audio.silenceTimer = setInterval(silence_callback, ($1 / SDL2.audioContext.sampleRate) * 1000); } },  
 572444: ($0, $1) => { var SDL2 = Module['SDL2']; var numChannels = SDL2.capture.currentCaptureBuffer.numberOfChannels; for (var c = 0; c < numChannels; ++c) { var channelData = SDL2.capture.currentCaptureBuffer.getChannelData(c); if (channelData.length != $1) { throw 'Web Audio capture buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + $1 + ' samples!'; } if (numChannels == 1) { for (var j = 0; j < $1; ++j) { setValue($0 + (j * 4), channelData[j], 'float'); } } else { for (var j = 0; j < $1; ++j) { setValue($0 + (((j * numChannels) + c) * 4), channelData[j], 'float'); } } } },  
 573049: ($0, $1) => { var SDL2 = Module['SDL2']; var buf = $0 >>> 2; var numChannels = SDL2.audio.currentOutputBuffer['numberOfChannels']; for (var c = 0; c < numChannels; ++c) { var channelData = SDL2.audio.currentOutputBuffer['getChannelData'](c); if (channelData.length != $1) { throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + $1 + ' samples!'; } for (var j = 0; j < $1; ++j) { channelData[j] = HEAPF32[buf + (j*numChannels + c)]; } } },  
 573538: ($0) => { var SDL2 = Module['SDL2']; if ($0) { if (SDL2.capture.silenceTimer !== undefined) { clearInterval(SDL2.capture.silenceTimer); } if (SDL2.capture.stream !== undefined) { var tracks = SDL2.capture.stream.getAudioTracks(); for (var i = 0; i < tracks.length; i++) { SDL2.capture.stream.removeTrack(tracks[i]); } } if (SDL2.capture.scriptProcessorNode !== undefined) { SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) {}; SDL2.capture.scriptProcessorNode.disconnect(); } if (SDL2.capture.mediaStreamNode !== undefined) { SDL2.capture.mediaStreamNode.disconnect(); } SDL2.capture = undefined; } else { if (SDL2.audio.scriptProcessorNode != undefined) { SDL2.audio.scriptProcessorNode.disconnect(); } if (SDL2.audio.silenceTimer !== undefined) { clearInterval(SDL2.audio.silenceTimer); } SDL2.audio = undefined; } if ((SDL2.audioContext !== undefined) && (SDL2.audio === undefined) && (SDL2.capture === undefined)) { SDL2.audioContext.close(); SDL2.audioContext = undefined; } },  
 574544: ($0, $1, $2) => { var w = $0; var h = $1; var pixels = $2; if (!Module['SDL2']) Module['SDL2'] = {}; var SDL2 = Module['SDL2']; if (SDL2.ctxCanvas !== Module['canvas']) { SDL2.ctx = Module['createContext'](Module['canvas'], false, true); SDL2.ctxCanvas = Module['canvas']; } if (SDL2.w !== w || SDL2.h !== h || SDL2.imageCtx !== SDL2.ctx) { SDL2.image = SDL2.ctx.createImageData(w, h); SDL2.w = w; SDL2.h = h; SDL2.imageCtx = SDL2.ctx; } var data = SDL2.image.data; var src = pixels / 4; var dst = 0; var num; if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) { num = data.length; while (dst < num) { var val = HEAP32[src]; data[dst ] = val & 0xff; data[dst+1] = (val >> 8) & 0xff; data[dst+2] = (val >> 16) & 0xff; data[dst+3] = 0xff; src++; dst += 4; } } else { if (SDL2.data32Data !== data) { SDL2.data32 = new Int32Array(data.buffer); SDL2.data8 = new Uint8Array(data.buffer); SDL2.data32Data = data; } var data32 = SDL2.data32; num = data32.length; data32.set(HEAP32.subarray(src, src + num)); var data8 = SDL2.data8; var i = 3; var j = i + 4*num; if (num % 8 == 0) { while (i < j) { data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; } } else { while (i < j) { data8[i] = 0xff; i = i + 4 | 0; } } } SDL2.ctx.putImageData(SDL2.image, 0, 0); },  
 576012: ($0, $1, $2, $3, $4) => { var w = $0; var h = $1; var hot_x = $2; var hot_y = $3; var pixels = $4; var canvas = document.createElement("canvas"); canvas.width = w; canvas.height = h; var ctx = canvas.getContext("2d"); var image = ctx.createImageData(w, h); var data = image.data; var src = pixels / 4; var dst = 0; var num; if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) { num = data.length; while (dst < num) { var val = HEAP32[src]; data[dst ] = val & 0xff; data[dst+1] = (val >> 8) & 0xff; data[dst+2] = (val >> 16) & 0xff; data[dst+3] = (val >> 24) & 0xff; src++; dst += 4; } } else { var data32 = new Int32Array(data.buffer); num = data32.length; data32.set(HEAP32.subarray(src, src + num)); } ctx.putImageData(image, 0, 0); var url = hot_x === 0 && hot_y === 0 ? "url(" + canvas.toDataURL() + "), auto" : "url(" + canvas.toDataURL() + ") " + hot_x + " " + hot_y + ", auto"; var urlBuf = _malloc(url.length + 1); stringToUTF8(url, urlBuf, url.length + 1); return urlBuf; },  
 577000: ($0) => { if (Module['canvas']) { Module['canvas'].style['cursor'] = UTF8ToString($0); } },  
 577083: () => { if (Module['canvas']) { Module['canvas'].style['cursor'] = 'none'; } },  
 577152: () => { return window.innerWidth; },  
 577182: () => { return window.innerHeight; },  
 577213: ($0, $1) => { alert(UTF8ToString($0) + "\n\n" + UTF8ToString($1)); }
};
function slog_js_log(level,c_str) { const str = UTF8ToString(c_str); switch (level) { case 0: console.error(str); break; case 1: console.error(str); break; case 2: console.warn(str); break; default: console.info(str); break; } }
var wasmImports = {
  /** @export */
  __syscall_dup3: ___syscall_dup3,
  /** @export */
  __syscall_faccessat: ___syscall_faccessat,
  /** @export */
  __syscall_fcntl64: ___syscall_fcntl64,
  /** @export */
  __syscall_fstat64: ___syscall_fstat64,
  /** @export */
  __syscall_getdents64: ___syscall_getdents64,
  /** @export */
  __syscall_ioctl: ___syscall_ioctl,
  /** @export */
  __syscall_lstat64: ___syscall_lstat64,
  /** @export */
  __syscall_mkdirat: ___syscall_mkdirat,
  /** @export */
  __syscall_newfstatat: ___syscall_newfstatat,
  /** @export */
  __syscall_openat: ___syscall_openat,
  /** @export */
  __syscall_readlinkat: ___syscall_readlinkat,
  /** @export */
  __syscall_renameat: ___syscall_renameat,
  /** @export */
  __syscall_rmdir: ___syscall_rmdir,
  /** @export */
  __syscall_stat64: ___syscall_stat64,
  /** @export */
  __syscall_unlinkat: ___syscall_unlinkat,
  /** @export */
  _abort_js: __abort_js,
  /** @export */
  _emscripten_system: __emscripten_system,
  /** @export */
  _emscripten_throw_longjmp: __emscripten_throw_longjmp,
  /** @export */
  _gmtime_js: __gmtime_js,
  /** @export */
  _localtime_js: __localtime_js,
  /** @export */
  _mktime_js: __mktime_js,
  /** @export */
  _tzset_js: __tzset_js,
  /** @export */
  clock_time_get: _clock_time_get,
  /** @export */
  eglBindAPI: _eglBindAPI,
  /** @export */
  eglChooseConfig: _eglChooseConfig,
  /** @export */
  eglCreateContext: _eglCreateContext,
  /** @export */
  eglCreateWindowSurface: _eglCreateWindowSurface,
  /** @export */
  eglDestroyContext: _eglDestroyContext,
  /** @export */
  eglDestroySurface: _eglDestroySurface,
  /** @export */
  eglGetConfigAttrib: _eglGetConfigAttrib,
  /** @export */
  eglGetDisplay: _eglGetDisplay,
  /** @export */
  eglGetError: _eglGetError,
  /** @export */
  eglInitialize: _eglInitialize,
  /** @export */
  eglMakeCurrent: _eglMakeCurrent,
  /** @export */
  eglQueryString: _eglQueryString,
  /** @export */
  eglSwapBuffers: _eglSwapBuffers,
  /** @export */
  eglSwapInterval: _eglSwapInterval,
  /** @export */
  eglTerminate: _eglTerminate,
  /** @export */
  eglWaitGL: _eglWaitGL,
  /** @export */
  eglWaitNative: _eglWaitNative,
  /** @export */
  emscripten_asm_const_int: _emscripten_asm_const_int,
  /** @export */
  emscripten_asm_const_int_sync_on_main_thread: _emscripten_asm_const_int_sync_on_main_thread,
  /** @export */
  emscripten_asm_const_ptr_sync_on_main_thread: _emscripten_asm_const_ptr_sync_on_main_thread,
  /** @export */
  emscripten_date_now: _emscripten_date_now,
  /** @export */
  emscripten_enter_soft_fullscreen: _emscripten_enter_soft_fullscreen,
  /** @export */
  emscripten_err: _emscripten_err,
  /** @export */
  emscripten_exit_fullscreen: _emscripten_exit_fullscreen,
  /** @export */
  emscripten_exit_pointerlock: _emscripten_exit_pointerlock,
  /** @export */
  emscripten_exit_soft_fullscreen: _emscripten_exit_soft_fullscreen,
  /** @export */
  emscripten_get_device_pixel_ratio: _emscripten_get_device_pixel_ratio,
  /** @export */
  emscripten_get_element_css_size: _emscripten_get_element_css_size,
  /** @export */
  emscripten_get_gamepad_status: _emscripten_get_gamepad_status,
  /** @export */
  emscripten_get_now: _emscripten_get_now,
  /** @export */
  emscripten_get_num_gamepads: _emscripten_get_num_gamepads,
  /** @export */
  emscripten_get_screen_size: _emscripten_get_screen_size,
  /** @export */
  emscripten_glActiveTexture: _emscripten_glActiveTexture,
  /** @export */
  emscripten_glAttachShader: _emscripten_glAttachShader,
  /** @export */
  emscripten_glBeginQuery: _emscripten_glBeginQuery,
  /** @export */
  emscripten_glBeginQueryEXT: _emscripten_glBeginQueryEXT,
  /** @export */
  emscripten_glBeginTransformFeedback: _emscripten_glBeginTransformFeedback,
  /** @export */
  emscripten_glBindAttribLocation: _emscripten_glBindAttribLocation,
  /** @export */
  emscripten_glBindBuffer: _emscripten_glBindBuffer,
  /** @export */
  emscripten_glBindBufferBase: _emscripten_glBindBufferBase,
  /** @export */
  emscripten_glBindBufferRange: _emscripten_glBindBufferRange,
  /** @export */
  emscripten_glBindFramebuffer: _emscripten_glBindFramebuffer,
  /** @export */
  emscripten_glBindRenderbuffer: _emscripten_glBindRenderbuffer,
  /** @export */
  emscripten_glBindSampler: _emscripten_glBindSampler,
  /** @export */
  emscripten_glBindTexture: _emscripten_glBindTexture,
  /** @export */
  emscripten_glBindTransformFeedback: _emscripten_glBindTransformFeedback,
  /** @export */
  emscripten_glBindVertexArray: _emscripten_glBindVertexArray,
  /** @export */
  emscripten_glBindVertexArrayOES: _emscripten_glBindVertexArrayOES,
  /** @export */
  emscripten_glBlendColor: _emscripten_glBlendColor,
  /** @export */
  emscripten_glBlendEquation: _emscripten_glBlendEquation,
  /** @export */
  emscripten_glBlendEquationSeparate: _emscripten_glBlendEquationSeparate,
  /** @export */
  emscripten_glBlendFunc: _emscripten_glBlendFunc,
  /** @export */
  emscripten_glBlendFuncSeparate: _emscripten_glBlendFuncSeparate,
  /** @export */
  emscripten_glBlitFramebuffer: _emscripten_glBlitFramebuffer,
  /** @export */
  emscripten_glBufferData: _emscripten_glBufferData,
  /** @export */
  emscripten_glBufferSubData: _emscripten_glBufferSubData,
  /** @export */
  emscripten_glCheckFramebufferStatus: _emscripten_glCheckFramebufferStatus,
  /** @export */
  emscripten_glClear: _emscripten_glClear,
  /** @export */
  emscripten_glClearBufferfi: _emscripten_glClearBufferfi,
  /** @export */
  emscripten_glClearBufferfv: _emscripten_glClearBufferfv,
  /** @export */
  emscripten_glClearBufferiv: _emscripten_glClearBufferiv,
  /** @export */
  emscripten_glClearBufferuiv: _emscripten_glClearBufferuiv,
  /** @export */
  emscripten_glClearColor: _emscripten_glClearColor,
  /** @export */
  emscripten_glClearDepthf: _emscripten_glClearDepthf,
  /** @export */
  emscripten_glClearStencil: _emscripten_glClearStencil,
  /** @export */
  emscripten_glClientWaitSync: _emscripten_glClientWaitSync,
  /** @export */
  emscripten_glClipControlEXT: _emscripten_glClipControlEXT,
  /** @export */
  emscripten_glColorMask: _emscripten_glColorMask,
  /** @export */
  emscripten_glCompileShader: _emscripten_glCompileShader,
  /** @export */
  emscripten_glCompressedTexImage2D: _emscripten_glCompressedTexImage2D,
  /** @export */
  emscripten_glCompressedTexImage3D: _emscripten_glCompressedTexImage3D,
  /** @export */
  emscripten_glCompressedTexSubImage2D: _emscripten_glCompressedTexSubImage2D,
  /** @export */
  emscripten_glCompressedTexSubImage3D: _emscripten_glCompressedTexSubImage3D,
  /** @export */
  emscripten_glCopyBufferSubData: _emscripten_glCopyBufferSubData,
  /** @export */
  emscripten_glCopyTexImage2D: _emscripten_glCopyTexImage2D,
  /** @export */
  emscripten_glCopyTexSubImage2D: _emscripten_glCopyTexSubImage2D,
  /** @export */
  emscripten_glCopyTexSubImage3D: _emscripten_glCopyTexSubImage3D,
  /** @export */
  emscripten_glCreateProgram: _emscripten_glCreateProgram,
  /** @export */
  emscripten_glCreateShader: _emscripten_glCreateShader,
  /** @export */
  emscripten_glCullFace: _emscripten_glCullFace,
  /** @export */
  emscripten_glDeleteBuffers: _emscripten_glDeleteBuffers,
  /** @export */
  emscripten_glDeleteFramebuffers: _emscripten_glDeleteFramebuffers,
  /** @export */
  emscripten_glDeleteProgram: _emscripten_glDeleteProgram,
  /** @export */
  emscripten_glDeleteQueries: _emscripten_glDeleteQueries,
  /** @export */
  emscripten_glDeleteQueriesEXT: _emscripten_glDeleteQueriesEXT,
  /** @export */
  emscripten_glDeleteRenderbuffers: _emscripten_glDeleteRenderbuffers,
  /** @export */
  emscripten_glDeleteSamplers: _emscripten_glDeleteSamplers,
  /** @export */
  emscripten_glDeleteShader: _emscripten_glDeleteShader,
  /** @export */
  emscripten_glDeleteSync: _emscripten_glDeleteSync,
  /** @export */
  emscripten_glDeleteTextures: _emscripten_glDeleteTextures,
  /** @export */
  emscripten_glDeleteTransformFeedbacks: _emscripten_glDeleteTransformFeedbacks,
  /** @export */
  emscripten_glDeleteVertexArrays: _emscripten_glDeleteVertexArrays,
  /** @export */
  emscripten_glDeleteVertexArraysOES: _emscripten_glDeleteVertexArraysOES,
  /** @export */
  emscripten_glDepthFunc: _emscripten_glDepthFunc,
  /** @export */
  emscripten_glDepthMask: _emscripten_glDepthMask,
  /** @export */
  emscripten_glDepthRangef: _emscripten_glDepthRangef,
  /** @export */
  emscripten_glDetachShader: _emscripten_glDetachShader,
  /** @export */
  emscripten_glDisable: _emscripten_glDisable,
  /** @export */
  emscripten_glDisableVertexAttribArray: _emscripten_glDisableVertexAttribArray,
  /** @export */
  emscripten_glDrawArrays: _emscripten_glDrawArrays,
  /** @export */
  emscripten_glDrawArraysInstanced: _emscripten_glDrawArraysInstanced,
  /** @export */
  emscripten_glDrawArraysInstancedANGLE: _emscripten_glDrawArraysInstancedANGLE,
  /** @export */
  emscripten_glDrawArraysInstancedARB: _emscripten_glDrawArraysInstancedARB,
  /** @export */
  emscripten_glDrawArraysInstancedEXT: _emscripten_glDrawArraysInstancedEXT,
  /** @export */
  emscripten_glDrawArraysInstancedNV: _emscripten_glDrawArraysInstancedNV,
  /** @export */
  emscripten_glDrawBuffers: _emscripten_glDrawBuffers,
  /** @export */
  emscripten_glDrawBuffersEXT: _emscripten_glDrawBuffersEXT,
  /** @export */
  emscripten_glDrawBuffersWEBGL: _emscripten_glDrawBuffersWEBGL,
  /** @export */
  emscripten_glDrawElements: _emscripten_glDrawElements,
  /** @export */
  emscripten_glDrawElementsInstanced: _emscripten_glDrawElementsInstanced,
  /** @export */
  emscripten_glDrawElementsInstancedANGLE: _emscripten_glDrawElementsInstancedANGLE,
  /** @export */
  emscripten_glDrawElementsInstancedARB: _emscripten_glDrawElementsInstancedARB,
  /** @export */
  emscripten_glDrawElementsInstancedEXT: _emscripten_glDrawElementsInstancedEXT,
  /** @export */
  emscripten_glDrawElementsInstancedNV: _emscripten_glDrawElementsInstancedNV,
  /** @export */
  emscripten_glDrawRangeElements: _emscripten_glDrawRangeElements,
  /** @export */
  emscripten_glEnable: _emscripten_glEnable,
  /** @export */
  emscripten_glEnableVertexAttribArray: _emscripten_glEnableVertexAttribArray,
  /** @export */
  emscripten_glEndQuery: _emscripten_glEndQuery,
  /** @export */
  emscripten_glEndQueryEXT: _emscripten_glEndQueryEXT,
  /** @export */
  emscripten_glEndTransformFeedback: _emscripten_glEndTransformFeedback,
  /** @export */
  emscripten_glFenceSync: _emscripten_glFenceSync,
  /** @export */
  emscripten_glFinish: _emscripten_glFinish,
  /** @export */
  emscripten_glFlush: _emscripten_glFlush,
  /** @export */
  emscripten_glFramebufferRenderbuffer: _emscripten_glFramebufferRenderbuffer,
  /** @export */
  emscripten_glFramebufferTexture2D: _emscripten_glFramebufferTexture2D,
  /** @export */
  emscripten_glFramebufferTextureLayer: _emscripten_glFramebufferTextureLayer,
  /** @export */
  emscripten_glFrontFace: _emscripten_glFrontFace,
  /** @export */
  emscripten_glGenBuffers: _emscripten_glGenBuffers,
  /** @export */
  emscripten_glGenFramebuffers: _emscripten_glGenFramebuffers,
  /** @export */
  emscripten_glGenQueries: _emscripten_glGenQueries,
  /** @export */
  emscripten_glGenQueriesEXT: _emscripten_glGenQueriesEXT,
  /** @export */
  emscripten_glGenRenderbuffers: _emscripten_glGenRenderbuffers,
  /** @export */
  emscripten_glGenSamplers: _emscripten_glGenSamplers,
  /** @export */
  emscripten_glGenTextures: _emscripten_glGenTextures,
  /** @export */
  emscripten_glGenTransformFeedbacks: _emscripten_glGenTransformFeedbacks,
  /** @export */
  emscripten_glGenVertexArrays: _emscripten_glGenVertexArrays,
  /** @export */
  emscripten_glGenVertexArraysOES: _emscripten_glGenVertexArraysOES,
  /** @export */
  emscripten_glGenerateMipmap: _emscripten_glGenerateMipmap,
  /** @export */
  emscripten_glGetActiveAttrib: _emscripten_glGetActiveAttrib,
  /** @export */
  emscripten_glGetActiveUniform: _emscripten_glGetActiveUniform,
  /** @export */
  emscripten_glGetActiveUniformBlockName: _emscripten_glGetActiveUniformBlockName,
  /** @export */
  emscripten_glGetActiveUniformBlockiv: _emscripten_glGetActiveUniformBlockiv,
  /** @export */
  emscripten_glGetActiveUniformsiv: _emscripten_glGetActiveUniformsiv,
  /** @export */
  emscripten_glGetAttachedShaders: _emscripten_glGetAttachedShaders,
  /** @export */
  emscripten_glGetAttribLocation: _emscripten_glGetAttribLocation,
  /** @export */
  emscripten_glGetBooleanv: _emscripten_glGetBooleanv,
  /** @export */
  emscripten_glGetBufferParameteri64v: _emscripten_glGetBufferParameteri64v,
  /** @export */
  emscripten_glGetBufferParameteriv: _emscripten_glGetBufferParameteriv,
  /** @export */
  emscripten_glGetError: _emscripten_glGetError,
  /** @export */
  emscripten_glGetFloatv: _emscripten_glGetFloatv,
  /** @export */
  emscripten_glGetFragDataLocation: _emscripten_glGetFragDataLocation,
  /** @export */
  emscripten_glGetFramebufferAttachmentParameteriv: _emscripten_glGetFramebufferAttachmentParameteriv,
  /** @export */
  emscripten_glGetInteger64i_v: _emscripten_glGetInteger64i_v,
  /** @export */
  emscripten_glGetInteger64v: _emscripten_glGetInteger64v,
  /** @export */
  emscripten_glGetIntegeri_v: _emscripten_glGetIntegeri_v,
  /** @export */
  emscripten_glGetIntegerv: _emscripten_glGetIntegerv,
  /** @export */
  emscripten_glGetInternalformativ: _emscripten_glGetInternalformativ,
  /** @export */
  emscripten_glGetProgramBinary: _emscripten_glGetProgramBinary,
  /** @export */
  emscripten_glGetProgramInfoLog: _emscripten_glGetProgramInfoLog,
  /** @export */
  emscripten_glGetProgramiv: _emscripten_glGetProgramiv,
  /** @export */
  emscripten_glGetQueryObjecti64vEXT: _emscripten_glGetQueryObjecti64vEXT,
  /** @export */
  emscripten_glGetQueryObjectivEXT: _emscripten_glGetQueryObjectivEXT,
  /** @export */
  emscripten_glGetQueryObjectui64vEXT: _emscripten_glGetQueryObjectui64vEXT,
  /** @export */
  emscripten_glGetQueryObjectuiv: _emscripten_glGetQueryObjectuiv,
  /** @export */
  emscripten_glGetQueryObjectuivEXT: _emscripten_glGetQueryObjectuivEXT,
  /** @export */
  emscripten_glGetQueryiv: _emscripten_glGetQueryiv,
  /** @export */
  emscripten_glGetQueryivEXT: _emscripten_glGetQueryivEXT,
  /** @export */
  emscripten_glGetRenderbufferParameteriv: _emscripten_glGetRenderbufferParameteriv,
  /** @export */
  emscripten_glGetSamplerParameterfv: _emscripten_glGetSamplerParameterfv,
  /** @export */
  emscripten_glGetSamplerParameteriv: _emscripten_glGetSamplerParameteriv,
  /** @export */
  emscripten_glGetShaderInfoLog: _emscripten_glGetShaderInfoLog,
  /** @export */
  emscripten_glGetShaderPrecisionFormat: _emscripten_glGetShaderPrecisionFormat,
  /** @export */
  emscripten_glGetShaderSource: _emscripten_glGetShaderSource,
  /** @export */
  emscripten_glGetShaderiv: _emscripten_glGetShaderiv,
  /** @export */
  emscripten_glGetString: _emscripten_glGetString,
  /** @export */
  emscripten_glGetStringi: _emscripten_glGetStringi,
  /** @export */
  emscripten_glGetSynciv: _emscripten_glGetSynciv,
  /** @export */
  emscripten_glGetTexParameterfv: _emscripten_glGetTexParameterfv,
  /** @export */
  emscripten_glGetTexParameteriv: _emscripten_glGetTexParameteriv,
  /** @export */
  emscripten_glGetTransformFeedbackVarying: _emscripten_glGetTransformFeedbackVarying,
  /** @export */
  emscripten_glGetUniformBlockIndex: _emscripten_glGetUniformBlockIndex,
  /** @export */
  emscripten_glGetUniformIndices: _emscripten_glGetUniformIndices,
  /** @export */
  emscripten_glGetUniformLocation: _emscripten_glGetUniformLocation,
  /** @export */
  emscripten_glGetUniformfv: _emscripten_glGetUniformfv,
  /** @export */
  emscripten_glGetUniformiv: _emscripten_glGetUniformiv,
  /** @export */
  emscripten_glGetUniformuiv: _emscripten_glGetUniformuiv,
  /** @export */
  emscripten_glGetVertexAttribIiv: _emscripten_glGetVertexAttribIiv,
  /** @export */
  emscripten_glGetVertexAttribIuiv: _emscripten_glGetVertexAttribIuiv,
  /** @export */
  emscripten_glGetVertexAttribPointerv: _emscripten_glGetVertexAttribPointerv,
  /** @export */
  emscripten_glGetVertexAttribfv: _emscripten_glGetVertexAttribfv,
  /** @export */
  emscripten_glGetVertexAttribiv: _emscripten_glGetVertexAttribiv,
  /** @export */
  emscripten_glHint: _emscripten_glHint,
  /** @export */
  emscripten_glInvalidateFramebuffer: _emscripten_glInvalidateFramebuffer,
  /** @export */
  emscripten_glInvalidateSubFramebuffer: _emscripten_glInvalidateSubFramebuffer,
  /** @export */
  emscripten_glIsBuffer: _emscripten_glIsBuffer,
  /** @export */
  emscripten_glIsEnabled: _emscripten_glIsEnabled,
  /** @export */
  emscripten_glIsFramebuffer: _emscripten_glIsFramebuffer,
  /** @export */
  emscripten_glIsProgram: _emscripten_glIsProgram,
  /** @export */
  emscripten_glIsQuery: _emscripten_glIsQuery,
  /** @export */
  emscripten_glIsQueryEXT: _emscripten_glIsQueryEXT,
  /** @export */
  emscripten_glIsRenderbuffer: _emscripten_glIsRenderbuffer,
  /** @export */
  emscripten_glIsSampler: _emscripten_glIsSampler,
  /** @export */
  emscripten_glIsShader: _emscripten_glIsShader,
  /** @export */
  emscripten_glIsSync: _emscripten_glIsSync,
  /** @export */
  emscripten_glIsTexture: _emscripten_glIsTexture,
  /** @export */
  emscripten_glIsTransformFeedback: _emscripten_glIsTransformFeedback,
  /** @export */
  emscripten_glIsVertexArray: _emscripten_glIsVertexArray,
  /** @export */
  emscripten_glIsVertexArrayOES: _emscripten_glIsVertexArrayOES,
  /** @export */
  emscripten_glLineWidth: _emscripten_glLineWidth,
  /** @export */
  emscripten_glLinkProgram: _emscripten_glLinkProgram,
  /** @export */
  emscripten_glPauseTransformFeedback: _emscripten_glPauseTransformFeedback,
  /** @export */
  emscripten_glPixelStorei: _emscripten_glPixelStorei,
  /** @export */
  emscripten_glPolygonModeWEBGL: _emscripten_glPolygonModeWEBGL,
  /** @export */
  emscripten_glPolygonOffset: _emscripten_glPolygonOffset,
  /** @export */
  emscripten_glPolygonOffsetClampEXT: _emscripten_glPolygonOffsetClampEXT,
  /** @export */
  emscripten_glProgramBinary: _emscripten_glProgramBinary,
  /** @export */
  emscripten_glProgramParameteri: _emscripten_glProgramParameteri,
  /** @export */
  emscripten_glQueryCounterEXT: _emscripten_glQueryCounterEXT,
  /** @export */
  emscripten_glReadBuffer: _emscripten_glReadBuffer,
  /** @export */
  emscripten_glReadPixels: _emscripten_glReadPixels,
  /** @export */
  emscripten_glReleaseShaderCompiler: _emscripten_glReleaseShaderCompiler,
  /** @export */
  emscripten_glRenderbufferStorage: _emscripten_glRenderbufferStorage,
  /** @export */
  emscripten_glRenderbufferStorageMultisample: _emscripten_glRenderbufferStorageMultisample,
  /** @export */
  emscripten_glResumeTransformFeedback: _emscripten_glResumeTransformFeedback,
  /** @export */
  emscripten_glSampleCoverage: _emscripten_glSampleCoverage,
  /** @export */
  emscripten_glSamplerParameterf: _emscripten_glSamplerParameterf,
  /** @export */
  emscripten_glSamplerParameterfv: _emscripten_glSamplerParameterfv,
  /** @export */
  emscripten_glSamplerParameteri: _emscripten_glSamplerParameteri,
  /** @export */
  emscripten_glSamplerParameteriv: _emscripten_glSamplerParameteriv,
  /** @export */
  emscripten_glScissor: _emscripten_glScissor,
  /** @export */
  emscripten_glShaderBinary: _emscripten_glShaderBinary,
  /** @export */
  emscripten_glShaderSource: _emscripten_glShaderSource,
  /** @export */
  emscripten_glStencilFunc: _emscripten_glStencilFunc,
  /** @export */
  emscripten_glStencilFuncSeparate: _emscripten_glStencilFuncSeparate,
  /** @export */
  emscripten_glStencilMask: _emscripten_glStencilMask,
  /** @export */
  emscripten_glStencilMaskSeparate: _emscripten_glStencilMaskSeparate,
  /** @export */
  emscripten_glStencilOp: _emscripten_glStencilOp,
  /** @export */
  emscripten_glStencilOpSeparate: _emscripten_glStencilOpSeparate,
  /** @export */
  emscripten_glTexImage2D: _emscripten_glTexImage2D,
  /** @export */
  emscripten_glTexImage3D: _emscripten_glTexImage3D,
  /** @export */
  emscripten_glTexParameterf: _emscripten_glTexParameterf,
  /** @export */
  emscripten_glTexParameterfv: _emscripten_glTexParameterfv,
  /** @export */
  emscripten_glTexParameteri: _emscripten_glTexParameteri,
  /** @export */
  emscripten_glTexParameteriv: _emscripten_glTexParameteriv,
  /** @export */
  emscripten_glTexStorage2D: _emscripten_glTexStorage2D,
  /** @export */
  emscripten_glTexStorage3D: _emscripten_glTexStorage3D,
  /** @export */
  emscripten_glTexSubImage2D: _emscripten_glTexSubImage2D,
  /** @export */
  emscripten_glTexSubImage3D: _emscripten_glTexSubImage3D,
  /** @export */
  emscripten_glTransformFeedbackVaryings: _emscripten_glTransformFeedbackVaryings,
  /** @export */
  emscripten_glUniform1f: _emscripten_glUniform1f,
  /** @export */
  emscripten_glUniform1fv: _emscripten_glUniform1fv,
  /** @export */
  emscripten_glUniform1i: _emscripten_glUniform1i,
  /** @export */
  emscripten_glUniform1iv: _emscripten_glUniform1iv,
  /** @export */
  emscripten_glUniform1ui: _emscripten_glUniform1ui,
  /** @export */
  emscripten_glUniform1uiv: _emscripten_glUniform1uiv,
  /** @export */
  emscripten_glUniform2f: _emscripten_glUniform2f,
  /** @export */
  emscripten_glUniform2fv: _emscripten_glUniform2fv,
  /** @export */
  emscripten_glUniform2i: _emscripten_glUniform2i,
  /** @export */
  emscripten_glUniform2iv: _emscripten_glUniform2iv,
  /** @export */
  emscripten_glUniform2ui: _emscripten_glUniform2ui,
  /** @export */
  emscripten_glUniform2uiv: _emscripten_glUniform2uiv,
  /** @export */
  emscripten_glUniform3f: _emscripten_glUniform3f,
  /** @export */
  emscripten_glUniform3fv: _emscripten_glUniform3fv,
  /** @export */
  emscripten_glUniform3i: _emscripten_glUniform3i,
  /** @export */
  emscripten_glUniform3iv: _emscripten_glUniform3iv,
  /** @export */
  emscripten_glUniform3ui: _emscripten_glUniform3ui,
  /** @export */
  emscripten_glUniform3uiv: _emscripten_glUniform3uiv,
  /** @export */
  emscripten_glUniform4f: _emscripten_glUniform4f,
  /** @export */
  emscripten_glUniform4fv: _emscripten_glUniform4fv,
  /** @export */
  emscripten_glUniform4i: _emscripten_glUniform4i,
  /** @export */
  emscripten_glUniform4iv: _emscripten_glUniform4iv,
  /** @export */
  emscripten_glUniform4ui: _emscripten_glUniform4ui,
  /** @export */
  emscripten_glUniform4uiv: _emscripten_glUniform4uiv,
  /** @export */
  emscripten_glUniformBlockBinding: _emscripten_glUniformBlockBinding,
  /** @export */
  emscripten_glUniformMatrix2fv: _emscripten_glUniformMatrix2fv,
  /** @export */
  emscripten_glUniformMatrix2x3fv: _emscripten_glUniformMatrix2x3fv,
  /** @export */
  emscripten_glUniformMatrix2x4fv: _emscripten_glUniformMatrix2x4fv,
  /** @export */
  emscripten_glUniformMatrix3fv: _emscripten_glUniformMatrix3fv,
  /** @export */
  emscripten_glUniformMatrix3x2fv: _emscripten_glUniformMatrix3x2fv,
  /** @export */
  emscripten_glUniformMatrix3x4fv: _emscripten_glUniformMatrix3x4fv,
  /** @export */
  emscripten_glUniformMatrix4fv: _emscripten_glUniformMatrix4fv,
  /** @export */
  emscripten_glUniformMatrix4x2fv: _emscripten_glUniformMatrix4x2fv,
  /** @export */
  emscripten_glUniformMatrix4x3fv: _emscripten_glUniformMatrix4x3fv,
  /** @export */
  emscripten_glUseProgram: _emscripten_glUseProgram,
  /** @export */
  emscripten_glValidateProgram: _emscripten_glValidateProgram,
  /** @export */
  emscripten_glVertexAttrib1f: _emscripten_glVertexAttrib1f,
  /** @export */
  emscripten_glVertexAttrib1fv: _emscripten_glVertexAttrib1fv,
  /** @export */
  emscripten_glVertexAttrib2f: _emscripten_glVertexAttrib2f,
  /** @export */
  emscripten_glVertexAttrib2fv: _emscripten_glVertexAttrib2fv,
  /** @export */
  emscripten_glVertexAttrib3f: _emscripten_glVertexAttrib3f,
  /** @export */
  emscripten_glVertexAttrib3fv: _emscripten_glVertexAttrib3fv,
  /** @export */
  emscripten_glVertexAttrib4f: _emscripten_glVertexAttrib4f,
  /** @export */
  emscripten_glVertexAttrib4fv: _emscripten_glVertexAttrib4fv,
  /** @export */
  emscripten_glVertexAttribDivisor: _emscripten_glVertexAttribDivisor,
  /** @export */
  emscripten_glVertexAttribDivisorANGLE: _emscripten_glVertexAttribDivisorANGLE,
  /** @export */
  emscripten_glVertexAttribDivisorARB: _emscripten_glVertexAttribDivisorARB,
  /** @export */
  emscripten_glVertexAttribDivisorEXT: _emscripten_glVertexAttribDivisorEXT,
  /** @export */
  emscripten_glVertexAttribDivisorNV: _emscripten_glVertexAttribDivisorNV,
  /** @export */
  emscripten_glVertexAttribI4i: _emscripten_glVertexAttribI4i,
  /** @export */
  emscripten_glVertexAttribI4iv: _emscripten_glVertexAttribI4iv,
  /** @export */
  emscripten_glVertexAttribI4ui: _emscripten_glVertexAttribI4ui,
  /** @export */
  emscripten_glVertexAttribI4uiv: _emscripten_glVertexAttribI4uiv,
  /** @export */
  emscripten_glVertexAttribIPointer: _emscripten_glVertexAttribIPointer,
  /** @export */
  emscripten_glVertexAttribPointer: _emscripten_glVertexAttribPointer,
  /** @export */
  emscripten_glViewport: _emscripten_glViewport,
  /** @export */
  emscripten_glWaitSync: _emscripten_glWaitSync,
  /** @export */
  emscripten_has_asyncify: _emscripten_has_asyncify,
  /** @export */
  emscripten_request_fullscreen_strategy: _emscripten_request_fullscreen_strategy,
  /** @export */
  emscripten_request_pointerlock: _emscripten_request_pointerlock,
  /** @export */
  emscripten_resize_heap: _emscripten_resize_heap,
  /** @export */
  emscripten_sample_gamepad_data: _emscripten_sample_gamepad_data,
  /** @export */
  emscripten_set_beforeunload_callback_on_thread: _emscripten_set_beforeunload_callback_on_thread,
  /** @export */
  emscripten_set_blur_callback_on_thread: _emscripten_set_blur_callback_on_thread,
  /** @export */
  emscripten_set_canvas_element_size: _emscripten_set_canvas_element_size,
  /** @export */
  emscripten_set_element_css_size: _emscripten_set_element_css_size,
  /** @export */
  emscripten_set_focus_callback_on_thread: _emscripten_set_focus_callback_on_thread,
  /** @export */
  emscripten_set_fullscreenchange_callback_on_thread: _emscripten_set_fullscreenchange_callback_on_thread,
  /** @export */
  emscripten_set_gamepadconnected_callback_on_thread: _emscripten_set_gamepadconnected_callback_on_thread,
  /** @export */
  emscripten_set_gamepaddisconnected_callback_on_thread: _emscripten_set_gamepaddisconnected_callback_on_thread,
  /** @export */
  emscripten_set_keydown_callback_on_thread: _emscripten_set_keydown_callback_on_thread,
  /** @export */
  emscripten_set_keypress_callback_on_thread: _emscripten_set_keypress_callback_on_thread,
  /** @export */
  emscripten_set_keyup_callback_on_thread: _emscripten_set_keyup_callback_on_thread,
  /** @export */
  emscripten_set_main_loop: _emscripten_set_main_loop,
  /** @export */
  emscripten_set_mousedown_callback_on_thread: _emscripten_set_mousedown_callback_on_thread,
  /** @export */
  emscripten_set_mouseenter_callback_on_thread: _emscripten_set_mouseenter_callback_on_thread,
  /** @export */
  emscripten_set_mouseleave_callback_on_thread: _emscripten_set_mouseleave_callback_on_thread,
  /** @export */
  emscripten_set_mousemove_callback_on_thread: _emscripten_set_mousemove_callback_on_thread,
  /** @export */
  emscripten_set_mouseup_callback_on_thread: _emscripten_set_mouseup_callback_on_thread,
  /** @export */
  emscripten_set_pointerlockchange_callback_on_thread: _emscripten_set_pointerlockchange_callback_on_thread,
  /** @export */
  emscripten_set_resize_callback_on_thread: _emscripten_set_resize_callback_on_thread,
  /** @export */
  emscripten_set_touchcancel_callback_on_thread: _emscripten_set_touchcancel_callback_on_thread,
  /** @export */
  emscripten_set_touchend_callback_on_thread: _emscripten_set_touchend_callback_on_thread,
  /** @export */
  emscripten_set_touchmove_callback_on_thread: _emscripten_set_touchmove_callback_on_thread,
  /** @export */
  emscripten_set_touchstart_callback_on_thread: _emscripten_set_touchstart_callback_on_thread,
  /** @export */
  emscripten_set_visibilitychange_callback_on_thread: _emscripten_set_visibilitychange_callback_on_thread,
  /** @export */
  emscripten_set_wheel_callback_on_thread: _emscripten_set_wheel_callback_on_thread,
  /** @export */
  emscripten_set_window_title: _emscripten_set_window_title,
  /** @export */
  emscripten_sleep: _emscripten_sleep,
  /** @export */
  environ_get: _environ_get,
  /** @export */
  environ_sizes_get: _environ_sizes_get,
  /** @export */
  exit: _exit,
  /** @export */
  fd_close: _fd_close,
  /** @export */
  fd_read: _fd_read,
  /** @export */
  fd_seek: _fd_seek,
  /** @export */
  fd_write: _fd_write,
  /** @export */
  glActiveTexture: _glActiveTexture,
  /** @export */
  glAttachShader: _glAttachShader,
  /** @export */
  glBindBuffer: _glBindBuffer,
  /** @export */
  glBindBufferBase: _glBindBufferBase,
  /** @export */
  glBindFramebuffer: _glBindFramebuffer,
  /** @export */
  glBindRenderbuffer: _glBindRenderbuffer,
  /** @export */
  glBindSampler: _glBindSampler,
  /** @export */
  glBindTexture: _glBindTexture,
  /** @export */
  glBindVertexArray: _glBindVertexArray,
  /** @export */
  glBlendColor: _glBlendColor,
  /** @export */
  glBlendEquationSeparate: _glBlendEquationSeparate,
  /** @export */
  glBlendFuncSeparate: _glBlendFuncSeparate,
  /** @export */
  glBlitFramebuffer: _glBlitFramebuffer,
  /** @export */
  glBufferData: _glBufferData,
  /** @export */
  glBufferSubData: _glBufferSubData,
  /** @export */
  glClearBufferfi: _glClearBufferfi,
  /** @export */
  glClearBufferfv: _glClearBufferfv,
  /** @export */
  glClearBufferiv: _glClearBufferiv,
  /** @export */
  glColorMask: _glColorMask,
  /** @export */
  glCompileShader: _glCompileShader,
  /** @export */
  glCompressedTexImage2D: _glCompressedTexImage2D,
  /** @export */
  glCompressedTexImage3D: _glCompressedTexImage3D,
  /** @export */
  glCreateProgram: _glCreateProgram,
  /** @export */
  glCreateShader: _glCreateShader,
  /** @export */
  glCullFace: _glCullFace,
  /** @export */
  glDeleteBuffers: _glDeleteBuffers,
  /** @export */
  glDeleteFramebuffers: _glDeleteFramebuffers,
  /** @export */
  glDeleteProgram: _glDeleteProgram,
  /** @export */
  glDeleteRenderbuffers: _glDeleteRenderbuffers,
  /** @export */
  glDeleteSamplers: _glDeleteSamplers,
  /** @export */
  glDeleteShader: _glDeleteShader,
  /** @export */
  glDeleteTextures: _glDeleteTextures,
  /** @export */
  glDeleteVertexArrays: _glDeleteVertexArrays,
  /** @export */
  glDepthFunc: _glDepthFunc,
  /** @export */
  glDepthMask: _glDepthMask,
  /** @export */
  glDisable: _glDisable,
  /** @export */
  glDisableVertexAttribArray: _glDisableVertexAttribArray,
  /** @export */
  glDrawArrays: _glDrawArrays,
  /** @export */
  glDrawArraysInstanced: _glDrawArraysInstanced,
  /** @export */
  glDrawElements: _glDrawElements,
  /** @export */
  glDrawElementsInstanced: _glDrawElementsInstanced,
  /** @export */
  glEnable: _glEnable,
  /** @export */
  glEnableVertexAttribArray: _glEnableVertexAttribArray,
  /** @export */
  glFrontFace: _glFrontFace,
  /** @export */
  glGenBuffers: _glGenBuffers,
  /** @export */
  glGenRenderbuffers: _glGenRenderbuffers,
  /** @export */
  glGenSamplers: _glGenSamplers,
  /** @export */
  glGenTextures: _glGenTextures,
  /** @export */
  glGenVertexArrays: _glGenVertexArrays,
  /** @export */
  glGetAttribLocation: _glGetAttribLocation,
  /** @export */
  glGetIntegerv: _glGetIntegerv,
  /** @export */
  glGetProgramInfoLog: _glGetProgramInfoLog,
  /** @export */
  glGetProgramiv: _glGetProgramiv,
  /** @export */
  glGetShaderInfoLog: _glGetShaderInfoLog,
  /** @export */
  glGetShaderiv: _glGetShaderiv,
  /** @export */
  glGetStringi: _glGetStringi,
  /** @export */
  glGetUniformLocation: _glGetUniformLocation,
  /** @export */
  glInvalidateFramebuffer: _glInvalidateFramebuffer,
  /** @export */
  glLinkProgram: _glLinkProgram,
  /** @export */
  glPixelStorei: _glPixelStorei,
  /** @export */
  glPolygonOffset: _glPolygonOffset,
  /** @export */
  glReadBuffer: _glReadBuffer,
  /** @export */
  glReadPixels: _glReadPixels,
  /** @export */
  glRenderbufferStorageMultisample: _glRenderbufferStorageMultisample,
  /** @export */
  glSamplerParameterf: _glSamplerParameterf,
  /** @export */
  glSamplerParameteri: _glSamplerParameteri,
  /** @export */
  glScissor: _glScissor,
  /** @export */
  glShaderSource: _glShaderSource,
  /** @export */
  glStencilFunc: _glStencilFunc,
  /** @export */
  glStencilFuncSeparate: _glStencilFuncSeparate,
  /** @export */
  glStencilMask: _glStencilMask,
  /** @export */
  glStencilOp: _glStencilOp,
  /** @export */
  glStencilOpSeparate: _glStencilOpSeparate,
  /** @export */
  glTexImage2D: _glTexImage2D,
  /** @export */
  glTexImage3D: _glTexImage3D,
  /** @export */
  glTexParameteri: _glTexParameteri,
  /** @export */
  glTexStorage2D: _glTexStorage2D,
  /** @export */
  glTexStorage3D: _glTexStorage3D,
  /** @export */
  glTexSubImage2D: _glTexSubImage2D,
  /** @export */
  glTexSubImage3D: _glTexSubImage3D,
  /** @export */
  glUniform1fv: _glUniform1fv,
  /** @export */
  glUniform1i: _glUniform1i,
  /** @export */
  glUniform1iv: _glUniform1iv,
  /** @export */
  glUniform2fv: _glUniform2fv,
  /** @export */
  glUniform2iv: _glUniform2iv,
  /** @export */
  glUniform3fv: _glUniform3fv,
  /** @export */
  glUniform3iv: _glUniform3iv,
  /** @export */
  glUniform4fv: _glUniform4fv,
  /** @export */
  glUniform4iv: _glUniform4iv,
  /** @export */
  glUniformMatrix4fv: _glUniformMatrix4fv,
  /** @export */
  glUseProgram: _glUseProgram,
  /** @export */
  glVertexAttribDivisor: _glVertexAttribDivisor,
  /** @export */
  glVertexAttribIPointer: _glVertexAttribIPointer,
  /** @export */
  glVertexAttribPointer: _glVertexAttribPointer,
  /** @export */
  glViewport: _glViewport,
  /** @export */
  invoke_vii,
  /** @export */
  random_get: _random_get,
  /** @export */
  slog_js_log
};
var wasmExports = await createWasm();
var ___wasm_call_ctors = wasmExports['__wasm_call_ctors']
var __ZdaPv = Module['__ZdaPv'] = wasmExports['_ZdaPv']
var __ZdlPvm = Module['__ZdlPvm'] = wasmExports['_ZdlPvm']
var __ZdaPvm = Module['__ZdaPvm'] = wasmExports['_ZdaPvm']
var _malloc = wasmExports['malloc']
var _free = wasmExports['free']
var _calloc = Module['_calloc'] = wasmExports['calloc']
var _realloc = Module['_realloc'] = wasmExports['realloc']
var _WebSetFullscreen = Module['_WebSetFullscreen'] = wasmExports['WebSetFullscreen']
var _WebOpenGameMenu = Module['_WebOpenGameMenu'] = wasmExports['WebOpenGameMenu']
var _WebSyncScreenSize = Module['_WebSyncScreenSize'] = wasmExports['WebSyncScreenSize']
var _WebMain = Module['_WebMain'] = wasmExports['WebMain']
var _main = Module['_main'] = wasmExports['__main_argc_argv']
var _ma_device__on_notification_unlocked = Module['_ma_device__on_notification_unlocked'] = wasmExports['ma_device__on_notification_unlocked']
var _ma_malloc_emscripten = Module['_ma_malloc_emscripten'] = wasmExports['ma_malloc_emscripten']
var _ma_free_emscripten = Module['_ma_free_emscripten'] = wasmExports['ma_free_emscripten']
var _ma_device_process_pcm_frames_capture__webaudio = Module['_ma_device_process_pcm_frames_capture__webaudio'] = wasmExports['ma_device_process_pcm_frames_capture__webaudio']
var _ma_device_process_pcm_frames_playback__webaudio = Module['_ma_device_process_pcm_frames_playback__webaudio'] = wasmExports['ma_device_process_pcm_frames_playback__webaudio']
var ___libc_free = Module['___libc_free'] = wasmExports['__libc_free']
var ___libc_malloc = Module['___libc_malloc'] = wasmExports['__libc_malloc']
var _emscripten_builtin_malloc = Module['_emscripten_builtin_malloc'] = wasmExports['emscripten_builtin_malloc']
var _strndup = Module['_strndup'] = wasmExports['strndup']
var __ZdlPv = Module['__ZdlPv'] = wasmExports['_ZdlPv']
var __Znaj = Module['__Znaj'] = wasmExports['_Znaj']
var __ZnajSt11align_val_t = Module['__ZnajSt11align_val_t'] = wasmExports['_ZnajSt11align_val_t']
var __Znwj = Module['__Znwj'] = wasmExports['_Znwj']
var __ZnwjSt11align_val_t = Module['__ZnwjSt11align_val_t'] = wasmExports['_ZnwjSt11align_val_t']
var ___libc_calloc = Module['___libc_calloc'] = wasmExports['__libc_calloc']
var ___libc_realloc = Module['___libc_realloc'] = wasmExports['__libc_realloc']
var _emscripten_builtin_calloc = Module['_emscripten_builtin_calloc'] = wasmExports['emscripten_builtin_calloc']
var _emscripten_builtin_free = Module['_emscripten_builtin_free'] = wasmExports['emscripten_builtin_free']
var _emscripten_builtin_realloc = Module['_emscripten_builtin_realloc'] = wasmExports['emscripten_builtin_realloc']
var _malloc_size = Module['_malloc_size'] = wasmExports['malloc_size']
var _malloc_usable_size = Module['_malloc_usable_size'] = wasmExports['malloc_usable_size']
var _reallocf = Module['_reallocf'] = wasmExports['reallocf']
var _setThrew = wasmExports['setThrew']
var __emscripten_stack_restore = wasmExports['_emscripten_stack_restore']
var __emscripten_stack_alloc = wasmExports['_emscripten_stack_alloc']
var _emscripten_stack_get_current = wasmExports['emscripten_stack_get_current']
var dynCall_viii = Module['dynCall_viii'] = wasmExports['dynCall_viii']
var dynCall_vi = Module['dynCall_vi'] = wasmExports['dynCall_vi']
var dynCall_iii = Module['dynCall_iii'] = wasmExports['dynCall_iii']
var dynCall_ii = Module['dynCall_ii'] = wasmExports['dynCall_ii']
var dynCall_vii = Module['dynCall_vii'] = wasmExports['dynCall_vii']
var dynCall_fi = Module['dynCall_fi'] = wasmExports['dynCall_fi']
var dynCall_fii = Module['dynCall_fii'] = wasmExports['dynCall_fii']
var dynCall_v = Module['dynCall_v'] = wasmExports['dynCall_v']
var dynCall_viifff = Module['dynCall_viifff'] = wasmExports['dynCall_viifff']
var dynCall_viifffii = Module['dynCall_viifffii'] = wasmExports['dynCall_viifffii']
var dynCall_viiiifiiiii = Module['dynCall_viiiifiiiii'] = wasmExports['dynCall_viiiifiiiii']
var dynCall_viiiiiii = Module['dynCall_viiiiiii'] = wasmExports['dynCall_viiiiiii']
var dynCall_iiiiiiiii = Module['dynCall_iiiiiiiii'] = wasmExports['dynCall_iiiiiiiii']
var dynCall_iiiiiii = Module['dynCall_iiiiiii'] = wasmExports['dynCall_iiiiiii']
var dynCall_iiiji = Module['dynCall_iiiji'] = wasmExports['dynCall_iiiji']
var dynCall_iij = Module['dynCall_iij'] = wasmExports['dynCall_iij']
var dynCall_iiiii = Module['dynCall_iiiii'] = wasmExports['dynCall_iiiii']
var dynCall_iiji = Module['dynCall_iiji'] = wasmExports['dynCall_iiji']
var dynCall_i = Module['dynCall_i'] = wasmExports['dynCall_i']
var dynCall_iiii = Module['dynCall_iiii'] = wasmExports['dynCall_iiii']
var dynCall_viiiii = Module['dynCall_viiiii'] = wasmExports['dynCall_viiiii']
var dynCall_viif = Module['dynCall_viif'] = wasmExports['dynCall_viif']
var dynCall_viff = Module['dynCall_viff'] = wasmExports['dynCall_viff']
var dynCall_vif = Module['dynCall_vif'] = wasmExports['dynCall_vif']
var dynCall_viiiiiiiiiii = Module['dynCall_viiiiiiiiiii'] = wasmExports['dynCall_viiiiiiiiiii']
var dynCall_viiiiiiii = Module['dynCall_viiiiiiii'] = wasmExports['dynCall_viiiiiiii']
var dynCall_viiii = Module['dynCall_viiii'] = wasmExports['dynCall_viiii']
var dynCall_viiffi = Module['dynCall_viiffi'] = wasmExports['dynCall_viiffi']
var dynCall_iiiiii = Module['dynCall_iiiiii'] = wasmExports['dynCall_iiiiii']
var dynCall_iiid = Module['dynCall_iiid'] = wasmExports['dynCall_iiid']
var dynCall_jii = Module['dynCall_jii'] = wasmExports['dynCall_jii']
var dynCall_iijii = Module['dynCall_iijii'] = wasmExports['dynCall_iijii']
var dynCall_viiiiii = Module['dynCall_viiiiii'] = wasmExports['dynCall_viiiiii']
var dynCall_diii = Module['dynCall_diii'] = wasmExports['dynCall_diii']
var dynCall_viiid = Module['dynCall_viiid'] = wasmExports['dynCall_viiid']
var dynCall_viiiddd = Module['dynCall_viiiddd'] = wasmExports['dynCall_viiiddd']
var dynCall_vid = Module['dynCall_vid'] = wasmExports['dynCall_vid']
var dynCall_jiji = Module['dynCall_jiji'] = wasmExports['dynCall_jiji']
var dynCall_ji = Module['dynCall_ji'] = wasmExports['dynCall_ji']
var dynCall_vffff = Module['dynCall_vffff'] = wasmExports['dynCall_vffff']
var dynCall_vf = Module['dynCall_vf'] = wasmExports['dynCall_vf']
var dynCall_viiiiiiiii = Module['dynCall_viiiiiiiii'] = wasmExports['dynCall_viiiiiiiii']
var dynCall_vff = Module['dynCall_vff'] = wasmExports['dynCall_vff']
var dynCall_vfi = Module['dynCall_vfi'] = wasmExports['dynCall_vfi']
var dynCall_vifff = Module['dynCall_vifff'] = wasmExports['dynCall_vifff']
var dynCall_viffff = Module['dynCall_viffff'] = wasmExports['dynCall_viffff']
var dynCall_vfff = Module['dynCall_vfff'] = wasmExports['dynCall_vfff']
var dynCall_viiiiiiiiii = Module['dynCall_viiiiiiiiii'] = wasmExports['dynCall_viiiiiiiiii']
var dynCall_viifi = Module['dynCall_viifi'] = wasmExports['dynCall_viifi']
var dynCall_iidiiii = Module['dynCall_iidiiii'] = wasmExports['dynCall_iidiiii']
var _asyncify_start_unwind = wasmExports['asyncify_start_unwind']
var _asyncify_stop_unwind = wasmExports['asyncify_stop_unwind']
var _asyncify_start_rewind = wasmExports['asyncify_start_rewind']
var _asyncify_stop_rewind = wasmExports['asyncify_stop_rewind']

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    dynCall_vii(index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}


// include: postamble.js
// === Auto-generated postamble setup entry stuff ===

function callMain(args = []) {

  var entryFunction = _main;

  args.unshift(thisProgram);

  var argc = args.length;
  var argv = stackAlloc((argc + 1) * 4);
  var argv_ptr = argv;
  args.forEach((arg) => {
    HEAPU32[((argv_ptr)>>2)] = stringToUTF8OnStack(arg);
    argv_ptr += 4;
  });
  HEAPU32[((argv_ptr)>>2)] = 0;

  try {

    var ret = entryFunction(argc, argv);

    // if we're not running an evented main loop, it's time to exit
    exitJS(ret, /* implicit = */ true);
    return ret;
  } catch (e) {
    return handleException(e);
  }
}

function run(args = arguments_) {

  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    readyPromiseResolve(Module);
    Module['onRuntimeInitialized']?.();

    var noInitialRun = Module['noInitialRun'] || false;
    if (!noInitialRun) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(() => {
      setTimeout(() => Module['setStatus'](''), 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
}

function preInit() {
  if (Module['preInit']) {
    if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
    while (Module['preInit'].length > 0) {
      Module['preInit'].shift()();
    }
  }
}

preInit();
run();

// end include: postamble.js

// include: postamble_modularize.js
// In MODULARIZE mode we wrap the generated code in a factory function
// and return either the Module itself, or a promise of the module.
//
// We assign to the `moduleRtn` global here and configure closure to see
// this as and extern so it won't get minified.

moduleRtn = readyPromise;

// end include: postamble_modularize.js



  return moduleRtn;
}
);
})();
if (typeof exports === 'object' && typeof module === 'object') {
  module.exports = createEdgeModule;
  // This default export looks redundant, but it allows TS to import this
  // commonjs style module.
  module.exports.default = createEdgeModule;
} else if (typeof define === 'function' && define['amd'])
  define([], () => createEdgeModule);
