var createEdgeModule = (() => {
  var _scriptName = typeof document != 'undefined' ? document.currentScript?.src : undefined;
  return (
async function(moduleArg = {}) {
  var moduleRtn;

// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(moduleArg) => Promise<Module>
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = moduleArg;

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
var readyPromise = new Promise((resolve, reject) => {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// include: /home/dasho/Desktop/EDGE-classic/web/site/edge-classic-data.js

  var Module = typeof Module != 'undefined' ? Module : {};

  Module['expectedDataFileDownloads'] ??= 0;
  Module['expectedDataFileDownloads']++;
  (() => {
    // Do not attempt to redownload the virtual filesystem data when in a pthread or a Wasm Worker context.
    var isPthread = typeof ENVIRONMENT_IS_PTHREAD != 'undefined' && ENVIRONMENT_IS_PTHREAD;
    var isWasmWorker = typeof ENVIRONMENT_IS_WASM_WORKER != 'undefined' && ENVIRONMENT_IS_WASM_WORKER;
    if (isPthread || isWasmWorker) return;
    function loadPackage(metadata) {

      var PACKAGE_PATH = '';
      if (typeof window === 'object') {
        PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/')) + '/');
      } else if (typeof process === 'undefined' && typeof location !== 'undefined') {
        // web worker
        PACKAGE_PATH = encodeURIComponent(location.pathname.substring(0, location.pathname.lastIndexOf('/')) + '/');
      }
      var PACKAGE_NAME = '/home/dasho/Desktop/EDGE-classic/web/site/edge-classic.data';
      var REMOTE_PACKAGE_BASE = 'edge-classic.data';
      var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
var REMOTE_PACKAGE_SIZE = metadata['remote_package_size'];

      function fetchRemotePackage(packageName, packageSize, callback, errback) {
        
        Module['dataFileDownloads'] ??= {};
        fetch(packageName)
          .catch((cause) => Promise.reject(new Error(`Network Error: ${packageName}`, {cause}))) // If fetch fails, rewrite the error to include the failing URL & the cause.
          .then((response) => {
            if (!response.ok) {
              return Promise.reject(new Error(`${response.status}: ${response.url}`));
            }

            if (!response.body && response.arrayBuffer) { // If we're using the polyfill, readers won't be available...
              return response.arrayBuffer().then(callback);
            }

            const reader = response.body.getReader();
            const iterate = () => reader.read().then(handleChunk).catch((cause) => {
              return Promise.reject(new Error(`Unexpected error while handling : ${response.url} ${cause}`, {cause}));
            });

            const chunks = [];
            const headers = response.headers;
            const total = Number(headers.get('Content-Length') ?? packageSize);
            let loaded = 0;

            const handleChunk = ({done, value}) => {
              if (!done) {
                chunks.push(value);
                loaded += value.length;
                Module['dataFileDownloads'][packageName] = {loaded, total};

                let totalLoaded = 0;
                let totalSize = 0;

                for (const download of Object.values(Module['dataFileDownloads'])) {
                  totalLoaded += download.loaded;
                  totalSize += download.total;
                }

                Module['setStatus']?.(`Downloading data... (${totalLoaded}/${totalSize})`);
                return iterate();
              } else {
                const packageData = new Uint8Array(chunks.map((c) => c.length).reduce((a, b) => a + b, 0));
                let offset = 0;
                for (const chunk of chunks) {
                  packageData.set(chunk, offset);
                  offset += chunk.length;
                }
                callback(packageData.buffer);
              }
            };

            Module['setStatus']?.('Downloading data...');
            return iterate();
          });
      };

      function handleError(error) {
        console.error('package error:', error);
      };

    function runWithFS(Module) {

      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
Module['FS_createPath']("/", "crosshairs", true, true);
Module['FS_createPath']("/", "edge_base", true, true);
Module['FS_createPath']("/edge_base", "blasphemer", true, true);
Module['FS_createPath']("/edge_base/blasphemer", "graphics", true, true);
Module['FS_createPath']("/edge_base/blasphemer/graphics", "tome", true, true);
Module['FS_createPath']("/edge_base/blasphemer", "scripts", true, true);
Module['FS_createPath']("/edge_base/blasphemer/scripts", "lua", true, true);
Module['FS_createPath']("/edge_base", "chex1", true, true);
Module['FS_createPath']("/edge_base/chex1", "graphics", true, true);
Module['FS_createPath']("/edge_base/chex1/graphics", "chex_font", true, true);
Module['FS_createPath']("/edge_base/chex1", "scripts", true, true);
Module['FS_createPath']("/edge_base/chex1", "sprites", true, true);
Module['FS_createPath']("/edge_base", "chex3v", true, true);
Module['FS_createPath']("/edge_base/chex3v", "graphics", true, true);
Module['FS_createPath']("/edge_base/chex3v/graphics", "chex_font", true, true);
Module['FS_createPath']("/edge_base/chex3v", "scripts", true, true);
Module['FS_createPath']("/edge_base", "chex3vm", true, true);
Module['FS_createPath']("/edge_base/chex3vm", "graphics", true, true);
Module['FS_createPath']("/edge_base/chex3vm/graphics", "chex_font", true, true);
Module['FS_createPath']("/edge_base/chex3vm", "scripts", true, true);
Module['FS_createPath']("/edge_base", "doom", true, true);
Module['FS_createPath']("/edge_base/doom", "graphics", true, true);
Module['FS_createPath']("/edge_base/doom", "scripts", true, true);
Module['FS_createPath']("/edge_base/doom", "textures", true, true);
Module['FS_createPath']("/edge_base", "doom1", true, true);
Module['FS_createPath']("/edge_base/doom1", "graphics", true, true);
Module['FS_createPath']("/edge_base/doom1", "scripts", true, true);
Module['FS_createPath']("/edge_base/doom1", "textures", true, true);
Module['FS_createPath']("/edge_base", "doom2", true, true);
Module['FS_createPath']("/edge_base/doom2", "graphics", true, true);
Module['FS_createPath']("/edge_base/doom2", "scripts", true, true);
Module['FS_createPath']("/edge_base/doom2", "textures", true, true);
Module['FS_createPath']("/edge_base", "freedoom1", true, true);
Module['FS_createPath']("/edge_base/freedoom1", "graphics", true, true);
Module['FS_createPath']("/edge_base/freedoom1/graphics", "freedoom_font", true, true);
Module['FS_createPath']("/edge_base/freedoom1", "scripts", true, true);
Module['FS_createPath']("/edge_base", "freedoom2", true, true);
Module['FS_createPath']("/edge_base/freedoom2", "graphics", true, true);
Module['FS_createPath']("/edge_base/freedoom2/graphics", "freedoom_font", true, true);
Module['FS_createPath']("/edge_base/freedoom2", "scripts", true, true);
Module['FS_createPath']("/edge_base", "hacx", true, true);
Module['FS_createPath']("/edge_base/hacx", "graphics", true, true);
Module['FS_createPath']("/edge_base/hacx", "scripts", true, true);
Module['FS_createPath']("/edge_base/hacx", "sprites", true, true);
Module['FS_createPath']("/edge_base", "harmony", true, true);
Module['FS_createPath']("/edge_base/harmony", "graphics", true, true);
Module['FS_createPath']("/edge_base/harmony", "scripts", true, true);
Module['FS_createPath']("/edge_base/harmony/scripts", "lua", true, true);
Module['FS_createPath']("/edge_base/harmony", "sprites", true, true);
Module['FS_createPath']("/edge_base", "harmonyc", true, true);
Module['FS_createPath']("/edge_base/harmonyc", "graphics", true, true);
Module['FS_createPath']("/edge_base/harmonyc", "scripts", true, true);
Module['FS_createPath']("/edge_base/harmonyc/scripts", "lua", true, true);
Module['FS_createPath']("/edge_base", "heretic", true, true);
Module['FS_createPath']("/edge_base/heretic", "graphics", true, true);
Module['FS_createPath']("/edge_base/heretic/graphics", "skull", true, true);
Module['FS_createPath']("/edge_base/heretic/graphics", "tome", true, true);
Module['FS_createPath']("/edge_base/heretic/graphics", "wings", true, true);
Module['FS_createPath']("/edge_base/heretic", "scripts", true, true);
Module['FS_createPath']("/edge_base/heretic/scripts", "lua", true, true);
Module['FS_createPath']("/edge_base/heretic", "sprites", true, true);
Module['FS_createPath']("/edge_base", "plutonia", true, true);
Module['FS_createPath']("/edge_base/plutonia", "graphics", true, true);
Module['FS_createPath']("/edge_base/plutonia", "scripts", true, true);
Module['FS_createPath']("/edge_base/plutonia", "textures", true, true);
Module['FS_createPath']("/edge_base", "rekkr", true, true);
Module['FS_createPath']("/edge_base/rekkr", "graphics", true, true);
Module['FS_createPath']("/edge_base/rekkr", "scripts", true, true);
Module['FS_createPath']("/edge_base/rekkr", "sprites", true, true);
Module['FS_createPath']("/edge_base", "strife", true, true);
Module['FS_createPath']("/edge_base", "tnt", true, true);
Module['FS_createPath']("/edge_base/tnt", "graphics", true, true);
Module['FS_createPath']("/edge_base/tnt", "scripts", true, true);
Module['FS_createPath']("/edge_base/tnt", "textures", true, true);
Module['FS_createPath']("/", "edge_defs", true, true);
Module['FS_createPath']("/edge_defs", "colormaps", true, true);
Module['FS_createPath']("/edge_defs", "graphics", true, true);
Module['FS_createPath']("/edge_defs/graphics", "edge1_font", true, true);
Module['FS_createPath']("/edge_defs", "movies", true, true);
Module['FS_createPath']("/edge_defs", "scripts", true, true);
Module['FS_createPath']("/edge_defs/scripts", "lua", true, true);
Module['FS_createPath']("/edge_defs/scripts/lua", "core", true, true);
Module['FS_createPath']("/edge_defs", "sounds", true, true);
Module['FS_createPath']("/edge_defs", "sprites", true, true);
Module['FS_createPath']("/edge_defs/sprites", "mbf_dog", true, true);
Module['FS_createPath']("/edge_defs", "textures", true, true);
Module['FS_createPath']("/edge_defs", "ttf", true, true);
Module['FS_createPath']("/", "overlays", true, true);
Module['FS_createPath']("/", "soundfont", true, true);

        var PACKAGE_UUID = metadata['package_uuid'];
        var IDB_RO = "readonly";
        var IDB_RW = "readwrite";
        var DB_NAME = "EM_PRELOAD_CACHE";
        var DB_VERSION = 1;
        var METADATA_STORE_NAME = 'METADATA';
        var PACKAGE_STORE_NAME = 'PACKAGES';
        function openDatabase(callback, errback) {
          var indexedDB;
          if (typeof window === 'object') {
            indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
          } else if (typeof location !== 'undefined') {
            // worker
            indexedDB = self.indexedDB;
          } else {
            throw 'using IndexedDB to cache data can only be done on a web page or in a web worker';
          }
          try {
            var openRequest = indexedDB.open(DB_NAME, DB_VERSION);
          } catch (e) {
            return errback(e);
          }
          openRequest.onupgradeneeded = (event) => {
            var db = /** @type {IDBDatabase} */ (event.target.result);

            if (db.objectStoreNames.contains(PACKAGE_STORE_NAME)) {
              db.deleteObjectStore(PACKAGE_STORE_NAME);
            }
            var packages = db.createObjectStore(PACKAGE_STORE_NAME);

            if (db.objectStoreNames.contains(METADATA_STORE_NAME)) {
              db.deleteObjectStore(METADATA_STORE_NAME);
            }
            var metadata = db.createObjectStore(METADATA_STORE_NAME);
          };
          openRequest.onsuccess = (event) => {
            var db = /** @type {IDBDatabase} */ (event.target.result);
            callback(db);
          };
          openRequest.onerror = (error) => errback(error);
        };

        // This is needed as chromium has a limit on per-entry files in IndexedDB
        // https://cs.chromium.org/chromium/src/content/renderer/indexed_db/webidbdatabase_impl.cc?type=cs&sq=package:chromium&g=0&l=177
        // https://cs.chromium.org/chromium/src/out/Debug/gen/third_party/blink/public/mojom/indexeddb/indexeddb.mojom.h?type=cs&sq=package:chromium&g=0&l=60
        // We set the chunk size to 64MB to stay well-below the limit
        var CHUNK_SIZE = 64 * 1024 * 1024;

        function cacheRemotePackage(
          db,
          packageName,
          packageData,
          packageMeta,
          callback,
          errback
        ) {
          var transactionPackages = db.transaction([PACKAGE_STORE_NAME], IDB_RW);
          var packages = transactionPackages.objectStore(PACKAGE_STORE_NAME);
          var chunkSliceStart = 0;
          var nextChunkSliceStart = 0;
          var chunkCount = Math.ceil(packageData.byteLength / CHUNK_SIZE);
          var finishedChunks = 0;
          for (var chunkId = 0; chunkId < chunkCount; chunkId++) {
            nextChunkSliceStart += CHUNK_SIZE;
            var putPackageRequest = packages.put(
              packageData.slice(chunkSliceStart, nextChunkSliceStart),
              `package/${packageName}/${chunkId}`
            );
            chunkSliceStart = nextChunkSliceStart;
            putPackageRequest.onsuccess = (event) => {
              finishedChunks++;
              if (finishedChunks == chunkCount) {
                var transaction_metadata = db.transaction(
                  [METADATA_STORE_NAME],
                  IDB_RW
                );
                var metadata = transaction_metadata.objectStore(METADATA_STORE_NAME);
                var putMetadataRequest = metadata.put(
                  {
                    'uuid': packageMeta.uuid,
                    'chunkCount': chunkCount
                  },
                  `metadata/${packageName}`
                );
                putMetadataRequest.onsuccess = (event) =>  callback(packageData);
                putMetadataRequest.onerror = (error) => errback(error);
              }
            };
            putPackageRequest.onerror = (error) => errback(error);
          }
        }

        /* Check if there's a cached package, and if so whether it's the latest available */
        function checkCachedPackage(db, packageName, callback, errback) {
          var transaction = db.transaction([METADATA_STORE_NAME], IDB_RO);
          var metadata = transaction.objectStore(METADATA_STORE_NAME);
          var getRequest = metadata.get(`metadata/${packageName}`);
          getRequest.onsuccess = (event) => {
            var result = event.target.result;
            if (!result) {
              return callback(false, null);
            } else {
              return callback(PACKAGE_UUID === result['uuid'], result);
            }
          };
          getRequest.onerror = (error) => errback(error);
        }

        function fetchCachedPackage(db, packageName, metadata, callback, errback) {
          var transaction = db.transaction([PACKAGE_STORE_NAME], IDB_RO);
          var packages = transaction.objectStore(PACKAGE_STORE_NAME);

          var chunksDone = 0;
          var totalSize = 0;
          var chunkCount = metadata['chunkCount'];
          var chunks = new Array(chunkCount);

          for (var chunkId = 0; chunkId < chunkCount; chunkId++) {
            var getRequest = packages.get(`package/${packageName}/${chunkId}`);
            getRequest.onsuccess = (event) => {
              if (!event.target.result) {
                errback(new Error(`CachedPackageNotFound for: ${packageName}`));
                return;
              }
              // If there's only 1 chunk, there's nothing to concatenate it with so we can just return it now
              if (chunkCount == 1) {
                callback(event.target.result);
              } else {
                chunksDone++;
                totalSize += event.target.result.byteLength;
                chunks.push(event.target.result);
                if (chunksDone == chunkCount) {
                  if (chunksDone == 1) {
                    callback(event.target.result);
                  } else {
                    var tempTyped = new Uint8Array(totalSize);
                    var byteOffset = 0;
                    for (var chunkId in chunks) {
                      var buffer = chunks[chunkId];
                      tempTyped.set(new Uint8Array(buffer), byteOffset);
                      byteOffset += buffer.byteLength;
                      buffer = undefined;
                    }
                    chunks = undefined;
                    callback(tempTyped.buffer);
                    tempTyped = undefined;
                  }
                }
              }
            };
            getRequest.onerror = (error) => errback(error);
          }
        }

      function processPackageData(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file failed.');
        assert(arrayBuffer.constructor.name === ArrayBuffer.name, 'bad input to processPackageData');
        var byteArray = new Uint8Array(arrayBuffer);
        var curr;
        var compressedData = {"data":null,"cachedOffset":51534425,"cachedIndexes":[-1,-1],"cachedChunks":[null,null],"offsets":[0,1641,3123,4598,6082,7575,9057,10533,12016,13496,14972,16446,17922,19399,20880,22354,23846,25307,26785,28261,29745,31222,32717,34199,35677,37164,38649,39781,40340,40906,41609,41980,42578,42887,43420,43930,44396,44846,45440,45939,46344,46564,46870,47122,47372,47635,47908,48128,48444,48766,49011,49162,49300,49529,49669,49766,49856,50222,50718,51073,51342,51663,51907,52438,52889,53310,53548,53877,54323,54822,55268,55838,56027,56413,56961,57577,57900,58046,58338,58794,59114,59387,59691,60041,60297,60596,60906,60988,61073,61179,61447,61705,61939,62464,62979,63389,63689,63795,64139,64515,64809,65168,65643,66022,66313,66707,67197,67713,68161,68614,70666,72686,74734,76790,78821,80849,82903,84956,86778,88498,90222,91959,93657,95386,97108,98831,100552,102252,103959,105678,107397,109095,110793,112497,114174,115874,117611,119246,120917,122592,124286,126018,127737,129470,131200,132940,134664,136316,138053,139770,141507,143252,144978,146701,148406,150195,152243,154291,156339,158387,160435,162434,164168,165869,167555,169273,171021,172852,174625,176486,178136,179887,181674,183360,185110,186813,188504,190177,191769,193473,195151,196868,198544,200165,201860,203605,205295,206974,208700,210427,212198,213818,215475,217124,218859,220617,222352,224064,225798,227435,229191,230883,232596,233318,233765,234332,234973,236049,236874,237755,238612,239589,240610,241685,243128,244952,246822,248659,250533,252392,254263,255820,257298,258799,260254,261701,263143,264585,266027,267458,268899,270335,271811,273281,274744,276192,277663,279119,280594,282065,283531,285014,286480,287954,289377,290829,292302,293776,295247,296707,298186,299627,301082,302536,304005,305471,306940,308415,309893,311354,312815,314267,315737,317204,318650,320099,321555,323009,324455,325912,327393,328855,330329,331776,333250,334713,336160,337629,339090,340561,342035,343513,345000,346464,347942,349417,350876,352340,353803,355245,356683,358138,359597,361066,362533,363492,364086,364542,365081,365443,365774,366130,366517,366990,367516,368045,368473,369020,369547,369945,370404,370862,371336,371782,372230,372708,373139,373576,374159,374755,375238,375678,376288,376846,377202,377721,378358,378814,379407,380040,380506,380971,381321,381745,382129,382558,383034,383426,383847,384319,384708,385131,385439,385640,385891,386429,386922,387317,387680,388283,388724,389184,389738,390304,390925,391500,391997,392465,393012,393484,393987,394465,394936,395431,395828,396362,396737,397081,397411,397921,398404,398855,399366,399955,400586,401059,401552,402096,402467,402972,403487,404022,404360,404947,405545,406117,406717,407303,407884,408484,408975,409487,409947,410477,410938,411382,411826,412301,412865,413316,413852,414398,414895,415493,415947,416493,417028,417618,418231,418718,419209,419662,420121,420586,420965,421393,421736,422233,422684,423180,423649,424086,424492,424963,425441,425993,426606,427171,427658,428026,428445,428794,429358,429861,430484,430827,431036,431204,431310,431515,431880,432333,432599,432869,433176,433648,434057,434471,434885,435272,435703,436144,436492,436941,437489,438078,438478,439001,439518,439964,440377,440868,441377,441881,442417,443033,443632,444297,444921,445537,446116,446653,447140,447698,448270,448841,449258,449840,450380,450896,451414,451958,452481,452895,453412,453963,454462,454914,455414,455935,456450,456927,457507,458069,458481,458890,459332,459847,460479,461001,461486,461961,462427,462885,463203,463693,463927,464292,464741,465004,465350,465747,466090,466478,466983,467390,467730,468221,468730,469248,469761,470254,470789,471255,471711,472216,472675,473140,473609,474059,474487,474911,475320,475759,476216,476673,477128,477555,477978,478439,478748,479105,479537,479978,480358,480724,481125,481632,482035,482452,482886,483263,483711,484045,484484,485001,485460,485923,486448,488139,490084,492109,494096,496095,498094,500016,501998,504048,506094,508148,510190,512207,514234,516260,518290,520345,522400,524448,526327,528053,529776,531478,533200,534914,536628,538360,540081,541786,543523,545246,546939,548648,550348,552061,553781,555485,557181,558866,560571,562294,563985,565660,567359,569026,570711,572390,574087,575774,577469,579176,580875,582557,584250,585940,587628,589306,591007,592735,594439,596170,597897,599604,601270,602950,604650,606388,608114,609831,611525,613178,614858,616522,618219,619906,621601,623284,624968,626663,628392,630144,631869,633534,635194,636892,638605,640322,642024,643729,645429,647124,648832,650521,652218,653932,655629,657339,659040,660729,662425,664147,665847,667548,669241,670939,672633,674353,676033,677743,679483,681226,682975,684724,686487,688220,689987,691723,693394,695068,696729,698418,700122,701803,703486,705159,706834,708564,710304,712036,713771,715459,717129,718796,720485,722323,724371,726419,728467,730515,732563,734611,736659,738707,740755,742803,744851,746899,748947,750995,752714,754466,756172,757921,759727,761415,763132,764886,766524,768305,770049,771711,773448,775195,776935,778631,780220,781890,783580,785201,786828,788512,790065,791635,793218,794854,796462,798131,799754,801391,803030,804652,806305,808032,809759,811454,813231,814948,816696,818345,820153,822039,823882,825628,827335,828986,830630,832365,834104,835818,837467,839241,841091,842964,844623,846294,847937,849454,850975,852508,853987,855479,857019,858627,860287,861953,863507,865027,866660,868327,869961,871644,873328,875040,876618,878145,879805,881337,883106,884950,886746,888540,890332,892111,893890,895726,897521,899207,900861,902539,904238,905912,907560,909272,911044,912815,914565,916291,917904,919583,921210,921692,922168,922723,923238,923822,924523,925171,925781,926368,926837,927175,927793,928459,929078,929837,930441,930958,931671,932311,932931,933476,933914,934423,934970,935543,936106,936238,936379,936814,937340,937619,937859,937989,938737,939383,939928,940236,940692,941250,941638,942235,942593,943015,943159,943275,943423,943570,943780,944149,944791,945536,946211,946828,947379,947891,948604,949426,950206,951181,952233,953261,954132,954921,955676,956525,956823,957137,957573,957915,958276,958410,958544,958698,959161,959567,959817,960062,960287,960491,960802,961208,961460,962212,962711,962989,963484,963903,964140,964343,964567,964979,965394,965660,966002,966270,966580,966837,967458,967938,968409,969066,969586,970094,970736,971549,972466,973242,973990,974851,975755,976501,977182,977910,978664,979338,980044,980853,981543,982179,982684,983201,983695,984224,984756,985257,985799,986420,987250,988059,988880,989679,990471,991255,991834,992519,993485,994292,995186,995728,996511,997517,998454,999258,1000191,1001157,1002013,1002942,1003811,1004672,1005484,1006204,1006895,1007825,1008625,1009374,1010160,1010933,1011584,1012351,1013201,1013580,1013755,1013880,1013994,1014247,1015215,1016211,1017192,1018199,1019271,1020186,1021149,1022107,1023049,1023966,1024736,1025527,1026202,1026757,1027269,1028118,1028959,1029726,1030467,1031311,1032018,1032583,1033055,1033613,1034447,1035448,1036487,1037567,1038622,1039719,1040695,1041790,1042909,1044051,1045144,1046031,1046752,1047255,1047676,1048059,1048425,1048777,1049118,1049713,1050557,1051504,1052519,1053466,1054292,1055027,1055552,1056220,1057000,1057890,1058669,1059403,1060214,1061018,1061925,1062859,1063842,1064838,1065627,1066462,1067504,1068569,1069673,1070856,1071980,1072999,1074135,1075216,1076056,1076926,1077985,1079050,1080245,1081492,1082544,1083519,1084698,1085886,1086989,1087970,1089008,1090024,1090846,1091890,1093146,1094330,1096116,1097722,1099567,1101441,1103275,1105151,1107042,1108881,1110709,1112580,1114517,1116498,1118427,1120319,1122205,1124156,1126112,1127969,1129667,1131260,1132900,1134388,1135874,1137378,1138871,1140388,1141895,1143390,1144890,1146393,1147917,1149397,1150894,1152404,1153884,1155372,1156866,1158341,1159830,1161340,1162800,1164291,1165785,1167276,1168795,1170320,1171809,1173304,1174808,1176260,1177730,1179228,1180732,1182236,1183746,1185246,1186763,1188266,1189409,1189941,1190452,1191033,1191474,1192020,1192520,1193054,1193620,1194130,1194703,1195238,1195874,1196474,1197076,1197698,1198109,1198727,1199351,1199855,1200374,1200963,1201495,1202042,1202608,1203316,1203929,1204446,1204939,1205389,1205932,1206365,1206929,1207520,1208130,1208718,1209341,1209971,1210548,1211030,1211524,1211944,1212397,1212883,1213442,1214004,1214580,1215115,1215683,1216216,1216689,1217043,1217637,1218000,1218198,1218540,1218775,1219263,1219733,1220143,1220759,1221065,1221674,1222209,1222630,1223196,1223684,1224137,1224539,1224975,1225518,1226033,1226543,1226999,1227320,1227693,1228199,1228871,1229332,1229980,1230578,1231032,1231455,1231952,1232362,1232768,1233008,1233053,1233215,1233539,1233867,1234156,1234579,1234837,1235088,1235443,1235828,1236112,1236434,1236879,1237194,1237599,1237915,1238505,1239056,1239629,1240155,1240575,1240918,1241269,1241758,1242113,1242688,1243228,1243760,1244287,1244778,1245336,1245734,1246302,1246774,1247108,1247533,1248020,1248487,1248989,1249495,1250083,1250616,1251071,1251770,1253792,1255810,1257849,1259866,1261859,1263883,1265869,1267923,1269968,1272010,1273972,1275670,1277351,1279076,1280766,1282411,1284103,1285820,1287516,1289188,1290894,1292602,1294321,1296048,1297763,1299489,1301199,1302910,1304626,1306353,1308057,1309778,1311481,1313177,1314880,1316572,1318286,1319994,1321707,1323416,1325103,1326804,1328474,1330175,1331887,1333605,1335311,1337036,1338743,1340482,1342195,1343921,1345651,1347380,1349099,1350820,1352531,1354261,1355984,1357714,1359442,1361083,1362763,1364476,1366188,1367903,1369606,1371594,1373642,1375690,1377738,1379786,1381834,1383871,1385514,1387197,1388850,1390559,1392327,1394003,1395675,1397472,1399206,1400947,1402668,1404455,1406247,1408047,1409876,1411640,1413403,1415183,1416915,1418600,1420344,1422048,1423756,1425532,1427233,1429005,1430714,1432399,1434128,1435882,1437652,1439364,1441151,1442936,1444715,1446488,1448271,1450052,1451808,1453567,1455326,1457129,1458741,1460457,1462220,1463869,1464984,1465740,1466572,1467467,1468364,1469279,1470009,1470953,1472132,1473573,1474837,1475774,1476885,1478054,1479330,1480435,1481558,1482643,1483580,1484493,1485559,1486692,1487596,1488689,1489762,1490882,1492816,1494803,1496810,1498819,1500812,1502819,1504811,1506407,1508003,1509510,1510971,1512430,1513868,1515367,1516844,1518305,1519320,1519941,1520339,1520800,1521373,1521860,1522464,1523077,1523660,1524217,1524767,1525268,1525764,1526190,1526674,1526799,1527369,1527707,1528296,1528744,1529303,1529843,1531473,1533490,1535242,1536951,1538662,1540370,1542071,1543791,1545500,1547214,1548923,1550700,1552749,1554540,1556327,1558224,1560042,1561772,1563510,1565009,1565643,1566230,1566606,1566631,1566656,1566681,1568611,1569624,1571043,1572487,1573895,1575278,1576787,1578283,1579742,1581196,1582661,1584119,1585560,1587005,1588486,1589925,1591395,1592867,1594339,1595800,1597262,1598751,1599499,1599848,1600274,1600630,1600963,1601456,1601870,1602373,1602826,1603091,1603508,1603823,1604322,1604661,1605313,1605874,1606509,1607060,1607595,1608177,1608539,1609033,1609542,1610072,1610577,1611060,1611564,1612124,1612566,1613108,1613559,1614001,1614513,1614933,1615424,1615921,1616405,1616913,1617270,1617773,1618246,1618640,1619137,1619577,1619909,1620319,1620594,1620880,1621322,1621695,1622240,1624296,1626248,1628252,1630223,1631950,1633668,1635354,1637078,1638799,1640484,1642142,1643829,1645519,1647173,1648857,1650526,1652173,1653843,1655515,1657212,1658923,1660649,1662327,1663993,1665680,1667353,1669371,1671419,1673387,1675240,1677050,1678766,1680565,1682270,1683887,1685536,1687264,1689050,1690702,1692417,1694124,1695906,1697726,1699480,1701054,1702727,1704104,1704855,1705416,1706044,1706651,1707424,1708121,1709005,1709950,1711001,1712389,1713657,1714946,1716155,1717589,1719147,1720037,1721047,1722179,1722938,1723569,1724750,1726289,1728103,1729860,1731605,1733319,1734920,1736493,1737978,1739465,1740940,1742419,1743886,1745346,1746835,1748330,1749811,1751294,1752779,1754271,1755749,1757206,1758689,1760131,1761608,1763079,1764560,1766030,1767506,1768979,1770459,1771941,1773421,1774925,1776407,1777894,1779362,1780273,1780666,1781287,1781868,1782329,1782867,1783304,1783777,1784328,1784695,1784889,1785314,1785715,1786217,1786594,1787151,1787590,1787799,1788271,1788921,1789492,1790165,1790662,1791196,1791745,1792134,1792655,1793109,1793617,1794245,1794688,1795200,1795634,1796031,1796485,1796901,1797540,1798000,1798398,1798551,1798748,1799060,1799487,1800047,1800425,1800970,1801469,1802075,1802612,1803150,1803672,1803921,1804352,1804798,1804929,1805300,1805596,1805925,1806279,1806750,1807174,1807554,1808073,1808591,1809064,1809608,1810139,1810713,1811259,1811802,1812328,1812849,1813140,1813429,1813936,1814499,1814990,1815546,1816098,1816577,1817040,1817521,1817967,1818413,1818877,1819320,1819890,1820263,1820734,1821165,1821641,1822075,1822563,1823046,1823451,1823921,1824362,1824751,1826601,1828644,1830687,1832689,1834743,1836795,1838835,1840740,1842426,1844110,1845823,1847532,1849260,1850937,1852654,1854383,1856106,1857805,1859500,1861203,1862919,1864627,1866342,1868064,1869767,1871472,1873137,1874857,1876509,1878194,1879895,1881548,1883251,1884911,1886611,1888310,1890002,1891681,1893340,1895035,1896729,1898422,1900120,1901837,1903552,1905232,1906878,1908603,1910286,1912197,1914245,1916293,1918341,1920356,1921990,1923538,1925224,1926947,1928749,1930533,1932347,1934268,1935958,1937731,1939596,1941360,1943077,1944952,1946667,1948472,1950014,1951768,1953512,1955159,1956943,1958666,1960340,1962043,1963762,1965451,1967251,1968994,1970634,1972339,1974042,1974794,1975614,1976509,1977318,1978092,1978697,1979248,1979776,1980236,1980442,1980852,1981386,1982180,1982797,1983317,1983670,1984124,1984899,1985575,1986254,1986991,1987708,1988283,1988912,1989390,1989826,1990318,1990978,1991808,1992570,1993104,1993851,1994624,1995383,1996069,1996794,1997603,1998284,1999013,1999607,2000123,2000303,2000645,2000967,2001250,2001640,2001874,2002054,2002340,2002999,2003637,2004252,2005112,2005771,2006411,2007041,2007672,2008446,2009266,2009887,2010514,2011044,2011742,2012355,2012988,2013917,2015233,2016723,2018315,2020139,2021833,2023515,2025230,2026949,2028654,2030383,2032082,2033636,2034855,2036293,2037738,2039207,2040680,2042156,2043626,2045120,2046591,2048078,2049566,2051053,2052538,2054016,2055505,2056985,2058442,2059915,2061388,2062874,2064350,2065855,2067335,2068315,2068506,2068790,2069106,2069503,2069957,2070343,2070549,2070834,2071066,2071369,2071597,2072006,2072656,2073050,2073610,2074040,2074586,2074980,2075569,2076027,2076192,2076394,2076859,2077445,2077990,2078398,2078897,2079488,2079990,2080449,2081056,2081497,2082136,2082530,2082778,2082834,2083187,2083684,2084090,2084556,2084733,2084932,2085348,2085870,2086267,2086469,2086663,2086856,2087051,2087239,2087434,2087637,2087835,2088024,2088218,2088409,2088923,2089199,2089563,2089739,2089996,2090306,2090551,2091058,2091518,2092028,2092437,2092911,2094489,2096405,2098315,2100201,2102109,2104146,2106111,2107766,2109442,2111146,2112818,2114483,2116184,2117921,2119574,2121237,2122938,2124627,2126308,2127962,2129632,2131326,2132992,2134638,2136317,2138006,2139695,2141345,2143003,2144646,2146294,2147957,2149601,2151264,2152928,2154589,2156270,2157945,2159612,2161608,2163656,2165704,2167635,2169313,2171058,2172671,2174361,2176226,2177906,2179576,2181330,2183028,2184627,2186431,2188032,2189646,2191246,2192952,2194610,2196239,2197850,2199456,2201084,2202741,2204458,2206100,2207280,2208112,2208852,2209454,2209642,2210128,2210957,2211886,2212766,2213791,2214698,2215516,2216504,2217518,2218433,2219277,2219838,2220540,2221228,2221837,2223553,2225077,2226872,2228686,2230519,2232262,2234069,2235811,2237371,2238913,2240389,2241875,2243364,2244848,2246307,2247805,2249261,2250752,2252222,2253707,2255201,2256700,2257565,2258116,2258728,2259276,2259768,2260149,2260583,2260868,2261247,2261798,2262055,2262614,2263150,2263710,2264132,2264701,2265245,2265834,2266396,2266908,2267449,2267800,2268016,2268494,2268942,2269426,2269950,2270550,2271098,2271656,2271997,2272139,2272256,2272643,2272954,2274099,2276103,2278153,2280185,2281882,2283565,2285279,2286982,2288682,2290343,2292038,2293722,2295452,2297130,2298837,2300549,2302255,2303941,2305641,2307394,2309442,2311421,2313213,2315021,2316860,2318634,2320323,2322074,2323843,2325597,2327419,2329233,2331037,2332789,2333648,2334543,2335285,2336198,2337275,2338362,2339239,2340263,2341025,2342489,2343748,2345329,2347011,2348674,2350237,2351758,2353220,2354787,2356261,2357742,2359205,2360696,2362174,2363654,2365123,2366611,2368077,2369560,2370803,2371324,2371940,2372476,2373006,2373611,2374108,2374711,2374969,2375475,2375864,2376344,2376653,2377126,2377451,2377606,2377868,2378441,2378620,2379098,2379356,2379824,2380332,2380616,2381054,2381497,2382108,2382614,2383216,2383700,2384136,2384358,2384643,2385151,2385747,2386256,2387845,2389766,2391790,2393673,2395342,2397038,2398711,2400361,2402013,2403663,2405323,2407019,2408689,2410342,2412009,2413704,2415437,2417140,2418873,2420873,2422912,2424587,2426283,2427958,2429637,2431285,2432954,2434581,2436310,2438011,2439882,2441778,2443514,2444287,2445120,2445886,2446582,2447242,2447874,2448793,2449740,2450321,2451877,2453439,2454942,2456527,2458171,2459686,2461176,2462642,2464117,2465597,2467083,2468542,2470031,2471515,2472997,2474475,2475523,2475960,2476218,2476533,2476896,2477250,2477533,2477804,2478194,2478669,2479168,2479537,2480016,2480404,2480648,2480983,2481336,2481737,2482039,2482378,2482622,2482792,2483092,2483359,2483723,2484072,2484518,2485086,2485499,2485804,2486200,2486591,2486865,2487204,2487442,2487685,2488018,2488202,2488623,2490020,2492068,2494114,2496162,2497878,2499597,2501301,2503030,2504765,2506482,2508214,2509952,2511685,2513408,2515145,2516872,2518544,2520275,2521988,2523709,2525414,2527348,2529396,2531408,2533223,2535038,2536817,2538668,2540442,2542267,2544094,2545881,2547721,2549574,2551390,2553157,2554827,2556599,2558454,2560278,2562078,2563030,2563985,2565331,2567151,2569000,2570747,2572251,2573657,2575120,2576586,2578042,2579521,2581002,2582464,2583937,2585442,2586931,2588398,2589879,2591369,2592856,2594332,2595818,2597312,2598795,2600282,2601757,2603260,2604718,2606198,2607667,2608991,2609171,2609448,2609658,2609911,2610400,2610881,2611429,2611722,2612086,2612431,2612748,2613224,2613593,2613911,2614280,2614564,2614977,2615435,2615674,2615969,2616326,2616771,2617102,2617531,2617927,2618220,2618417,2618641,2618925,2619339,2619701,2619994,2620335,2620730,2621174,2621535,2621827,2622318,2622576,2622940,2623218,2623642,2624118,2624301,2624490,2624569,2624825,2625051,2625603,2625802,2626201,2626553,2626856,2627211,2627677,2628059,2628612,2628997,2629064,2629126,2629592,2629907,2630292,2630631,2631094,2631527,2631882,2632232,2632564,2632962,2633334,2633787,2634308,2634684,2635073,2636715,2638631,2640571,2642518,2644435,2646377,2648343,2650051,2651739,2653428,2655120,2656817,2658515,2660222,2661915,2663616,2665305,2666995,2668716,2670420,2672134,2673831,2675537,2677242,2678928,2680647,2682349,2684054,2685766,2687468,2689171,2690891,2692598,2694295,2696009,2697708,2699418,2701114,2702825,2704500,2706338,2708386,2710434,2712482,2714330,2715903,2717596,2719316,2721046,2722733,2724442,2726155,2727814,2729468,2731200,2732867,2734608,2736344,2738048,2739838,2741603,2743361,2745010,2746833,2748547,2750332,2751971,2753669,2755342,2757038,2758681,2760383,2762081,2762966,2763763,2764629,2765499,2765928,2765953,2765978,2766003,2766028,2766053,2766078,2766103,2768099,2769686,2771397,2773158,2774943,2776631,2778464,2780240,2781707,2783062,2784525,2786174,2787738,2789250,2790771,2792276,2793783,2795306,2796827,2798334,2799798,2801286,2802775,2804239,2805732,2807209,2808684,2810141,2811577,2813066,2814547,2816028,2817508,2818972,2820440,2821929,2823390,2824861,2826346,2827840,2829120,2829779,2830397,2831041,2831638,2832245,2832868,2833559,2834175,2834882,2835562,2836217,2836922,2837605,2838236,2838868,2839454,2840173,2840881,2841500,2842223,2842882,2843488,2844194,2844907,2845562,2846157,2846680,2847242,2847836,2848502,2849086,2849634,2850242,2850716,2851330,2851869,2852513,2853098,2853625,2854112,2854644,2855191,2855780,2856277,2856814,2857420,2858056,2858622,2859276,2859819,2860374,2861042,2861644,2862310,2862863,2863325,2863903,2864382,2864828,2865246,2865663,2866143,2866712,2867149,2867612,2868088,2868694,2869048,2869590,2870199,2870641,2871129,2871553,2871895,2872389,2872950,2873573,2874124,2874656,2875110,2875679,2876258,2876846,2877162,2877656,2878169,2878699,2879293,2879767,2879943,2880318,2880788,2881262,2881726,2882136,2882524,2882920,2883522,2884099,2884663,2885198,2885639,2887667,2889711,2891735,2893754,2895702,2897720,2899771,2901679,2903390,2905084,2906786,2908500,2910177,2911847,2913564,2915317,2916986,2918667,2920363,2922108,2923836,2925490,2927119,2928830,2930567,2932289,2934002,2935708,2937422,2939116,2940808,2942502,2944207,2945956,2947690,2949393,2951115,2952855,2954580,2956275,2958015,2959736,2961423,2963117,2964821,2966509,2968222,2969944,2971681,2973365,2975058,2976755,2978796,2980844,2982892,2984940,2986988,2988972,2990694,2992398,2994196,2995810,2997464,2999248,3001045,3002661,3004395,3006145,3007983,3009672,3011264,3013041,3014854,3016593,3018292,3020036,3021715,3023397,3025110,3026885,3028692,3030444,3032237,3033948,3035796,3037484,3039263,3040986,3042687,3044405,3046284,3048077,3049880,3051667,3053378,3055127,3056175,3056792,3057572,3058202,3058773,3059422,3060039,3060645,3061177,3061658,3063048,3064547,3066031,3067494,3069075,3070650,3072288,3073858,3075394,3076528,3077683,3079206,3080680,3082265,3083662,3085270,3086838,3088315,3089911,3091335,3092738,3094064,3095475,3096865,3098216,3099129,3100151,3101431,3102308,3103055,3104277,3105637,3107067,3108686,3110294,3112023,3113434,3115269,3116911,3118325,3119927,3121620,3123319,3125011,3126705,3128348,3130025,3131662,3133335,3134901,3136476,3138034,3139627,3141065,3142545,3144024,3145478,3146956,3148419,3149881,3151377,3152862,3154314,3155789,3157274,3158717,3160157,3161616,3163069,3164523,3166004,3167469,3168951,3170447,3171916,3173382,3174845,3176317,3177781,3179238,3180699,3182169,3183646,3185118,3186583,3188056,3189512,3190979,3192470,3193932,3195427,3196878,3198350,3199847,3201302,3202745,3204249,3205720,3207209,3208697,3210162,3211649,3212188,3212647,3213186,3213692,3214153,3214532,3214918,3215347,3215767,3216249,3216730,3217089,3217541,3218034,3218522,3218924,3219275,3219839,3220297,3220558,3220832,3221175,3221456,3221873,3222189,3222555,3222848,3223107,3223622,3224088,3224558,3225043,3225513,3225916,3226206,3226664,3226950,3227357,3227887,3228287,3228658,3229029,3229382,3229952,3230469,3230951,3231420,3231841,3232182,3232388,3232726,3233259,3233571,3233877,3234284,3234790,3235271,3235749,3236088,3236310,3236738,3237272,3237697,3238220,3238651,3239054,3239310,3239490,3239962,3240449,3240875,3241331,3241742,3242170,3242555,3242924,3243337,3243790,3244268,3244784,3245275,3245686,3246032,3246338,3246805,3247140,3247571,3247832,3248256,3248485,3248817,3249185,3249496,3249690,3250007,3250481,3250799,3251076,3251385,3251566,3251952,3252258,3252622,3252974,3253398,3253653,3253998,3254409,3254768,3255103,3255526,3255927,3256417,3256946,3257456,3257916,3258197,3258546,3258739,3259101,3259565,3259875,3260359,3260558,3261021,3261463,3261916,3262230,3262651,3262919,3263342,3263673,3263960,3264381,3264793,3265267,3265654,3265894,3266056,3266557,3267057,3267532,3267968,3268330,3268823,3269630,3271636,3273632,3275594,3277571,3279527,3281481,3283505,3285446,3287422,3289347,3291354,3293402,3295225,3296919,3298561,3300221,3301875,3303568,3305210,3306899,3308597,3310255,3311910,3313595,3315289,3316961,3318666,3320326,3321999,3323705,3325389,3327058,3328732,3330423,3332109,3333822,3335503,3337166,3338857,3340549,3342244,3343925,3345614,3347289,3348963,3350639,3352345,3354049,3355751,3357426,3359103,3360789,3362470,3364145,3365855,3367555,3369240,3370945,3372666,3374334,3375979,3377662,3379351,3381075,3382766,3384440,3386123,3387800,3389478,3391161,3392845,3394516,3396206,3397887,3399571,3401320,3403368,3405416,3407464,3409512,3411560,3413608,3415258,3416954,3418573,3420233,3421835,3423532,3425212,3426861,3428554,3430276,3432015,3433639,3435442,3437095,3438812,3440569,3442314,3444006,3445761,3447548,3449297,3451013,3452713,3454478,3456246,3457989,3459673,3461381,3463134,3464835,3466531,3468389,3470074,3471746,3473547,3475346,3477150,3478851,3480497,3482219,3484012,3485736,3487473,3489024,3490004,3490844,3491635,3492467,3493254,3494005,3494917,3495575,3496474,3497329,3498026,3498677,3499090,3499554,3499883,3500300,3500651,3501067,3501303,3501858,3502344,3502877,3503324,3503662,3503927,3504503,3504953,3505452,3505950,3506560,3507237,3507580,3507796,3508267,3508730,3509124,3509897,3510481,3510983,3511313,3511782,3512111,3512564,3512715,3513066,3513502,3513921,3514433,3514840,3515202,3515684,3516483,3518104,3519733,3521179,3521866,3522802,3524428,3526055,3527694,3529377,3531058,3532772,3534510,3536320,3538043,3539806,3541549,3543296,3544988,3546721,3548410,3549999,3551542,3553091,3554588,3556054,3557521,3559013,3560488,3561988,3563472,3564956,3566450,3567962,3569460,3570974,3572464,3573932,3575401,3576028,3576449,3576642,3577059,3577658,3578110,3578185,3578260,3578518,3578867,3579476,3580071,3580518,3581018,3581451,3582033,3582510,3582949,3583490,3584092,3584567,3584958,3585375,3585881,3586435,3586791,3587343,3587859,3588193,3588673,3589059,3589465,3589894,3590235,3590537,3590757,3591112,3591439,3591953,3592447,3592999,3593443,3594036,3594303,3595829,3597841,3599802,3601757,3603632,3605334,3607055,3608794,3610516,3612243,3613988,3615715,3617452,3619180,3620911,3622635,3624345,3626083,3627804,3629517,3631215,3632930,3634662,3636363,3638070,3640085,3642133,3644114,3645837,3647576,3649355,3651107,3652895,3654598,3656316,3658067,3659814,3661546,3663289,3665067,3666808,3668571,3670360,3672111,3673659,3674468,3675402,3676218,3677141,3677540,3677565,3677590,3677615,3677640,3677665,3677690,3677715,3679321,3680976,3682527,3684217,3685912,3687387,3688723,3689805,3691000,3692605,3694131,3695691,3697178,3698664,3700173,3701671,3703154,3704656,3706149,3707647,3709140,3710625,3712093,3713543,3715003,3716480,3717914,3719423,3720110,3720767,3721233,3721826,3722316,3722739,3723202,3723655,3724125,3724656,3725173,3725620,3726169,3726727,3727163,3727611,3727807,3728171,3728420,3728771,3729171,3729746,3730007,3730552,3731044,3731567,3732249,3732746,3733189,3733638,3734022,3734524,3735126,3735516,3735935,3736458,3736975,3737502,3738066,3738539,3739122,3739828,3740531,3741061,3741464,3741954,3742199,3743684,3745687,3747740,3749759,3751781,3753498,3755213,3756936,3758645,3760356,3762020,3763678,3765374,3767100,3768826,3770535,3772205,3773904,3775620,3777350,3779054,3780763,3782487,3784179,3785844,3787656,3789704,3791752,3793688,3795487,3797271,3799083,3800931,3802617,3804372,3806222,3808014,3809858,3811705,3813515,3815369,3817207,3818968,3820839,3822629,3824387,3826124,3826900,3827537,3828512,3829324,3830002,3830727,3831506,3832032,3832846,3833694,3834447,3835201,3836070,3836942,3837299,3837987,3838942,3840410,3841520,3842363,3843916,3845386,3846913,3848539,3850138,3851753,3853325,3854743,3856119,3857598,3859022,3860387,3861842,3863263,3864734,3866211,3867659,3869133,3870613,3872110,3873589,3875058,3876556,3878054,3879541,3881034,3882518,3884001,3885487,3886982,3888469,3889937,3891435,3892898,3894388,3895887,3897364,3898863,3900358,3901880,3903393,3904864,3906342,3907844,3909333,3910819,3912298,3913751,3915225,3916718,3918059,3918548,3919072,3919671,3920140,3920608,3921154,3921422,3921987,3922540,3923123,3923313,3923872,3924412,3925076,3925737,3926313,3926871,3927432,3928015,3928573,3929094,3929618,3930110,3930489,3930691,3931183,3931737,3932248,3932819,3933350,3933800,3934314,3934857,3935423,3936071,3936641,3937039,3937552,3938072,3938691,3939194,3939769,3940261,3940755,3941231,3941828,3942380,3942952,3943501,3944107,3944663,3945172,3945540,3945993,3946521,3946971,3947451,3948068,3948575,3949033,3949588,3950047,3950502,3950985,3951226,3951543,3952067,3952513,3953016,3953302,3953765,3954291,3954818,3955358,3955822,3956225,3956299,3956390,3956575,3956699,3956881,3957156,3957359,3957753,3958094,3958531,3959088,3959413,3959874,3960095,3960366,3960524,3960657,3961014,3961480,3962160,3962646,3963138,3963665,3964220,3964729,3965277,3965803,3966390,3966871,3967351,3967616,3968162,3968708,3969136,3969632,3970098,3970589,3971089,3971504,3971987,3972425,3972938,3973486,3974089,3974615,3975106,3975534,3976039,3976443,3976865,3977389,3977836,3978231,3978751,3979201,3979387,3979757,3980267,3980606,3981204,3983211,3985196,3987216,3989261,3991248,3993273,3995237,3997285,3999333,4001382,4003368,4005019,4006652,4008275,4009921,4011649,4013364,4015057,4016743,4018401,4020072,4021771,4023475,4025153,4026863,4028598,4030327,4032042,4033768,4035421,4037115,4038856,4040554,4042281,4043967,4045658,4047403,4049147,4050882,4052627,4054324,4056016,4057659,4059359,4061106,4062855,4064592,4066331,4068066,4069802,4071521,4073257,4074982,4076719,4078450,4080188,4081874,4083530,4085214,4086919,4088595,4090302,4092029,4093771,4095507,4097229,4098954,4100610,4102286,4104002,4105722,4107731,4109779,4111827,4113875,4115923,4117971,4120019,4121948,4123447,4124877,4126492,4128208,4129942,4131632,4133227,4134883,4136530,4138264,4140010,4141821,4143579,4145295,4146921,4148618,4150331,4152056,4153797,4155379,4157232,4159108,4160884,4162632,4164362,4165947,4167745,4169562,4171330,4173088,4174875,4176644,4178393,4180217,4181977,4183719,4185492,4187218,4189027,4190744,4192376,4193994,4195648,4197384,4199108,4200899,4202639,4204383,4206127,4207634,4209276,4211075,4212424,4212995,4213641,4214325,4214932,4215438,4215861,4216524,4217234,4217709,4218322,4218674,4220082,4221479,4222877,4224534,4225743,4227065,4228545,4230037,4231719,4232901,4234039,4235376,4236781,4238018,4239390,4240640,4241790,4243109,4244769,4245484,4246835,4248231,4249691,4250588,4252057,4253685,4254493,4255689,4256902,4258333,4259700,4261085,4262526,4264096,4264905,4265803,4266368,4267621,4269329,4270911,4271798,4272789,4274224,4275619,4276937,4278254,4279623,4280945,4282552,4284193,4284842,4285810,4286240,4287090,4288342,4289515,4290334,4291190,4292725,4294354,4296064,4297834,4299635,4301472,4303255,4305003,4306737,4308606,4310411,4311824,4313260,4314619,4315933,4317397,4318833,4320194,4321525,4322967,4324476,4325963,4327416,4328884,4330342,4331792,4333260,4334702,4336179,4337674,4339161,4340655,4342152,4343641,4345122,4346612,4348096,4349582,4351084,4352564,4354017,4355485,4356974,4358459,4359936,4361419,4362889,4364370,4365803,4367295,4368793,4370258,4371716,4373162,4374649,4376136,4377597,4379090,4380583,4382070,4383558,4385027,4386511,4387996,4389471,4390957,4392448,4393911,4395373,4396837,4398342,4399817,4401287,4402769,4404255,4405721,4407206,4408699,4410162,4411669,4413151,4414629,4416102,4417595,4419072,4420520,4421985,4423454,4424924,4426406,4427892,4429379,4430846,4432338,4433834,4435321,4436810,4438279,4439313,4439678,4440255,4440844,4441504,4442025,4442615,4443170,4443717,4444338,4444966,4445553,4446219,4446840,4447430,4448036,4448601,4448978,4449490,4450018,4450573,4451066,4451457,4452067,4452683,4453263,4453882,4454499,4454746,4455305,4455891,4456467,4456937,4457683,4458353,4458854,4459500,4460134,4460773,4461247,4461753,4462231,4462771,4463255,4463866,4464419,4465065,4465630,4466254,4466858,4467456,4467953,4468412,4468832,4469322,4469820,4470333,4470894,4471346,4471811,4472262,4472731,4473228,4473772,4474283,4474848,4475406,4476050,4476595,4477179,4477774,4478391,4479007,4479576,4480162,4480759,4481409,4481936,4482541,4483166,4483687,4484208,4484668,4485185,4485692,4485986,4486386,4486859,4487373,4487901,4488414,4488946,4489488,4490052,4490631,4491266,4491822,4492422,4492997,4493577,4494202,4494744,4495326,4495853,4496352,4496946,4497298,4497597,4498140,4498727,4499263,4499785,4500241,4500781,4501259,4501700,4502139,4502475,4502957,4503277,4503655,4504108,4504621,4505172,4505685,4506202,4506775,4507257,4507618,4507779,4508226,4508758,4509150,4509569,4510038,4510456,4510889,4511353,4511715,4512174,4512687,4513143,4513630,4514000,4514431,4515016,4515762,4516388,4516816,4517366,4517859,4518411,4518961,4519435,4519985,4520579,4521100,4521670,4522201,4522819,4523137,4523656,4524031,4524513,4524982,4525498,4526032,4526536,4527014,4527550,4528100,4528681,4529184,4529513,4529988,4530459,4530893,4531445,4531952,4532500,4533069,4533671,4534209,4534665,4535050,4535657,4536103,4536592,4537046,4537558,4538027,4538305,4538734,4539208,4539768,4540332,4540937,4541398,4541885,4542383,4542849,4543279,4543774,4544293,4544917,4545260,4545725,4546063,4546571,4546891,4547376,4547778,4548240,4548703,4549198,4549551,4549902,4550204,4550425,4550606,4550862,4551180,4551488,4551721,4552135,4552524,4552794,4553259,4553465,4553616,4553916,4554222,4554459,4555092,4555700,4556392,4556919,4557436,4558033,4558487,4559118,4559584,4560121,4560716,4561362,4561778,4562161,4562662,4563081,4563655,4564187,4564752,4565305,4565963,4566595,4567203,4567818,4568414,4568839,4569348,4569916,4570486,4570845,4571363,4571817,4572344,4572829,4573398,4573872,4574421,4574855,4575080,4575351,4575681,4576001,4576386,4576918,4577303,4577857,4578379,4579010,4579577,4580600,4582626,4584637,4586556,4588555,4590546,4592576,4594580,4596595,4598629,4600644,4602648,4604669,4606628,4608668,4610656,4612662,4614693,4616721,4618776,4620651,4622381,4624092,4625751,4627437,4629130,4630833,4632556,4634286,4636023,4637743,4639482,4641199,4642895,4644593,4646259,4647975,4649674,4651364,4653039,4654740,4656466,4658181,4659896,4661607,4663274,4665000,4666708,4668418,4670135,4671847,4673555,4675261,4676979,4678659,4680325,4682018,4683703,4685370,4687052,4688741,4690392,4692064,4693752,4695437,4697139,4698837,4700525,4702230,4703916,4705601,4707286,4708980,4710673,4712348,4714029,4715715,4717424,4719107,4720800,4722487,4724169,4725845,4727519,4729225,4730919,4732599,4734288,4735984,4737676,4739385,4741083,4742802,4744512,4746210,4747874,4749603,4751310,4752987,4754669,4756342,4758051,4759761,4761441,4763140,4764837,4766488,4768153,4769855,4771576,4773266,4774959,4776636,4778294,4779948,4781601,4783271,4784922,4786592,4788300,4789980,4791689,4793380,4795098,4796774,4798459,4800160,4801854,4803572,4805308,4807016,4808717,4810449,4812114,4813824,4815502,4817182,4818866,4820525,4822223,4824072,4826120,4828168,4830216,4832264,4834312,4836360,4838408,4840456,4842504,4844552,4846600,4848648,4850696,4852579,4854345,4856008,4857684,4859377,4861047,4862797,4864517,4866219,4867936,4869699,4871342,4872990,4874669,4876378,4878093,4879673,4881429,4883192,4884859,4886560,4888230,4890042,4891744,4893494,4895341,4897036,4898748,4900369,4901980,4903605,4905265,4906985,4908618,4910246,4911919,4913582,4915239,4916894,4918561,4920243,4921921,4923552,4925086,4926703,4928408,4930149,4931828,4933599,4935280,4936982,4938600,4940182,4941844,4943486,4945066,4946662,4948342,4950089,4951877,4953635,4955364,4957111,4958930,4960614,4962281,4963955,4965752,4967382,4969053,4970710,4972314,4974051,4975711,4977401,4978957,4980551,4982134,4983642,4985309,4986898,4988630,4990299,4992010,4993644,4995374,4996982,4998746,5000555,5002310,5004122,5005937,5007652,5009289,5010920,5012608,5014276,5016015,5017032,5017663,5018280,5018899,5019254,5019728,5019847,5020449,5021155,5021740,5022412,5023027,5023539,5024230,5024969,5025570,5026248,5027036,5027669,5028282,5028887,5029487,5030114,5030797,5031562,5032107,5032722,5033930,5035394,5036758,5038039,5039683,5041282,5042775,5044240,5045843,5047499,5048828,5049898,5051315,5052411,5053427,5054573,5055584,5056445,5057401,5058528,5059082,5060226,5061202,5061921,5063039,5063952,5064909,5065827,5066859,5068102,5069508,5071187,5072809,5074432,5076020,5077427,5079140,5080828,5082414,5084022,5085712,5087328,5088859,5090476,5092050,5093598,5094910,5096354,5097902,5099556,5101256,5102892,5104435,5106005,5107427,5108891,5110230,5111746,5113174,5114471,5116068,5117311,5118911,5120520,5122068,5123474,5124863,5126189,5127711,5129236,5130694,5132111,5133719,5135343,5136967,5138555,5139970,5140875,5142180,5143429,5144242,5144651,5145538,5146714,5147916,5149132,5150148,5151205,5152207,5153168,5154228,5155219,5156088,5157047,5157845,5158559,5159208,5159649,5159810,5159928,5160543,5161155,5161713,5162277,5162684,5163257,5164436,5165964,5167280,5168573,5169745,5171007,5172191,5173785,5175365,5176952,5178402,5179905,5181316,5182729,5184147,5185301,5185972,5186735,5187795,5189079,5190539,5192059,5193600,5194748,5196365,5197640,5199115,5200504,5202080,5203324,5203986,5205233,5206729,5208218,5209608,5211019,5212565,5214026,5215647,5217170,5218759,5220264,5221185,5222157,5223088,5223639,5224895,5226317,5227451,5227849,5228631,5229173,5229657,5230495,5231656,5232504,5233596,5234753,5235625,5236221,5237417,5238346,5239819,5241183,5241810,5242269,5243751,5245177,5246485,5247503,5248715,5250006,5250949,5251758,5252326,5252963,5254063,5254551,5255242,5255494,5256109,5257046,5257770,5258415,5259222,5259698,5260137,5261475,5262995,5264542,5265826,5267410,5269080,5270658,5272095,5273734,5275309,5276597,5277115,5277892,5279289,5280719,5282131,5283272,5284162,5285706,5286847,5287738,5289126,5290424,5291445,5292799,5293568,5294069,5294645,5294989,5295385,5295774,5296231,5296723,5297089,5297506,5297851,5298272,5298737,5299092,5299420,5299867,5300416,5301182,5302014,5302688,5303198,5303698,5304100,5304523,5305233,5305452,5305828,5306215,5306503,5307190,5308056,5308421,5309234,5310087,5310700,5311055,5311659,5312262,5312668,5313060,5313428,5313843,5314206,5315022,5316595,5318117,5319700,5321316,5322955,5324577,5325930,5326510,5327109,5327328,5327539,5327782,5328244,5329406,5331004,5332883,5334799,5336246,5337160,5338785,5340546,5342233,5343871,5345609,5347352,5349098,5350867,5352683,5354435,5356247,5357986,5359780,5361600,5363402,5365214,5367045,5368854,5370652,5372469,5374319,5376109,5377843,5379582,5381159,5382580,5384072,5385534,5387017,5388495,5389969,5391400,5392878,5394374,5395850,5397289,5398771,5400240,5401710,5402145,5402663,5403096,5403471,5403934,5404407,5404901,5405259,5405759,5406138,5406573,5407123,5407518,5407920,5408198,5408506,5408852,5409195,5409510,5409794,5410062,5410616,5411048,5411382,5411967,5412401,5412900,5413359,5413846,5414234,5414760,5415105,5415628,5416131,5416621,5417128,5417569,5418021,5418378,5418725,5419340,5421313,5423272,5425180,5426905,5428569,5430239,5431911,5433593,5435265,5436933,5438587,5440252,5441916,5443580,5445275,5446959,5448647,5450342,5452017,5453698,5455604,5457652,5459473,5461142,5462769,5464449,5466171,5467849,5469560,5471268,5473014,5474760,5476580,5478167,5479757,5480943,5481365,5481744,5482292,5482404,5483334,5484313,5485399,5486372,5487377,5488461,5489327,5490404,5491437,5492096,5493216,5494475,5496142,5497897,5499628,5501271,5502535,5504015,5505485,5506959,5508450,5509931,5511421,5512906,5513321,5513546,5514152,5514809,5515424,5515853,5516430,5516984,5517464,5518013,5518428,5518866,5519272,5519702,5520159,5520489,5521021,5521265,5521702,5522014,5522524,5522972,5523436,5523753,5524325,5526372,5528346,5530004,5531679,5533400,5535114,5536804,5538471,5540126,5541793,5543445,5545079,5546738,5548706,5550638,5552356,5554158,5556048,5557847,5559552,5561315,5563079,5564765,5566064,5566618,5567009,5567758,5568872,5569821,5570828,5571668,5572737,5573725,5575173,5576668,5578363,5579917,5581518,5582996,5584463,5585949,5587447,5588923,5590387,5591839,5593330,5594580,5595164,5595750,5596296,5596642,5596970,5597342,5597829,5598221,5598733,5599288,5599674,5600141,5600624,5601106,5601558,5601997,5602462,5602884,5603460,5603922,5604390,5604964,5605381,5605896,5606392,5606795,5607325,5607863,5609349,5611348,5613255,5614948,5616653,5618342,5620025,5621733,5623431,5625121,5626795,5628515,5630225,5631918,5633597,5635627,5637543,5639325,5641085,5642760,5644513,5646283,5647957,5649765,5651523,5653197,5654085,5654759,5655350,5656467,5658112,5659237,5660590,5662026,5663849,5665503,5667058,5668428,5669923,5671406,5672885,5674390,5675920,5677417,5678902,5680394,5680864,5681403,5681921,5682452,5682985,5683293,5683678,5684185,5684726,5685220,5685816,5686377,5687042,5687627,5687749,5687908,5688318,5688778,5689306,5689883,5690433,5690998,5691740,5693769,5695716,5697404,5699097,5700779,5702455,5704133,5705816,5707489,5709159,5710822,5712601,5714609,5716348,5718067,5719795,5721486,5723194,5724836,5726458,5727211,5727972,5729113,5730698,5731918,5733178,5734622,5736260,5737882,5739313,5740701,5742139,5743677,5745144,5746642,5748118,5749555,5751036,5752518,5753988,5755459,5756962,5758478,5759971,5760570,5760934,5761260,5761657,5761984,5762199,5762625,5763105,5763461,5763942,5764296,5764643,5764943,5765192,5765490,5765918,5766358,5766549,5767060,5767514,5767694,5768079,5768433,5768691,5769109,5769486,5769902,5770512,5770954,5771389,5771781,5772007,5772278,5772770,5773132,5773625,5773974,5774661,5776653,5778647,5780648,5782427,5784117,5785790,5787447,5789154,5790850,5792525,5794204,5795911,5797625,5799336,5801043,5802760,5804455,5806159,5807851,5809539,5811409,5813457,5815435,5817048,5818676,5820409,5822149,5823849,5825658,5827514,5829322,5831203,5833007,5834758,5836464,5838162,5839609,5840173,5840863,5841597,5842462,5843670,5844374,5845315,5846163,5846969,5847524,5848044,5849751,5850946,5852281,5853837,5855373,5856846,5858391,5859862,5861336,5862879,5864375,5865858,5867349,5868831,5870314,5871787,5873290,5874537,5874859,5875381,5876000,5876563,5877066,5877539,5878004,5878604,5879145,5879619,5879957,5880531,5881110,5881621,5882152,5882684,5883348,5883993,5884592,5884987,5885366,5885660,5887388,5889338,5891130,5892821,5894514,5896218,5897924,5899595,5901277,5902957,5904645,5906314,5908351,5910052,5911759,5913517,5915246,5916989,5918739,5920456,5921541,5922255,5923320,5924868,5926424,5927917,5929396,5930930,5932490,5933948,5935505,5937018,5938534,5940080,5941581,5943101,5944584,5946064,5947552,5949055,5950542,5952017,5953515,5955001,5956483,5957937,5959422,5960931,5962425,5963897,5965366,5966859,5968341,5969824,5971294,5972799,5973781,5974417,5975046,5975645,5976313,5976834,5977036,5977494,5977774,5978100,5978669,5978906,5979280,5979888,5980410,5981056,5981600,5982074,5982664,5983277,5983713,5984279,5984708,5985399,5986023,5986603,5987151,5987708,5988390,5988994,5989638,5990307,5990889,5991445,5991930,5992476,5992913,5993325,5993854,5994332,5994960,5995512,5996009,5996425,5996950,5997561,5998083,5998708,5999295,5999805,6000286,6000409,6000548,6000837,6001268,6001800,6002113,6002462,6002900,6003418,6004031,6004627,6005058,6005637,6006224,6006618,6006932,6007177,6007760,6008314,6009018,6009513,6009992,6011947,6013953,6015963,6017982,6019966,6021993,6023620,6025326,6027023,6028721,6030423,6032134,6033811,6035507,6037223,6038923,6040613,6042310,6044004,6045710,6047388,6049070,6050798,6052478,6054166,6055846,6057518,6059216,6060906,6062595,6064290,6065990,6067660,6069358,6071041,6072710,6074396,6076214,6078262,6080310,6082358,6084151,6085928,6087656,6089355,6091175,6092896,6094655,6096547,6098255,6100031,6101791,6103558,6105275,6107031,6108789,6110501,6112225,6113955,6115635,6117422,6119210,6120960,6122743,6124467,6126257,6128133,6128930,6129655,6130262,6130973,6131614,6132289,6132829,6133580,6134098,6134694,6135132,6135737,6136297,6137036,6137998,6138880,6139774,6140671,6141608,6142309,6142811,6143101,6143704,6144386,6144953,6145364,6146030,6146413,6146726,6147036,6147708,6148628,6149494,6150374,6150958,6152235,6153193,6153827,6154126,6155368,6156971,6158619,6160243,6161864,6163666,6165381,6167066,6168698,6170226,6171693,6173273,6174799,6176254,6177739,6179224,6180673,6182148,6183628,6185101,6186574,6188049,6189506,6190968,6192471,6193956,6195433,6196886,6197502,6198015,6198525,6198966,6199407,6199975,6200266,6200778,6201221,6201817,6201966,6202260,6202851,6203345,6203885,6204207,6204773,6205343,6205947,6206433,6206818,6207430,6207678,6207853,6208357,6208911,6209210,6209472,6209638,6209970,6210455,6211007,6211503,6212021,6212521,6212769,6213154,6213556,6213958,6214465,6215000,6215413,6215729,6216079,6216611,6217147,6217760,6219776,6221824,6223825,6225854,6227665,6229377,6231094,6232796,6234513,6236243,6237912,6239617,6241315,6243056,6244722,6246436,6248119,6249802,6251500,6253229,6254947,6256624,6258313,6259993,6261645,6263618,6265666,6267695,6269562,6271431,6273141,6274942,6276691,6278482,6280265,6282193,6284015,6285825,6287607,6289449,6291335,6293205,6294934,6296735,6298371,6299661,6300351,6301160,6301826,6302589,6303297,6304172,6305180,6305896,6306811,6307749,6308721,6309514,6310405,6311225,6312193,6312938,6313573,6314105,6315218,6316675,6317278,6318038,6319558,6321120,6322725,6324340,6325947,6327484,6328986,6330458,6331500,6332110,6332736,6333220,6333600,6335093,6336758,6338445,6340286,6342090,6343156,6344344,6345857,6347266,6348766,6350250,6351722,6353214,6354713,6356194,6357658,6359071,6359623,6360186,6360744,6361325,6361884,6362215,6362610,6363132,6363541,6364083,6364612,6364973,6365387,6365561,6365953,6366448,6366879,6367148,6367491,6367810,6368098,6368381,6368776,6369247,6369757,6370124,6371123,6373055,6374933,6376583,6378245,6379900,6381597,6383269,6384919,6386602,6388299,6389975,6391674,6393350,6395347,6397076,6398606,6400239,6401966,6403698,6405444,6407143,6408866,6410468,6411063,6411692,6412152,6413841,6415240,6416268,6417484,6418715,6420337,6421991,6423615,6424641,6425132,6426252,6427993,6429450,6430826,6431350,6432052,6433742,6435275,6436886,6438377,6439896,6441320,6442776,6444252,6445751,6447233,6448696,6450184,6451660,6453144,6454627,6456127,6457617,6459093,6460575,6462068,6463586,6465049,6466563,6468030,6469509,6470973,6472454,6473926,6475410,6476885,6478358,6479861,6480675,6481286,6481879,6482409,6483031,6483636,6484212,6484817,6485319,6485762,6486293,6486913,6487517,6487915,6488358,6488752,6489191,6489766,6490400,6490873,6491357,6491891,6492401,6492610,6493163,6493743,6494147,6494385,6494772,6495313,6495907,6496466,6497059,6497658,6498025,6498504,6498986,6499466,6499895,6500349,6500834,6501322,6501619,6502093,6502589,6502879,6503260,6503578,6503994,6504491,6504958,6505499,6505975,6506421,6506831,6507423,6507991,6508606,6509105,6509659,6510169,6510587,6511056,6511577,6512080,6512660,6513148,6513644,6513940,6514426,6514898,6515384,6515840,6516225,6516844,6517384,6517755,6518169,6518579,6519014,6519275,6519616,6520069,6520343,6520882,6521282,6521714,6522290,6522672,6523096,6524977,6527007,6529061,6531117,6533133,6535150,6537194,6539043,6540767,6542494,6544227,6545934,6547673,6549400,6551129,6552872,6554595,6556349,6558086,6559831,6561564,6563312,6565055,6566752,6568494,6570215,6571920,6573657,6575372,6577062,6578715,6580394,6582071,6583750,6585431,6587114,6588811,6590521,6592249,6593967,6595685,6597401,6599126,6600842,6602485,6604139,6605889,6607937,6609985,6612033,6614081,6616076,6617909,6619713,6621519,6623337,6625143,6626969,6628763,6630569,6632347,6634127,6635937,6637760,6639616,6641484,6643377,6645177,6646989,6648797,6650589,6652441,6654152,6655793,6657510,6659188,6660896,6662686,6664460,6666243,6667996,6669808,6671589,6673403,6675039,6676658,6677429,6678078,6678892,6679605,6680150,6680680,6681540,6682843,6684075,6685074,6686074,6686893,6688021,6688958,6689956,6691111,6692206,6693094,6694073,6695190,6696063,6696755,6697437,6698410,6699619,6701335,6702851,6704177,6705846,6707449,6709138,6710777,6712447,6714060,6715722,6717460,6719145,6720525,6721061,6721759,6723451,6724978,6726482,6727128,6727528,6729158,6730799,6732304,6733206,6733639,6734968,6736733,6738179,6739391,6739936,6740811,6742530,6744022,6745541,6746085,6746531,6748252,6749829,6751331,6752123,6752543,6754005,6755790,6757204,6758252,6758758,6759811,6761538,6763011,6764430,6764965,6765604,6767303,6768836,6770326,6771006,6771410,6773006,6774679,6776166,6777122,6777583,6778850,6780607,6782049,6783330,6783900,6784725,6786433,6787939,6789451,6790042,6790448,6792163,6793750,6795260,6796077,6796482,6797910,6799691,6801093,6802190,6802719,6803733,6805452,6806938,6808377,6808916,6809510,6811220,6812766,6814330,6815804,6817265,6818743,6820224,6821681,6822642,6823092,6823490,6823708,6823934,6824138,6824486,6824960,6825309,6825793,6826337,6826733,6827135,6827542,6827820,6828062,6828462,6828799,6829155,6831058,6832935,6834581,6836215,6837867,6839537,6841219,6842861,6844505,6846134,6847914,6849693,6851213,6852812,6854434,6856027,6857675,6858978,6859358,6859529,6860358,6861349,6862480,6862964,6864656,6866324,6867587,6868133,6868964,6870674,6872176,6873406,6874889,6876353,6877830,6879266,6880713,6881743,6882293,6882697,6883102,6883569,6884027,6884532,6885276,6885842,6886353,6886835,6887226,6887596,6887968,6888429,6888871,6889418,6891084,6892858,6894518,6896173,6897854,6899472,6901123,6902793,6904697,6906269,6907859,6909461,6910621,6911065,6911601,6912063,6912302,6912830,6913714,6914954,6916525,6918196,6919098,6919785,6920531,6921227,6921837,6922591,6923332,6924074,6924812,6925436,6926100,6926886,6927641,6928805,6930654,6932711,6934751,6936799,6938856,6940040,6941506,6942948,6944215,6945581,6947067,6948527,6949964,6951475,6953027,6954542,6956031,6957490,6958928,6960272,6961653,6963133,6964511,6966069,6967488,6968828,6970165,6971616,6973026,6974343,6975937,6977476,6978862,6980213,6981631,6983176,6984597,6986159,6987656,6989022,6990524,6991530,6991938,6991984,6992056,6992432,6992788,6993135,6993552,6994126,6994551,6995006,6995544,6996168,6997144,6998295,6999380,7000439,7001485,7002729,7003968,7005186,7005868,7006427,7006997,7007523,7008057,7008690,7009392,7009830,7010145,7010576,7011044,7011502,7012286,7013812,7015324,7016775,7018208,7019680,7021220,7022813,7024378,7025925,7027501,7029074,7030614,7032264,7033699,7035208,7036762,7038367,7040053,7041664,7043266,7044958,7046635,7048242,7049734,7051350,7052839,7054354,7055914,7057512,7058918,7060191,7061124,7062092,7063072,7064112,7065270,7066397,7067560,7068786,7070001,7071138,7072347,7073797,7075229,7076686,7078039,7079477,7080891,7082469,7083785,7084947,7086119,7087327,7088498,7089812,7091088,7092445,7093899,7095226,7096640,7098050,7099424,7100557,7101947,7103263,7104277,7105384,7106504,7107637,7108804,7110024,7111513,7112905,7114104,7115378,7116956,7118379,7119700,7121334,7122804,7124548,7125608,7126904,7128091,7129281,7130948,7132136,7133291,7134462,7135612,7136811,7137978,7139100,7140402,7141958,7143482,7144894,7146344,7147837,7149408,7151020,7152581,7154143,7155752,7157317,7158866,7160497,7161979,7163441,7165040,7166663,7168363,7169934,7171594,7173285,7174948,7176513,7177977,7179583,7181061,7182565,7184133,7185722,7187074,7188844,7190895,7192943,7194970,7197018,7198897,7200354,7201926,7203403,7204863,7206315,7207843,7209443,7211017,7212540,7214121,7215719,7217286,7218904,7220402,7221947,7223432,7225052,7226729,7228343,7229918,7231616,7233290,7234887,7236415,7237961,7239513,7241015,7242570,7244139,7245623,7246906,7247992,7249366,7250650,7251672,7252759,7253916,7255039,7256192,7257408,7258885,7260304,7261532,7262836,7264434,7265799,7267146,7268755,7270236,7271983,7273079,7274383,7275597,7276764,7278433,7279663,7280822,7282004,7283152,7284324,7285474,7286608,7287258,7287738,7288125,7288949,7289704,7290521,7291253,7292101,7292858,7293705,7294467,7295116,7295743,7296600,7297179,7297879,7298462,7299225,7300041,7300844,7301361,7302139,7302860,7303609,7304428,7305355,7306090,7306779,7307141,7307505,7308316,7308914,7309622,7310243,7311062,7311892,7313223,7314752,7316132,7317138,7318036,7318844,7319635,7320729,7321917,7323056,7324150,7325277,7326280,7327339,7328374,7329456,7330527,7331645,7332768,7333863,7334932,7336050,7337120,7338151,7339223,7340301,7341360,7342455,7343547,7344558,7345612,7346636,7347636,7348589,7349853,7350934,7351771,7352937,7354149,7355657,7356807,7357707,7358561,7359421,7360281,7361316,7362503,7364032,7366082,7368137,7370193,7372054,7373510,7374966,7377022,7379070,7381118,7383166,7385214,7387262,7389319,7391375,7393423,7395465,7397420,7399456,7401504,7403105,7405022,7406444,7408233,7410101,7411896,7413706,7415574,7417392,7419222,7421080,7422906,7424699,7426571,7428379,7430377,7431995,7433350,7435268,7436587,7438367,7439392,7441143,7443022,7444638,7446289,7447406,7449128,7449873,7450937,7452166,7453998,7455781,7457658,7459460,7461161,7462789,7464297,7465757,7467195,7468552,7470484,7472413,7474189,7475838,7477366,7478801,7480133,7481419,7482631,7483843,7484991,7486392,7488041,7489718,7491557,7493526,7495463,7497426,7499432,7501310,7503222,7505107,7507121,7508925,7510440,7511899,7513947,7515568,7517337,7519161,7520676,7521705,7523546,7525601,7527381,7527723,7528840,7530614,7531860,7533866,7535264,7535926,7537968,7540016,7542064,7543281,7544679,7546727,7548564,7549595,7550018,7551849,7553575,7554205,7556124,7558181,7560229,7562277,7563949,7564542,7566452,7568500,7570464,7571639,7571765,7572942,7574990,7577047,7579095,7580598,7581747,7583800,7585848,7587896,7589944,7591678,7592883,7593624,7594348,7594980,7596982,7599030,7601078,7603132,7605136,7606920,7608472,7609792,7610872,7611892,7612805,7614853,7616675,7618545,7620600,7622593,7624517,7626090,7626694,7627078,7628699,7629711,7630782,7631685,7631974,7633977,7636025,7638073,7640121,7642027,7642464,7643515,7645563,7647620,7649654,7651022,7652240,7654109,7656157,7658205,7660261,7662309,7664204,7665426,7666329,7667001,7669050,7670668,7672716,7674686,7676734,7678595,7680613,7682503,7684069,7685285,7686168,7687564,7689621,7691669,7693717,7695765,7697820,7699868,7701921,7703863,7705912,7707961,7710015,7712037,7714085,7716142,7718190,7720242,7722290,7724140,7725611,7726738,7727624,7728527,7729148,7729431,7731480,7733445,7735202,7736658,7738046,7738968,7739966,7742014,7744068,7746116,7747507,7748838,7750672,7752578,7754493,7756463,7758462,7760417,7762454,7764469,7766441,7768439,7770237,7771458,7773100,7775044,7777091,7779139,7781187,7783235,7785283,7787331,7789379,7791427,7793475,7795523,7797580,7799628,7801612,7803474,7805168,7806680,7808028,7809129,7809756,7810810,7812514,7814227,7816275,7818323,7820252,7821997,7824054,7826102,7828150,7830198,7832246,7834294,7836342,7838390,7840438,7842486,7844534,7846582,7848630,7850678,7852726,7854774,7856831,7858879,7860927,7862984,7864819,7865957,7867856,7869904,7871952,7874000,7876048,7878096,7880144,7882192,7884240,7886283,7888176,7889822,7891158,7892026,7892855,7893089,7893967,7896015,7898063,7900111,7902159,7904207,7906255,7907697,7908241,7908700,7910418,7912392,7914365,7916402,7918450,7920498,7922554,7924602,7926650,7928698,7930746,7932794,7934842,7936890,7938938,7940987,7943034,7945087,7947142,7949190,7951235,7953286,7955342,7957394,7959428,7961391,7963241,7964937,7966460,7967782,7969031,7970573,7972621,7974678,7976416,7977671,7979639,7981051,7982210,7983208,7983413,7983438,7983463,7983488,7983513,7984378,7986003,7987897,7989820,7991868,7993847,7995571,7996572,7997007,7999055,8001103,8003151,8004882,8006534,8008099,8010147,8012199,8014232,8016192,8018130,8019454,8020969,8023017,8025065,8027113,8028540,8030527,8032528,8034576,8036624,8038672,8040719,8042662,8044586,8046429,8048252,8049864,8051157,8052219,8053089,8054922,8056970,8059018,8061066,8063114,8065167,8066793,8068841,8070889,8072937,8074202,8076031,8078048,8080096,8082144,8084192,8086240,8088259,8090019,8091525,8092683,8094716,8095919,8097669,8099671,8101608,8103454,8105059,8106431,8107846,8109408,8111050,8112319,8114156,8116065,8118113,8120168,8122216,8123862,8124107,8125067,8127115,8129172,8131021,8132550,8133927,8135196,8136276,8137331,8138391,8140220,8142275,8144100,8145388,8146485,8147253,8147938,8148633,8149336,8150488,8152536,8154551,8155742,8156382,8157653,8159708,8161756,8163804,8165852,8167900,8169948,8171996,8174044,8176092,8178100,8179816,8181249,8182399,8183790,8185838,8187886,8189926,8190569,8192395,8194452,8196500,8198556,8200303,8200612,8200712,8202112,8203824,8205859,8207907,8209964,8212012,8213782,8215830,8217878,8219926,8221983,8224031,8225596,8227232,8229072,8230540,8232596,8234644,8236692,8238740,8240768,8242013,8243844,8245895,8247950,8249998,8252054,8254102,8256159,8258190,8260180,8262144,8263956,8265565,8266629,8267523,8269114,8271153,8273181,8274955,8277003,8279051,8281108,8283156,8285204,8287192,8288600,8289522,8291570,8293618,8295674,8297722,8299770,8301818,8303866,8305914,8307962,8310010,8312058,8314106,8316154,8318202,8320250,8322307,8324305,8326111,8327656,8328748,8330740,8332788,8334845,8336893,8338941,8340989,8343037,8345085,8346963,8348170,8348950,8349306,8349809,8351857,8353905,8355953,8358001,8360049,8361952,8363552,8365116,8366777,8368626,8370222,8371238,8371836,8373776,8375827,8377883,8379940,8381997,8384045,8386093,8388141,8390198,8392254,8394280,8396195,8397838,8399241,8400123,8400596,8401029,8401604,8402129,8402641,8404651,8406699,8408709,8410559,8412168,8413618,8414878,8416018,8417696,8419653,8421246,8422615,8424604,8426433,8428040,8429489,8430686,8431521,8432007,8433292,8435243,8436995,8438461,8439593,8441576,8443468,8445020,8447071,8449119,8449972,8452020,8453747,8455795,8457597,8458007,8459756,8461804,8463852,8465900,8467807,8469273,8469556,8470892,8472940,8474290,8474315,8475349,8477406,8479463,8481511,8483559,8485607,8487655,8489703,8491751,8493799,8495853,8497908,8499627,8500803,8502851,8504736,8505638,8507370,8509418,8511466,8513514,8515562,8517610,8519658,8521692,8523175,8523924,8525972,8528020,8530068,8532116,8534172,8536224,8537971,8539296,8541344,8543392,8545440,8547488,8549536,8551584,8553632,8555680,8557728,8559776,8561833,8563350,8563805,8564673,8566721,8568737,8570784,8572837,8574885,8576933,8578981,8581029,8583082,8585130,8587178,8589226,8591242,8592855,8594114,8594960,8595280,8596097,8597998,8599840,8601851,8603907,8605955,8608004,8609790,8610760,8612517,8614245,8615030,8616494,8618542,8620590,8622638,8624688,8626284,8627387,8628080,8628783,8629640,8631688,8633736,8635784,8637832,8639883,8641931,8643979,8646027,8648075,8650132,8652011,8653580,8654743,8655558,8656670,8658718,8660766,8662814,8664862,8666750,8668155,8669368,8670026,8671401,8673456,8675504,8676365,8678413,8680452,8682500,8684548,8686596,8688577,8690612,8692016,8693405,8694363,8694947,8695545,8697331,8699272,8700687,8702206,8704263,8706311,8708365,8710422,8712477,8714534,8716484,8718483,8719874,8721931,8723985,8725900,8727655,8729136,8730514,8731718,8732875,8734923,8736980,8739028,8741076,8743124,8745179,8747227,8748757,8749791,8750925,8752973,8755021,8757069,8759117,8761165,8763213,8765266,8767294,8769177,8770914,8772470,8773804,8775079,8777135,8779192,8781240,8783288,8785336,8787384,8789432,8791480,8793528,8795585,8797633,8799681,8801729,8803777,8805831,8807888,8809945,8812001,8814051,8816099,8818152,8820209,8822265,8824313,8826361,8828409,8830466,8832514,8834571,8836557,8837850,8839426,8841243,8843299,8845356,8847404,8849452,8851500,8853548,8855596,8857644,8859692,8861740,8863788,8865836,8867884,8869932,8871987,8874021,8875930,8877625,8879532,8881562,8882689,8884611,8886659,8888707,8890755,8892803,8894860,8896908,8898951,8900989,8902754,8903838,8904724,8906648,8908696,8910744,8912792,8914829,8916328,8918376,8920424,8922472,8924520,8926568,8928616,8930665,8931937,8933697,8935745,8937801,8939829,8941814,8943841,8945673,8947240,8948743,8950222,8951604,8952764,8953881,8955056,8956373,8957831,8959130,8960304,8961427,8962487,8963537,8964719,8965752,8966822,8968044,8969154,8970828,8972286,8973663,8975126,8976257,8977531,8979106,8980289,8981479,8982881,8984276,8985643,8986963,8988194,8989431,8990502,8991170,8992309,8993565,8994982,8996465,8997860,8999247,9000604,9001719,9002888,9004257,9005665,9006788,9008415,9009761,9011053,9012075,9013181,9014367,9015587,9016675,9017865,9018247,9018998,9019730,9020619,9021598,9022329,9023498,9024161,9025265,9026367,9027508,9028726,9030375,9032032,9033497,9034090,9034824,9035316,9035589,9036960,9037935,9038460,9038822,9039434,9039997,9040827,9041761,9042455,9043156,9043988,9044667,9045340,9046094,9046799,9047513,9048503,9049124,9049472,9050638,9052148,9053129,9054584,9056126,9056647,9058170,9059553,9060140,9060433,9060674,9061158,9062767,9063887,9064469,9065017,9065406,9066197,9066363,9066498,9066567,9066642,9066734,9067247,9067955,9068913,9069509,9069781,9070093,9070920,9071805,9072337,9072929,9073447,9073520,9073591,9073955,9074782,9075530,9076028,9076636,9077148,9077687,9078267,9078496,9078768,9079315,9079924,9080497,9080719,9080993,9081165,9081505,9081811,9082174,9082753,9082871,9083360,9083919,9083993,9084126,9084244,9084404,9084563,9085036,9086321,9087574,9088155,9088377,9088459,9088932,9089374,9090058,9090550,9090892,9091135,9091521,9091939,9092258,9092571,9092881,9093333,9093479,9094170,9094889,9095364,9095838,9096373,9097013,9097422,9097875,9098273,9098607,9098909,9099304,9099493,9100788,9102471,9103625,9104681,9105585,9106501,9107675,9108939,9110183,9111432,9112804,9114123,9115525,9116940,9118239,9119553,9120924,9122329,9123621,9125071,9126490,9127982,9129523,9131007,9132360,9133539,9134734,9135906,9137097,9138196,9139114,9139981,9141186,9142487,9144384,9145978,9147607,9149131,9150592,9152159,9153787,9155375,9157040,9158819,9160634,9162443,9164243,9166088,9167825,9169616,9171353,9173011,9174776,9176373,9178075,9179831,9181579,9183259,9184834,9186516,9188006,9189642,9191192,9192800,9194279,9195791,9197393,9199246,9200546,9201823,9203027,9204296,9205494,9206805,9208055,9209410,9210892,9212355,9213943,9215526,9217044,9218566,9220046,9221503,9223034,9224566,9226001,9227472,9228867,9230381,9231859,9233019,9234194,9235289,9236486,9237715,9238924,9240236,9241455,9242797,9244071,9245280,9246463,9247617,9248798,9249951,9251131,9252631,9254544,9256033,9257567,9259001,9260409,9261983,9263557,9265485,9266901,9268205,9269857,9271325,9272900,9274411,9275985,9277775,9279297,9280866,9282379,9283950,9285732,9286720,9287741,9288779,9290057,9291863,9293434,9295021,9296554,9298215,9299583,9300933,9302240,9303592,9304795,9305683,9307194,9308935,9310479,9310871,9311256,9311643,9312793,9313949,9315143,9316395,9318267,9320110,9322079,9324057,9326015,9327949,9329728,9331492,9333120,9334282,9335686,9337071,9338345,9339568,9341222,9342939,9344730,9346533,9348313,9350076,9351739,9353549,9355162,9357083,9359009,9360359,9361439,9362963,9364641,9365649,9367206,9368922,9370599,9372185,9373901,9374997,9376171,9377379,9378945,9380600,9382286,9383977,9385265,9387031,9388626,9390407,9392220,9393930,9395585,9397308,9398935,9400625,9402392,9404159,9405775,9407560,9409251,9411030,9412827,9414661,9416347,9418128,9419866,9421468,9423211,9424993,9426778,9428573,9430399,9432010,9433824,9435527,9437221,9438881,9440571,9442272,9443866,9445530,9447323,9449072,9450709,9452436,9454152,9455887,9457630,9459323,9460983,9462748,9464401,9466196,9468046,9469644,9471429,9473120,9474863,9476663,9478304,9480090,9481861,9483408,9485145,9486849,9488418,9490133,9491881,9493712,9495415,9497225,9498822,9500622,9502438,9504115,9505787,9507475,9509114,9510813,9512642,9514360,9516138,9517980,9519811,9521658,9523466,9525325,9527181,9529085,9530840,9532686,9534428,9536127,9537848,9539641,9541260,9542975,9544685,9546376,9548062,9549775,9551395,9553007,9554950,9556881,9558762,9560680,9562615,9564537,9566435,9568358,9570270,9572167,9574051,9575056,9576902,9578737,9580470,9582240,9584034,9585833,9587595,9589404,9591216,9593081,9594816,9596539,9598387,9600087,9601878,9603612,9605396,9607174,9608938,9610764,9612453,9614279,9616095,9617903,9619658,9621355,9623092,9624893,9626686,9628520,9630311,9632105,9633857,9635485,9637163,9638923,9640645,9642447,9644143,9646021,9647834,9649481,9651353,9653204,9655029,9656855,9658543,9660263,9662087,9663937,9665701,9667396,9669218,9670979,9672808,9674471,9676168,9677785,9679440,9680962,9682475,9684074,9685725,9686482,9688065,9689533,9691208,9692814,9694510,9696038,9697764,9698841,9700503,9701757,9703256,9704784,9706401,9708047,9709748,9711304,9713043,9713982,9715678,9717225,9718703,9720277,9721097,9722681,9724213,9725772,9727452,9729044,9730744,9732315,9734031,9735677,9737265,9739295,9741276,9743242,9745224,9747240,9749043,9751039,9752919,9754935,9756963,9758759,9760771,9762812,9764668,9766682,9768699,9770686,9772678,9774710,9776699,9778712,9780663,9782599,9784423,9786463,9788498,9790211,9792019,9793943,9795812,9797647,9799419,9801140,9802950,9804805,9806699,9808572,9810420,9812209,9813902,9815624,9817389,9819211,9821058,9822907,9824753,9826525,9828267,9830009,9831894,9833773,9835597,9837458,9839286,9841011,9842650,9844440,9846334,9848156,9849994,9851853,9853684,9855392,9857131,9858915,9860775,9862539,9864403,9866296,9868179,9869942,9871672,9873525,9875403,9877223,9879080,9880830,9882591,9884314,9886135,9888005,9889823,9891658,9893505,9895224,9896972,9898811,9900686,9902535,9904428,9906239,9907959,9909803,9911700,9913569,9915372,9917180,9919047,9920831,9922558,9924382,9926082,9927568,9929116,9930642,9932253,9933735,9935313,9936929,9938413,9940139,9941716,9943237,9944978,9946492,9948181,9950145,9951919,9953654,9955568,9957285,9959088,9960857,9962534,9964057,9965662,9967182,9968792,9970279,9971840,9973430,9974954,9976635,9978301,9979915,9981777,9983376,9985222,9987113,9988905,9990603,9992474,9994208,9995834,9997408,9998981,10000645,10002266,10003768,10005424,10006904,10008514,10010073,10011558,10013267,10014639,10016219,10018136,10019852,10021595,10023427,10025188,10026990,10028856,10030603,10032303,10034082,10035652,10037327,10038853,10040368,10041892,10043349,10044967,10046472,10048102,10049727,10051281,10053190,10054703,10056400,10058269,10060044,10061697,10063485,10065067,10066594,10068289,10069892,10071539,10073036,10074483,10076098,10077562,10079225,10080775,10082225,10084062,10085623,10087221,10089084,10090748,10092437,10094216,10095944,10097698,10099535,10101299,10103012,10104859,10106626,10108341,10109978,10111833,10113592,10115334,10117161,10118863,10120638,10122373,10124112,10125796,10127480,10129218,10130727,10132366,10134116,10135665,10137467,10139116,10140849,10142485,10144201,10145891,10147549,10149329,10150923,10152736,10154410,10156194,10157879,10159621,10161333,10163108,10164604,10166251,10167840,10169643,10171280,10172978,10174537,10176121,10177679,10179198,10180737,10182484,10184084,10185831,10187423,10189159,10190953,10192697,10194367,10196107,10197999,10199754,10201464,10203167,10204768,10206335,10208052,10209822,10211457,10213005,10214667,10216325,10217792,10219389,10221060,10222567,10224092,10225810,10227476,10229222,10231066,10232845,10234576,10236383,10238153,10239896,10241733,10243544,10245202,10246736,10248610,10250192,10251810,10253489,10255060,10256683,10258107,10259825,10261263,10262779,10264527,10266095,10267746,10269515,10271005,10272680,10274541,10276405,10278096,10280010,10281729,10283337,10285214,10286830,10288367,10290106,10291719,10293388,10294832,10296401,10297848,10299379,10301061,10302621,10304226,10305999,10307596,10309383,10311257,10313036,10314779,10316690,10318492,10320180,10321962,10323669,10325249,10326890,10328482,10330143,10331550,10332934,10334631,10336026,10337581,10339365,10340875,10342483,10344173,10345649,10347296,10348914,10350559,10352382,10354115,10355704,10357464,10359245,10360937,10362750,10364403,10365920,10367638,10369021,10370590,10372059,10373556,10375048,10376597,10378228,10379873,10381406,10383202,10384959,10386743,10388483,10390141,10391932,10393682,10395383,10397097,10398870,10400611,10402356,10404049,10405804,10407621,10409299,10411053,10412836,10414516,10416163,10417897,10419719,10421384,10423108,10424886,10426704,10428361,10430051,10431811,10433521,10435144,10436834,10438529,10440367,10442151,10443869,10445521,10447237,10449056,10450845,10452644,10454169,10455615,10457463,10459278,10461114,10462648,10464438,10466226,10468105,10469836,10471516,10473225,10474993,10476796,10478452,10480108,10481890,10483649,10485503,10487180,10488852,10490622,10492407,10494182,10495909,10497550,10499299,10501167,10502855,10504621,10506390,10507924,10509747,10511594,10513412,10515223,10516936,10518728,10520576,10522322,10524124,10525837,10527535,10529236,10530924,10532611,10534300,10536042,10537803,10539708,10541605,10543503,10545438,10547380,10549325,10551266,10553167,10554874,10556652,10558543,10560428,10562204,10564014,10565803,10567609,10569437,10571344,10573278,10575174,10577069,10578921,10580749,10582673,10584511,10586347,10588162,10589956,10591824,10593639,10595564,10597509,10599419,10601238,10603048,10604878,10606737,10608650,10610564,10612467,10614299,10616129,10617925,10619735,10621645,10623501,10625327,10627145,10629038,10630860,10632622,10634416,10636300,10638228,10640170,10641950,10643862,10645764,10647670,10649589,10651531,10653455,10655359,10657145,10659060,10660994,10662927,10664834,10666670,10668522,10670260,10672008,10673774,10675472,10677218,10678933,10680740,10682535,10684327,10686089,10687900,10689645,10691529,10693265,10695102,10696862,10698730,10700469,10702183,10703963,10705669,10707378,10709180,10710865,10712727,10714502,10716376,10718195,10720062,10721916,10723750,10725623,10727466,10729327,10731150,10733011,10734860,10736682,10738534,10740316,10742174,10743973,10745778,10747667,10749430,10751257,10753066,10754908,10756771,10758578,10760370,10762180,10763982,10765778,10767568,10769334,10771128,10772901,10774753,10776516,10778396,10780100,10781913,10783726,10785424,10787261,10789010,10790850,10792654,10794310,10796075,10797789,10799489,10801299,10803126,10804988,10806839,10808784,10810674,10812401,10814293,10815930,10817837,10819605,10821545,10823299,10825035,10826900,10828669,10830410,10832317,10834102,10835830,10837520,10839201,10840870,10842626,10844323,10846049,10847765,10849451,10851155,10852907,10854639,10856396,10858075,10859858,10861630,10863359,10865115,10866877,10868641,10870333,10872066,10873808,10875609,10877355,10879080,10880838,10882641,10884458,10886075,10888018,10889967,10891561,10893417,10895049,10896907,10898717,10900630,10902192,10904079,10905611,10907581,10909435,10911108,10912841,10914566,10916317,10917726,10919659,10921138,10923140,10924655,10926546,10928033,10929721,10931422,10933198,10934862,10936363,10938198,10939698,10941613,10943136,10945051,10946563,10948322,10949978,10951827,10953480,10955080,10956822,10958395,10960263,10962250,10964188,10966190,10968152,10970129,10972140,10974002,10975974,10977974,10979880,10981344,10983202,10985119,10986610,10987944,10989357,10990041,10990894,10991687,10992676,10993993,10995489,10996338,10998350,11000366,11002391,11004409,11006446,11008466,11010496,11012496,11014442,11016369,11018042,11019709,11021435,11023163,11024903,11026566,11028321,11030077,11031751,11033443,11035217,11036802,11038758,11040485,11042127,11043696,11045403,11047103,11048913,11050677,11052435,11054325,11055979,11057754,11059489,11060458,11061302,11062845,11064026,11064660,11065289,11066940,11068606,11070416,11072206,11074004,11075795,11077649,11079339,11080962,11082758,11084743,11086705,11088697,11090680,11092664,11094642,11096618,11098571,11100506,11102324,11104256,11105736,11107320,11108087,11109456,11111200,11112686,11114078,11115589,11117044,11117968,11119393,11120825,11122392,11123984,11125720,11127571,11129425,11131239,11132778,11134311,11135849,11137433,11139008,11140622,11142195,11143761,11145385,11147219,11149092,11150949,11152866,11154864,11156731,11158578,11160453,11162311,11164201,11166073,11167695,11169629,11171571,11173211,11174803,11176320,11177327,11178937,11180421,11181309,11182960,11184493,11186065,11187667,11189447,11191417,11193001,11194988,11196963,11198189,11200154,11202112,11203935,11205907,11207889,11209808,11211073,11213019,11214976,11216731,11218124,11219918,11221762,11223655,11225569,11227236,11229091,11231107,11232922,11234885,11236325,11238304,11240177,11241784,11243784,11245421,11247410,11249389,11250600,11252566,11254526,11256349,11258324,11260309,11262240,11263438,11265400,11267338,11269091,11270461,11272249,11274093,11275973,11277890,11279551,11281398,11283405,11285365,11287370,11289350,11291279,11293257,11295227,11297030,11298754,11300495,11302205,11303810,11305368,11307112,11308540,11310196,11311761,11313381,11315179,11317075,11318934,11320717,11322488,11324120,11325934,11327795,11329553,11330929,11332670,11334291,11336037,11337529,11339241,11341063,11343061,11345048,11347014,11348973,11350938,11352886,11354853,11356822,11358006,11359308,11360950,11362431,11364005,11366007,11367850,11369216,11371022,11373019,11374899,11376033,11377947,11379919,11381757,11383407,11385269,11387200,11389180,11390997,11392622,11394474,11396495,11398436,11400285,11401669,11403528,11405530,11407363,11409137,11410439,11412244,11414147,11415954,11417393,11419166,11420844,11422760,11424130,11426018,11427990,11429825,11431599,11433115,11434385,11436033,11437825,11439769,11441687,11443017,11444937,11446894,11448863,11450768,11452734,11454667,11456605,11458576,11460453,11462399,11464373,11466289,11468246,11470213,11472140,11474099,11476075,11478016,11479997,11481956,11483909,11485901,11487902,11489808,11491306,11492850,11494850,11496880,11498877,11500568,11502481,11504347,11506326,11508181,11509902,11511541,11513086,11514687,11516149,11517644,11518693,11520650,11522637,11524397,11525533,11526998,11528382,11530168,11532123,11533960,11535663,11537652,11539602,11541517,11543400,11545023,11546774,11548582,11550204,11551914,11553695,11555455,11557355,11559268,11561108,11562926,11564649,11566371,11567681,11568674,11570479,11572038,11573754,11575152,11576845,11578248,11579966,11581721,11583547,11585263,11586985,11588588,11590412,11592334,11594171,11595867,11597593,11599111,11600603,11601755,11603593,11605425,11607298,11609169,11610794,11612197,11613580,11615484,11617132,11618923,11620762,11622498,11624354,11626097,11627912,11629658,11631576,11633441,11635300,11637068,11638672,11640217,11641907,11643632,11645524,11647303,11649087,11650807,11652628,11654369,11656022,11657404,11658416,11659244,11660475,11661980,11663794,11665487,11667330,11669037,11670747,11672296,11673892,11675778,11677529,11679270,11680937,11682487,11684206,11685972,11687741,11689611,11691410,11693202,11694996,11696686,11698406,11700203,11702019,11703776,11705189,11706415,11707561,11708725,11709887,11711011,11712078,11713274,11714678,11716314,11717944,11719584,11721175,11722770,11724430,11726059,11727691,11729575,11731339,11733104,11734852,11736565,11738337,11740092,11741810,11743549,11745265,11747062,11749032,11750776,11752546,11754299,11756217,11758160,11760045,11761969,11763884,11765801,11767703,11769609,11771477,11773406,11775295,11777324,11779189,11781064,11782964,11784906,11786618,11788330,11790007,11791718,11793395,11795081,11796789,11798453,11800339,11802035,11803725,11805417,11807119,11808806,11810489,11812170,11813928,11815772,11817533,11819270,11821037,11822780,11824524,11826285,11828029,11829843,11831345,11832888,11834412,11835961,11837501,11839048,11840579,11842135,11843716,11845221,11846742,11848181,11849964,11851673,11853353,11855038,11856744,11858485,11860186,11861911,11863687,11865326,11867056,11868771,11870523,11872217,11873949,11875625,11877359,11879088,11880825,11882546,11884297,11886064,11887735,11889448,11891133,11892963,11894720,11896451,11898204,11899943,11901716,11903450,11905204,11907070,11908811,11910611,11912440,11914310,11916102,11917923,11919716,11921531,11923341,11925181,11926984,11928847,11930766,11932533,11934321,11936121,11937983,11939581,11941207,11942790,11944377,11945970,11947575,11949161,11950848,11952540,11954177,11955801,11957432,11959060,11960668,11962306,11963942,11965809,11967618,11969430,11971227,11973029,11974809,11976581,11978373,11980192,11981975,11983611,11984856,11986486,11988083,11989759,11990755,11992399,11994184,11995967,11997804,11999672,12001550,12003597,12005481,12007412,12009363,12011230,12013161,12015198,12017136,12019038,12020955,12022833,12024765,12026808,12028627,12030217,12031840,12033482,12035005,12036653,12038504,12040174,12041782,12043409,12044980,12046669,12048640,12050431,12052183,12053784,12055516,12057273,12058972,12060567,12062329,12064221,12066010,12067669,12069306,12071090,12072821,12074447,12076085,12077997,12079993,12081995,12083989,12085982,12087986,12090006,12092030,12094051,12096074,12098069,12100082,12102074,12104031,12105788,12107586,12109518,12111459,12113348,12115301,12117272,12119139,12120959,12122756,12124593,12126375,12128290,12130228,12132121,12134045,12135862,12137793,12139698,12141614,12143474,12145377,12147293,12149211,12151087,12152699,12154533,12156217,12157893,12159611,12161264,12162943,12164781,12166543,12168409,12170230,12172062,12173967,12175851,12177678,12179551,12181354,12182941,12184402,12185796,12187215,12188984,12190610,12192281,12193921,12195563,12197198,12198831,12200507,12202120,12203667,12205261,12206853,12208498,12210148,12211821,12213464,12215105,12216929,12218530,12220128,12221760,12223338,12224949,12226537,12228126,12229677,12231471,12233131,12234752,12236400,12237978,12239627,12241262,12242865,12244605,12246207,12247817,12249427,12251002,12252602,12254203,12255803,12257384,12259160,12260839,12262492,12264142,12265755,12267411,12269048,12270673,12272388,12274000,12275557,12277094,12278600,12280110,12281637,12283160,12284649,12286413,12287973,12289540,12291108,12292704,12294262,12295804,12297328,12298930,12300691,12302272,12303859,12305478,12307096,12308683,12310200,12311761,12313514,12315111,12316679,12318239,12319824,12321403,12322921,12324402,12325995,12327747,12329327,12330938,12332537,12334159,12335733,12337267,12338823,12340566,12342218,12343818,12345430,12347066,12348718,12350319,12351901,12353535,12355329,12356893,12358506,12360103,12361746,12363340,12364937,12366487,12368191,12370197,12372199,12374171,12376188,12378139,12380127,12382034,12383987,12385905,12387883,12389792,12391767,12393719,12395710,12397647,12399618,12401597,12402982,12404344,12405682,12406966,12408453,12409878,12411257,12412634,12414102,12415482,12416813,12418192,12419659,12421098,12422484,12423862,12425211,12426580,12427994,12429368,12430731,12432212,12433647,12435033,12436436,12437907,12439321,12440720,12442158,12443571,12444991,12446352,12447724,12449020,12450607,12452024,12453389,12454770,12456136,12457515,12458874,12460251,12461734,12463091,12464467,12465824,12467185,12468780,12470253,12471819,12473190,12474526,12475896,12477272,12478673,12480084,12481506,12482879,12484361,12485778,12487148,12488543,12490033,12491459,12492861,12494265,12495719,12497273,12498804,12500402,12501991,12503447,12504869,12506385,12507820,12509344,12510851,12512396,12513882,12515460,12516792,12517999,12519288,12520686,12521925,12523259,12524561,12525817,12527361,12528808,12530263,12531752,12533263,12534600,12536017,12537397,12538764,12540169,12541646,12543050,12544471,12546266,12547965,12549569,12551281,12552878,12554593,12556191,12557871,12559641,12561314,12562957,12564651,12566348,12567989,12569678,12571320,12573043,12574799,12576632,12578273,12580111,12581769,12583543,12585174,12586956,12588768,12590501,12592197,12593914,12595722,12597358,12599099,12600749,12602527,12604262,12605956,12607552,12609247,12610887,12612556,12614173,12615833,12617552,12619302,12621036,12622679,12624462,12626085,12627814,12629450,12631195,12632921,12634420,12635387,12637251,12639219,12640672,12642243,12643744,12645545,12647155,12648615,12650369,12651983,12653603,12655258,12656771,12658293,12660098,12661735,12663438,12665095,12666713,12668536,12670239,12671698,12673425,12675197,12676893,12678252,12679960,12681797,12683525,12685198,12686996,12688793,12690523,12692324,12694176,12695904,12697602,12699293,12701124,12702855,12704647,12706353,12708006,12709838,12711687,12713489,12715316,12717180,12718941,12720438,12721931,12723336,12725106,12726837,12728580,12730202,12731522,12733285,12735047,12736908,12738633,12740366,12741700,12743287,12744923,12746570,12748276,12749735,12751161,12753016,12754881,12756721,12758402,12759739,12761481,12763351,12765320,12767219,12769055,12770374,12771922,12773731,12775551,12777327,12778800,12780375,12782141,12783932,12785725,12787460,12788789,12790508,12792322,12794256,12796060,12797862,12799267,12800750,12802444,12804147,12805884,12807434,12808996,12810698,12812552,12814363,12816175,12817516,12819138,12820963,12822926,12824757,12826639,12828151,12829567,12831285,12833085,12834876,12836493,12838170,12839614,12840926,12841916,12842875,12844135,12845440,12846796,12847971,12849295,12850667,12851822,12852912,12853892,12854997,12856233,12857370,12858539,12859915,12861150,12862527,12863855,12865230,12866560,12867781,12869009,12870516,12872356,12873952,12875513,12877048,12878567,12880159,12881731,12883318,12884906,12886489,12888056,12889662,12891292,12892933,12894554,12896173,12897686,12899216,12900693,12902195,12903803,12905321,12906785,12908262,12909728,12911260,12913081,12914798,12916518,12918204,12919915,12921609,12923275,12924959,12926706,12928414,12930131,12931851,12933573,12935300,12937007,12938719,12940427,12942134,12943824,12945500,12947083,12948702,12950381,12952097,12953773,12955424,12957147,12958939,12960690,12962405,12964137,12966066,12967999,12969851,12971722,12973642,12975526,12977414,12979156,12980934,12982455,12983918,12985709,12987407,12989117,12990830,12992512,12994186,12995896,12997623,12999379,13001120,13002816,13004466,13006200,13007855,13009515,13011234,13012942,13014781,13016466,13018135,13019815,13021448,13023124,13024815,13026499,13028161,13029870,13031544,13033048,13034733,13036217,13037897,13039381,13041077,13042822,13044438,13046048,13047656,13049281,13050859,13052446,13054053,13055653,13057382,13058999,13060558,13062189,13063818,13065455,13067039,13068678,13070432,13072053,13073656,13075206,13076795,13078356,13079969,13081520,13083131,13084803,13086385,13087806,13089448,13090881,13092478,13093893,13095509,13097107,13099135,13101123,13103088,13105083,13107086,13109081,13111054,13113080,13115134,13117117,13119064,13121017,13123008,13124967,13126927,13128931,13130914,13132817,13134611,13136385,13138174,13139985,13141794,13143577,13145366,13147327,13149165,13151023,13152891,13154752,13156616,13158465,13160306,13162170,13163823,13165388,13167179,13168873,13170382,13172070,13173419,13174992,13176683,13178386,13180081,13181731,13183364,13185059,13186782,13188445,13190285,13192007,13193797,13195538,13197273,13199003,13200791,13202559,13204287,13206118,13207899,13209699,13211404,13213133,13214902,13216724,13218441,13220299,13221941,13223566,13225204,13226862,13228502,13230158,13231783,13233432,13235278,13236991,13238715,13240418,13242140,13243864,13245607,13247306,13249158,13251118,13253132,13255138,13257183,13259170,13261169,13263148,13265150,13267154,13269184,13271193,13273201,13275212,13277239,13279243,13281279,13283304,13285316,13287337,13289337,13291345,13293210,13295085,13296820,13298689,13300251,13301554,13303159,13305019,13306822,13308723,13310600,13312383,13314202,13315937,13317941,13319944,13321998,13324016,13325913,13327447,13329007,13330582,13332193,13333983,13335808,13337575,13339342,13341137,13342927,13344754,13346458,13348192,13349846,13351480,13353255,13355013,13356790,13358522,13360279,13362039,13363768,13365456,13367129,13368945,13370760,13372576,13374381,13376159,13377947,13379710,13381517,13383322,13385225,13387206,13389183,13391171,13393153,13395042,13396848,13398687,13400532,13402362,13404200,13405993,13407798,13409713,13411575,13413443,13415254,13417238,13419187,13421167,13423167,13425134,13427096,13429090,13431068,13433036,13434941,13436939,13438814,13440681,13442503,13444261,13446034,13447937,13449849,13451779,13453753,13455678,13457557,13459304,13461054,13462927,13464811,13466647,13468353,13469949,13471424,13472996,13474845,13476807,13478758,13480731,13482690,13484547,13486344,13488230,13489992,13491832,13493681,13495462,13497381,13499084,13500971,13502784,13504650,13506435,13508149,13509914,13511660,13513407,13515172,13516979,13518470,13520194,13521679,13523303,13524747,13526211,13527679,13529314,13530104,13531164,13532329,13533327,13534071,13534919,13535739,13536719,13537834,13538835,13540024,13540947,13541868,13542880,13543715,13544615,13546356,13548190,13549994,13551839,13553796,13555722,13557470,13559214,13560910,13562674,13564449,13566193,13567877,13569613,13571344,13573071,13574728,13576322,13578190,13580120,13582018,13583990,13585939,13587878,13589898,13591860,13593864,13595700,13597557,13599414,13601254,13603292,13605296,13607275,13609274,13611322,13613363,13615388,13617424,13619463,13621265,13622858,13624406,13625962,13627461,13629070,13630645,13632382,13634410,13636429,13638438,13640479,13642479,13644509,13646540,13648553,13650587,13652493,13654498,13656473,13658069,13659693,13661112,13662458,13663815,13665358,13667002,13668713,13670362,13672021,13674048,13676078,13678074,13680119,13681987,13683635,13685369,13686972,13688542,13690256,13691888,13693773,13695652,13697573,13699494,13701368,13703250,13705175,13707102,13709056,13711036,13712901,13714547,13716346,13718026,13719956,13721899,13723882,13725819,13727780,13729711,13731634,13733562,13735490,13736689,13737781,13738871,13739949,13741619,13743368,13745167,13746951,13748362,13749690,13750913,13752283,13753930,13755758,13757567,13759430,13761352,13763253,13765166,13767098,13768842,13770276,13771816,13773260,13774768,13776282,13777722,13779348,13780971,13782334,13784189,13786077,13787927,13789525,13791134,13792753,13794424,13796266,13797852,13799431,13800771,13802345,13803961,13805787,13807582,13809165,13810706,13812136,13813730,13815372,13817244,13818959,13820658,13822318,13824111,13825830,13827557,13829266,13830960,13832695,13834436,13836182,13837875,13839800,13841727,13843645,13845574,13847517,13849438,13851349,13853293,13855226,13857274,13859277,13861274,13863292,13865281,13867312,13869281,13871317,13873352,13875386,13877424,13879446,13881492,13883519,13885550,13887570,13889596,13891649,13893697,13895733,13897774,13899805,13901856,13903879,13905926,13907974,13909991,13912011,13914033,13916067,13918067,13920084,13922090,13924125,13925523,13926584,13927688,13928748,13929802,13930563,13931288,13932056,13933030,13934944,13936702,13938619,13940381,13941889,13943377,13944879,13946467,13947969,13949488,13950977,13952539,13954039,13955537,13957064,13958573,13960059,13961450,13962816,13964202,13965610,13966989,13968322,13969692,13971151,13972542,13973884,13975209,13976590,13978266,13979784,13981426,13983105,13984704,13986407,13988254,13990075,13991957,13993688,13995529,13997193,13998892,14000551,14002240,14003919,14005587,14007271,14008945,14010686,14012244,14013773,14015309,14016900,14018469,14020015,14021574,14023264,14024814,14026382,14027930,14029505,14031028,14032529,14034051,14035595,14037490,14039392,14041345,14043273,14045242,14047218,14049201,14051198,14053230,14055109,14057038,14058928,14060833,14062772,14064667,14066580,14068462,14070475,14072488,14074540,14076564,14078616,14080567,14082559,14084524,14086516,14088561,14090574,14092620,14094669,14096691,14098466,14100139,14101960,14103835,14105729,14107582,14109412,14111313,14113097,14114812,14116436,14117900,14119404,14120920,14122308,14123890,14125671,14127576,14129513,14131307,14133015,14134861,14136547,14138307,14140106,14141868,14143802,14145679,14147647,14149554,14151154,14152638,14154321,14156065,14157896,14159733,14161524,14163408,14165254,14167081,14168903,14170719,14172549,14174433,14176124,14177814,14179501,14181189,14182904,14184593,14186251,14187995,14189929,14191785,14193703,14195627,14197524,14199420,14201280,14203105,14205104,14207047,14208915,14210834,14212765,14214694,14216612,14218471,14220388,14222174,14223999,14225778,14227556,14229388,14231251,14233221,14235080,14236921,14238770,14240524,14242414,14244217,14246052,14247943,14249795,14251634,14253573,14255452,14257315,14259141,14260693,14261763,14263158,14264720,14266289,14267869,14269460,14271041,14272669,14274293,14275887,14277593,14279408,14281208,14282893,14284740,14286560,14288235,14290056,14291825,14293539,14295343,14297055,14298870,14300611,14302546,14304427,14306346,14308277,14310236,14312131,14313710,14315591,14317391,14318879,14320375,14321880,14323641,14325288,14326984,14328751,14330420,14332020,14333594,14335245,14336868,14338512,14340127,14341800,14343713,14345667,14347636,14349625,14351624,14353612,14355609,14357612,14359608,14361638,14363636,14365621,14367617,14369427,14371273,14373020,14374840,14376613,14378481,14380235,14382146,14383886,14385478,14387067,14388615,14390271,14391937,14393397,14394850,14396430,14398199,14399810,14401274,14402873,14404278,14405868,14407280,14408847,14410434,14412004,14413565,14415031,14416541,14417956,14419453,14420858,14422332,14423955,14425621,14427179,14428831,14430425,14432081,14433620,14435227,14436868,14438596,14440225,14441782,14443406,14444969,14446594,14448127,14449702,14451382,14453007,14454637,14456264,14457920,14459574,14461197,14462793,14464380,14466144,14467806,14469423,14471093,14472734,14474395,14476015,14477640,14479413,14481032,14482644,14484252,14485860,14487504,14489102,14490707,14492294,14494180,14495970,14497757,14499525,14501326,14503095,14504895,14506662,14508546,14510196,14511848,14513486,14515111,14516757,14518381,14519997,14521615,14523501,14525313,14527144,14528964,14530784,14532603,14534415,14536199,14538091,14539888,14541650,14543406,14545159,14546927,14548654,14550403,14552149,14553980,14555807,14557564,14559331,14561006,14562549,14564130,14565762,14567419,14569236,14571002,14573050,14575098,14576906,14578735,14580479,14582326,14584330,14586283,14588077,14589919,14591787,14593713,14595664,14597660,14599630,14601455,14603122,14604903,14606621,14608454,14610307,14612233,14614281,14616328,14618376,14620433,14622353,14624245,14626002,14627771,14629497,14631327,14632974,14634764,14636820,14638857,14640797,14642781,14644680,14646602,14648533,14650425,14652263,14654030,14655630,14657425,14659360,14661298,14663076,14664964,14666907,14668845,14670647,14672517,14674474,14676264,14677708,14679282,14680980,14682757,14684545,14686437,14688310,14690119,14691578,14693162,14694947,14696804,14698639,14700517,14702263,14703975,14705569,14707270,14709071,14710935,14712810,14714750,14716727,14718670,14720532,14722404,14724047,14725710,14727285,14728868,14730665,14732383,14734099,14735806,14737439,14739088,14740729,14742408,14743980,14745670,14747574,14749505,14751359,14753263,14754956,14756792,14758443,14760277,14761969,14763783,14765462,14767360,14769279,14771177,14772886,14774684,14776323,14778108,14780070,14781933,14783596,14785203,14786907,14788687,14790376,14792010,14793456,14794909,14796389,14797877,14799326,14800801,14802253,14803860,14805885,14807904,14809927,14811933,14813957,14815985,14818009,14820011,14821843,14823700,14825559,14827415,14829278,14831073,14832602,14834103,14835659,14837203,14838744,14840265,14841577,14843189,14844923,14846764,14848554,14850389,14852219,14854158,14855994,14857884,14859508,14861301,14863218,14865142,14867085,14869041,14870942,14872883,14874887,14876736,14878279,14879860,14881492,14883183,14884992,14886875,14888670,14890549,14892357,14894260,14896297,14898317,14900339,14902327,14904139,14905975,14907785,14909611,14911464,14913181,14914771,14916383,14918003,14919747,14921609,14923436,14925097,14926895,14928929,14930966,14932990,14934973,14936779,14938641,14940644,14942553,14944287,14946091,14947834,14949707,14951590,14953441,14955133,14956922,14958564,14960251,14961870,14963671,14965722,14967757,14969800,14971699,14973285,14974901,14976578,14978286,14979949,14981606,14982904,14984369,14985923,14987608,14989403,14990957,14992079,14993518,14995487,14997481,14999323,15001265,15003301,15005349,15007333,15009345,15011214,15013080,15014888,15016606,15018403,15020120,15021916,15023616,15025355,15027029,15028723,15030349,15031932,15033617,15035310,15037025,15038590,15040135,15041574,15043182,15044989,15046866,15048672,15050484,15052034,15053623,15055019,15056558,15058132,15059764,15061393,15063063,15064770,15066515,15068213,15069942,15071722,15073547,15075219,15076930,15078503,15080229,15082007,15083649,15084930,15086274,15087693,15089273,15091126,15092898,15094355,15095815,15097199,15098580,15099926,15101367,15102864,15104444,15106047,15107656,15109240,15110857,15112429,15113989,15115354,15116789,15118252,15119758,15121162,15122681,15124199,15125786,15127401,15128957,15130602,15132182,15133780,15135403,15136993,15138603,15140003,15141680,15143343,15145031,15146690,15148322,15149886,15151474,15153099,15154706,15156248,15157797,15159347,15160992,15162628,15164275,15165805,15167348,15168934,15170517,15172157,15173851,15175499,15177192,15178710,15180271,15181768,15183314,15184962,15186694,15188522,15190316,15191963,15193716,15195552,15197395,15199200,15200949,15202393,15203828,15205240,15206683,15208126,15209700,15211389,15213099,15214770,15216497,15218284,15220043,15221714,15223513,15225045,15226737,15227941,15229435,15230983,15232822,15234490,15236455,15238154,15240060,15241681,15243515,15244974,15246768,15248401,15250177,15251469,15252781,15253672,15254804,15256498,15257976,15259199,15260581,15262065,15263535,15265024,15266489,15267959,15269417,15270812,15272176,15273558,15274977,15276394,15277655,15278890,15279912,15280933,15282722,15284186,15285743,15287060,15288519,15289955,15291601,15293425,15295387,15297415,15299207,15301173,15303102,15304805,15306588,15307580,15308328,15309126,15310035,15311036,15312036,15313190,15314187,15315246,15316113,15316896,15317845,15318872,15319734,15320651,15321526,15322457,15323396,15324130,15325023,15325852,15326794,15327764,15328868,15329741,15330657,15331951,15333202,15333764,15334306,15334848,15335363,15335883,15336931,15337938,15339018,15339996,15340742,15341513,15342499,15343363,15344407,15345460,15346313,15347320,15348246,15349022,15349565,15350085,15350688,15351432,15352300,15353370,15353809,15354691,15355293,15356031,15356725,15357454,15358557,15359519,15360555,15361623,15362196,15362880,15363372,15363937,15364531,15365269,15365957,15366872,15367603,15368390,15369061,15369979,15371250,15372014,15372841,15373846,15374804,15375824,15376662,15377707,15378452,15379345,15380427,15381394,15382287,15382972,15383947,15384223,15384842,15385721,15386779,15387169,15387737,15388710,15389388,15390105,15390678,15391290,15391982,15392891,15393814,15394674,15395291,15395986,15396706,15397481,15399538,15401339,15402114,15403102,15404369,15405634,15406416,15407727,15408801,15409979,15410760,15411722,15413041,15414208,15415807,15417379,15418862,15420422,15422074,15422119,15422163,15422245,15422293,15422385,15422430,15422536,15422758,15423123,15423583,15424154,15424775,15425356,15426028,15426842,15427527,15428602,15430024,15431502,15432970,15434344,15436023,15437631,15439178,15440821,15442449,15444127,15445796,15447506,15449282,15450985,15452614,15454189,15455891,15457564,15459095,15460648,15462132,15463497,15464462,15465366,15466092,15466751,15467338,15467987,15468572,15469130,15469672,15470094,15470470,15470699,15470857,15470930,15470980,15471027,15471072,15471252,15473300,15473388,15473436,15473483,15473528,15473572,15473617,15473665,15473712,15473757,15473801,15473867,15474110,15474929,15476405,15477683,15479153,15480602,15482017,15483308,15484338,15485442,15486305,15486963,15487674,15488577,15489341,15490180,15491032,15491958,15492946,15493850,15494695,15495451,15496203,15497078,15498051,15498875,15499673,15500480,15501323,15502080,15502745,15503287,15503810,15504011,15504057,15504106,15504153,15504198,15504242,15504289,15504338,15504385,15504430,15504474,15504522,15504571,15506299,15507932,15509378,15510759,15512076,15513391,15514718,15516058,15517337,15518647,15519927,15521283,15522534,15523745,15525074,15526224,15527269,15528315,15529248,15530144,15531118,15531936,15532719,15533722,15534842,15535936,15537286,15538708,15540322,15541971,15543537,15545153,15546832,15548220,15549611,15550801,15551996,15553237,15554566,15556061,15557478,15558875,15559913,15560881,15561963,15563125,15564313,15565587,15566776,15568030,15569270,15570554,15571866,15573208,15574530,15575886,15577214,15578544,15580344,15581451,15581496,15581546,15581593,15581638,15581682,15581890,15582453,15583349,15584305,15585478,15586960,15588651,15590373,15592167,15593897,15595615,15597338,15599093,15600866,15602682,15604539,15606317,15608054,15609502,15610856,15612225,15613600,15615348,15617190,15618999,15620897,15622803,15624725,15626662,15628556,15630387,15632289,15634149,15635949,15637734,15639487,15641152,15642959,15644854,15646565,15647907,15649310,15650537,15651223,15651404,15651452,15651501,15651549,15651594,15651640,15651688,15652293,15653135,15654146,15655350,15656586,15657994,15658528,15659462,15660532,15661434,15662334,15663386,15664258,15665900,15667543,15669076,15670717,15672461,15674059,15675649,15677304,15679040,15680724,15682209,15684018,15685665,15687186,15688801,15690494,15692125,15693695,15695363,15697115,15698773,15700343,15701938,15703757,15705445,15707106,15708618,15710468,15712322,15714149,15715932,15717749,15719687,15721712,15723726,15724890,15724939,15724990,15725137,15725355,15725644,15726055,15726502,15727080,15727735,15728679,15729728,15730814,15732197,15733582,15734961,15736443,15737898,15739246,15740605,15742037,15743522,15745163,15746810,15748437,15750017,15751614,15753120,15754717,15756201,15757643,15759132,15760599,15762028,15763515,15765124,15766874,15768560,15770238,15771872,15773508,15775154,15776823,15778379,15779760,15781210,15782662,15784063,15785240,15786278,15787459,15788537,15789583,15790653,15791683,15792705,15793734,15795014,15797020,15798444,15799861,15801248,15802574,15803876,15805219,15806531,15807777,15809090,15810397,15811726,15812902,15814142,15815443,15816582,15817603,15818533,15819504,15820479,15821360,15822119,15823021,15824112,15825218,15826436,15827797,15829334,15831006,15832585,15834171,15835826,15837320,15838766,15840113,15841230,15842398,15843726,15845108,15846590,15848030,15849255,15850229,15851234,15852365,15853572,15854857,15856075,15857355,15858572,15859805,15861083,15862360,15863753,15865039,15866373,15867687,15869077,15871125,15872534,15873873,15874915,15875778,15877182,15878377,15879473,15880334,15881287,15882241,15883108,15883899,15885181,15886682,15888218,15889570,15891024,15892541,15893817,15895205,15896633,15898156,15899548,15900953,15902401,15903814,15905231,15906422,15907668,15908782,15910116,15911678,15913332,15915053,15916701,15918107,15919544,15921035,15922569,15924057,15925471,15926947,15928377,15929628,15930911,15931986,15933077,15933939,15934900,15936110,15937401,15938753,15940168,15941533,15942912,15944293,15945636,15947575,15948191,15948236,15948281,15948372,15948441,15948504,15948567,15948742,15949021,15949418,15949941,15950568,15951176,15951783,15952510,15953234,15954051,15955400,15956836,15958289,15959709,15961242,15962938,15964444,15966029,15967695,15969325,15971023,15972689,15974399,15976182,15977873,15979473,15981135,15982800,15984448,15985921,15987438,15988842,15990058,15990970,15991754,15992437,15993070,15993701,15994262,15994841,15995376,15995869,15996234,15996549,15996765,15996855,15996939,15996988,15997033,15997071,15998274,15999398,15999446,15999495,15999540,15999585,15999630,15999678,15999727,15999772,15999817,15999862,16000005,16000391,16001709,16003053,16004465,16005881,16007305,16008670,16009781,16010881,16011881,16012635,16013260,16014159,16015008,16015798,16016637,16017525,16018485,16019453,16020293,16021084,16021842,16022600,16023573,16024396,16025189,16025968,16026806,16027549,16028249,16028909,16029507,16029829,16029915,16029963,16030012,16030057,16030095,16030140,16030188,16030237,16030282,16030320,16030365,16030413,16031116,16032754,16032799,16032844,16032889,16032931,16032980,16033048,16033914,16035008,16036095,16037167,16038212,16039256,16040384,16041465,16042428,16043551,16044682,16045918,16047396,16049065,16050736,16052519,16054109,16055555,16057022,16058393,16059692,16060763,16062005,16063367,16064611,16065872,16067159,16068570,16070116,16071704,16073155,16074765,16076465,16077946,16079421,16080993,16082596,16084057,16085116,16086085,16087040,16088187,16089409,16090417,16090977,16091017,16091062,16091110,16091159,16091204,16091394,16093442,16093517,16093561,16093670,16093867,16094115,16094481,16094940,16095479,16096101,16096896,16098002,16099161,16100432,16101916,16103311,16104794,16106407,16107960,16109581,16111121,16112770,16114480,16116268,16118033,16119812,16121566,16123241,16124899,16126533,16128115,16129618,16131170,16132708,16134266,16135796,16137575,16139344,16141085,16142760,16144445,16146092,16147754,16149341,16150831,16152227,16153759,16155266,16156526,16157625,16158771,16159860,16160942,16161978,16163042,16164057,16165047,16165994,16167803,16169851,16171357,16172310,16173321,16174177,16175070,16176083,16177034,16177943,16178927,16179812,16180689,16181442,16182326,16183453,16184729,16186101,16187320,16188652,16190014,16191417,16192845,16194257,16195702,16197142,16198455,16199546,16200547,16201579,16202504,16203667,16204794,16205913,16207067,16208223,16209198,16210262,16211523,16212784,16214064,16215371,16216523,16217606,16218870,16220059,16221220,16222468,16223717,16225086,16226415,16227680,16228963,16230226,16231477,16232812,16234105,16235450,16236807,16238341,16239671,16240906,16242158,16243546,16244920,16246320,16247732,16249135,16250551,16252000,16253411,16254740,16256050,16257365,16258798,16260185,16261569,16262957,16264295,16265609,16266878,16268045,16269215,16270360,16271678,16272975,16274127,16275204,16276404,16277531,16278605,16279471,16281077,16282457,16283723,16284958,16286289,16287633,16289032,16290476,16291891,16293319,16294726,16296150,16297525,16298797,16300129,16301495,16302882,16304293,16305689,16307009,16308316,16309579,16310768,16311976,16313149,16314391,16315666,16316848,16317963,16319170,16320257,16321349,16322331,16323615,16325347,16326255,16327239,16328122,16329024,16330024,16331006,16331892,16332857,16333783,16334701,16335513,16336359,16337389,16338715,16340072,16341329,16342626,16343999,16345369,16346815,16348207,16349644,16351100,16352483,16353627,16354627,16355661,16356617,16357768,16358869,16360012,16361069,16362265,16363269,16364297,16365536,16366796,16368044,16369355,16370564,16371633,16372832,16374038,16375215,16376461,16377709,16379022,16380366,16381653,16382937,16384215,16385472,16386766,16388093,16389376,16390774,16392350,16394398,16394553,16394650,16395942,16397227,16398164,16399246,16400419,16401623,16401754,16401892,16403874,16405179,16406291,16407285,16408278,16409304,16410594,16411851,16413206,16414355,16415597,16416970,16418261,16419712,16421095,16422463,16423726,16425052,16426575,16428243,16429755,16431236,16432627,16434050,16435529,16437005,16438425,16439942,16441459,16442953,16444349,16445813,16447327,16448845,16450414,16452066,16453758,16455363,16456860,16458413,16459957,16461548,16463102,16464571,16466057,16467519,16468996,16470385,16471682,16472888,16474096,16475318,16476549,16477845,16479142,16480302,16481459,16482663,16484456,16486078,16487197,16488273,16489179,16490228,16491396,16492653,16493769,16494830,16495785,16496812,16497765,16498767,16499941,16501148,16502418,16503624,16504676,16505862,16507126,16508558,16509841,16511191,16512394,16513617,16515173,16516707,16518329,16520011,16521650,16523321,16524885,16526422,16528000,16529658,16531342,16533095,16534748,16536391,16537847,16539271,16540611,16542000,16543380,16544732,16546287,16547902,16549461,16550984,16552476,16553930,16555351,16556779,16558198,16559594,16560957,16562308,16563990,16565633,16566330,16567052,16567892,16568834,16569859,16570902,16571986,16573156,16574343,16575520,16576726,16577973,16579205,16580598,16581993,16583339,16584831,16586266,16587767,16589259,16590732,16592238,16593815,16595511,16597151,16598723,16600375,16602040,16603771,16605535,16607313,16609171,16610918,16612500,16614109,16615745,16617390,16619112,16620845,16622571,16624332,16626047,16627753,16629398,16630962,16632740,16634538,16636293,16638009,16639696,16641450,16643164,16644692,16645925,16647067,16647927,16648760,16649990,16651131,16652780,16654316,16655888,16657580,16658752,16658801,16658846,16658891,16658936,16658984,16659195,16660162,16661255,16662372,16663430,16664464,16665490,16666692,16667750,16668753,16669878,16671012,16672304,16673791,16675513,16677203,16678962,16680496,16681894,16683442,16684790,16686013,16687033,16688383,16689701,16690942,16692125,16693428,16694882,16696471,16698006,16699492,16701151,16702822,16704279,16705803,16707340,16708957,16710329,16711290,16712330,16713386,16714543,16715704,16716635,16717032,16717077,16717121,16717166,16717214,16717263,16717914,16719601,16719639,16719684,16719732,16719781,16719826,16719864,16719909,16719957,16720006,16720051,16720119,16720432,16721478,16722900,16724223,16725670,16727065,16728447,16729640,16730679,16731795,16732619,16733246,16734085,16734932,16735703,16736574,16737406,16738367,16739361,16740204,16741014,16741733,16742473,16743432,16744310,16745123,16745903,16746671,16747496,16748250,16748953,16749509,16749931,16750100,16750144,16750189,16750237,16750284,16750329,16750373,16750418,16750466,16750513,16750558,16750602,16750749,16752797,16753732,16754643,16755510,16756667,16757772,16758728,16759673,16760706,16761721,16762693,16763553,16764594,16765629,16766719,16767670,16768870,16770254,16771650,16773110,16774632,16776100,16777703,16779173,16780532,16781826,16783084,16784524,16785875,16787156,16788477,16789609,16790790,16791807,16792902,16794158,16795610,16797055,16798512,16799866,16801069,16802218,16803374,16804533,16805920,16807020,16808014,16809140,16810351,16811421,16812333,16813162,16814160,16815166,16816243,16817306,16818295,16819240,16821067,16821699,16821740,16821785,16821833,16821882,16821932,16822219,16822843,16823704,16824731,16825914,16827477,16829176,16830921,16832711,16834418,16836128,16837849,16839603,16841367,16843194,16845036,16846829,16848505,16849919,16851306,16852597,16854056,16855840,16857692,16859536,16861452,16863341,16865278,16867211,16869066,16870914,16872795,16874664,16876501,16878341,16880113,16881854,16883660,16885553,16887075,16888511,16889868,16891045,16891582,16891704,16891748,16891793,16891843,16891890,16891935,16891979,16892645,16893933,16895282,16896271,16897158,16897865,16898802,16899883,16900905,16902550,16903452,16903497,16903562,16903723,16903945,16904247,16904669,16905158,16905730,16906387,16907392,16908443,16909506,16910888,16912284,16913665,16915138,16916570,16917946,16919322,16920777,16922233,16923861,16925522,16927145,16928735,16930306,16931808,16933389,16934884,16936351,16937855,16939332,16940754,16942221,16943849,16945565,16947246,16948906,16950561,16952212,16953859,16955526,16957037,16958425,16959886,16961351,16962727,16963862,16964919,16966032,16967115,16968177,16969258,16970261,16971307,16972280,16973709,16975615,16977048,16978448,16979805,16981095,16982386,16983727,16985044,16986301,16987639,16988985,16990278,16991470,16992764,16994003,16995088,16996141,16997114,16998027,16999004,16999875,17000644,17001588,17002682,17003807,17005046,17006433,17007996,17009646,17011236,17012814,17014506,17015990,17017433,17018697,17019835,17021024,17022354,17023772,17025228,17026658,17027849,17028824,17029850,17030963,17032137,17033425,17034618,17035913,17037113,17038369,17039652,17040962,17042304,17043607,17044976,17046321,17047829,17049852,17051271,17052574,17053557,17054472,17055857,17056996,17058061,17058949,17059884,17060840,17061817,17062451,17063844,17065341,17066871,17068231,17069667,17071165,17072435,17073802,17075284,17076772,17078204,17079622,17081098,17082509,17083914,17085083,17086337,17087435,17088805,17090396,17092016,17093738,17095379,17096788,17098233,17099718,17101277,17102760,17104193,17105672,17107037,17108303,17109571,17110621,17111724,17112575,17113581,17114789,17116067,17117414,17118847,17120218,17121622,17122976,17124311,17126335,17126688,17126735,17126780,17126824,17126872,17126921,17127477,17128495,17129614,17130717,17131780,17132770,17133795,17134953,17135917,17136968,17138124,17139279,17140650,17142240,17143948,17145723,17147390,17148864,17150290,17151719,17153077,17154209,17155317,17156718,17157953,17159215,17160403,17161774,17163267,17164846,17166306,17167837,17169534,17171126,17172523,17174117,17175669,17177257,17178459,17179446,17180388,17181522,17182738,17183789,17184640,17184713,17184758,17184803,17184851,17184900,17184945,17186409,17187272,17187318,17187366,17187455,17187512,17187608,17187660,17187834,17188120,17188510,17188981,17189558,17190161,17190775,17191472,17192213,17193014,17194314,17195756,17197277,17198720,17200219,17201921,17203473,17205055,17206715,17208321,17210028,17211678,17213392,17215191,17216864,17218467,17220086,17221771,17223431,17224901,17226410,17227818,17229112,17230013,17230850,17231574,17232202,17232802,17233366,17233932,17234515,17235037,17235402,17235707,17235931,17236040,17236126,17236171,17236216,17236261,17237224,17238598,17238647,17238694,17238739,17238784,17238832,17238881,17238927,17238972,17239017,17239065,17239179,17239540,17240738,17242100,17243492,17244918,17246335,17247716,17248874,17249960,17251009,17251817,17252404,17253325,17254158,17254928,17255751,17256610,17257571,17258541,17259392,17260199,17260922,17261666,17262624,17263483,17264277,17265071,17265874,17266615,17267319,17267997,17268591,17268974,17269081,17269130,17269175,17269220,17269265,17269307,17269356,17269401,17269446,17269491,17269533,17269582,17270038,17271911,17271956,17272001,17272049,17272098,17272143,17272188,17272233,17272281,17272330,17272375,17272450,17272748,17273676,17275123,17276427,17277892,17279293,17280694,17281950,17282973,17284097,17284936,17285570,17286363,17287198,17287959,17288823,17289658,17290612,17291610,17292506,17293337,17294080,17294827,17295784,17296663,17297481,17298272,17299072,17299884,17300662,17301364,17301910,17302355,17302529,17302574,17302619,17302662,17302711,17302756,17302801,17302846,17302890,17302939,17302984,17303029,17303074,17305060,17305390,17305439,17305484,17305529,17305574,17305622,17306201,17307231,17308338,17309462,17310527,17311520,17312557,17313709,17314678,17315731,17316865,17318046,17319431,17321023,17322741,17324509,17326191,17327652,17329076,17330520,17331860,17333008,17334103,17335511,17336757,17338009,17339188,17340554,17342051,17343641,17345097,17346635,17348332,17349927,17351337,17352910,17354457,17356060,17357261,17358235,17359168,17360322,17361522,17362573,17363426,17363475,17363520,17363565,17363610,17363658,17363707,17365203,17366040,17366085,17366147,17366310,17366560,17366842,17367286,17367800,17368405,17369123,17370120,17371238,17372424,17373919,17375333,17376784,17378331,17379928,17381522,17383090,17384717,17386403,17388145,17389947,17391707,17393450,17395191,17396837,17398523,17400115,17401641,17403229,17404763,17406269,17407786,17409499,17411300,17413011,17414717,17416377,17418031,17419668,17421313,17422838,17424204,17425742,17427215,17428598,17429743,17430820,17431940,17433036,17434092,17435195,17436197,17437213,17438200,17439594,17441642,17443594,17444512,17445510,17446382,17447281,17448273,17449237,17450151,17451042,17451977,17452904,17453705,17454575,17455562,17456865,17458224,17459488,17460727,17462133,17463502,17464964,17466382,17467848,17469275,17470698,17471907,17472898,17473938,17474870,17475979,17477089,17478260,17479290,17480474,17481525,17482529,17483788,17484998,17486196,17487518,17488785,17489864,17491034,17492220,17493400,17494668,17495911,17497191,17498496,17499776,17501076,17502365,17503655,17504937,17506277,17507574,17508990,17510417,17511770,17513060,17514336,17515605,17516936,17518278,17519684,17521147,17522575,17523973,17525398,17526773,17528072,17529407,17530764,17532123,17533512,17534925,17536261,17537584,17538825,17540061,17541266,17542420,17543637,17544903,17546098,17547244,17548452,17549538,17550591,17551611,17552810,17554432,17555704,17556971,17558258,17559593,17560930,17562284,17563775,17565231,17566606,17568039,17569412,17570719,17572108,17573425,17574812,17576186,17577603,17578984,17580339,17581599,17582812,17584055,17585281,17586471,17587721,17588948,17590099,17591299,17592445,17593499,17594547,17595392,17597440,17598446,17599424,17600334,17601196,17602141,17603148,17604071,17604947,17605906,17606830,17607624,17608459,17609400,17610653,17611962,17613282,17614519,17615861,17617269,17618665,17620068,17621537,17622960,17624327,17625614,17626653,17627659,17628589,17629620,17630730,17631929,17632991,17634161,17635241,17636247,17637458,17638686,17639925,17641202,17642487,17643609,17644729,17645917,17647086,17648342,17649615,17650904,17652199,17653495,17654813,17656150,17657445,17658719,17660030,17661326,17662748,17664139,17666106,17667003,17667095,17668019,17669285,17670449,17671212,17672578,17673770,17674363,17674455,17675784,17677364,17678252,17679090,17680131,17681304,17682327,17683287,17684288,17685379,17686306,17687256,17688194,17689236,17690330,17691351,17692429,17693726,17695119,17696486,17697935,17699433,17700937,17702568,17703929,17705185,17706541,17707909,17709320,17710563,17711965,17713124,17714307,17715427,17716435,17717594,17718952,17720440,17721870,17723264,17724590,17725748,17726944,17728026,17729342,17730627,17731595,17732699,17733863,17735000,17735947,17736800,17737722,17738751,17739766,17740863,17741855,17742858,17744096,17746000,17747131,17748156,17749164,17750185,17751290,17752578,17753899,17755086,17756315,17757603,17758952,17760279,17761704,17763113,17764439,17765666,17767044,17768624,17770316,17771749,17773256,17774667,17776083,17777564,17778988,17780408,17781943,17783489,17784909,17786312,17787819,17789347,17790861,17792495,17794161,17795850,17797401,17798898,17800499,17802028,17803607,17805128,17806592,17808083,17809536,17810979,17812366,17813641,17814883,17816080,17817289,17818530,17819866,17821111,17822271,17823376,17824606,17826654,17826768,17826817,17826862,17826907,17826952,17827031,17827399,17828163,17829083,17830130,17831397,17833025,17834729,17836493,17838271,17839996,17841727,17843453,17845234,17847024,17848887,17850698,17852479,17854171,17855512,17856941,17858188,17859775,17861572,17863412,17865262,17867171,17869065,17870999,17872937,17874745,17876619,17878471,17880338,17882169,17884010,17885778,17887535,17889354,17891196,17892631,17894088,17895394,17896458,17896917,17896965,17897014,17897059,17897098,17897143,17897191,17897240,17898941,17900411,17901494,17902551,17903478,17904527,17905681,17906914,17908089,17909140,17910130,17911140,17912071,17913079,17914284,17915528,17916799,17917958,17918994,17920204,17921531,17922927,17924277,17925565,17926702,17928010,17929570,17931101,17932721,17934394,17936023,17937701,17939249,17940776,17942353,17944022,17945705,17947421,17949065,17950680,17952159,17953570,17954920,17956340,17957716,17959060,17960646,17962262,17963817,17965315,17966793,17968218,17969644,17971058,17972483,17973866,17975212,17976538,17978323,17979729,17980442,17981223,17982081,17983012,17984046,17985074,17986150,17987338,17988569,17989745,17990937,17992187,17993419,17994799,17996171,17997524,17999015,18000462,18001959,18003444,18004874,18006330,18007889,18009543,18011153,18012786,18014401,18016072,18017851,18019595,18021363,18023222,18024926,18026511,18028124,18029746,18031408,18033140,18034849,18036567,18038305,18040009,18041719,18043371,18044976,18046746,18048549,18050299,18052001,18053691,18055443,18057156,18058638,18059834,18060955,18061779,18062659,18063909,18065139,18066818,18068338,18069835,18071010,18072068,18072668,18073218,18074114,18075192,18076428,18077506,18079521,18080962,18082430,18083894,18085412,18086932,18088454,18089987,18091485,18092978,18094535,18096200,18098024,18099908,18101881,18103885,18105884,18107894,18109878,18111890,18113894,18115841,18117694,18119465,18121302,18123184,18125089,18127004,18129010,18131020,18132887,18134739,18136584,18138368,18140063,18141812,18143569,18145400,18147274,18149217,18151174,18153193,18155214,18157208,18159187,18160972,18162559,18164047,18165559,18167064,18168582,18170092,18171599,18173083,18174536,18175997,18177438,18178899,18180947,18182322,18183645,18184941,18186210,18187494,18188753,18190130,18191431,18192690,18193960,18195286,18196442,18197800,18199171,18200618,18202026,18203473,18204921,18206313,18207765,18209303,18210834,18212291,18213858,18215409,18216960,18218624,18220225,18221842,18223426,18225032,18226578,18228112,18229604,18231211,18232902,18234556,18236227,18237916,18239389,18240740,18242153,18243517,18244767,18246010,18247247,18248484,18249703,18250899,18252079,18253279,18254405,18255631,18256835,18258117,18259388,18260623,18262560,18263951,18264992,18266163,18267299,18268364,18269324,18270386,18271502,18272586,18273727,18274834,18276003,18277210,18278559,18279909,18281384,18282893,18284484,18286040,18287554,18289199,18290749,18292175,18293625,18295221,18296780,18298287,18299816,18301222,18302669,18304010,18305345,18306662,18308014,18309282,18310699,18312128,18313674,18315201,18316670,18318150,18319482,18320698,18321860,18322870,18323903,18324927,18326078,18327256,18328424,18329377,18330294,18331341,18332285,18333191,18334121,18335145,18336771,18338582,18340128,18341742,18343259,18344893,18346509,18348161,18349810,18351334,18352923,18354569,18356268,18357768,18359234,18360797,18362392,18363950,18365676,18367365,18368908,18370550,18372134,18373586,18375057,18376507,18378123,18379677,18381110,18382637,18384208,18385755,18387298,18388806,18390375,18391947,18393554,18395224,18396902,18398580,18400116,18401638,18403316,18404957,18406484,18407867,18409038,18410527,18412052,18413586,18415027,18416574,18418187,18419867,18421587,18423273,18424807,18426377,18428121,18430068,18431021,18432018,18433008,18434088,18435158,18436250,18437317,18438421,18439482,18440493,18441657,18442785,18443970,18445131,18446214,18447368,18448473,18449730,18450959,18452192,18453437,18454738,18456065,18457316,18458425,18459523,18460552,18461614,18462643,18463621,18464668,18465711,18466616,18467574,18468482,18469428,18470378,18471439,18472515,18473520,18474544,18475530,18476526,18477519,18478470,18479467,18480464,18481483,18482561,18483628,18484773,18485856,18486989,18488024,18488947,18489835,18490697,18492745,18494103,18495394,18496711,18497999,18499306,18500558,18501942,18503257,18504497,18505765,18507081,18508203,18509464,18510728,18512123,18513469,18514800,18516136,18517462,18518905,18520446,18522082,18523691,18525193,18526526,18527872,18529388,18530942,18532633,18534371,18536050,18537573,18538901,18540241,18541633,18543118,18544578,18546107,18547593,18549036,18550389,18551802,18553169,18554421,18555674,18556890,18558146,18559373,18560578,18561759,18562988,18564126,18565346,18566559,18567853,18569125,18570369,18572313,18574030,18575604,18577208,18578799,18580390,18581960,18583486,18585116,18586701,18588244,18589843,18591487,18593251,18595060,18596850,18598647,18600193,18601834,18603443,18605213,18607047,18608900,18610673,18612495,18614376,18616236,18618042,18619927,18621663,18623483,18625172,18626915,18628661,18630404,18632096,18633803,18635409,18637238,18639151,18640848,18642550,18643870,18645207,18646542,18647827,18649331,18650834,18652303,18653786,18655319,18656835,18658339,18659924,18661426,18662896,18664342,18665841,18667670,18669137,18669946,18670700,18671551,18672494,18673272,18673912,18674801,18675704,18676505,18677339,18678119,18679078,18680147,18681293,18682538,18683756,18685088,18686346,18687760,18689260,18690837,18692333,18693961,18695581,18697229,18698791,18700423,18702022,18703638,18705266,18706821,18708280,18709724,18711232,18712754,18714328,18715802,18717244,18718692,18720080,18721416,18722705,18723828,18725053,18726221,18727434,18728470,18729484,18730520,18731595,18732596,18733547,18734568,18735508,18736492,18737281,18738416,18740453,18742200,18744028,18745921,18747757,18749571,18751379,18753228,18755067,18756791,18758462,18760011,18761470,18762967,18765015,18766666,18768516,18770413,18772300,18774154,18776037,18777940,18779835,18781547,18783276,18784844,18786363,18787850,18789861,18791612,18793460,18795354,18797234,18799165,18800989,18802770,18804385,18805857,18807320,18808875,18810520,18812162,18814070,18815765,18817639,18819603,18821249,18823250,18825196,18826881,18828898,18830726,18832046,18833533,18835150,18836639,18838189,18840161,18841598,18842979,18844636,18846184,18847656,18849471,18851221,18852520,18854080,18855688,18857258,18858819,18860867,18862527,18864197,18865851,18867602,18869387,18871153,18872884,18874664,18876439,18878273,18880082,18881982,18883727,18885467,18887248,18889029,18890858,18892675,18894502,18896291,18898169,18899980,18901743,18903518,18905290,18907044,18908811,18910478,18912269,18914048,18915792,18917533,18919330,18921150,18922917,18924694,18926457,18928173,18929888,18931593,18933338,18935063,18936785,18938475,18940096,18941951,18943821,18945701,18947549,18949354,18951178,18953063,18954936,18956764,18958523,18960199,18961746,18963771,18965774,18967710,18969601,18971538,18973467,18975379,18977277,18979199,18981104,18982989,18984842,18986763,18988645,18990491,18992252,18994019,18995764,18997579,18999406,19001164,19003012,19004777,19006640,19008458,19010284,19012033,19013813,19015515,19017116,19018682,19020269,19021980,19023775,19025558,19027287,19029041,19030720,19032413,19034158,19035856,19037611,19039391,19041179,19042985,19044707,19046598,19048503,19050432,19052324,19054140,19055977,19057857,19059772,19061695,19063598,19065513,19067392,19069389,19071439,19073381,19075340,19077368,19079364,19081359,19083368,19085342,19087288,19089214,19091155,19093127,19095137,19097079,19099011,19100910,19102900,19104857,19106829,19108769,19110792,19112814,19114810,19116704,19118637,19120537,19122484,19124353,19126040,19127856,19129647,19131512,19133432,19135368,19137331,19139295,19141274,19143237,19145198,19147100,19149098,19151082,19152949,19154770,19156617,19158472,19160336,19162150,19163948,19165728,19167555,19169400,19171169,19172891,19174527,19176083,19177514,19178929,19179905,19181953,19184001,19186049,19188097,19190145,19192193,19194241,19196289,19198337,19200385,19202433,19204481,19206529,19208577,19210625,19212673,19214721,19216769,19218817,19220865,19222913,19224961,19227009,19229057,19231105,19233153,19235201,19237249,19239297,19241345,19243393,19245441,19247489,19249537,19251585,19253633,19255681,19257729,19259777,19261825,19263873,19265921,19267969,19270026,19272074,19274122,19276170,19278218,19280266,19282314,19284362,19286410,19288458,19290506,19292554,19294602,19296650,19298698,19300746,19302794,19304842,19306890,19308938,19310986,19313034,19315082,19317130,19319178,19321226,19323274,19325322,19327370,19329418,19331475,19333523,19335571,19337619,19339667,19341715,19343763,19345811,19347868,19349916,19351964,19354012,19356060,19358117,19360165,19362213,19364261,19366309,19368357,19370405,19372453,19374501,19376558,19378606,19380654,19382702,19384750,19386798,19388846,19390894,19392942,19394990,19397038,19399086,19401134,19403191,19405239,19407296,19409344,19411392,19413440,19415488,19417536,19419584,19421632,19423680,19425728,19427776,19429824,19431872,19433920,19435968,19438016,19440064,19442112,19444160,19446208,19448256,19450304,19452352,19454400,19456457,19458505,19460553,19462601,19464649,19466697,19468745,19470793,19472841,19474889,19476937,19478985,19481033,19483081,19485129,19487177,19489225,19491273,19493321,19495369,19497417,19499465,19501513,19503561,19505609,19507657,19509705,19511753,19513809,19515857,19517905,19519953,19522001,19524049,19526097,19528145,19530193,19532241,19534298,19536346,19538394,19540442,19542490,19544538,19546586,19548634,19550682,19552730,19554778,19556826,19558874,19560922,19562970,19565018,19567066,19569114,19571162,19573210,19575258,19577306,19579354,19581402,19583450,19585498,19587546,19589594,19591642,19593690,19595738,19597786,19599834,19601882,19603930,19605978,19608026,19610074,19612122,19614170,19616218,19618266,19620314,19622362,19624410,19626458,19628506,19630554,19632602,19634650,19636698,19638746,19640803,19642851,19644899,19646947,19648995,19651043,19653091,19655139,19657187,19659235,19661283,19663331,19665379,19667427,19669475,19671523,19673571,19675619,19677667,19679715,19681763,19683811,19685859,19687907,19689955,19692003,19694051,19696099,19698147,19700195,19702240,19704171,19705635,19707011,19708439,19709971,19711540,19713029,19714471,19715940,19717137,19718362,19719824,19721340,19722555,19723772,19725156,19726617,19728098,19729543,19731030,19732421,19733811,19735191,19736705,19738157,19739618,19741103,19742551,19744078,19745506,19747053,19748561,19750125,19751621,19753110,19754706,19756193,19757737,19759273,19760713,19762240,19763819,19765341,19766723,19768173,19769581,19771237,19772886,19774527,19776166,19777704,19779257,19780943,19782616,19784122,19785732,19787354,19788890,19790938,19791989,19793071,19794223,19795347,19796373,19797341,19798402,19799528,19800654,19801801,19802903,19804102,19805309,19806692,19808071,19809559,19811111,19812744,19814284,19815841,19817469,19818945,19820355,19821851,19823450,19824975,19826530,19828041,19829418,19830894,19832181,19833500,19834875,19836149,19837454,19838911,19840356,19841893,19843425,19844889,19846326,19847616,19848833,19849910,19850931,19851954,19853001,19854154,19855332,19856457,19857330,19858335,19859382,19860307,19861228,19862199,19863269,19865212,19866538,19867620,19868749,19869844,19870908,19871933,19873013,19874129,19875176,19876336,19877523,19878815,19880081,19881344,19882949,19884473,19885905,19887472,19888956,19890428,19892036,19893577,19895025,19896569,19898169,19899737,19901203,19902703,19904175,19905808,19907439,19909211,19911059,19912954,19914675,19916338,19918146,19919932,19921580,19923156,19924733,19926062,19927370,19928579,19929493,19930636,19931697,19932841,19933991,19935141,19936103,19937042,19938106,19939057,19939954,19940941,19941991,19943668,19945478,19947008,19948512,19950037,19951576,19953082,19954538,19956077,19957611,19959105,19960639,19962218,19963918,19965656,19967431,19969185,19970830,19972381,19973947,19975672,19977428,19979303,19980999,19982736,19984542,19986371,19988117,19989995,19991528,19993292,19995036,19996775,19998475,20000169,20001758,20003368,20004983,20006717,20008605,20010287,20012097,20013335,20014667,20015979,20017221,20018619,20020083,20021549,20022980,20024445,20025912,20027352,20028835,20030329,20031723,20033109,20034546,20036240,20038255,20039925,20041594,20043275,20045048,20046815,20048552,20050291,20052077,20053882,20055700,20057544,20059438,20061169,20062902,20064692,20066490,20068332,20070155,20071945,20073798,20075635,20077416,20079172,20080928,20082698,20084483,20086243,20087952,20089748,20091506,20093249,20094980,20096807,20098589,20100327,20102081,20103836,20105540,20107253,20108974,20110717,20112451,20114167,20115840,20117530,20119394,20121274,20123145,20124999,20126811,20128638,20130539,20132421,20134225,20135945,20137593,20139179,20140044,20142092,20144140,20146188,20148236,20150284,20152332,20154380,20156428,20158476,20160524,20162572,20164620,20166668,20168716,20170764,20172812,20174860,20176908,20178965,20181013,20183061,20185109,20187157,20189205,20191253,20193301,20195349,20197397,20199445,20201493,20203541,20205589,20207637,20209685,20211733,20213781,20215829,20217877,20219925,20221973,20224021,20226069,20228117,20230165,20232213,20234261,20236309,20238357,20240405,20242453,20244501,20246549,20248597,20250645,20252693,20254741,20256789,20258837,20260885,20262933,20264981,20267029,20269077,20271125,20273173,20275226,20276436,20277759,20279094,20280547,20282004,20283541,20285047,20286456,20287905,20289376,20290855,20292265,20293714,20295079,20296421,20297454,20298185,20299261,20300541,20302073,20303701,20305480,20307313,20309151,20311051,20312910,20314652,20316416,20317619,20319389,20321127,20322965,20324851,20326701,20328519,20330307,20332109,20333817,20335268,20336474,20337459,20338578,20339925,20341109,20342361,20343744,20344897,20346103,20347307,20348677,20350124,20351591,20353113,20354539,20355975,20357361,20358702,20360743,20362256,20363707,20365201,20366759,20368236,20369701,20371233,20372721,20374174,20375682,20377283,20378908,20380317,20381899,20383575,20385240,20386920,20388723,20390454,20392085,20393805,20395380,20396963,20398496,20400049,20401621,20403208,20404789,20406402,20408020,20409618,20411182,20412707,20414272,20415872,20417528,20419086,20420726,20422278,20423846,20425443,20427103,20428708,20430284,20431611,20432803,20434276,20435777,20437214,20438556,20440035,20441566,20443141,20444769,20446229,20447598,20449092,20450989,20452636,20454065,20455464,20456860,20458300,20459653,20461120,20462601,20463970,20465359,20466835,20468362,20469501,20470921,20472463,20473991,20475517,20477221,20478868,20480435,20482073,20483583,20485055,20486461,20488025,20489585,20491165,20492601,20494115,20495639,20497199,20498657,20500154,20501720,20503256,20504830,20506392,20507978,20509613,20511133,20512660,20514235,20515737,20517131,20518392,20519281,20520532,20521900,20523278,20524524,20525939,20527388,20528908,20530454,20531889,20533214,20534600,20536274,20538221,20539848,20541522,20543179,20544964,20546723,20548453,20550193,20551798,20553512,20555248,20557076,20558675,20560178,20561826,20563462,20565086,20566827,20568619,20570266,20571948,20573599,20575118,20576668,20578177,20579852,20581528,20583020,20584571,20586164,20587786,20589441,20591046,20592689,20594397,20596082,20597823,20599573,20601319,20602939,20604520,20606247,20607896,20609470,20610948,20612206,20613809,20615503,20617194,20618764,20620405,20622116,20623885,20625706,20627529,20629183,20630820,20632578,20634533,20635090,20635693,20636308,20636956,20637608,20638301,20639139,20640139,20641179,20642231,20643116,20644375,20645840,20647386,20649017,20650469,20651655,20653216,20654759,20656424,20658225,20659873,20661453,20663198,20664861,20666497,20668248,20669860,20671455,20673259,20674943,20676657,20678442,20680132,20681747,20683408,20685150,20686887,20688690,20690393,20691822,20693255,20694657,20695867,20697084,20698457,20699839,20701086,20702335,20703624,20704953,20706425,20707988,20709529,20711052,20712611,20714274,20715205,20717253,20719301,20721349,20723397,20725445,20727493,20729541,20731589,20733637,20735685,20737733,20739781,20741829,20743877,20745925,20747973,20750021,20752069,20754117,20756165,20758213,20760261,20762309,20764357,20766405,20768453,20770501,20772549,20774597,20776645,20778693,20780741,20782789,20784837,20786885,20788933,20790989,20793037,20795085,20797133,20799181,20801229,20803277,20805325,20807373,20809421,20811469,20813517,20815565,20817613,20819661,20821709,20823757,20825805,20827853,20829910,20831958,20834006,20836054,20838102,20840150,20842198,20844246,20846294,20848342,20850390,20852438,20854486,20856534,20858582,20860630,20862678,20864726,20866774,20868822,20870870,20872918,20874966,20877014,20879062,20881110,20883158,20885206,20887254,20889302,20891350,20893398,20895455,20897503,20899551,20901599,20903647,20905695,20907743,20909791,20911839,20913887,20915935,20917983,20920038,20922086,20924134,20926182,20928230,20930278,20932326,20934374,20936422,20938470,20940518,20942566,20944614,20946662,20948710,20950758,20952806,20954854,20956902,20958950,20960998,20963046,20965094,20967142,20969190,20971238,20973286,20975334,20977382,20979430,20981478,20983526,20985574,20987622,20989670,20991718,20993766,20995814,20997862,20999910,21001958,21004006,21006054,21008102,21010159,21012207,21014255,21016303,21018351,21020399,21022447,21024495,21026543,21028591,21030639,21032687,21034735,21036783,21038831,21040879,21042927,21044975,21047023,21049071,21051119,21053175,21055223,21057271,21059319,21061367,21063415,21065463,21067511,21069559,21071607,21073655,21075703,21077751,21079799,21081847,21083895,21085943,21087991,21090039,21092087,21094135,21096181,21098195,21100226,21102277,21104325,21106373,21108421,21110477,21112525,21114573,21116621,21118669,21120717,21122765,21124813,21126861,21128909,21130957,21133005,21135053,21137101,21139149,21141197,21143245,21145293,21147341,21149389,21151437,21153485,21155533,21157581,21159629,21161677,21163725,21165773,21167821,21169869,21171917,21173965,21176013,21178061,21180109,21182157,21184205,21186253,21188301,21190349,21192406,21194434,21196445,21198496,21200550,21202607,21204655,21206711,21208758,21210806,21212854,21214902,21216950,21218998,21221046,21223094,21225142,21227190,21229238,21231286,21233334,21235382,21237430,21239478,21241526,21243574,21245622,21247679,21249727,21251775,21253823,21255871,21257919,21259967,21262015,21264063,21266111,21268159,21270207,21272255,21274303,21276360,21278408,21280456,21282504,21284552,21286609,21288657,21290714,21292749,21294757,21296804,21298854,21300910,21302958,21305006,21307055,21309112,21311160,21313208,21315256,21317304,21319352,21321400,21323448,21325496,21327544,21329592,21331640,21333688,21335736,21337784,21339832,21341880,21343928,21345985,21348033,21350081,21352129,21354177,21356225,21358273,21360321,21362369,21364417,21366465,21368513,21370561,21372609,21374657,21376705,21378753,21380801,21382849,21384897,21386945,21388993,21391041,21393089,21395137,21397185,21399233,21401281,21403329,21405377,21407425,21409473,21411521,21413569,21415617,21417665,21419713,21421761,21423809,21425857,21427905,21429953,21432001,21434049,21436097,21438145,21440193,21442241,21444289,21446337,21448385,21450433,21452481,21454529,21456577,21458625,21460673,21462721,21464769,21466817,21468865,21470913,21472961,21475009,21477057,21479105,21481153,21483201,21485249,21487297,21489345,21491393,21493441,21495489,21497537,21499585,21501633,21503681,21505729,21507777,21509825,21511873,21513921,21515969,21518017,21520065,21522113,21524161,21526209,21528257,21530305,21532356,21534404,21536452,21538500,21540548,21542596,21544644,21546692,21548740,21550788,21552836,21554884,21556932,21558980,21561028,21563076,21565124,21567172,21569220,21571277,21573325,21575362,21577376,21579411,21581462,21583519,21585567,21587615,21589665,21591713,21593761,21595809,21597857,21599905,21601953,21604001,21606049,21608097,21610145,21612193,21614241,21616289,21618337,21620385,21622433,21624481,21626150,21627449,21628953,21630278,21631382,21632410,21633524,21634653,21635727,21636926,21637999,21639091,21640311,21641391,21642626,21643685,21644766,21645874,21647049,21648217,21649414,21650539,21651736,21652693,21653607,21654459,21655402,21656354,21656941,21657995,21658833,21659708,21660835,21661186,21661535,21661904,21663035,21664261,21665741,21667239,21668732,21670154,21671010,21672087,21673045,21673947,21674825,21675759,21677137,21678542,21679834,21681019,21682081,21683107,21684293,21685480,21686463,21687676,21688769,21689941,21691102,21692200,21693423,21694482,21695641,21696730,21697836,21698967,21700194,21701241,21702280,21703198,21704170,21705028,21706006,21706981,21707540,21708514,21709289,21710048,21710888,21711243,21711593,21711947,21713238,21714560,21716067,21717532,21718970,21720087,21721202,21722355,21723270,21724203,21725052,21726584,21728026,21728071,21728115,21728160,21728222,21728348,21728469,21728640,21728833,21729008,21729278,21729488,21729734,21730308,21731280,21732308,21733311,21734479,21735917,21737501,21739083,21740746,21742373,21744143,21745887,21747646,21749262,21750809,21752361,21753980,21755671,21757360,21759122,21760901,21762550,21764190,21765841,21767441,21769072,21770651,21771726,21772672,21773631,21774424,21775001,21775273,21775448,21775576,21775693,21775837,21776010,21776125,21776184,21776240,21776290,21776337,21776382,21776529,21777184,21778205,21780105,21780253,21780509,21780706,21780892,21781112,21781507,21781909,21782300,21782713,21783153,21783412,21783771,21784461,21785275,21786264,21787210,21788305,21789590,21791175,21792878,21794671,21796426,21798200,21800052,21801862,21803609,21805273,21806951,21808642,21810504,21812325,21814214,21816078,21817887,21819680,21821597,21823448,21825308,21827199,21828499,21829482,21830370,21831244,21831939,21832467,21832868,21833206,21833514,21833919,21834257,21834699,21834850,21835007,21835144,21835341,21835544,21835662,21837681,21839027,21840341,21841644,21842849,21844175,21845576,21847007,21848318,21849704,21851029,21852435,21853900,21855309,21856701,21858148,21859644,21861097,21862557,21864020,21865558,21866934,21868310,21869706,21871118,21872395,21873512,21874782,21876178,21877483,21878844,21880185,21881574,21882824,21884212,21885643,21886968,21888252,21889648,21891178,21892636,21894037,21895553,21896837,21898220,21899630,21901071,21902493,21903926,21905299,21906609,21907985,21909274,21910751,21912094,21913285,21914532,21915752,21917092,21918068,21919105,21920551,21922034,21922078,21922123,21922171,21922487,21923535,21924574,21925609,21926950,21928447,21929951,21931292,21933099,21934895,21936654,21938342,21940021,21941249,21942201,21943660,21945365,21947106,21948959,21950664,21952490,21954318,21956082,21957714,21959375,21961064,21962865,21964747,21966590,21968476,21970324,21972075,21973949,21975836,21977721,21979564,21981476,21983058,21984648,21986155,21987870,21989436,21990750,21992012,21993367,21994523,21995675,21996792,21997498,21998382,21998429,21998474,21998518,21998833,21999524,22000615,22001392,22002095,22003153,22004396,22005712,22007073,22008043,22008640,22009629,22010557,22011606,22012284,22013150,22013844,22014517,22015223,22015931,22016896,22017783,22018626,22019524,22020372,22021360,22022209,22022878,22023514,22024491,22025449,22026351,22027239,22028200,22028733,22029495,22030265,22031067,22031772,22032488,22033283,22034193,22035174,22035861,22036690,22037523,22038350,22039211,22040090,22040981,22041896,22042818,22043665,22044497,22045336,22046186,22047246,22048042,22049102,22050846,22052229,22053739,22055246,22056897,22058485,22059927,22061688,22063182,22064735,22066190,22067868,22069474,22071004,22072614,22074079,22075498,22076979,22078653,22080257,22081771,22083387,22084750,22086256,22087959,22089884,22091323,22092815,22094104,22095226,22096469,22097812,22099189,22100277,22101389,22102619,22103662,22104797,22106028,22107290,22108534,22109636,22110462,22111312,22112155,22113932,22115482,22116862,22118321,22119701,22120996,22122390,22123568,22124778,22126157,22127506,22128761,22129875,22130801,22131693,22132328,22133304,22135223,22136730,22138226,22139733,22141136,22142433,22143800,22144966,22146211,22147540,22148856,22150076,22150963,22151802,22152511,22153268,22155171,22156641,22158124,22159538,22161018,22162352,22163601,22164960,22166136,22167436,22168831,22170144,22171342,22172386,22173303,22174175,22174816,22175837,22177734,22179167,22180679,22182100,22183578,22185113,22186614,22187958,22189130,22190037,22190858,22191612,22192514,22193373,22194198,22195952,22197425,22198896,22200315,22201769,22203091,22204335,22205655,22206822,22208138,22209490,22210791,22211924,22212867,22213814,22214565,22215261,22216932,22218587,22220066,22221428,22222559,22223810,22225271,22226681,22228012,22228955,22229951,22231342,22233084,22234678,22236242,22237605,22238863,22239999,22241491,22242882,22244111,22245158,22246434,22247707,22249037,22249974,22251161,22252889,22254662,22256443,22258275,22259960,22261549,22262941,22264795,22266705,22268491,22270241,22272158,22273958,22275250,22276530,22277820,22279166,22280616,22282092,22283968,22285281,22286708,22287997,22289361,22290821,22292357,22293710,22294619,22295567,22296738,22298546,22299520,22300377,22301317,22303088,22304412,22305777,22307452,22309050,22310579,22312324,22314054,22315840,22317041,22318569,22320293,22321808,22323450,22325340,22327203,22328783,22330034,22331641,22333328,22334870,22336631,22338547,22340456,22341855,22343187,22344851,22346539,22348141,22349956,22351874,22353808,22355105,22356483,22358156,22359873,22361408,22363141,22365057,22366976,22368388,22369794,22371443,22373126,22374645,22376359,22378213,22380132,22381474,22382841,22384524,22386095,22387619,22389383,22391092,22392936,22394130,22395689,22397422,22398945,22400583,22402344,22404169,22405580,22406913,22408580,22410231,22411740,22413455,22415230,22417087,22418320,22419808,22421540,22423100,22424705,22426530,22428370,22429949,22431576,22433081,22434671,22436242,22437809,22439483,22441172,22442711,22444250,22445846,22447279,22448868,22450463,22452021,22453584,22455015,22456501,22458042,22459434,22460934,22462409,22463571,22464659,22465833,22467176,22468467,22469622,22470927,22472588,22474152,22475423,22476707,22478117,22479510,22480918,22482113,22483603,22484600,22485995,22487839,22487883,22487928,22487976,22488025,22488070,22488167,22488582,22489251,22489996,22490850,22491797,22492769,22493745,22494803,22495735,22496897,22498004,22499274,22500595,22501770,22503079,22504412,22505578,22506768,22507883,22508877,22510090,22511122,22512336,22513511,22514553,22515463,22516397,22517187,22517852,22518573,22519201,22519516,22519563,22519608,22519652,22519697,22519747,22521062,22521938,22522681,22523492,22524625,22525915,22527193,22528197,22529212,22530221,22531304,22532047,22532778,22533541,22534516,22535504,22536601,22537766,22538883,22540068,22541344,22542602,22543804,22545163,22546529,22547865,22549214,22550492,22551812,22553018,22553944,22554741,22555296,22555842,22556395,22557188,22558079,22558880,22559686,22560568,22561602,22562549,22563432,22564442,22565682,22566721,22567714,22568750,22569571,22570664,22571903,22572984,22574027,22574992,22576083,22576920,22578294,22579026,22580121,22581266,22582894,22584095,22585350,22586690,22588156,22589622,22591098,22592747,22594503,22596297,22598128,22599944,22601749,22603470,22605195,22606811,22608496,22610264,22611871,22613540,22615161,22616810,22618375,22619857,22621506,22623185,22624776,22626334,22627910,22629501,22631050,22632466,22633638,22634705,22636106,22637722,22639239,22640823,22642394,22643837,22645185,22646620,22648061,22650079,22650775,22651519,22652574,22653685,22654844,22656160,22657561,22658878,22660145,22661677,22663116,22664412,22665163,22666093,22667261,22668563,22669997,22671245,22672453,22673673,22674790,22675956,22677153,22678352,22679651,22680838,22682166,22683582,22684821,22686089,22687453,22688844,22690180,22691479,22692710,22693958,22695173,22696121,22697100,22698248,22699385,22700678,22701854,22703296,22703916,22705327,22706185,22707158,22708409,22710154,22711849,22712667,22713623,22714690,22716393,22717200,22718047,22718867,22719920,22721014,22722028,22723010,22724042,22725269,22726613,22728192,22729845,22731494,22733130,22734620,22735961,22737409,22738925,22740617,22742212,22743914,22745544,22747177,22748793,22750358,22751842,22753354,22755014,22756836,22758691,22760535,22762362,22764102,22765849,22767303,22768689,22770017,22771375,22772717,22773953,22774970,22775596,22776609,22777745,22778864,22780003,22780839,22782080,22782915,22783963,22785067,22786004,22786858,22787984,22789250,22790711,22791465,22792074,22792635,22793347,22793955,22794579,22795173,22796025,22796850,22797980,22799043,22799853,22800948,22801744,22802556,22803340,22804168,22804955,22805922,22806798,22807703,22808626,22809514,22810378,22811291,22812194,22813098,22814089,22815117,22816086,22816877,22817513,22818171,22818935,22819685,22820423,22821345,22822230,22822985,22823888,22824673,22825512,22826305,22827361,22828127,22829569,22831376,22833424,22834984,22837041,22837474,22837566,22837742,22837937,22838014,22838108,22838459,22839116,22839847,22840670,22841617,22842569,22843526,22844556,22845503,22846656,22847782,22849074,22850412,22851598,22852907,22854210,22855380,22856585,22857619,22858687,22859886,22860909,22862125,22863244,22864232,22865134,22866021,22866672,22867345,22868086,22868579,22868705,22868786,22868976,22869158,22869250,22869675,22871178,22871889,22872608,22873603,22874745,22876127,22877152,22878104,22879153,22880085,22880891,22881560,22882324,22883270,22884193,22885162,22886250,22887311,22888378,22889534,22890731,22891827,22893185,22894598,22895984,22897256,22898482,22899845,22901006,22901930,22902661,22903170,22903706,22904247,22905037,22905944,22906726,22907543,22908466,22909489,22910393,22911305,22912340,22913519,22914565,22915947,22916644,22917672,22918784,22920107,22920917,22922290,22922921,22923967,22925185,22926148,22927210,22928134,22929099,22930093,22931171,22932326,22933401,22935380,22936514,22937731,22939120,22940465,22941974,22943405,22944983,22946667,22948453,22950277,22952094,22953897,22955606,22957356,22959031,22960647,22962428,22964059,22965706,22967282,22968926,22970532,22972011,22973631,22975306,22976972,22978493,22980079,22981640,22983231,22984726,22986030,22987097,22988308,22989940,22991487,22993085,22994651,22996193,22997534,22998896,23000340,23002123,23003325,23004006,23005006,23006099,23007220,23008500,23009835,23011217,23012498,23013962,23015448,23016779,23017726,23018548,23019592,23020873,23022257,23023521,23024763,23026044,23027154,23028343,23029486,23030708,23032024,23033243,23034457,23035848,23037206,23038447,23039766,23041133,23042448,23043779,23045038,23046285,23047484,23048571,23049546,23050623,23051781,23053042,23054225,23055572,23056344,23057350,23058515,23059700,23060480,23062229,23063543,23064407,23065042,23065773,23066424,23067385,23068088,23069418,23071173,23071982,23072859,23073647,23074718,23075818,23076802,23077821,23078853,23080039,23081377,23082949,23084605,23086254,23087893,23089385,23090727,23092132,23093640,23095301,23096907,23098601,23100235,23101866,23103486,23105065,23106535,23108049,23109695,23111517,23113370,23115220,23117052,23118795,23120546,23122043,23123460,23124784,23126136,23127495,23128737,23129743,23130357,23131335,23132494,23133599,23134800,23135606,23136838,23137692,23138696,23139802,23141040,23141813,23142379,23143346,23144054,23145340,23146528,23148531,23150426,23152273,23153978,23155732,23157451,23159165,23160907,23162830,23164720,23166777,23167241,23167286,23167334,23167383,23167428,23167469,23167514,23167562,23167611,23167656,23167700,23167745,23167893,23168677,23169730,23171147,23172551,23174120,23175689,23177118,23178632,23180181,23181773,23183443,23185151,23186915,23188662,23190328,23192049,23193673,23195344,23196981,23198604,23200171,23201770,23203210,23204527,23205807,23206932,23208098,23208993,23209469,23209791,23209999,23210138,23210182,23210227,23210275,23210322,23210367,23210411,23210456,23210506,23210553,23210598,23210642,23210687,23212046,23214094,23216142,23218190,23220238,23222286,23224334,23226382,23228430,23230478,23232526,23234574,23236622,23238670,23240718,23242766,23244814,23246862,23248910,23250958,23253006,23255054,23257102,23259150,23261198,23263246,23265294,23267342,23269390,23270758,23271984,23273186,23274420,23275662,23276756,23277887,23279024,23280244,23281446,23282721,23284002,23285167,23286488,23287757,23289216,23290917,23292471,23294006,23295371,23296738,23298253,23299826,23301265,23302646,23304246,23305856,23307405,23308902,23310390,23311927,23313358,23314733,23316127,23317593,23319045,23320534,23321802,23323015,23324350,23325616,23326882,23328069,23329168,23330037,23331080,23332113,23333247,23334248,23335072,23335758,23336500,23337317,23338006,23338646,23339270,23339804,23341684,23343348,23344501,23345580,23346720,23347724,23348923,23350204,23351553,23352694,23353920,23355113,23356390,23357740,23359006,23360592,23362121,23363900,23365686,23367371,23369123,23370907,23372510,23373973,23375526,23377003,23378384,23379969,23381587,23383043,23384508,23386139,23387713,23389367,23390850,23392561,23394093,23395469,23396748,23398121,23399357,23400466,23401594,23402612,23403613,23404698,23405612,23406602,23407639,23408689,23409731,23410631,23411490,23412176,23412772,23413206,23413640,23414016,23415387,23416751,23417411,23418102,23418775,23419440,23420109,23420762,23421443,23422132,23422818,23423443,23424120,23424798,23426024,23427607,23429109,23430659,23432242,23433920,23435531,23437084,23438583,23439986,23441067,23441954,23443226,23444688,23446135,23447686,23449209,23450656,23452158,23453577,23454903,23456047,23456996,23458147,23459565,23461080,23462562,23464018,23465511,23466902,23468134,23469070,23469766,23470405,23471082,23471783,23472457,23473131,23473786,23474462,23475172,23475837,23476485,23477151,23478327,23480068,23480766,23481427,23482062,23482727,23483429,23484126,23484781,23485437,23486132,23486837,23487549,23488210,23489031,23490432,23492056,23493651,23495282,23496997,23498686,23500252,23501765,23503199,23504569,23505887,23507249,23508523,23509835,23511181,23512508,23513810,23515086,23516367,23517518,23519182,23520859,23522486,23524104,23525765,23527360,23528898,23530287,23531384,23532375,23533112,23533869,23534541,23535210,23535887,23536510,23537200,23537887,23538542,23539186,23539826,23540518,23541178,23541986,23544014,23544864,23545264,23545808,23546460,23547089,23547806,23548677,23549591,23550587,23551705,23552735,23553872,23555218,23556721,23558228,23559805,23561364,23562923,23564441,23565909,23567343,23568813,23570267,23571709,23573198,23574683,23576105,23577521,23578920,23580179,23581539,23582933,23584349,23585947,23587565,23589125,23590572,23591891,23593009,23594165,23595431,23596661,23597889,23599168,23600320,23601446,23602463,23603404,23604424,23605437,23606439,23607406,23608306,23609183,23609876,23610486,23610880,23612107,23613399,23613725,23614215,23614735,23615410,23616151,23616977,23617864,23618777,23619788,23620819,23621981,23623220,23624563,23626077,23627697,23629364,23631086,23632742,23634375,23635862,23637294,23638667,23639973,23641277,23642651,23644077,23645542,23646945,23648392,23649884,23651327,23652780,23654192,23655653,23657103,23658659,23660342,23661990,23663520,23664870,23666171,23667385,23668624,23669835,23671045,23672264,23673442,23674520,23675578,23676639,23677642,23678549,23679344,23680107,23680791,23681305,23682189,23683950,23684253,23684743,23685372,23686013,23686685,23687465,23688370,23689290,23690355,23691433,23692469,23693824,23695379,23696879,23698369,23699952,23701469,23702932,23704246,23705542,23706862,23708218,23709540,23710982,23712371,23713783,23715147,23716405,23717807,23719176,23720547,23721843,23723192,23724530,23725823,23727179,23728717,23730264,23731884,23733307,23734775,23736176,23737546,23738761,23739947,23741176,23742397,23743549,23744633,23745652,23746635,23747570,23748456,23749233,23749881,23750375,23750777,23752527,23754270,23755993,23757789,23759490,23761543,23763591,23765639,23767687,23769735,23771783,23773831,23775879,23777927,23779975,23782023,23784071,23786119,23788167,23790215,23792263,23794311,23796359,23798407,23800455,23802503,23804551,23806599,23808647,23810695,23812723,23814699,23816752,23818764,23820817,23822807,23824855,23826815,23828863,23830834,23832882,23834886,23836861,23838737,23840766,23842763,23844534,23846417,23848379,23850376,23852360,23854329,23856291,23858253,23860249,23862188,23863194,23863959,23864776,23865675,23866667,23867666,23868793,23869816,23870886,23871733,23872516,23873480,23874512,23875375,23876314,23877207,23878109,23879094,23879918,23880720,23881597,23882435,23883413,23884500,23885384,23886071,23886952,23888302,23889585,23890852,23892225,23893352,23893912,23894451,23894955,23895553,23896109,23896906,23897839,23898780,23899832,23900790,23901498,23902494,23903220,23904163,23905161,23906173,23906923,23907983,23908800,23909314,23909853,23910539,23911273,23911981,23913249,23913719,23914510,23915166,23915860,23916605,23917239,23918373,23919276,23920291,23921330,23922070,23922815,23923355,23923897,23924440,23925136,23925883,23926691,23927514,23928176,23928870,23929754,23930727,23931896,23932702,23933480,23934491,23935490,23936489,23937526,23938267,23939212,23939952,23940761,23941738,23942663,23943588,23944016,23944555,23945458,23946230,23947005,23947536,23948185,23949098,23949746,23950367,23951008,23951679,23952516,23953280,23954128,23954809,23955535,23956285,23957026,23958664,23960353,23962060,23963527,23964962,23966382,23967737,23969284,23970955,23972876,23974618,23976409,23977871,23979310,23980731,23982159,23983715,23985487,23987453,23989093,23990728,23992466,23994102,23995721,23997409,23999157,24000956,24002742,24004493,24006218,24007873,24009141,24010326,24011517,24012972,24014568,24016182,24017897,24019666,24021396,24023172,24024843,24026595,24028300,24030039,24031705,24033457,24035129,24036888,24038659,24040317,24042091,24043890,24045577,24047317,24049106,24050870,24052509,24054083,24055692,24057103,24058405,24059716,24061109,24062640,24064163,24065775,24067421,24068982,24070601,24072217,24073748,24075324,24076963,24078578,24080298,24082332,24083742,24085147,24086634,24088180,24089626,24091106,24092667,24094144,24095607,24097139,24098768,24100336,24101775,24103417,24105089,24106737,24108445,24110223,24111941,24113613,24115294,24116864,24118436,24119944,24121532,24123137,24124731,24126299,24127930,24129571,24131152,24132707,24134275,24135925,24137548,24139189,24140800,24142412,24143985,24145551,24147155,24148797,24150392,24151958,24153192,24154442,24155916,24157424,24158820,24160213,24161692,24163247,24164869,24166482,24167935,24169334,24170825,24172876,24174242,24175472,24176694,24177951,24179176,24180435,24181667,24182912,24184160,24185442,24186743,24188146,24189603,24190894,24192177,24193470,24194781,24196091,24197404,24198675,24199920,24201209,24202477,24203730,24204992,24206250,24207483,24208737,24209992,24211244,24212474,24213662,24214851,24216099,24217324,24218570,24219807,24221044,24222321,24223566,24224835,24226081,24227362,24228662,24229985,24231560,24232855,24234131,24235448,24236783,24238092,24239383,24240615,24241870,24243162,24244436,24245661,24247481,24249395,24251122,24252902,24254689,24256491,24258301,24260078,24261852,24263637,24265421,24267176,24268900,24270628,24272338,24274041,24275711,24277344,24278968,24280578,24282232,24283884,24285478,24287056,24288769,24290476,24292177,24293893,24295655,24297399,24299202,24300941,24302707,24304453,24306188,24307901,24309490,24311202,24312884,24314561,24316222,24317883,24319554,24321295,24323006,24324727,24326457,24328188,24329933,24331722,24333519,24335265,24337009,24338747,24340503,24342251,24344003,24345779,24347288,24348377,24350001,24352049,24354097,24356145,24358193,24360241,24362289,24364337,24366385,24368433,24370481,24372529,24374577,24376625,24378673,24380721,24382769,24384817,24386865,24388913,24390961,24393009,24395057,24397105,24399153,24401201,24403249,24405297,24407345,24409393,24411441,24413489,24415537,24417585,24419633,24421681,24423729,24425777,24427825,24429873,24431921,24433969,24436017,24438073,24440121,24442169,24444217,24446265,24448313,24450361,24452409,24454457,24456505,24458553,24460601,24462649,24464697,24466745,24468793,24470841,24472889,24474937,24476985,24479033,24481081,24483129,24485177,24487225,24489273,24491321,24493369,24495417,24497465,24499513,24501561,24503609,24505657,24507705,24509753,24511801,24513849,24515897,24517945,24519993,24522041,24524089,24526137,24528185,24530233,24532281,24534329,24536377,24538425,24540473,24542521,24544569,24546617,24548665,24550713,24552761,24554809,24556857,24558905,24560953,24563001,24565049,24567097,24569145,24571193,24573241,24575289,24577337,24579385,24581433,24583481,24585529,24587577,24589625,24591673,24593721,24595769,24597817,24599865,24601913,24603961,24606009,24608057,24610105,24612153,24614201,24616249,24618297,24620345,24622393,24624441,24626489,24628537,24630585,24632633,24634681,24636729,24638777,24640825,24642873,24644921,24646969,24649017,24651065,24653113,24655161,24657209,24659257,24661305,24663353,24665401,24667449,24669497,24671545,24673593,24675641,24677689,24679737,24681785,24683833,24685881,24687929,24689977,24692025,24694073,24696121,24698169,24700217,24702265,24704313,24706361,24708409,24710457,24712505,24714553,24716601,24718649,24720697,24722745,24724793,24726841,24728889,24730937,24732985,24735033,24737081,24739129,24741177,24743225,24745273,24747321,24749369,24751417,24753465,24755513,24757561,24759609,24761657,24763705,24765753,24767801,24769849,24771897,24773945,24775993,24778041,24780089,24782137,24784185,24786233,24788290,24790338,24792386,24794434,24796482,24798530,24800578,24802626,24804674,24806722,24808770,24810818,24812866,24814914,24816962,24819010,24821058,24823106,24825154,24827202,24829250,24831298,24833346,24835394,24837442,24839490,24841538,24843586,24845634,24847682,24849730,24851778,24853826,24855874,24857922,24859970,24862018,24864066,24866114,24868162,24870210,24872258,24874306,24876354,24878402,24880450,24882498,24884546,24886594,24888642,24890690,24892738,24894786,24896834,24898882,24900930,24902978,24905026,24907074,24909122,24911170,24913218,24915266,24917314,24919362,24921410,24923458,24925506,24927554,24929602,24931650,24933698,24935746,24937794,24939842,24941890,24943938,24945986,24948034,24950082,24952130,24954178,24956226,24958274,24960322,24962370,24964418,24966466,24968514,24970562,24972610,24974658,24976706,24978754,24980802,24982850,24984898,24986946,24988994,24991042,24993090,24995138,24997194,24999242,25001290,25003338,25005386,25007434,25009482,25011530,25013578,25015626,25017674,25019722,25021770,25023818,25025866,25027914,25029962,25032010,25034058,25036106,25038154,25040202,25042250,25044298,25046346,25048394,25050442,25052490,25054538,25056586,25058634,25060682,25062730,25064778,25066826,25068874,25070922,25072970,25075018,25077066,25079114,25081162,25083210,25085258,25087306,25089354,25091402,25093450,25095498,25097546,25099594,25101642,25103690,25105738,25107786,25109834,25111882,25113930,25115978,25118026,25120074,25122122,25124170,25126218,25128266,25130314,25132362,25134410,25136458,25138506,25140554,25142602,25144650,25146698,25148746,25150794,25152842,25154890,25156938,25158986,25161034,25163082,25165130,25167178,25169226,25171274,25173322,25175370,25177418,25179466,25181514,25183562,25185610,25187658,25189706,25191754,25193802,25195859,25197907,25199955,25202003,25204051,25206099,25208147,25210195,25212243,25214291,25216339,25218387,25220435,25222483,25224531,25226579,25228627,25230675,25232723,25234771,25236819,25238867,25240915,25242963,25245011,25247059,25249107,25251155,25253203,25255251,25257299,25259347,25261395,25263443,25265491,25267539,25269587,25271635,25273683,25275731,25277779,25279827,25281875,25283923,25285603,25286257,25286860,25287442,25288085,25288683,25289274,25289870,25290499,25291131,25291743,25292366,25293697,25294338,25294857,25295453,25296044,25296578,25296957,25297353,25297846,25299539,25301278,25302661,25303692,25304817,25305872,25307175,25308693,25310168,25311304,25312661,25314414,25315637,25316674,25318114,25318510,25318938,25319387,25319861,25320376,25320843,25321354,25321788,25322143,25322404,25322683,25322963,25323365,25325051,25326949,25328703,25330407,25332110,25333885,25334900,25336076,25337218,25338133,25339033,25340154,25341260,25342143,25343324,25343917,25345021,25345937,25346914,25347898,25349267,25349896,25351195,25352272,25353339,25354329,25355375,25356296,25357335,25358583,25359537,25360434,25361276,25362593,25363222,25364394,25365412,25366720,25367878,25368905,25370090,25370671,25371802,25372883,25374041,25374968,25375883,25377160,25377671,25377976,25378277,25378753,25380060,25381105,25382359,25383150,25384455,25385368,25387175,25388108,25389834,25391141,25393091,25394553,25396050,25397608,25399182,25400780,25402409,25404040,25405668,25407353,25408973,25410627,25412302,25413892,25415557,25417196,25418788,25420408,25422049,25423789,25425508,25427193,25428943,25430692,25432467,25434163,25435839,25437611,25439410,25441223,25443033,25444887,25446778,25448671,25450562,25452468,25454343,25456104,25457883,25459710,25461523,25463333,25465116,25466907,25468708,25470460,25472220,25473792,25475380,25477004,25478623,25480189,25481647,25483140,25484752,25486312,25488022,25489688,25491736,25493147,25494549,25496050,25497606,25499102,25500605,25502163,25503629,25505099,25506619,25508248,25509843,25511239,25512857,25514538,25516168,25517864,25519639,25521376,25523031,25524741,25526310,25527905,25529430,25530991,25532596,25534196,25535775,25537384,25539026,25540616,25542160,25543708,25545339,25546947,25548567,25550154,25551775,25553338,25554922,25556534,25558185,25559804,25561386,25562659,25563877,25565354,25566842,25568260,25569588,25571078,25572615,25574223,25575836,25577267,25578649,25580124,25582099,25583081,25583663,25584375,25584863,25585479,25586215,25587049,25587782,25588782,25589740,25590884,25591782,25592968,25594219,25595514,25596834,25598170,25599524,25600903,25602292,25603698,25605173,25606531,25607933,25609389,25610955,25612398,25613803,25615277,25616598,25617626,25618606,25619517,25620729,25621989,25623256,25624521,25625562,25626676,25627635,25628571,25629565,25630447,25631366,25632395,25633268,25634032,25634877,25635777,25636622,25637104,25637752,25638571,25639185,25639888,25640543,25641145,25642553,25643977,25644710,25645452,25646336,25647310,25648363,25649490,25650529,25651642,25652803,25653908,25654864,25655692,25656424,25657433,25658767,25660076,25661499,25662942,25664460,25665935,25667457,25668800,25670289,25671837,25673440,25674983,25676499,25678109,25679751,25681454,25683123,25684687,25686187,25687729,25689315,25690795,25692273,25693742,25695018,25696330,25697539,25698623,25699553,25700582,25701656,25702746,25703807,25704970,25706188,25707423,25708525,25709520,25710353,25711087,25711900,25712671,25713693,25714624,25716276,25718297,25720345,25722393,25724441,25726489,25728537,25730585,25732633,25734681,25736729,25738777,25740825,25742873,25744921,25746969,25749017,25751065,25753113,25755161,25757209,25759257,25761305,25763353,25765401,25767449,25769497,25771554,25773602,25775650,25777698,25779746,25781794,25783842,25785890,25787938,25789986,25792034,25794082,25796130,25798178,25800226,25802274,25804322,25806370,25808418,25810466,25812514,25814562,25816610,25818658,25820706,25822761,25824809,25826857,25828905,25830953,25833001,25835049,25837097,25839145,25841193,25843241,25845289,25847337,25849385,25851433,25853481,25855529,25857577,25859634,25861682,25863730,25865787,25867835,25869883,25871931,25873979,25876027,25878075,25880123,25882171,25884219,25886267,25888315,25890371,25892419,25894467,25896515,25898563,25900611,25902659,25904707,25906755,25908803,25910851,25912899,25914947,25916995,25919043,25921091,25923139,25925187,25927235,25929292,25931340,25933388,25935436,25937484,25939532,25941580,25943602,25945508,25947489,25949537,25951585,25953641,25955555,25957564,25959612,25961669,25963717,25965765,25967632,25969655,25971710,25973761,25975817,25977756,25979750,25981798,25983843,25985838,25987769,25989762,25991755,25993758,25995621,25997600,25999593,26001600,26003463,26005438,26007465,26009470,26011384,26013366,26015361,26017304,26019297,26021167,26023197,26025239,26027135,26029057,26030990,26032868,26034852,26036710,26038685,26040548,26042495,26044402,26046306,26048252,26050171,26052130,26053989,26056000,26057858,26059832,26061695,26063711,26065574,26067507,26069413,26071338,26073271,26075170,26077154,26078983,26081014,26082884,26084878,26086768,26088680,26090617,26092549,26094488,26096438,26098378,26100299,26102261,26104153,26106140,26108056,26110039,26111892,26113922,26115797,26117825,26119692,26121671,26123534,26125502,26127380,26129338,26131228,26133159,26135077,26137022,26138941,26140863,26142802,26144715,26146675,26148548,26150527,26152422,26154427,26156292,26158303,26160192,26162129,26164044,26166029,26167950,26169960,26171809,26173803,26175738,26177710,26179591,26181613,26183592,26185569,26187457,26189438,26191446,26193349,26195292,26197199,26199107,26201046,26203009,26204907,26206886,26208755,26210697,26212593,26214534,26216441,26218344,26220295,26222287,26224155,26226136,26228001,26229994,26231857,26233790,26235704,26237684,26239554,26241583,26243450,26245405,26247299,26249207,26251146,26252971,26254989,26256864,26258849,26260719,26262735,26264783,26266810,26268710,26270689,26272737,26274718,26276694,26278710,26280758,26282621,26284599,26286643,26288657,26290575,26292504,26294437,26296423,26298302,26300280,26302144,26304119,26305985,26307937,26309844,26311792,26313693,26315631,26317548,26319426,26321412,26323246,26325191,26327087,26328996,26330942,26332749,26334780,26336644,26338570,26340502,26342434,26344367,26346290,26348236,26350148,26352125,26354049,26356026,26357917,26359898,26361780,26363795,26365670,26367699,26369569,26371529,26373432,26375380,26377294,26379236,26381141,26383079,26384994,26386920,26388853,26390783,26392722,26394610,26396590,26398518,26400497,26402395,26404404,26406294,26408299,26410195,26412201,26414097,26416102,26418014,26420020,26421923,26423932,26425951,26427867,26429807,26431726,26433655,26435588,26437518,26439451,26441379,26443325,26445209,26447187,26449042,26451070,26452935,26454910,26456774,26458705,26460615,26462536,26464473,26466347,26468328,26470297,26472257,26474197,26476134,26478087,26479992,26481938,26483841,26485792,26487692,26489638,26491545,26493484,26495393,26497332,26499234,26501175,26503092,26505029,26506959,26508919,26510826,26512773,26514674,26516614,26518524,26520465,26522372,26524313,26526227,26528157,26530089,26532023,26533962,26535848,26537827,26539682,26541696,26543560,26545517,26547431,26549375,26551282,26553224,26555131,26557071,26558978,26560916,26562822,26564764,26566680,26568622,26570528,26572466,26574372,26576313,26578219,26580168,26582064,26584001,26585918,26587826,26589783,26591583,26593613,26595477,26597427,26599342,26601285,26603195,26605177,26607041,26608979,26610877,26612791,26614723,26616661,26618612,26620446,26622455,26624305,26626282,26628152,26630127,26631990,26633971,26635836,26637815,26639686,26641715,26643580,26645523,26647437,26649420,26651373,26653353,26655337,26657283,26659130,26661139,26662991,26664989,26666853,26668834,26670701,26672665,26674546,26676460,26678393,26680344,26682259,26684198,26686104,26688012,26689915,26691865,26693763,26695667,26697613,26699445,26701454,26703313,26705342,26707208,26709186,26711056,26712995,26714891,26716832,26718749,26720668,26722607,26724508,26726487,26728344,26730350,26732215,26734193,26736072,26738048,26739913,26741858,26743753,26745732,26747597,26749611,26751575,26753555,26755415,26757448,26759496,26761544,26763408,26765405,26767453,26769482,26771388,26773369,26775426,26777456,26779375,26781367,26783410,26785280,26787256,26789304,26791359,26793222,26795199,26797063,26799041,26800972,26802981,26804956,26806913,26808788,26810768,26812646,26814669,26816546,26818576,26820440,26822434,26824298,26826239,26828146,26830129,26832010,26834040,26836088,26837970,26840000,26842048,26843918,26845948,26847981,26849844,26851817,26853865,26855735,26857733,26859781,26861660,26863636,26865684,26867555,26869533,26871581,26873458,26875488,26877353,26879367,26881415,26883291,26885270,26887318,26889373,26891253,26893228,26895276,26897222,26899201,26901151,26903138,26905082,26907058,26908961,26910937,26912876,26914856,26916798,26918778,26920710,26922690,26924544,26926519,26928384,26930359,26932224,26934216,26936081,26938065,26939935,26941910,26943789,26945765,26947625,26949634,26951574,26953552,26955480,26957459,26959381,26961361,26963216,26965246,26967122,26969152,26971028,26973057,26974927,26976959,26978870,26980878,26982809,26984788,26986709,26988705,26990755,26992812,26994860,26996845,26998815,27000803,27002788,27004729,27006715,27008734,27010722,27012589,27014573,27016621,27018678,27020733,27022598,27024596,27026562,27028551,27030524,27032444,27034343,27036320,27038132,27040162,27042024,27043934,27045867,27047710,27049719,27051570,27053506,27055413,27057362,27059262,27061214,27063110,27065061,27066961,27068912,27070808,27072761,27074656,27076592,27078495,27080437,27082352,27084246,27086219,27088034,27090064,27091944,27093976,27095854,27097883,27099749,27101743,27103606,27105574,27107457,27109389,27111308,27113258,27115173,27117114,27119031,27120981,27122890,27124871,27126738,27128715,27130580,27132557,27134432,27136451,27138317,27140295,27142159,27144155,27146018,27147981,27149865,27151808,27153704,27155650,27157546,27159491,27161393,27163309,27165253,27167145,27169129,27170971,27173001,27174868,27176822,27178723,27180670,27182573,27184521,27186422,27188366,27190271,27192207,27194134,27196067,27198003,27199923,27201869,27203775,27205752,27207646,27209625,27211518,27213523,27215425,27217435,27219292,27221324,27223204,27225236,27227111,27229141,27231021,27233049,27234916,27236867,27238765,27240680,27242614,27244541,27246498,27248423,27250386,27252267,27254241,27256134,27258142,27260008,27262038,27263918,27265897,27267767,27269734,27271616,27273559,27275466,27277404,27279306,27281247,27283164,27285092,27287029,27288926,27290903,27292804,27294786,27296754,27298731,27300671,27302617,27304530,27306507,27308438,27310396,27312320,27314283,27316201,27318158,27319986,27321991,27324039,27325904,27327881,27329895,27331841,27333717,27335697,27337650,27339637,27341587,27343550,27345472,27347418,27349248,27351256,27353113,27355063,27356968,27358852,27360838,27362667,27364612,27366510,27368413,27370359,27372352,27374350,27376314,27378187,27380169,27382155,27384101,27386018,27387979,27389958,27391848,27393782,27395692,27397597,27399543,27401499,27403414,27405401,27407265,27409217,27411124,27413019,27414979,27416905,27418851,27420771,27422735,27424647,27426624,27428527,27430504,27432478,27434437,27436346,27438323,27440263,27442224,27444071,27446080,27448044,27450021,27451905,27453887,27455846,27457829,27459679,27461696,27463558,27465492,27467397,27469279,27471261,27473167,27475150,27477003,27478979,27480841,27482776,27484689,27486609,27488546,27490445,27492431,27494259,27496236,27498104,27500134,27502126,27504088,27506086,27507947,27509918,27511780,27513719,27515615,27517601,27519481,27521509,27523557,27525418,27527390,27529269,27531302,27533350,27535398,27537438,27539357,27541311,27543214,27545197,27547245,27549107,27551085,27553074,27555033,27556965,27558915,27560908,27562769,27564741,27566789,27568824,27570748,27572741,27574789,27576651,27578594,27580500,27582485,27584335,27586310,27588174,27590166,27592028,27593955,27595871,27597794,27599731,27601649,27603599,27605596,27607644,27609669,27611571,27613518,27615414,27617398,27619278,27621306,27623178,27625207,27627218,27629151,27631083,27633017,27634946,27636879,27638884,27640932,27642941,27644878,27646830,27648735,27650674,27652580,27654561,27656423,27658395,27660266,27662316,27664184,27666179,27668059,27670088,27672076,27674039,27675993,27677910,27679899,27681753,27683784,27685832,27687722,27689697,27691568,27693539,27695401,27697337,27699245,27701207,27703100,27705077,27707022,27709002,27710898,27712908,27714872,27716849,27718789,27720735,27722640,27724602,27726521,27728484,27730480,27732347,27734319,27736367,27738243,27740205,27742087,27744062,27746072,27748018,27750011,27751873,27753835,27755702,27757674,27759545,27761483,27763379,27765324,27767234,27769154,27771091,27773087,27774955,27776926,27778797,27780768,27782630,27784603,27786465,27788429,27790301,27792240,27794138,27796042,27797988,27799946,27801853,27803835,27805784,27807763,27809815,27811724,27813733,27815786,27817805,27819736,27821737,27823758,27825691,27827693,27829741,27831611,27833641,27835661,27837594,27839598,27841464,27843442,27845307,27847286,27849280,27851240,27853236,27855284,27857148,27859146,27861194,27863158,27865136,27867188,27869133,27871112,27873164,27875028,27877017,27879030,27880970,27882965,27884838,27886817,27888844,27890746,27892696,27894597,27896548,27898443,27900376,27902282,27904177,27906135,27907960,27909965,27911832,27913790,27915686,27917602,27919540,27921503,27923400,27925380,27927269,27929300,27931308,27933246,27935195,27937115,27939079,27940971,27942889,27944821,27946816,27948761,27950741,27952793,27954660,27956673,27958535,27960507,27962539,27964434,27966413,27968461,27970323,27972301,27974349,27976212,27978193,27980241,27982113,27984088,27986125,27988019,27989999,27991099,27992231,27993376,27994525,27995496,27996472,27998390,28000078,28001932,28003716,28005582,28007172,28008376,28009695,28011670,28013718,28015766,28016813,28016847,28016881,28016915,28016949,28016983,28017017,28017051,28017238,28018131,28019100,28020171,28021274,28022342,28023288,28024166,28024895,28025841,28026790,28027788,28028705,28029765,28030653,28031634,28032762,28033738,28034807,28035831,28036758,28037643,28038494,28039342,28040344,28041461,28042371,28043294,28044129,28045030,28045999,28046907,28047820,28048830,28049700,28050451,28051322,28052396,28053602,28054560,28055511,28056858,28058142,28059411,28060637,28061927,28063194,28064670,28065964,28067475,28068869,28070275,28071283,28072165,28073227,28074251,28075157,28076128,28077179,28078190,28079091,28080235,28081222,28082359,28083386,28084427,28085515,28086609,28087643,28088719,28089904,28091095,28092200,28093445,28094775,28096055,28097148,28098061,28098408,28099185,28100091,28101209,28102290,28103363,28104348,28104870,28106122,28107667,28109188,28110505,28111967,28113281,28114678,28116011,28117084,28118229,28119418,28120331,28122110,28123403,28124752,28126034,28127240,28128435,28129657,28130804,28132038,28133517,28134964,28136345,28137640,28138948,28140175,28141486,28142956,28144491,28146147,28147717,28149294,28150905,28152440,28154003,28155599,28157110,28158640,28160133,28161593,28162982,28164356,28165716,28167311,28169365,28171413,28173461,28175509,28177557,28179605,28181660,28183708,28185756,28187804,28189852,28191900,28193948,28195996,28198044,28200092,28202140,28204188,28206236,28208284,28210332,28212380,28214428,28216476,28218524,28220572,28222620,28224668,28226716,28228764,28230812,28232860,28234908,28236956,28239004,28241052,28243100,28245148,28247196,28249244,28251292,28253340,28255388,28257436,28259484,28261532,28263580,28265628,28267676,28269724,28271772,28273820,28275868,28277916,28279964,28282012,28284060,28286108,28288156,28290204,28292252,28294300,28296348,28298396,28300444,28302492,28304540,28306588,28308636,28310684,28312732,28314780,28316828,28318876,28320924,28322972,28325020,28327068,28329116,28331164,28333212,28335260,28337308,28339356,28341404,28343452,28345500,28347548,28349596,28351068,28352425,28353865,28355245,28356596,28357985,28359432,28360897,28362392,28364051,28365708,28367228,28368678,28370103,28371392,28372946,28374613,28376336,28378092,28379737,28381383,28382899,28384331,28385902,28387547,28389192,28390852,28392501,28394082,28395632,28397065,28398656,28400634,28402689,28404744,28406735,28408783,28410792,28412814,28414862,28416880,28418901,28420949,28422943,28424984,28427032,28429054,28431102,28433150,28435188,28437243,28439291,28441320,28443278,28445204,28447252,28449295,28451210,28452737,28454324,28455936,28457497,28459069,28460656,28461441,28461680,28461886,28462116,28462330,28462602,28463297,28463539,28463752,28463974,28464193,28464412,28465579,28466817,28468152,28469398,28470560,28471683,28472915,28474083,28475352,28476543,28477726,28478922,28480032,28481143,28481601,28481760,28483430,28484759,28486631,28488680,28490714,28492762,28494208,28495086,28497134,28499182,28501230,28503278,28505326,28507374,28508821,28509702,28511750,28513798,28515846,28517894,28519942,28521990,28524038,28525487,28526362,28528413,28530461,28532509,28534557,28536605,28538653,28540070,28541017,28543065,28545113,28547161,28549209,28551257,28553305,28555353,28557401,28559449,28561497,28563212,28564369,28565388,28565469,28565893,28567910,28569958,28572006,28574054,28576102,28578150,28580198,28582246,28584294,28586342,28588393,28590441,28592489,28594537,28596585,28598624,28600672,28602720,28604768,28606816,28608873,28610929,28612977,28615025,28617073,28619121,28621168,28623095,28625143,28627191,28629239,28631287,28633335,28635390,28637438,28639486,28641542,28643590,28645638,28647686,28649734,28651782,28653830,28655878,28657926,28659974,28662022,28664067,28666115,28668163,28670211,28672259,28674291,28676339,28678387,28680435,28682483,28684531,28686564,28688612,28690660,28692708,28694721,28696757,28698805,28700829,28702877,28704925,28706957,28709005,28711030,28713027,28715075,28717109,28719166,28721201,28723249,28725297,28727331,28729379,28731427,28733475,28735529,28737577,28739633,28741689,28743737,28745640,28746549,28748603,28750656,28752704,28754152,28755027,28756974,28759028,28761076,28763074,28765122,28767170,28769218,28771266,28773314,28775362,28777418,28779475,28781523,28783571,28785619,28787667,28789715,28791763,28793798,28795846,28797899,28799947,28801995,28804043,28806092,28808107,28810155,28812166,28814214,28816262,28818319,28820332,28822380,28824316,28826364,28828400,28830448,28832481,28834529,28836551,28838541,28840589,28842622,28844670,28846702,28848750,28850662,28852719,28854754,28856802,28858837,28860885,28862818,28864866,28866917,28868965,28871017,28873073,28875074,28877076,28879124,28881140,28883188,28885229,28887265,28889309,28891357,28893414,28895462,28897510,28899558,28901606,28903661,28905709,28907741,28909789,28911812,28913846,28915894,28917942,28919990,28922007,28924055,28926103,28928151,28930201,28932249,28934297,28936345,28938393,28940441,28942489,28944545,28946579,28948616,28950664,28952712,28954760,28956808,28958856,28960872,28962892,28964899,28966937,28968978,28971026,28973069,28975117,28977141,28979138,28981186,28983211,28985259,28987284,28989341,28991266,28993314,28995359,28997407,28999454,29001502,29003430,29005478,29007524,29009572,29011620,29013668,29015647,29017637,29019685,29021713,29023761,29025777,29027808,29029760,29031808,29033838,29035886,29037919,29039967,29041877,29043933,29045977,29048034,29050078,29052135,29054051,29055475,29055610,29055745,29056625,29058673,29060407,29060574,29061452,29063497,29064940,29066080,29068056,29070036,29072069,29074082,29076136,29078150,29078408,29079282,29081330,29082707,29083643,29085677,29087403,29087539,29088419,29090451,29091789,29091920,29092057,29092484,29092768,29093642,29095690,29096355,29096489,29096626,29097067,29097248,29097702,29098716,29099615,29100479,29101384,29102360,29103287,29104156,29104961,29105885,29106776,29107674,29108479,29109502,29110622,29111530,29112471,29113481,29114273,29115355,29116465,29117557,29118523,29119666,29120584,29121432,29122611,29123694,29124791,29125896,29126529,29127161,29127546,29128374,29129612,29130567,29131569,29132020,29132365,29132711,29133137,29133519,29133990,29134525,29135151,29135609,29137081,29138354,29139362,29140285,29141590,29143038,29144596,29146127,29147443,29148844,29150115,29151657,29153101,29154344,29155495,29156698,29158189,29159622,29161203,29162749,29164115,29165352,29166584,29167914,29169327,29170795,29172346,29173794,29174965,29176144,29177570,29179000,29180544,29182156,29183479,29184701,29185850,29187348,29188766,29190327,29191869,29193120,29194277,29195483,29196985,29198449,29200006,29201485,29202801,29203998,29205368,29206699,29208103,29208783,29209344,29209899,29210602,29211210,29211838,29212437,29213363,29214321,29215164,29215868,29216582,29217539,29218417,29219199,29219909,29220924,29221739,29222479,29222925,29223696,29224285,29225155,29225972,29226711,29227510,29228184,29229038,29229522,29230187,29230824,29231238,29231987,29232715,29233434,29234170,29234864,29235579,29236173,29236777,29237375,29238024,29238550,29239073,29239689,29240147,29240621,29241102,29241663,29242308,29243308,29243782,29244224,29245609,29246800,29248053,29249407,29250995,29252421,29253672,29254920,29256089,29257284,29258302,29259706,29260959,29262185,29263616,29264791,29265928,29267084,29268063,29269556,29270395,29271971,29272950,29273835,29274713,29276326,29277270,29278224,29279089,29280069,29280945,29282165,29282960,29284150,29285161,29286280,29287038,29287942,29288866,29289710,29290677,29291752,29292708,29293690,29294766,29295923,29296927,29298001,29298804,29299558,29300567,29301632,29302758,29303801,29304490,29305457,29306594,29307254,29307804,29308291,29308741,29309481,29310166,29310858,29311720,29312480,29313134,29313788,29314442,29315221,29316020,29317044,29317964,29319114,29320030,29320543,29321429,29322259,29323045,29323901,29324516,29325213,29326079,29326439,29326772,29327380,29328090,29328860,29329809,29330504,29331611,29332228,29333076,29333885,29334690,29335586,29336517,29337342,29338245,29339116,29339970,29340800,29341665,29342681,29343263,29344111,29345015,29345895,29346706,29347691,29348372,29349094,29350192,29351024,29351859,29352421,29353236,29354154,29354993,29355826,29356657,29357439,29358207,29359077,29359937,29360793,29361625,29362472,29362914,29363750,29364437,29365154,29365722,29366551,29366905,29367523,29368264,29368965,29369614,29370431,29371024,29372321,29373097,29373859,29375391,29377148,29379014,29380716,29382702,29384559,29386607,29388655,29390711,29392523,29393880,29395539,29397299,29399352,29401400,29403256,29405040,29407088,29408964,29410729,29412779,29414827,29416875,29418863,29420743,29422597,29424575,29426417,29428324,29430335,29432152,29434098,29435469,29436648,29437290,29437953,29438447,29440150,29442203,29444176,29445797,29447162,29448335,29449470,29450666,29452701,29454575,29455848,29457092,29458221,29459240,29461048,29462434,29463864,29465037,29465565,29465729,29466112,29468019,29470067,29472115,29474163,29476211,29478259,29480307,29482364,29484412,29486460,29488517,29490565,29492613,29494637,29496573,29497954,29500002,29502050,29504106,29506154,29508202,29510250,29512298,29514346,29515169,29515194,29517113,29519133,29521181,29523229,29525229,29526618,29528620,29530509,29532566,29534569,29536479,29538527,29540575,29542623,29544671,29546698,29548549,29550597,29552645,29554495,29556543,29558567,29560603,29562651,29564674,29566727,29568774,29570813,29572635,29574045,29575761,29577628,29579676,29581724,29583772,29585820,29587868,29589916,29591964,29594012,29595964,29597900,29598940,29599980,29601166,29602289,29603796,29604877,29606587,29608056,29609224,29610790,29611994,29613295,29614352,29615454,29616525,29617492,29618694,29619869,29621427,29623307,29625230,29627128,29629015,29630923,29632273,29633980,29635657,29637196,29638896,29640182,29641207,29642244,29643354,29644457,29646213,29647300,29648334,29649354,29650514,29651948,29652951,29654036,29655300,29656518,29657825,29658898,29660656,29662688,29664736,29666711,29668759,29670752,29672800,29674837,29676809,29678857,29680832,29682889,29684937,29686905,29688961,29690935,29692983,29695018,29696999,29699047,29701095,29703126,29705153,29707182,29709220,29711263,29713236,29715293,29717329,29719308,29721365,29723420,29725399,29727447,29729498,29731474,29733531,29735579,29737560,29739597,29741645,29743616,29745664,29747712,29749688,29751743,29753715,29755763,29757811,29759859,29761914,29763885,29765942,29767990,29770038,29772086,29774134,29776182,29778230,29780260,29782196,29784244,29786292,29788340,29790388,29792436,29794484,29796532,29798580,29800628,29802571,29804619,29806667,29808715,29810763,29812811,29814859,29816907,29818955,29820854,29822902,29824950,29826998,29829046,29831094,29833142,29835190,29837085,29839133,29841181,29843229,29845277,29847325,29849373,29851302,29853350,29855406,29857454,29859502,29861550,29863598,29865646,29867537,29869585,29871633,29873681,29875729,29877777,29879825,29881873,29883768,29885816,29887864,29889912,29891960,29894008,29896056,29898104,29900152,29902200,29904126,29905645,29907315,29908471,29910230,29911658,29913346,29915122,29916911,29918643,29920438,29921929,29923455,29925068,29926645,29928304,29930071,29931743,29933405,29934819,29936870,29938776,29939797,29941421,29942741,29944149,29945250,29946319,29947972,29949617,29951348,29953003,29954738,29956349,29958233,29960158,29962208,29964256,29965697,29966791,29967967,29969230,29970363,29971542,29972738,29973689,29974885,29976616,29978053,29979607,29980951,29982405,29983766,29985201,29986755,29988285,29990055,29991647,29993327,29994907,29996438,29998041,29999667,30001456,30003366,30005123,30006906,30008733,30010539,30012397,30014114,30015886,30017717,30019435,30020728,30022479,30024342,30025965,30026987,30028368,30030080,30031872,30033075,30034603,30036252,30037792,30039151,30040608,30042475,30044050,30045796,30047588,30049013,30049649,30050484,30051855,30053071,30054291,30055533,30056869,30058728,30060467,30061937,30063457,30064933,30066392,30067773,30069487,30071161,30073130,30075151,30076773,30078506,30080383,30082178,30084023,30085805,30087637,30089452,30091154,30092938,30094481,30096292,30098059,30099891,30101544,30102939,30104408,30105801,30107318,30108832,30110170,30111354,30112778,30114351,30115986,30117654,30119169,30120789,30122329,30123491,30125053,30126785,30128354,30129875,30131358,30132888,30134413,30135935,30137467,30138983,30140463,30141393,30142158,30142759,30143396,30144125,30144792,30145476,30146110,30146752,30147352,30147977,30148645,30149387,30150021,30150729,30151411,30152146,30152815,30153575,30154367,30155131,30155726,30156336,30156869,30157512,30158126,30158418,30158817,30159301,30159770,30161696,30163720,30165583,30167311,30169046,30170767,30172444,30174128,30175802,30177517,30179216,30180912,30182611,30184317,30186015,30187893,30189947,30191700,30193468,30195231,30196876,30198529,30200273,30202002,30203709,30205469,30206799,30207808,30208798,30210692,30212505,30214303,30215975,30217794,30219452,30220957,30222438,30223927,30225409,30226870,30228351,30229848,30231343,30232447,30233045,30233566,30234184,30234818,30235421,30235960,30236518,30237123,30237683,30238302,30238872,30239501,30240036,30240552,30240811,30241265,30241831,30242275,30242574,30243076,30243651,30243982,30244455,30244777,30245560,30247539,30249418,30251073,30252740,30254410,30256080,30257748,30259409,30261105,30262793,30264487,30266165,30267907,30269927,30271540,30273287,30275044,30276716,30278433,30280101,30281811,30282744,30283494,30284246,30286053,30287943,30289687,30291263,30293027,30294819,30296376,30297905,30299379,30300902,30302386,30303869,30305374,30306880,30308381,30309872,30311385,30312881,30314365,30315855,30317372,30318867,30320380,30321890,30323392,30324861,30326265,30326889,30327162,30327730,30328340,30329001,30329500,30330097,30330749,30331334,30331583,30332170,30332637,30333049,30333486,30333993,30334242,30334606,30335219,30335851,30336445,30337052,30337768,30338335,30339009,30339582,30340092,30340791,30341205,30341732,30341961,30342535,30342945,30343320,30343625,30344106,30344589,30345014,30345464,30346025,30346447,30346962,30347437,30347946,30348470,30349077,30349416,30349825,30350304,30350656,30351256,30351690,30352001,30352383,30352939,30353314,30353794,30354281,30354540,30354930,30355849,30357842,30359863,30361887,30363885,30365910,30367835,30369524,30371220,30372909,30374626,30376326,30378034,30379746,30381464,30383126,30384807,30386491,30388166,30389841,30391520,30393226,30394936,30396613,30398319,30400020,30401721,30403411,30405085,30406781,30408485,30410173,30411857,30413643,30415691,30417739,30419713,30421347,30423040,30424764,30426509,30428174,30429887,30431577,30433220,30434904,30436479,30438205,30439962,30441658,30443348,30445063,30446795,30448449,30450177,30451885,30453560,30454958,30455958,30457026,30458083,30459421,30461171,30462777,30464532,30466179,30467899,30469233,30470429,30471280,30473036,30474870,30476701,30478548,30480371,30481853,30483407,30484892,30486410,30487934,30489431,30490894,30492384,30493894,30495379,30496869,30497536,30498137,30498509,30498963,30499379,30499775,30500358,30500748,30501334,30501961,30502532,30503021,30503538,30504134,30504656,30504891,30505209,30505344,30505600,30506079,30506730,30507223,30507747,30508182,30508721,30509052,30509586,30510064,30510173,30510577,30511586,30513610,30515598,30517403,30519117,30520828,30522542,30524232,30525922,30527618,30529282,30530969,30532671,30534407,30536086,30537768,30539604,30541652,30543436,30545075,30546836,30548544,30550293,30551974,30553646,30555413,30557211,30558891,30560428,30561356,30562628,30563934,30565501,30567255,30569022,30570555,30572136,30573624,30575127,30576613,30578096,30579585,30581073,30582566,30584028,30585525,30586397,30586739,30587105,30587414,30587890,30588487,30588793,30589047,30589336,30589720,30589899,30590319,30590655,30591150,30591292,30591400,30591743,30591981,30592316,30592606,30593031,30593438,30593779,30594257,30594857,30595395,30595864,30596165,30596710,30597243,30598692,30600687,30602735,30604497,30606198,30607884,30609579,30611254,30612937,30614630,30616288,30618006,30619704,30621424,30623143,30624847,30626768,30628816,30630620,30632407,30634194,30635952,30637725,30639333,30641201,30642982,30644751,30646586,30648442,30649557,30650366,30651393,30652971,30654467,30656128,30657760,30659559,30661173,30662665,30664163,30665651,30667159,30668639,30670032,30670460,30670884,30671173,30671572,30672020,30672265,30672635,30673115,30673486,30673844,30674138,30674647,30674915,30675152,30675448,30675943,30676801,30678761,30680617,30682301,30684008,30685679,30687343,30689042,30690721,30692446,30694374,30696217,30697993,30699612,30701323,30703075,30704894,30706723,30707692,30709070,30710291,30712027,30713664,30715244,30716759,30718231,30719727,30721213,30722692,30724202,30725708,30727211,30728748,30729253,30729836,30730457,30731100,30731583,30732155,30732736,30733333,30733939,30734407,30734953,30735609,30736301,30736846,30737440,30737985,30738549,30739061,30739658,30740132,30740559,30740986,30741558,30742033,30742433,30742731,30743307,30743969,30745957,30747974,30749848,30751573,30753248,30754927,30756592,30758286,30759988,30761672,30763396,30765074,30766757,30768426,30770180,30772228,30774103,30775868,30777606,30779286,30781063,30782839,30784652,30786411,30788201,30789714,30790538,30791364,30792307,30793556,30794871,30796046,30797481,30798768,30800426,30802035,30803666,30805239,30806698,30808182,30809676,30811187,30812682,30814170,30815668,30817151,30818640,30820157,30821679,30823161,30824657,30826154,30827701,30829065,30829521,30829943,30830327,30830613,30830912,30831373,30831839,30832157,30832447,30832916,30833396,30833890,30834246,30834608,30834995,30835369,30835852,30836280,30836696,30837007,30837129,30837281,30837719,30837947,30838246,30838370,30838472,30838785,30839220,30839592,30839898,30840135,30840571,30840767,30841109,30841511,30841862,30842224,30842508,30842912,30843279,30843783,30843965,30844327,30844686,30845027,30845420,30845828,30846143,30846607,30847008,30847828,30849805,30851744,30853699,30855698,30857593,30859266,30860925,30862600,30864274,30865964,30867651,30869328,30870990,30872718,30874422,30876088,30877763,30879429,30881099,30882766,30884441,30886109,30887804,30889457,30891117,30892800,30894499,30896231,30898279,30900327,30902080,30903665,30905307,30906944,30908598,30910231,30912037,30913660,30915396,30917066,30918779,30920394,30921998,30923643,30925330,30926965,30928692,30930037,30930762,30931639,30932940,30934586,30936138,30937742,30939087,30940764,30942628,30944433,30946271,30947990,30949575,30951007,30952497,30953953,30955430,30956917,30958416,30959891,30961393,30962875,30964371,30965853,30967351,30968844,30970317,30971791,30973249,30973778,30974361,30974919,30975573,30976140,30976724,30977108,30977629,30977938,30978291,30978756,30979063,30979465,30979901,30980509,30980945,30981344,30981686,30982255,30982775,30983452,30984126,30984698,30985061,30985585,30986038,30986566,30987159,30987842,30988420,30989094,30989657,30989868,30990002,30990522,30991142,30991825,30992347,30992994,30993588,30994213,30994835,30995461,30996021,30996653,30997246,30997775,30998361,30998995,30999491,31001024,31003022,31004992,31006959,31008857,31010556,31012247,31013938,31015603,31017281,31018975,31020659,31022340,31024039,31025736,31027446,31029155,31030874,31032564,31034264,31035966,31037653,31039364,31041049,31042751,31044478,31046360,31048408,31050456,31052165,31053899,31055584,31057355,31059137,31060902,31062645,31064404,31066228,31068024,31069776,31071573,31073343,31075129,31076799,31078573,31080359,31081498,31082400,31083391,31084349,31085409,31086369,31087503,31088789,31090060,31091130,31092178,31093094,31094354,31096200,31097909,31099734,31101567,31103144,31104810,31106460,31107956,31109442,31110960,31112469,31113960,31115469,31116971,31118457,31119951,31121456,31122957,31124456,31125947,31127430,31128916,31130377,31131851,31133331,31134832,31136154,31136760,31137423,31138104,31138686,31139297,31139862,31140396,31141036,31141684,31142261,31142853,31143386,31143934,31144490,31145054,31145514,31145942,31146417,31147019,31147489,31148193,31148684,31149282,31149887,31150259,31150717,31151279,31151748,31152280,31152883,31153209,31153781,31154294,31154785,31155380,31155893,31156260,31156741,31157295,31157877,31158361,31158906,31159435,31159801,31160194,31160681,31161120,31161414,31161870,31162244,31162470,31162786,31163135,31163593,31164110,31164594,31165033,31165242,31165826,31166303,31166614,31166909,31167270,31167765,31168167,31168471,31168755,31169339,31169850,31170722,31172779,31174836,31176888,31178936,31180993,31183041,31184820,31186541,31188269,31190002,31191743,31193479,31195179,31196907,31198641,31200361,31202066,31203760,31205503,31207229,31208974,31210713,31212439,31214163,31215883,31217606,31219328,31221053,31222780,31224519,31226265,31228000,31229735,31231480,31233199,31234940,31236652,31238383,31240379,31242427,31244475,31246523,31248493,31250224,31252013,31253855,31255702,31257551,31259407,31261195,31263038,31264757,31266513,31268330,31270148,31271931,31273746,31275541,31277318,31279094,31280935,31282764,31284587,31286449,31288262,31290101,31291964,31293797,31295634,31297483,31299310,31301050,31302861,31303876,31304761,31305633,31306435,31307206,31308489,31309855,31311384,31312440,31313738,31315233,31316692,31317668,31318583,31319332,31320640,31321871,31323427,31324619,31326401,31328228,31330027,31331688,31333371,31335014,31336613,31338186,31339798,31341363,31342909,31344403,31345882,31347413,31348929,31350483,31352026,31353523,31355057,31356563,31358068,31359577,31361092,31362613,31364140,31365684,31367142,31368637,31370151,31371645,31373172,31374696,31376199,31377697,31379178,31380699,31382198,31383674,31385154,31386666,31388178,31388894,31389528,31390150,31390689,31391250,31391743,31392121,31392741,31393528,31394148,31394748,31395355,31395995,31396682,31397199,31397782,31398394,31399095,31399759,31400420,31401121,31401718,31402392,31403084,31403752,31404325,31405002,31405651,31406237,31406922,31407428,31407676,31408159,31408768,31409385,31410071,31410531,31411199,31411894,31412570,31413052,31413500,31414104,31414531,31415125,31415655,31416205,31416462,31416770,31416953,31417476,31418032,31418311,31418449,31418665,31419270,31419532,31420093,31420639,31421194,31421859,31422450,31422988,31423629,31424222,31424776,31425420,31426005,31426573,31427203,31427741,31428206,31428668,31429299,31429746,31430228,31430715,31431470,31432061,31432634,31433145,31433713,31434160,31434712,31435298,31435664,31436233,31436633,31437105,31437710,31438284,31438886,31439385,31440032,31440631,31441217,31442847,31444895,31446900,31448907,31450912,31452861,31454828,31456876,31458719,31460410,31462087,31463734,31465408,31467123,31468814,31470507,31472191,31473893,31475622,31477329,31479025,31480702,31482417,31484106,31485806,31487508,31489209,31490876,31492593,31494304,31496011,31497713,31499419,31501103,31502814,31504528,31506221,31507915,31509600,31511324,31513014,31514720,31516418,31518115,31519807,31521486,31523197,31524882,31526552,31528198,31530222,31532270,31534318,31536366,31538268,31540005,31541703,31543490,31545191,31546921,31548694,31550403,31552059,31553715,31555421,31557137,31558876,31560655,31562370,31564151,31565978,31567718,31569467,31571158,31572937,31574684,31576413,31578164,31579894,31581644,31583429,31585152,31586944,31588626,31590367,31591420,31592442,31593406,31594422,31595539,31596592,31597545,31598588,31599596,31600432,31601119,31601805,31602494,31603246,31604056,31604938,31605915,31606872,31607670,31608574,31609518,31610388,31611230,31611961,31612849,31613583,31614550,31615218,31615939,31616484,31616827,31617587,31618351,31619105,31620195,31621859,31622535,31624253,31625991,31627651,31629365,31631178,31633032,31634870,31636565,31638276,31639895,31641483,31643071,31644681,31646168,31647685,31649211,31650722,31652214,31653700,31655230,31656725,31658216,31659760,31661285,31662761,31664251,31665741,31667248,31668746,31670249,31671738,31673259,31674754,31676261,31677771,31679262,31680766,31682277,31683783,31685314,31686831,31688346,31689876,31691415,31692898,31694383,31695880,31697386,31698915,31700395,31701924,31703453,31704932,31706435,31707955,31709464,31710954,31712460,31713971,31715509,31716999,31718514,31719549,31720242,31720883,31721621,31722265,31723077,31723741,31724454,31724932,31725613,31726346,31727113,31727780,31728471,31729179,31729584,31730151,31730828,31731513,31732253,31732981,31733624,31734377,31735041,31735704,31736110,31736580,31737290,31737954,31738576,31739063,31739810,31740527,31741234,31741955,31742610,31743149,31743815,31744346,31745064,31745721,31746328,31747015,31747640,31748162,31748492,31749067,31749718,31750084,31750835,31751409,31752053,31752762,31753344,31754004,31754507,31755040,31755787,31756476,31757124,31757696,31758337,31758967,31759591,31760165,31760845,31761429,31761994,31762475,31762980,31763490,31764102,31764768,31765515,31766113,31766751,31767350,31768023,31768617,31769276,31769969,31770733,31771424,31772210,31772878,31773559,31774336,31775073,31775791,31776410,31777131,31777818,31778546,31779212,31779887,31780623,31781241,31781905,31782589,31783169,31783775,31784035,31784630,31785277,31785857,31786437,31787065,31787658,31788190,31788694,31789434,31789824,31790407,31790759,31791396,31791962,31792636,31793309,31793833,31794577,31795248,31795949,31796583,31797248,31797871,31798498,31799137,31799574,31800266,31800742,31801266,31801852,31802618,31803188,31803828,31804510,31805069,31805564,31806001,31806460,31807004,31807672,31808312,31808981,31809647,31810279,31811749,31813736,31815729,31817698,31819656,31821616,31823615,31825649,31827622,31829637,31831663,31833682,31835719,31837708,31839436,31841158,31842877,31844602,31846297,31847983,31849681,31851396,31853090,31854777,31856449,31858118,31859837,31861550,31863260,31864954,31866663,31868368,31870051,31871727,31873422,31875115,31876811,31878482,31880173,31881911,31883632,31885324,31887003,31888695,31890403,31892120,31893843,31895589,31897330,31899054,31900779,31902519,31904255,31905957,31907660,31909349,31911041,31912726,31914408,31916091,31917788,31919505,31921188,31922888,31924610,31926334,31928016,31929683,31931380,31933128,31934857,31936592,31938324,31940050,31941777,31943566,31945614,31947662,31949710,31951758,31953806,31955854,31957457,31959024,31960729,31962499,31964260,31965973,31967744,31969439,31971202,31973008,31974694,31976391,31978101,31979779,31981522,31983238,31984929,31986715,31988431,31990095,31991728,31993438,31995202,31996935,31998689,32000484,32002153,32003881,32005590,32007290,32009033,32010763,32012374,32014118,32015925,32017710,32019448,32021184,32022785,32024470,32026221,32027970,32029777,32031363,32032401,32033462,32034449,32035406,32036469,32037510,32038458,32039449,32040438,32041317,32042413,32044002,32045373,32046969,32048660,32050219,32051735,32053316,32054941,32056618,32058165,32059926,32061342,32062845,32064423,32065771,32067029,32068252,32069807,32070899,32072328,32073937,32075513,32076754,32078188,32079654,32080836,32082126,32083418,32084887,32086385,32087958,32089375,32090866,32092572,32094179,32095844,32097312,32098649,32100162,32101713,32103317,32104836,32106293,32107778,32109285,32110910,32112638,32113963,32115822,32117671,32119525,32121451,32123335,32125213,32127081,32128893,32130652,32132508,32134326,32136191,32137638,32139155,32140623,32142119,32143608,32145102,32146587,32148069,32149569,32151064,32152140,32152645,32153082,32153589,32154102,32154487,32155007,32155506,32155924,32156363,32156654,32157196,32157671,32158204,32158649,32159168,32159734,32159945,32160339,32160692,32161088,32161507,32161890,32162216,32162638,32162897,32163205,32163725,32163849,32164224,32164625,32165127,32166501,32168447,32170458,32172237,32173924,32175625,32177323,32179023,32180740,32182429,32184123,32185824,32187516,32189197,32190880,32192550,32194225,32195894,32197924,32199948,32201659,32203420,32205133,32206887,32208680,32210396,32212170,32213940,32215700,32217413,32219096,32220658,32221485,32222275,32223201,32224721,32226199,32227614,32228743,32230339,32231980,32233723,32235277,32236749,32238270,32239764,32241234,32242686,32244187,32245685,32247181,32248670,32250187,32250639,32251162,32251633,32252136,32252518,32253215,32253779,32254383,32254921,32255524,32256014,32256444,32256854,32257222,32257551,32257979,32258445,32258816,32259175,32259572,32259922,32260370,32260916,32261314,32261632,32262166,32262501,32262934,32264958,32267003,32268846,32270534,32272235,32273953,32275674,32277413,32279151,32280851,32282543,32284244,32285935,32287635,32289325,32291261,32293316,32294887,32296639,32298476,32300325,32302119,32303933,32305692,32307500,32309277,32311043,32312836,32314242,32314901,32315731,32317347,32318916,32320577,32321935,32323561,32325275,32326965,32328502,32330124,32331688,32333192,32334660,32336152,32337627,32339112,32340608,32342095,32343579,32345040,32346518,32347992,32349485,32350940,32352401,32353879,32355375,32356854,32358332,32359824,32361298,32362758,32364220,32365703,32367204,32368657,32370128,32371617,32373095,32374584,32376060,32377559,32379054,32380554,32382034,32383514,32385019,32385720,32386383,32386992,32387611,32388256,32388988,32389611,32390180,32390728,32391339,32391901,32392581,32393135,32393752,32394339,32394979,32395574,32396165,32396715,32397260,32397934,32398584,32399183,32399758,32400294,32400959,32401535,32402122,32402736,32403308,32403796,32404265,32404753,32405452,32406076,32406611,32407156,32407692,32408182,32408716,32409258,32409801,32410330,32410959,32411525,32411930,32412311,32412508,32412864,32413262,32413575,32414067,32414478,32414886,32415312,32415872,32416563,32417076,32417350,32417516,32417811,32418114,32418280,32418492,32418927,32419339,32419860,32420349,32420816,32421342,32422000,32422525,32423080,32423666,32424291,32424876,32425401,32425974,32426398,32426875,32427503,32428012,32428535,32429126,32429610,32429854,32430440,32430913,32431437,32431882,32432205,32432383,32432806,32433440,32434099,32434635,32435165,32435577,32436055,32436683,32437256,32437755,32438271,32438952,32439564,32440128,32440642,32441054,32441660,32442795,32444801,32446808,32448779,32450754,32452744,32454695,32456639,32458609,32460648,32462430,32464144,32465856,32467577,32469287,32470992,32472701,32474411,32476085,32477781,32479455,32481161,32482833,32484540,32486248,32487962,32489648,32491322,32493004,32494708,32496390,32498014,32499700,32501348,32503036,32504716,32506394,32508087,32509774,32511438,32513110,32514779,32516459,32518152,32519847,32521520,32523203,32524859,32526553,32528238,32529938,32531621,32533312,32534976,32536629,32538300,32540037,32542085,32544133,32546181,32548229,32550117,32551857,32553567,32555293,32557025,32558713,32560388,32562132,32563883,32565692,32567437,32569190,32570882,32572592,32574274,32575861,32577572,32579252,32580949,32582691,32584404,32586134,32587844,32589583,32591337,32593022,32594667,32596317,32598013,32599699,32601496,32603146,32604834,32605896,32606798,32607733,32608563,32609379,32610325,32611230,32612126,32613090,32613993,32615192,32616358,32617261,32618424,32619470,32620900,32622085,32623243,32624384,32625652,32627008,32628204,32629520,32630765,32632250,32633667,32635139,32636146,32637275,32638569,32639685,32640449,32641225,32642179,32642882,32643240,32643818,32644923,32645977,32647113,32648127,32649413,32650295,32650915,32651416,32652374,32653512,32655050,32656628,32658459,32660310,32662165,32664073,32666021,32667958,32669868,32671778,32673436,32674986,32676468,32677956,32679461,32680964,32682447,32683944,32685393,32686884,32688375,32689862,32691362,32692724,32693185,32693493,32693861,32694421,32694929,32695283,32695795,32696414,32696952,32697156,32697443,32697648,32697911,32698240,32698574,32699023,32699550,32699973,32700381,32700703,32700995,32701398,32701872,32702179,32702608,32702951,32703288,32703653,32704055,32704373,32704687,32705073,32705484,32705753,32706412,32707029,32707629,32709604,32711585,32713607,32715472,32717168,32718847,32720525,32722224,32723915,32725624,32727332,32729014,32730688,32732388,32734106,32735826,32737512,32739211,32740918,32742717,32744765,32746646,32748364,32750036,32751742,32753500,32755301,32757090,32758789,32760531,32762323,32764117,32765848,32767612,32769062,32769763,32770628,32772122,32773799,32775191,32775773,32776633,32777721,32779393,32781225,32783014,32784597,32786224,32787720,32789211,32790717,32792207,32793712,32795224,32796601,32797196,32797818,32798439,32799024,32799424,32799969,32800522,32800931,32801353,32801821,32802264,32802634,32802941,32803245,32803589,32804083,32804557,32804793,32805239,32805828,32805994,32806326,32806956,32807511,32809416,32811418,32813170,32814869,32816569,32818283,32820001,32821685,32823356,32825028,32826723,32828424,32830121,32832125,32833961,32835731,32837600,32839339,32841106,32842807,32844557,32846320,32848167,32849290,32850048,32851071,32852679,32854224,32855820,32857175,32858759,32860453,32861916,32863408,32864774,32866238,32867734,32869208,32870710,32872167,32873652,32875126,32876608,32878101,32879608,32881082,32882574,32884065,32885008,32885520,32886014,32886601,32887181,32887678,32888252,32888745,32889160,32889858,32890389,32890883,32891474,32892114,32892529,32892844,32893319,32893828,32894185,32894621,32895092,32895576,32895984,32896493,32896770,32897001,32897325,32897966,32898590,32899236,32899831,32900443,32900944,32901529,32902075,32902373,32902918,32903344,32903868,32904472,32905074,32905451,32905994,32906481,32907447,32909437,32911446,32913448,32915294,32916982,32918670,32920403,32922092,32923757,32925446,32927122,32928792,32930536,32932238,32933898,32935582,32937304,32939020,32940733,32942436,32944170,32945879,32947605,32949626,32951674,32953522,32955215,32956926,32958658,32960412,32962102,32963796,32965485,32967137,32968820,32970598,32972409,32974097,32975876,32977669,32979159,32980123,32980943,32981897,32983563,32985154,32986518,32988072,32989598,32991094,32992789,32994651,32996422,32998073,32999563,33000972,33002467,33003990,33005489,33006962,33008447,33009927,33011422,33012890,33014358,33015847,33017342,33018830,33020286,33021772,33022922,33023401,33024007,33024627,33025195,33025576,33026029,33026595,33027222,33027812,33028123,33028588,33029053,33029511,33029834,33030247,33030699,33031187,33031690,33032171,33032606,33033077,33033608,33034061,33034358,33034599,33034807,33035027,33035571,33036024,33036266,33036475,33036560,33036772,33037166,33037464,33037651,33038094,33038617,33038916,33039449,33039780,33040109,33040388,33040784,33041167,33041700,33042800,33044753,33046642,33048625,33050595,33052297,33053968,33055663,33057335,33059027,33060703,33062423,33064140,33065817,33067467,33069133,33070795,33072503,33074198,33075852,33077508,33079202,33080874,33082556,33084221,33086049,33088097,33090145,33091905,33093598,33095318,33097103,33098795,33100610,33102317,33103980,33105691,33107373,33109100,33110674,33112354,33114112,33115827,33117595,33118972,33119745,33120629,33121425,33122987,33124231,33125618,33127065,33128453,33129397,33130807,33132345,33134097,33135787,33137477,33139103,33140714,33142212,33143760,33145263,33146764,33148276,33149787,33151254,33152730,33154221,33155701,33157201,33158716,33160215,33161703,33163210,33164701,33166185,33167622,33169097,33170613,33172127,33173648,33174346,33174903,33175540,33175943,33176352,33176892,33177389,33177973,33178578,33179100,33179643,33180108,33180665,33181117,33181209,33181737,33182314,33182821,33183282,33183674,33184004,33184210,33184463,33184645,33185181,33185734,33186301,33186837,33187399,33187864,33188339,33188805,33189155,33189558,33190123,33190640,33191243,33191715,33192183,33192695,33192966,33193300,33193652,33193770,33193942,33194389,33194956,33195573,33196164,33196554,33196898,33197310,33197764,33198099,33198464,33198736,33198865,33199316,33199719,33200132,33200572,33200985,33201440,33201743,33202179,33202568,33203086,33203579,33204119,33204573,33205231,33207267,33209299,33211347,33213352,33215390,33217425,33219072,33220710,33222400,33224111,33225793,33227503,33229225,33230906,33232600,33234275,33235958,33237639,33239343,33241045,33242759,33244452,33246114,33247789,33249470,33251162,33252890,33254591,33256291,33257990,33259664,33261331,33263033,33264759,33266462,33268187,33269891,33271742,33273790,33275838,33277886,33279665,33281236,33282988,33284767,33286498,33288287,33290029,33291752,33293411,33295104,33296894,33298593,33300372,33302095,33303764,33305483,33307217,33309066,33310785,33312482,33314191,33315922,33317639,33319359,33321244,33323018,33324164,33324989,33325750,33326529,33327160,33327996,33329023,33329852,33330505,33331464,33332514,33333465,33334301,33334943,33335319,33336049,33336213,33337066,33338340,33339249,33340208,33341776,33343454,33345206,33346942,33348743,33350499,33352121,33353776,33355248,33356740,33358218,33359697,33361186,33362673,33364145,33365612,33367091,33367856,33368395,33368892,33369435,33369747,33370207,33370725,33371066,33371580,33372136,33372532,33372976,33373394,33373736,33374042,33374347,33374866,33375274,33375839,33376428,33376955,33377490,33377939,33378579,33379068,33379589,33380143,33380589,33381287,33383293,33385304,33387197,33388892,33390583,33392274,33393924,33395626,33397321,33399035,33400759,33402454,33404151,33405821,33407537,33409532,33411476,33413202,33414936,33416683,33418501,33420274,33422101,33423854,33425609,33427393,33428853,33429743,33430548,33431503,33432555,33433614,33434938,33436586,33438274,33439881,33441412,33443052,33444557,33446076,33447577,33449071,33450547,33452043,33453521,33455013,33456504,33457969,33459450,33460928,33462424,33463927,33465405,33466892,33468120,33468772,33469425,33469963,33470570,33471177,33471821,33472433,33473048,33473714,33474169,33474803,33475381,33475898,33476553,33476979,33477495,33478093,33478622,33479191,33479681,33480216,33480853,33481263,33481743,33482321,33482718,33483200,33483635,33484169,33484703,33485283,33485506,33485974,33486463,33486963,33487384,33487904,33488436,33488885,33489523,33490057,33490636,33491206,33491651,33492052,33492607,33493048,33493637,33494336,33494712,33495281,33495852,33496446,33497028,33497902,33499949,33501978,33504025,33506029,33507935,33509641,33511344,33513074,33514778,33516489,33518199,33519890,33521568,33523255,33524933,33526649,33528328,33530056,33531778,33533478,33535173,33536887,33538577,33540249,33541908,33543620,33545334,33547048,33548805,33550853,33552901,33554773,33556482,33558291,33559946,33561688,33563361,33565137,33566890,33568688,33570526,33572328,33574039,33575758,33577453,33579243,33581011,33582766,33584005,33584786,33585575,33586368,33587039,33588560,33590359,33591708,33593028,33594746,33596529,33598095,33599210,33600698,33602533,33604386,33606169,33607951,33609602,33611230,33612623,33614155,33615625,33617115,33618599,33620074,33621552,33623049,33624516,33625986,33627490,33628981,33630427,33631918,33633412,33634907,33636437,33637942,33639440,33640924,33642418,33643924,33645090,33645534,33645652,33645918,33646181,33646642,33647193,33647663,33648102,33648582,33649108,33649727,33650270,33650515,33650978,33651346,33651761,33652095,33652387,33652937,33653541,33654029,33654359,33654717,33654811,33655383,33655549,33655812,33656351,33656796,33657410,33657992,33658517,33658904,33659478,33659995,33660269,33660590,33661128,33661518,33662060,33662670,33663207,33663768,33664196,33664356,33664501,33664933,33665328,33665706,33666221,33666709,33667325,33667898,33668486,33669114,33669622,33670179,33670673,33671073,33671399,33671833,33672289,33672550,33672767,33673162,33673576,33674036,33674325,33674766,33675226,33677196,33679253,33681253,33683271,33685321,33687244,33688923,33690629,33692325,33694002,33695655,33697344,33699026,33700674,33702348,33704043,33705727,33707401,33709100,33710806,33712499,33714186,33715913,33717614,33719281,33720974,33722666,33724365,33726052,33727745,33729467,33731171,33732867,33734578,33736220,33737931,33739911,33741959,33744007,33745943,33747580,33749330,33751101,33752789,33754524,33756134,33757890,33759630,33761303,33763063,33764823,33766609,33768388,33770204,33771886,33773636,33775339,33776976,33778720,33780436,33782078,33783617,33785397,33786362,33787289,33788094,33788890,33789749,33790502,33791291,33792091,33792980,33793958,33795084,33796136,33797148,33797944,33798826,33799611,33800745,33801907,33802877,33803947,33805030,33806023,33807043,33808087,33809030,33809342,33809593,33810792,33812043,33813688,33815513,33817338,33819175,33821010,33822721,33824233,33825757,33827295,33828811,33830290,33831784,33833280,33834786,33836285,33837762,33839285,33840793,33841229,33841579,33841800,33842054,33842477,33842885,33843225,33843678,33844127,33844622,33845037,33845587,33845881,33846308,33846648,33847062,33847467,33847685,33848070,33848354,33848719,33849156,33849531,33849949,33850345,33850627,33850876,33851139,33851430,33851694,33852171,33852627,33852867,33853136,33853438,33854346,33856345,33858321,33860256,33861946,33863631,33865347,33867037,33868708,33870400,33872076,33873764,33875428,33877115,33878806,33880484,33882150,33883835,33885505,33887436,33889484,33891322,33893050,33894835,33896550,33898213,33899977,33901716,33903444,33905199,33906986,33908674,33910338,33912002,33913311,33914108,33914967,33916518,33918128,33919702,33921582,33923482,33925243,33926784,33928339,33929819,33931327,33932818,33934320,33935818,33937320,33938820,33940316,33941818,33943311,33944802,33946312,33947828,33949347,33950840,33952326,33953820,33955320,33956827,33958328,33959800,33961304,33962811,33964284,33965789,33967294,33968813,33970286,33971791,33973308,33974808,33976269,33977746,33978639,33979090,33979639,33980210,33980578,33981161,33981778,33982373,33983045,33983653,33984315,33984849,33985334,33985819,33986394,33986872,33987341,33987861,33988401,33989046,33989673,33990314,33990855,33991387,33991893,33992317,33992787,33993338,33993964,33994557,33994874,33995409,33995838,33996374,33996930,33997419,33997891,33998371,33998860,33999443,34000023,34000499,34001137,34001486,34001889,34002303,34002654,34003114,34003504,34003890,34004167,34004634,34005093,34005380,34005947,34006318,34006883,34007449,34008005,34008238,34008846,34009417,34010029,34010668,34011262,34011779,34012162,34012758,34013202,34013697,34014210,34014650,34015169,34015629,34015976,34016497,34017004,34017494,34017876,34018270,34018729,34019239,34019805,34020210,34020673,34021310,34021760,34022150,34022451,34022873,34023479,34023831,34024209,34024381,34024668,34025029,34025553,34025962,34026327,34026801,34027109,34027324,34027642,34028080,34028450,34028781,34029119,34029539,34029800,34030205,34030645,34030939,34031332,34033387,34035395,34037443,34039432,34041407,34043443,34045442,34047459,34049514,34051510,34053240,34054980,34056738,34058473,34060171,34061871,34063561,34065253,34066945,34068642,34070319,34072030,34073727,34075448,34077149,34078876,34080593,34082310,34084013,34085707,34087393,34089091,34090809,34092551,34094273,34095966,34097646,34099312,34100993,34102686,34104391,34106077,34107738,34109407,34111085,34112770,34114457,34116181,34117893,34119642,34121398,34123136,34124883,34126557,34128243,34129954,34131650,34133335,34134995,34136677,34138402,34140450,34142498,34144546,34146594,34148642,34150525,34152263,34154027,34155781,34157479,34159192,34160829,34162514,34164135,34165786,34167551,34169288,34170982,34172775,34174483,34176180,34177918,34179663,34181353,34183059,34184719,34186349,34187956,34189736,34191483,34193115,34194793,34196477,34198076,34199790,34201484,34203201,34205005,34206666,34208416,34210140,34211754,34213409,34214902,34215684,34216544,34217314,34218151,34219044,34219748,34220595,34221346,34222419,34223423,34224501,34225578,34226508,34227147,34227924,34228786,34229824,34230758,34231508,34232289,34233207,34234104,34234825,34235514,34236256,34237027,34237895,34238746,34239624,34240641,34241751,34243054,34244174,34245289,34246468,34247543,34249104,34250586,34252467,34254272,34256088,34257970,34259816,34261642,34263511,34265350,34266996,34268619,34270171,34271728,34273273,34274792,34276291,34277815,34279335,34280837,34282338,34283832,34285352,34286852,34288371,34289827,34291331,34292438,34293029,34293772,34294461,34294962,34295603,34296166,34296780,34297264,34297780,34298244,34298735,34299379,34300144,34300644,34301447,34302124,34302778,34303446,34303947,34304699,34305408,34305877,34306595,34307258,34307811,34308332,34308949,34309529,34310278,34310933,34311362,34311890,34312443,34312709,34312996,34313344,34313919,34314479,34315121,34315736,34316256,34316844,34317357,34317843,34318454,34318977,34321030,34323077,34325125,34327170,34328912,34330637,34332373,34334101,34335824,34337549,34339279,34341022,34342746,34344470,34346230,34347962,34349653,34351368,34353092,34354779,34356470,34358201,34359935,34361670,34363393,34365408,34367456,34369500,34371286,34373130,34374991,34376857,34378688,34380570,34382386,34384256,34386121,34387976,34389819,34391595,34393366,34395176,34396903,34398718,34400499,34402319,34404144,34405110,34406130,34407002,34407901,34409177,34410513,34411693,34412911,34413855,34415025,34415915,34416974,34417982,34419526,34420770,34422313,34423986,34425677,34427323,34428932,34430488,34432005,34433485,34434973,34436474,34437949,34439421,34440888,34442382,34443897,34445425,34446904,34448372,34449849,34451350,34452833,34454313,34455781,34457244,34458725,34460187,34461660,34463157,34464621,34466079,34467568,34469040,34469675,34470177,34470807,34471345,34471805,34472310,34472822,34473295,34473813,34474237,34474654,34475101,34475420,34475802,34475989,34476514,34476839,34477445,34477858,34478356,34478720,34479140,34479593,34480145,34480671,34481165,34481664,34482151,34482695,34483188,34483574,34484014,34484495,34484742,34485103,34485487,34485875,34486421,34486810,34487105,34487560,34488114,34488587,34489084,34489497,34489891,34490208,34490572,34491114,34491683,34492033,34492416,34492797,34493138,34493632,34494169,34494528,34494954,34495421,34495816,34496308,34496787,34497406,34498057,34498717,34499398,34499905,34500323,34500628,34500935,34501260,34501577,34502064,34502367,34502729,34502945,34503402,34503803,34504341,34504732,34505281,34505761,34507509,34509426,34511336,34513317,34515297,34517247,34519284,34520982,34522689,34524383,34526059,34527746,34529447,34531114,34532768,34534439,34536109,34537797,34539491,34541184,34542859,34544508,34546187,34547855,34549519,34551233,34552967,34554658,34556371,34558007,34559675,34561363,34563044,34564733,34566393,34568071,34569738,34571377,34573006,34574673,34576319,34578001,34579740,34581788,34583836,34585884,34587832,34589587,34591366,34593146,34594900,34596674,34598338,34600042,34601753,34603489,34605154,34606819,34608505,34610217,34612001,34613752,34615512,34617139,34618824,34620476,34622068,34623725,34625413,34627033,34628660,34630353,34631929,34632768,34633579,34634274,34635168,34635991,34636712,34637793,34639113,34640331,34641634,34642689,34643516,34644590,34645810,34647128,34648155,34649061,34650002,34650958,34652157,34653460,34654310,34655577,34656372,34656799,34658030,34659779,34661509,34663235,34665025,34666890,34668691,34670297,34671931,34673536,34675182,34676698,34678197,34679712,34681237,34682757,34684275,34685795,34687325,34688824,34690340,34691853,34693354,34694855,34696376,34697873,34699398,34700924,34702428,34703939,34705440,34706948,34708465,34709994,34711498,34713007,34714537,34716030,34717530,34719076,34720614,34722136,34723687,34725194,34726720,34728236,34729741,34731251,34732752,34734247,34735753,34737242,34738727,34740196,34741680,34743181,34744672,34746172,34747577,34748075,34748582,34749112,34749576,34750088,34750632,34751145,34751579,34752141,34752811,34753492,34754142,34754862,34755535,34756246,34756926,34757577,34758227,34758880,34759619,34760349,34760921,34761587,34762184,34762637,34763087,34763675,34764251,34764758,34765479,34766151,34766750,34767443,34768041,34768666,34769235,34769883,34770376,34771015,34771594,34772094,34772796,34773357,34773912,34774513,34775000,34775534,34776080,34776576,34777184,34777766,34778389,34778932,34779504,34780067,34780642,34781220,34781749,34782318,34782853,34783523,34783980,34784447,34784991,34785435,34785989,34786607,34787178,34787790,34788363,34788979,34789543,34790126,34790692,34791129,34791755,34792462,34793040,34793528,34794086,34794652,34795122,34795668,34796230,34796763,34797392,34797931,34798338,34798757,34799418,34800005,34800560,34801268,34801827,34802538,34803291,34804006,34804620,34805270,34805978,34806688,34807401,34808010,34808553,34809218,34809917,34810554,34811178,34811675,34812130,34812789,34813423,34813969,34814629,34815241,34815781,34816420,34817027,34817641,34818241,34818815,34819410,34819904,34820261,34820711,34821246,34821818,34822361,34822893,34823462,34823970,34824524,34824944,34825407,34826033,34826589,34827149,34827551,34828000,34828540,34829090,34829559,34830086,34830595,34830884,34831367,34831906,34832474,34832992,34833514,34833883,34834234,34835591,34837646,34839699,34841756,34843797,34845837,34847891,34849925,34851973,34854030,34856078,34858092,34860144,34862114,34863833,34865565,34867243,34868945,34870653,34872381,34874084,34875764,34877477,34879173,34880878,34882579,34884277,34885978,34887663,34889367,34891106,34892832,34894535,34896264,34897987,34899714,34901460,34903196,34904948,34906711,34908473,34910228,34911968,34913672,34915365,34917088,34918807,34920502,34922194,34923862,34925559,34927297,34928994,34930670,34932381,34934083,34935777,34937491,34939209,34940964,34942706,34944456,34946202,34947951,34949663,34951382,34953103,34954835,34956560,34958302,34960032,34961793,34963536,34965272,34967013,34968775,34970521,34972265,34973996,34975753,34977785,34979833,34981881,34983929,34985977,34988025,34990073,34992064,34993783,34995458,34997164,34998906,35000614,35002283,35003986,35005752,35007449,35009221,35010999,35012763,35014613,35016408,35018237,35020047,35021832,35023647,35025416,35027192,35028972,35030785,35032381,35033965,35035664,35037405,35039084,35040708,35042288,35044079,35045784,35047488,35049203,35050864,35052615,35054417,35056250,35058060,35059893,35061709,35063531,35065229,35066945,35068534,35070190,35071972,35073780,35075581,35077388,35079230,35081077,35082903,35084679,35085878,35086794,35087700,35088643,35089575,35090506,35091330,35092229,35093184,35094114,35095444,35096792,35098128,35099330,35100589,35101918,35103185,35104535,35105885,35107217,35108406,35109657,35110424,35111177,35112005,35112957,35113899,35114909,35116094,35116591,35117063,35118364,35119938,35121497,35123435,35125220,35126962,35128852,35130759,35132615,35134432,35136270,35138096,35139942,35141830,35143416,35144983,35146540,35148050,35149549,35151074,35152618,35154130,35155630,35157126,35157596,35158045,35158388,35158716,35159223,35159765,35160282,35160730,35161107,35161463,35161891,35162147,35162536,35162744,35163148,35163474,35163659,35163866,35164081,35164463,35164862,35165256,35165597,35166003,35167178,35169215,35171236,35172956,35174658,35176364,35178060,35179747,35181444,35183150,35184852,35186545,35188218,35189931,35191678,35193726,35195656,35197473,35199285,35200999,35202797,35204587,35206403,35208197,35209939,35211650,35212439,35213707,35215354,35216945,35218439,35220028,35221571,35223010,35224203,35225709,35227203,35227654,35228055,35228548,35229085,35229638,35230100,35230831,35232686,35234384,35236066,35237970,35239708,35241496,35242576,35243402,35244739,35246319,35247833,35249336,35250819,35252111,35252418,35252862,35253235,35253652,35253996,35254097,35254418,35254964,35255391,35255610,35255885,35256530,35257083,35258237,35260136,35261819,35263489,35265177,35266838,35268506,35270231,35272151,35273922,35275598,35277299,35278977,35280232,35281535,35283315,35285053,35286651,35288088,35289599,35291073,35292583,35294089,35294741,35295185,35295591,35295979,35296419,35296864,35297263,35297555,35298040,35298486,35298958,35299305,35299826,35300334,35300781,35301357,35301768,35303656,35305494,35307173,35308851,35310523,35312184,35313859,35315545,35317287,35319239,35320951,35322620,35324315,35326082,35327512,35328150,35329359,35330846,35331830,35333150,35334768,35336699,35338747,35340794,35342834,35344882,35346711,35348325,35349895,35351359,35352614,35354191,35355692,35356885,35357755,35358682,35359943,35361962,35363981,35365941,35367869,35369688,35370442,35371745,35373069,35374364,35375745,35377216,35378627,35380029,35381133,35382332,35383028,35383932,35385040,35386219,35387235,35388086,35389021,35389943,35390854,35391682,35392710,35393759,35394891,35395978,35396886,35397973,35398966,35399975,35401110,35402191,35403275,35404392,35405465,35406393,35407322,35408468,35409585,35410621,35411816,35412598,35413314,35414022,35414847,35416182,35417262,35418199,35419057,35420109,35420954,35421837,35422766,35423395,35424661,35425811,35426740,35427773,35428791,35429584,35430520,35431488,35432371,35433323,35434430,35434899,35436281,35438329,35439657,35440745,35441806,35442751,35443706,35444691,35445819,35446813,35447812,35448753,35449786,35450976,35451857,35452923,35453943,35454857,35455895,35456816,35457684,35458425,35459219,35460078,35461168,35462447,35463859,35465370,35466766,35468280,35470252,35472300,35474357,35476302,35477709,35479748,35481798,35483846,35485894,35487929,35489712,35491760,35493429,35495350,35497405,35499453,35501501,35503549,35505597,35507645,35509693,35511741,35513768,35515799,35517817,35519860,35521900,35523923,35525874,35527720,35529430,35531368,35533416,35535464,35537512,35539560,35541608,35543656,35545704,35547760,35549808,35551856,35553912,35555934,35557905,35559739,35561549,35562982,35564631,35566568,35568467,35570283,35572173,35574224,35576278,35578335,35580383,35582431,35584479,35586527,35588575,35590623,35592671,35594719,35596767,35598815,35600863,35602851,35604390,35605407,35607427,35609475,35611523,35613571,35615619,35617667,35619715,35621763,35623811,35625859,35627907,35629955,35632003,35634051,35636099,35638147,35640195,35642243,35644291,35646334,35648033,35649937,35651985,35654033,35656084,35657977,35659575,35660965,35662177,35663198,35663936,35664440,35666247,35668295,35670343,35672391,35674445,35676501,35678557,35680605,35682661,35684709,35686600,35688050,35688860,35690831,35692879,35694898,35696866,35698719,35700436,35701972,35703206,35704103,35704722,35705010,35705186,35707071,35709126,35711174,35713226,35715275,35717323,35719380,35721437,35723485,35725533,35727581,35729629,35731685,35733685,35735513,35737149,35738651,35739934,35741963,35744020,35746077,35748125,35750182,35752230,35754278,35756335,35758383,35760431,35762488,35764531,35766555,35768549,35770270,35771769,35772799,35773883,35775676,35777555,35779551,35781608,35783656,35785713,35787668,35789376,35790711,35791571,35793626,35795675,35797723,35799625,35801530,35803578,35805628,35807456,35808168,35808222,35808438,35808472,35809068,35811116,35813164,35815212,35817260,35819316,35821364,35823412,35825457,35827379,35829422,35831394,35833098,35835146,35837194,35839242,35841290,35843338,35845386,35847434,35849482,35851530,35853513,35855032,35857008,35859002,35860538,35862125,35863939,35865606,35866503,35867366,35869053,35871004,35873036,35875092,35877149,35879205,35881255,35883274,35885088,35886350,35886527,35888052,35890106,35892162,35894210,35896259,35898307,35900355,35902412,35904460,35906503,35908546,35910534,35912356,35914256,35916195,35917735,35919792,35921840,35923897,35925954,35928002,35930050,35932098,35934146,35936053,35938108,35940156,35942204,35944252,35946308,35948356,35950413,35952461,35954257,35956127,35958092,35960059,35961644,35963056,35965110,35967167,35969160,35970922,35972779,35974827,35976875,35978923,35980971,35983023,35985071,35987119,35989167,35991223,35992932,35994196,35995990,35997943,35999932,36001945,36003990,36006035,36008069,36010116,36012164,36014217,36016266,36018320,36020323,36022354,36024336,36026317,36028303,36030359,36032394,36034440,36036489,36038510,36040543,36042579,36044622,36046673,36048710,36050753,36052781,36054675,36056444,36057989,36059373,36060655,36061874,36063029,36064250,36065252,36066306,36067401,36068410,36069446,36070305,36071165,36072087,36072815,36073508,36073991,36074435,36074623,36074773,36074870,36074929,36075293,36077349,36079373,36081421,36083469,36085515,36087386,36089134,36090715,36091762,36092893,36094941,36096989,36099037,36101085,36102980,36105028,36107076,36109124,36111087,36113135,36115183,36117231,36119257,36121314,36123371,36125425,36127473,36129521,36131558,36133606,36135663,36137697,36139746,36141794,36143820,36145762,36147640,36149439,36151184,36152943,36154503,36156559,36158607,36160655,36162712,36164760,36166811,36168866,36170607,36172661,36174709,36176757,36178812,36180867,36182923,36184973,36187003,36188954,36191011,36193019,36194932,36196346,36198396,36200444,36202489,36203953,36205891,36207939,36209987,36212035,36214083,36216131,36218179,36220229,36222273,36224273,36226106,36227846,36229369,36230726,36231980,36233163,36234900,36236948,36238996,36241044,36243099,36245117,36246980,36248601,36249453,36249832,36250961,36252494,36254249,36256149,36258114,36260038,36261986,36263979,36265871,36267569,36269078,36270391,36271360,36271901,36272445,36274217,36276254,36278283,36279585,36280383,36282439,36284487,36286535,36288583,36290631,36292679,36294727,36296775,36298793,36300776,36302812,36304817,36306570,36307979,36308855,36310717,36312752,36314501,36315936,36317774,36319822,36321870,36323919,36325975,36328028,36330076,36332132,36334172,36336119,36337871,36339622,36341670,36343075,36343930,36345610,36347666,36349714,36351762,36353810,36355858,36357906,36359930,36361736,36363695,36365743,36367791,36369839,36371887,36373944,36375992,36377752,36378732,36380279,36382222,36384260,36386317,36388374,36390384,36391576,36393397,36395215,36397268,36399316,36401364,36403412,36405469,36407458,36409224,36410470,36411422,36412148,36412596,36412910,36413134,36413486,36415534,36417582,36419630,36421678,36423726,36425774,36427822,36429870,36431918,36433966,36436014,36438062,36440110,36442158,36444206,36446254,36448302,36450326,36451515,36453563,36455611,36457665,36459715,36461772,36463820,36465712,36467676,36469686,36471325,36473238,36474637,36475295,36476582,36478267,36480216,36482269,36484317,36486365,36488413,36490461,36492509,36494557,36496605,36498653,36500699,36502603,36504263,36505773,36507162,36508349,36509446,36510431,36511378,36512113,36512948,36513935,36514879,36515691,36517281,36519322,36521370,36523418,36525466,36527514,36529562,36531610,36533658,36535706,36537754,36539802,36541850,36543898,36545790,36547076,36547838,36548505,36550174,36552222,36554270,36556327,36558357,36559926,36561974,36564022,36566070,36568121,36570177,36572234,36574282,36576305,36577832,36579285,36580805,36582138,36583275,36585323,36587251,36588537,36588979,36590758,36592719,36594702,36596748,36598803,36600851,36602902,36604952,36606997,36608512,36610316,36612111,36614070,36616022,36618074,36620131,36622179,36624227,36626275,36628332,36630389,36632432,36634456,36636230,36637744,36638673,36639360,36640875,36642920,36644968,36647016,36649064,36651112,36653160,36655217,36657274,36659330,36661319,36663095,36664571,36665694,36666672,36666915,36667223,36669255,36671299,36673272,36675192,36676996,36678705,36680416,36682473,36684515,36686320,36687883,36689159,36690928,36692692,36694676,36696724,36698656,36700704,36701697,36703745,36705451,36707306,36709169,36711217,36712897,36714815,36716215,36717659,36718768,36720344,36722346,36724401,36726417,36728327,36730290,36732257,36734171,36736219,36738267,36740303,36742075,36743143,36744322,36746277,36748332,36750380,36752428,36754300,36756097,36757455,36758380,36759249,36761297,36763345,36765402,36767450,36769119,36769546,36771129,36773177,36775213,36777261,36779309,36781366,36783423,36785409,36787437,36789494,36791016,36793013,36795061,36796782,36798838,36800886,36802476,36804485,36806533,36808073,36809362,36811101,36812786,36813404,36815409,36817457,36819505,36821554,36823095,36823272,36823372,36824541,36826559,36828616,36830673,36832721,36834769,36836823,36838876,36840687,36842487,36844391,36845959,36846935,36847137,36847958,36849917,36851965,36853931,36855979,36858036,36860067,36862115,36864147,36866195,36868031,36870024,36871670,36873656,36875053,36877007,36878264,36879790,36881419,36883126,36884481,36885816,36887476,36889532,36891480,36893528,36895576,36897624,36899672,36901720,36903768,36905816,36907864,36909912,36911960,36914012,36916069,36918067,36919949,36921821,36923793,36925458,36927385,36929441,36931367,36932845,36934398,36936411,36938459,36940507,36942555,36944603,36946651,36948699,36950756,36952804,36954852,36956902,36958890,36960691,36962277,36963694,36964893,36965818,36967069,36969117,36971165,36973213,36975261,36977318,36978968,36979590,36981646,36983694,36985690,36987661,36989679,36991646,36993653,36995676,36997687,36999744,37001792,37003840,37005895,37007898,37009643,37011100,37013084,37015131,37017179,37019196,37021074,37023096,37025152,37027208,37029256,37031313,37033369,37035417,37037465,37039436,37041232,37042664,37043481,37044511,37046559,37048607,37050655,37052703,37054751,37056694,37058751,37060808,37062856,37064904,37066943,37068158,37070200,37072248,37074296,37076344,37078392,37080446,37082494,37084542,37086453,37087989,37089722,37091770,37093818,37095866,37097914,37099962,37101839,37103887,37105214,37105766,37106142,37107324,37109156,37111213,37113261,37115309,37117357,37119405,37121453,37123501,37125549,37127597,37129653,37131695,37133638,37135451,37137223,37138984,37140588,37142041,37143318,37144555,37145813,37146923,37147735,37148344,37148923,37149421,37149933,37150336,37150841,37151211,37151671,37152082,37152593,37153158,37153650,37154000,37154275,37154978,37156196,37157364,37158627,37159809,37160852,37161843,37162732,37163474,37164030,37164382,37164543,37164967,37166789,37168845,37170666,37172392,37174300,37176213,37178261,37180311,37182329,37184337,37186385,37188433,37190480,37192531,37194444,37195958,37197811,37199831,37201581,37202961,37204931,37206789,37208788,37210836,37212844,37214876,37216698,37218741,37220789,37222833,37224672,37226708,37228745,37230782,37232713,37234661,37236651,37238506,37239904,37241442,37243441,37245474,37247481,37249536,37251584,37253555,37255376,37257152,37259111,37261168,37263179,37265222,37267270,37269302,37271285,37273172,37275104,37276906,37278725,37280656,37282656,37284505,37286527,37288315,37290353,37292285,37294333,37296381,37298429,37300486,37302522,37304161,37305486,37307225,37308631,37309491,37310689,37312731,37314779,37316834,37318841,37320769,37322640,37324441,37326303,37328034,37330014,37331888,37333786,37335756,37337696,37339614,37341662,37343623,37345333,37347352,37348839,37350354,37352225,37354250,37356266,37358170,37360018,37361909,37363757,37365505,37367273,37368811,37370616,37372454,37373850,37375362,37376705,37377658,37378723,37380721,37382681,37384574,37386388,37388187,37389815,37391551,37393240,37394593,37396010,37397278,37398735,37400030,37401335,37402485,37403447,37404831,37405964,37407131,37408351,37409688,37410967,37412379,37413893,37415714,37417497,37419199,37421174,37423143,37425199,37427209,37429231,37431070,37432824,37434404,37435842,37436739,37438103,37439894,37441883,37443936,37445991,37448039,37449370,37449552,37450633,37452681,37454729,37456774,37458180,37460233,37461261,37463318,37465374,37466936,37468470,37470527,37472575,37474623,37476671,37478198,37480255,37482217,37483785,37485097,37487145,37489193,37491241,37493289,37495337,37497385,37499380,37501427,37503475,37505523,37507571,37509619,37511667,37513715,37515763,37517811,37519859,37521907,37523959,37525958,37528013,37530061,37532109,37534165,37536213,37538245,37540209,37542218,37544274,37546322,37548379,37550425,37552473,37554521,37556569,37558617,37560665,37562720,37564473,37565784,37567832,37569882,37571930,37573978,37576026,37578071,37580119,37582036,37583951,37585773,37587320,37588929,37590362,37592083,37593928,37595508,37596957,37598336,37599466,37600381,37600762,37602343,37604170,37606042,37608087,37610135,37612183,37614185,37615775,37616881,37618929,37620977,37622767,37624801,37626849,37628897,37630935,37632533,37634365,37636413,37638431,37640000,37641497,37643323,37645176,37646456,37647239,37647907,37649246,37650681,37652127,37653574,37654761,37656073,37656644,37657422,37658322,37658797,37659071,37659478,37659969,37660385,37661338,37662207,37662688,37663147,37663681,37664137,37664914,37665388,37665919,37666545,37666841,37667226,37667847,37668502,37669019,37669931,37670672,37671813,37672531,37673179,37674195,37674927,37675554,37676578,37677330,37677763,37678418,37678827,37679354,37679999,37680304,37680867,37681382,37681748,37682352,37682970,37683599,37684072,37685235,37686041,37687209,37688140,37689147,37689837,37690342,37690966,37691507,37692130,37692637,37693320,37693649,37693916,37694305,37694814,37695486,37695935,37696261,37696908,37697451,37697877,37698871,37700178,37700688,37701042,37701434,37701703,37702116,37702726,37703342,37703949,37704400,37704928,37705609,37706188,37706527,37707058,37707422,37708534,37709771,37710940,37711946,37712245,37712717,37713092,37713500,37713955,37714415,37714679,37715179,37715350,37715669,37716165,37716335,37716854,37717084,37717634,37718348,37718657,37719039,37719665,37719959,37720580,37721491,37722018,37722252,37722621,37722939,37723398,37723680,37723906,37724283,37724703,37725703,37726209,37726706,37727168,37727874,37728382,37728842,37729248,37729489,37730190,37730521,37730850,37731476,37732052,37733125,37734038,37734559,37734841,37735114,37735351,37735634,37736031,37736436,37736727,37736992,37737195,37737613,37738227,37738933,37739703,37740673,37742013,37743160,37744126,37744917,37745492,37745907,37746350,37746947,37747665,37749019,37750242,37750773,37751509,37752150,37752737,37753327,37753894,37754485,37755277,37755950,37756556,37757263,37757952,37758606,37759376,37760162,37761039,37762217,37763396,37764779,37765704,37766275,37766903,37767464,37768495,37769708,37770866,37772019,37773162,37774271,37775275,37775679,37776047,37777205,37778293,37779225,37779845,37780391,37781829,37782095,37782507,37782831,37783023,37783355,37783582,37783789,37783860,37784098,37784432,37784865,37785000,37785121,37785255,37785571,37785990,37786596,37786912,37787579,37788183,37788596,37789497,37789983,37790629,37790791,37791156,37791759,37792042,37792388,37792725,37793422,37793857,37794455,37794945,37795233,37795530,37795811,37796130,37796627,37796816,37797143,37797316,37797532,37797870,37798064,37798576,37798849,37799147,37799324,37799548,37799724,37799944,37800482,37800859,37801299,37801621,37802324,37803498,37803739,37804177,37804644,37805137,37805741,37806371,37806687,37807259,37808316,37809203,37810049,37810591,37811135,37811502,37811864,37812276,37812612,37812984,37813463,37813743,37814011,37814292,37814441,37814621,37815395,37816263,37817096,37817875,37818506,37819041,37819650,37819902,37820349,37820641,37821096,37821744,37821995,37822226,37822646,37822896,37823056,37823439,37823887,37824299,37824749,37824878,37825069,37825375,37825508,37825677,37825908,37826079,37826373,37826875,37827108,37827367,37827942,37828320,37828589,37829121,37829390,37829742,37830189,37830900,37831855,37833180,37834076,37834495,37834946,37835658,37836051,37836564,37837226,37837603,37838021,37838824,37839870,37840633,37840942,37842029,37843034,37844288,37845372,37845832,37846423,37846739,37847447,37848118,37848707,37849295,37849549,37849858,37850166,37850529,37850883,37851956,37852762,37853178,37853717,37854102,37854648,37855029,37855469,37855910,37856821,37857647,37858308,37859159,37859468,37859850,37860525,37861306,37861763,37862435,37863376,37864406,37865310,37866103,37866982,37868292,37870178,37871768,37872755,37873742,37874729,37876440,37878326,37880212,37881198,37882192,37883179,37884508,37885883,37886998,37888143,37889316,37889986,37890939,37891448,37892616,37893021,37893484,37894374,37895131,37895835,37896473,37897176,37897748,37898489,37899129,37899633,37900221,37900976,37901619,37902629,37903029,37903145,37903326,37903776,37904326,37904495,37904617,37904850,37905316,37905593,37905976,37906515,37907128,37908264,37908901,37909222,37909634,37910233,37910765,37911093,37911589,37912061,37912461,37912819,37913114,37913823,37914741,37915827,37917579,37918157,37918688,37919569,37920040,37920459,37920841,37921286,37921924,37922232,37922543,37922966,37923520,37923822,37924302,37924537,37924984,37925270,37925701,37926064,37926362,37926566,37927079,37927400,37927752,37927980,37928210,37928501,37928856,37929328,37929557,37929959,37930131,37930774,37931105,37931515,37931641,37932143,37932693,37933404,37933690,37933844,37934134,37934582,37935037,37935463,37935824,37936119,37936781,37937199,37937840,37938067,37938522,37939304,37939582,37940203,37941189,37941833,37942239,37942303,37942362,37943280,37944177,37944548,37945293,37946115,37946600,37947079,37947593,37948265,37948939,37949507,37949977,37950425,37950955,37951500,37951752,37952241,37952877,37953406,37954060,37954832,37955656,37956140,37956754,37957323,37957743,37958224,37958721,37959188,37960012,37961096,37961767,37962508,37963034,37963578,37964190,37964724,37965480,37966008,37966739,37967003,37967641,37968203,37969120,37969393,37969774,37970437,37970687,37971103,37971305,37971482,37971686,37972043,37972163,37972609,37973172,37973331,37973557,37973849,37974024,37974328,37974459,37974595,37975253,37975768,37976252,37976642,37977057,37977462,37977673,37977925,37978184,37978646,37978958,37979204,37980096,37980423,37980819,37981209,37981571,37981974,37982593,37983494,37984222,37985200,37986022,37986755,37987556,37987753,37988400,37989373,37989748,37990480,37991757,37992102,37992813,37993687,37994914,37996117,37996751,37997056,37997658,37997956,37998874,38000426,38001469,38002717,38004037,38005483,38006951,38008380,38009895,38011435,38012916,38014443,38015995,38017460,38018981,38020495,38022046,38023578,38025117,38026596,38028081,38029631,38031046,38032480,38033779,38035014,38036196,38037514,38038923,38040216,38041426,38042580,38043657,38044767,38046325,38047866,38049588,38051379,38053113,38054887,38056572,38058265,38059972,38061720,38063407,38065144,38066869,38068567,38070303,38072062,38073819,38075564,38077290,38078831,38080499,38082152,38083792,38085493,38087175,38088869,38090596,38092307,38093971,38095602,38097269,38098953,38100579,38102160,38103795,38105422,38107262,38108854,38110562,38112227,38113874,38115538,38117274,38119021,38120767,38122570,38124418,38126212,38127997,38129809,38131568,38133283,38135004,38136751,38138501,38140380,38142216,38143902,38145548,38147360,38149118,38150823,38152608,38154421,38156186,38157866,38159567,38161233,38162756,38164625,38166187,38167840,38169438,38171025,38172643,38174247,38175935,38177621,38179327,38180970,38182691,38184423,38186109,38187854,38189602,38191308,38192953,38194727,38196426,38198116,38199840,38201493,38203141,38204833,38206458,38208097,38209703,38211304,38212875,38214417,38215934,38217443,38219246,38220896,38222477,38223996,38225377,38226807,38228375,38229859,38231349,38232609,38233847,38235273,38236773,38238094,38239442,38240830,38242263,38243519,38244927,38246506,38248055,38249626,38251171,38252564,38253974,38255498,38256881,38258247,38259782,38261346,38262771,38264309,38265892,38267308,38269210,38270626,38272058,38273454,38274871,38276455,38277878,38279371,38280849,38282424,38283835,38285177,38286456,38287818,38288190,38288403,38288787,38289003,38289221,38289925,38290913,38292280,38293487,38294381,38295694,38297087,38298292,38299873,38301565,38302781,38303978,38305537,38306715,38307474,38308808,38310147,38311694,38313184,38314865,38316397,38318017,38319602,38321160,38322700,38324058,38325655,38326977,38328616,38329993,38331459,38333222,38334480,38336116,38337732,38338858,38340337,38341750,38343197,38344752,38346235,38348001,38349354,38350333,38352067,38353597,38355072,38356722,38358110,38359407,38360870,38362539,38364234,38365554,38366973,38368637,38369951,38371718,38373118,38374688,38376160,38377461,38379069,38380634,38382054,38383389,38384724,38386145,38387679,38389404,38390732,38392444,38393977,38395186,38396794,38398246,38399820,38400841,38402391,38404006,38405594,38407042,38408512,38409935,38411272,38412980,38414342,38415461,38416738,38418204,38419505,38420699,38422161,38423675,38425031,38426406,38427717,38429345,38430897,38432581,38434159,38435592,38436801,38438066,38439693,38441120,38442956,38444264,38445973,38447303,38449166,38450491,38452124,38453524,38455124,38456981,38458669,38460468,38462072,38463839,38465521,38466921,38468824,38470216,38471657,38473253,38474968,38476718,38478390,38479988,38481642,38483275,38484807,38486351,38488092,38489833,38491265,38492820,38494058,38495664,38497123,38498774,38500314,38501519,38503044,38504681,38506333,38508047,38509495,38511317,38513024,38514294,38515931,38517517,38519477,38521531,38523557,38525551,38527593,38529647,38531667,38533716,38535745,38537768,38539798,38541828,38543866,38545890,38547923,38549976,38552019,38554058,38556113,38558106,38560136,38562111,38564134,38566151,38568182,38570234,38572287,38574340,38576384,38578427,38580451,38582461,38584473,38586519,38588565,38590586,38592626,38594682,38596718,38598737,38600751,38602692,38604692,38606704,38608737,38610782,38612837,38614871,38616896,38618945,38620977,38622971,38624940,38626931,38628933,38630940,38632930,38634963,38636990,38639015,38641063,38643095,38645091,38647041,38649048,38651059,38653041,38655059,38657085,38659105,38661125,38663182,38665209,38667206,38669174,38671181,38673179,38675156,38677173,38679202,38681253,38683301,38685335,38687370,38689322,38691331,38693353,38695368,38697381,38699415,38701455,38703512,38705541,38707575,38709619,38711647,38713696,38715737,38717783,38719824,38721867,38723852,38725833,38727821,38729835,38731790,38733750,38735737,38737745,38739720,38741624,38743603,38745571,38747560,38749548,38751561,38753512,38755484,38757462,38759462,38761414,38763377,38765360,38767361,38769326,38771313,38773262,38775243,38777229,38779225,38781220,38783178,38785160,38787143,38789127,38791117,38793083,38795050,38797030,38799028,38801025,38803020,38804992,38806990,38808980,38810955,38812935,38814885,38816851,38818851,38820833,38822805,38824812,38826779,38828782,38830736,38832711,38834659,38836644,38838629,38840612,38842659,38844630,38846632,38848639,38850647,38852639,38854645,38856633,38858634,38860575,38862478,38864265,38866083,38867889,38869654,38871571,38873524,38875348,38877055,38878967,38880752,38882435,38884176,38885901,38887729,38889655,38891616,38893549,38895366,38897201,38899141,38901003,38902845,38904639,38906297,38907972,38909647,38911332,38913091,38914997,38916899,38918697,38920580,38922577,38924634,38926689,38928728,38930627,38932582,38934386,38936268,38938087,38939996,38941865,38943598,38945319,38947029,38948862,38950731,38952638,38954469,38956247,38958068,38959887,38961562,38963315,38965168,38967011,38968825,38970681,38972497,38974242,38976072,38977692,38979570,38981299,38983186,38984989,38986901,38988669,38990599,38992342,38994170,38995759,38997546,38999379,39001240,39002990,39004954,39006775,39008633,39010448,39012148,39013888,39015644,39017472,39019314,39021176,39022947,39024827,39026591,39028460,39029961,39031832,39033467,39035424,39037330,39039277,39041215,39043018,39044946,39046788,39048693,39050416,39052322,39054188,39056178,39058107,39060036,39062048,39063957,39065651,39067620,39069360,39071309,39072964,39074740,39076586,39078387,39080343,39082155,39083995,39085950,39087772,39089588,39091441,39093331,39095171,39096991,39098819,39100688,39102568,39104323,39106253,39108043,39109904,39111674,39113439,39115311,39117143,39118939,39120582,39122469,39124313,39126010,39127910,39129822,39131697,39133615,39135545,39137487,39139420,39141344,39143295,39145242,39147183,39149085,39151036,39152944,39154896,39156852,39158728,39160650,39162632,39164576,39166480,39167996,39169387,39170778,39172117,39173562,39175110,39176624,39178038,39179658,39181137,39182745,39184301,39185964,39187677,39189256,39190923,39192790,39194774,39196741,39198574,39200549,39202230,39204147,39205963,39207643,39209603,39211526,39213503,39215352,39217352,39219151,39221046,39222783,39224661,39226511,39228391,39230373,39232353,39234179,39236157,39237833,39239787,39241578,39243280,39245247,39247123,39249114,39250940,39252844,39254726,39256403,39258281,39260010,39261594,39263534,39265443,39267413,39269288,39271270,39273109,39274911,39276789,39278597,39280289,39282247,39284038,39285979,39287840,39289846,39291704,39293570,39295369,39297260,39299105,39301058,39303045,39305016,39306886,39308883,39310580,39312528,39314384,39316161,39318147,39320054,39322005,39323944,39325841,39327810,39329758,39331706,39333590,39335512,39337428,39339141,39340800,39342716,39344724,39346710,39348659,39350650,39352670,39354682,39356700,39358690,39360703,39362697,39364694,39366678,39368651,39370628,39372604,39374568,39376555,39378555,39380568,39382565,39384525,39386509,39388487,39390493,39392489,39394490,39396485,39398521,39400552,39402551,39404534,39406540,39408579,39410610,39412632,39414633,39416661,39418640,39420672,39422681,39424700,39426721,39428752,39430750,39432775,39434795,39436780,39438798,39440832,39442862,39444878,39446890,39448872,39450890,39452865,39454862,39456877,39458882,39460892,39462898,39464896,39466890,39468901,39470943,39472983,39474982,39476980,39478865,39480621,39482409,39484155,39485861,39487531,39489211,39491004,39492645,39494280,39495840,39497638,39499332,39500984,39502730,39504555,39506121,39507833,39509618,39511244,39512808,39514590,39516244,39517870,39519639,39521458,39523141,39524821,39526602,39528435,39530169,39531840,39533588,39535365,39537132,39538854,39540635,39542338,39544297,39546232,39548177,39550191,39552184,39554117,39556039,39558004,39559944,39561925,39563903,39565888,39567876,39569851,39571838,39573824,39575829,39577826,39579800,39581774,39583736,39585742,39587719,39589713,39591710,39593700,39595668,39597649,39599601,39601579,39603560,39605557,39607549,39609538,39611497,39613492,39615483,39617438,39619382,39621347,39623259,39625179,39627029,39628958,39630863,39632679,39634558,39636425,39638237,39640136,39641989,39643910,39645752,39647616,39649541,39651394,39653228,39655179,39657092,39659079,39661060,39663041,39664998,39666900,39668832,39670734,39672660,39674588,39676549,39678485,39680378,39682327,39684293,39686233,39688180,39690158,39692046,39694023,39695783,39697683,39699555,39701605,39703649,39705675,39707705,39709710,39711731,39713763,39715783,39717816,39719831,39721872,39723902,39725935,39727980,39729986,39731964,39733884,39735854,39737864,39739909,39741961,39744014,39746028,39748070,39750098,39752114,39754108,39756136,39758167,39760212,39762246,39764298,39766348,39768388,39770421,39772424,39774436,39776452,39778460,39780465,39782476,39784509,39786560,39788548,39790554,39792551,39794524,39796496,39798489,39800503,39802532,39804564,39806587,39808590,39810589,39812610,39814596,39816582,39818577,39820554,39822548,39824588,39826625,39828655,39830661,39832672,39834678,39836673,39838666,39840661,39842633,39844625,39846643,39848689,39850713,39852757,39854799,39856842,39858836,39860846,39862862,39864861,39866871,39868897,39870929,39872980,39875026,39877070,39879125,39881144,39883181,39885233,39887286,39889329,39891380,39893422,39895435,39897412,39899392,39901406,39903386,39905347,39907326,39909350,39911341,39913331,39915313,39917251,39919249,39921216,39923190,39925153,39927133,39929104,39931083,39933084,39935035,39937002,39938889,39940842,39942804,39944781,39946764,39948751,39950774,39952765,39954742,39956741,39958731,39960700,39962650,39964637,39966593,39968544,39970392,39972235,39974275,39976331,39978357,39980389,39982414,39984435,39986183,39988066,39990056,39992017,39993881,39995787,39997728,39999705,40001674,40003572,40005504,40007435,40009423,40011364,40013283,40015125,40017037,40019021,40021015,40022909,40024756,40026710,40028682,40030627,40032501,40034378,40036314,40038242,40040222,40042116,40043968,40045906,40047876,40049833,40051733,40053609,40055582,40057516,40059403,40061218,40063197,40065122,40067011,40068850,40070709,40072623,40074536,40076459,40078344,40080233,40082116,40083987,40085883,40087768,40089592,40091508,40093396,40095207,40097105,40098893,40100666,40102680,40104635,40106562,40108485,40110411,40112231,40114069,40115948,40117788,40119594,40121594,40123602,40125605,40127634,40129643,40131631,40133507,40135238,40137181,40139108,40141147,40143177,40145194,40147148,40149123,40151135,40153111,40155127,40157099,40159050,40160991,40163044,40165041,40167022,40168781,40170752,40172758,40174772,40176765,40178674,40180651,40182673,40184675,40186686,40188644,40190630,40192624,40194649,40196668,40198637,40200452,40202427,40204408,40206387,40208396,40210387,40212398,40214432,40216445,40218435,40220437,40222334,40224350,40226347,40228330,40230317,40232353,40234393,40236418,40238440,40240461,40242472,40244407,40246308,40248310,40250283,40252252,40254290,40256250,40258206,40260177,40262160,40264087,40266104,40267984,40269958,40271956,40273901,40275869,40277858,40279839,40281805,40283673,40285606,40287553,40289519,40291392,40293299,40295289,40297289,40299320,40301327,40303313,40305226,40307113,40309079,40311005,40312936,40314832,40316813,40318786,40320760,40322751,40324760,40326750,40328728,40330693,40332629,40334592,40336530,40338482,40340507,40342518,40344468,40346492,40348484,40350455,40352404,40354386,40356344,40358310,40360179,40362142,40364102,40366058,40368033,40370025,40372023,40373974,40375983,40377953,40379942,40381975,40383920,40385898,40387890,40389835,40391825,40393830,40395807,40397765,40399653,40401614,40403609,40405546,40407486,40409448,40411381,40413370,40415323,40417273,40419215,40421160,40423093,40424971,40426820,40428773,40430763,40432678,40434572,40436542,40438424,40440366,40442341,40444229,40446190,40448171,40450121,40452085,40454094,40456015,40458002,40459971,40461942,40463930,40465878,40467872,40469895,40471898,40473949,40475977,40477939,40479946,40481978,40483952,40485969,40487996,40490042,40492079,40494124,40496124,40498124,40500135,40502104,40504130,40506163,40508193,40510239,40512250,40514270,40516297,40518313,40520309,40522341,40524392,40526423,40528475,40530508,40532507,40534450,40536480,40538462,40540489,40542517,40544556,40546606,40548653,40550664,40552646,40554665,40556634,40558675,40560703,40562757,40564790,40566822,40568836,40570848,40572799,40574782,40576581,40578557,40580521,40582525,40584495,40586510,40588556,40590568,40592548,40594528,40596280,40598290,40600301,40602267,40604303,40606318,40608272,40610301,40612287,40614263,40616310,40618272,40620191,40622070,40623870,40625627,40627356,40628783,40630270,40631829,40633169,40634730,40636061,40637561,40638983,40640099,40641658,40642832,40644267,40645480,40646996,40648103,40649437,40650770,40651773,40652963,40654447,40655862,40656938,40658248,40659741,40660717,40661817,40663163,40664418,40665669,40667166,40668287,40669695,40670832,40672428,40673589,40674976,40676438,40677879,40679258,40680680,40682261,40683709,40685283,40686774,40688172,40689561,40691055,40692484,40693651,40695319,40696531,40697928,40699015,40700657,40701853,40703316,40704622,40705518,40707033,40708434,40709787,40710883,40712172,40713755,40714740,40715837,40717209,40718525,40719931,40721221,40722425,40723758,40724903,40726543,40727796,40729271,40730781,40732056,40733703,40735104,40736615,40738129,40739567,40741166,40742413,40743899,40745445,40746704,40748187,40749560,40750862,40752176,40753309,40754949,40756163,40757615,40758913,40759787,40761394,40762802,40764107,40765285,40766509,40768122,40769011,40770143,40771538,40772791,40774228,40775423,40776696,40778055,40779229,40780854,40782131,40783627,40785127,40786360,40788009,40789364,40790880,40792418,40793780,40795347,40796661,40798161,40799652,40800768,40802378,40803602,40805049,40806395,40807617,40809161,40810336,40811773,40812999,40813821,40815394,40816734,40817950,40819155,40820431,40821986,40822855,40824103,40825507,40826622,40828145,40829245,40830629,40831801,40833392,40834504,40835810,40837238,40838685,40840006,40841532,40843094,40844524,40846115,40847484,40848975,40850324,40851810,40853326,40854538,40856173,40857335,40858749,40859902,40861474,40862648,40864096,40865443,40866382,40867691,40869097,40870527,40871611,40872917,40874421,40875570,40876609,40877900,40879276,40880483,40881972,40883136,40884467,40885593,40887233,40888453,40889969,40891457,40892763,40894316,40895657,40897188,40898698,40900124,40901778,40903030,40904502,40906012,40907388,40908779,40910204,40911535,40912896,40914063,40915647,40916821,40918272,40919523,40920387,40921971,40923312,40924664,40925828,40927135,40928742,40929555,40930766,40932195,40933420,40934846,40936085,40937383,40938729,40939915,40941537,40942797,40944311,40945829,40947102,40948742,40950087,40951679,40953242,40954672,40956258,40957606,40959167,40960734,40961991,40963273,40964759,40966033,40967317,40968466,40970036,40971235,40972660,40973949,40974816,40976354,40977697,40979045,40980185,40981444,40983047,40983914,40985096,40986513,40987680,40989036,40990229,40991517,40992868,40994091,40995707,40996837,40998311,40999866,41001254,41002841,41004239,41005801,41007368,41008856,41010473,41011819,41013373,41014957,41016222,41017386,41019002,41020275,41021610,41022720,41024303,41025514,41026863,41028187,41029104,41030357,41031817,41033259,41034348,41035669,41037167,41038177,41039201,41040565,41041831,41042899,41044445,41045567,41046999,41048198,41049922,41051100,41052412,41053966,41055428,41056788,41058444,41059925,41061368,41062957,41064388,41065981,41067316,41068827,41070326,41071482,41073145,41074338,41075746,41076939,41078497,41079762,41081088,41082485,41083491,41084658,41086119,41087533,41088660,41089920,41091146,41092680,41093582,41094893,41096354,41097552,41099196,41100227,41101620,41102819,41104435,41105661,41107048,41108481,41109904,41111227,41112801,41114392,41115881,41117461,41118949,41120476,41121892,41123434,41124912,41126062,41127744,41129001,41130431,41131640,41133173,41134458,41135791,41137211,41138255,41139332,41140856,41142242,41143380,41144674,41145831,41147486,41148292,41149548,41151037,41152395,41154057,41155113,41156470,41157809,41159202,41160741,41162020,41163546,41165104,41166352,41168044,41169659,41171255,41172847,41174289,41176028,41177224,41178485,41179767,41181086,41182413,41184196,41185723,41187171,41188395,41189686,41191268,41192784,41194229,41196040,41197487,41198805,41200028,41201569,41202974,41204420,41206235,41207677,41209102,41210431,41211717,41213202,41214559,41215958,41217767,41219195,41220782,41222178,41223414,41224871,41226125,41227379,41228817,41230589,41231713,41232934,41234222,41235584,41237288,41238630,41239962,41241395,41242983,41244336,41246032,41247751,41249512,41251431,41253103,41255037,41256931,41258723,41260471,41262331,41264179,41265928,41267827,41269022,41269963,41271662,41273356,41275113,41276850,41278562,41280238,41281728,41282633,41283662,41285649,41287561,41289318,41290873,41292176,41293504,41294951,41296563,41298177,41300060,41301924,41303769,41305174,41306808,41308569,41310283,41312173,41314048,41315938,41317690,41319286,41321082,41322483,41324425,41326347,41328238,41330072,41331921,41333732,41335644,41337334,41339102,41340951,41342793,41344682,41346543,41348311,41349951,41351718,41353225,41354741,41356447,41357949,41359596,41361155,41362738,41364331,41365796,41367404,41368911,41370446,41371985,41373397,41374802,41376655,41378584,41380497,41382187,41384038,41385873,41387795,41389586,41391459,41393331,41395094,41396932,41398833,41400662,41402495,41404483,41406441,41408395,41410253,41412200,41414127,41416107,41417953,41419880,41421844,41423812,41425682,41427608,41429397,41431281,41432934,41434972,41437017,41439049,41440991,41442954,41444842,41446696,41448647,41450578,41452492,41454466,41456391,41458375,41460321,41462230,41464185,41466104,41468043,41469993,41471880,41473783,41475736,41477631,41479527,41481473,41483393,41485354,41487183,41489105,41490760,41492535,41494408,41496219,41497944,41499656,41501452,41503042,41504335,41505785,41507709,41509180,41510970,41512650,41514306,41516076,41517643,41519299,41520980,41522369,41523566,41524660,41525871,41527373,41529062,41530746,41532195,41533380,41534862,41536555,41538004,41539175,41540895,41542795,41544588,41546317,41548087,41549886,41551452,41553399,41555237,41556934,41558604,41560285,41562024,41563595,41565348,41566993,41568551,41570225,41571677,41573219,41574794,41576239,41577494,41579107,41580782,41581895,41582844,41584370,41585966,41587665,41589382,41591418,41593382,41595359,41597355,41599271,41601149,41602776,41604289,41606124,41608104,41609978,41611865,41613763,41615510,41617273,41619075,41620792,41622506,41624338,41626213,41627952,41629807,41631474,41633316,41634902,41636476,41638140,41639694,41641424,41643145,41644954,41646769,41648444,41650129,41651787,41653213,41654593,41656335,41658246,41660052,41661797,41663105,41664527,41666236,41667988,41669603,41671037,41672676,41674343,41675947,41677556,41679172,41680690,41682398,41683952,41685278,41686859,41688270,41689961,41691627,41692956,41694584,41696047,41697729,41699376,41700846,41702181,41703762,41705340,41706471,41707799,41709157,41710358,41711743,41713031,41714568,41715750,41717046,41718491,41719813,41721243,41722542,41723891,41725270,41726810,41728401,41730011,41731815,41733132,41734647,41736456,41738358,41740205,41742117,41743676,41745597,41747017,41748446,41749735,41751202,41752929,41754974,41756979,41758984,41760402,41762261,41763979,41765682,41767534,41768969,41770799,41772592,41774399,41775975,41777778,41779331,41780896,41782402,41783720,41785372,41787240,41789014,41790543,41792385,41793644,41795485,41797166,41799061,41800531,41802028,41803778,41805482,41807287,41809045,41811044,41812649,41814163,41815874,41817550,41819260,41820902,41822644,41824354,41824828,41825441,41825870,41826437,41827301,41827877,41828394,41828961,41830009,41832023,41833990,41835980,41837917,41839873,41841845,41843806,41845739,41847623,41849265,41850898,41852524,41854315,41855862,41857428,41859162,41860751,41862465,41864029,41865812,41867183,41868684,41870125,41871707,41873061,41874484,41875970,41877605,41878958,41880257,41881483,41882969,41884353,41885908,41887331,41888666,41890213,41891663,41893106,41894691,41896110,41897474,41898875,41900285,41901726,41903101,41904505,41906197,41907962,41909743,41911578,41913464,41915346,41917228,41918985,41920712,41922491,41924138,41925896,41927702,41929530,41931296,41933026,41934711,41936345,41937143,41937962,41938765,41939596,41941346,41943068,41944694,41946316,41948018,41949607,41951282,41952926,41954592,41956342,41958008,41959743,41961394,41963129,41964913,41966707,41968610,41970021,41971802,41973361,41975173,41976349,41978130,41979705,41981604,41983347,41985200,41986989,41988855,41990682,41992500,41994313,41996163,41997572,41998622,41999686,42000726,42001815,42002882,42003955,42004999,42006398,42007928,42009468,42010998,42012579,42014126,42015671,42017238,42018772,42020396,42021831,42023431,42025034,42026673,42027774,42028825,42029839,42030900,42032401,42033825,42035562,42037384,42038938,42040188,42041326,42042874,42044286,42045354,42046784,42048396,42049762,42051255,42052879,42054488,42056035,42057656,42059260,42060648,42061928,42062748,42063795,42064553,42065302,42066222,42066921,42068268,42069675,42071053,42071558,42072208,42072856,42073412,42074253,42074740,42075596,42076313,42077224,42077746,42078257,42079180,42079868,42080725,42081243,42082109,42082781,42083525,42084123,42084645,42085587,42086288,42087204,42087692,42088457,42089075,42089735,42090282,42090568,42091175,42091378,42091996,42092226,42092620,42092902,42093157,42093790,42093951,42094486,42094676,42095203,42095241,42095318,42095887,42096123,42096722,42096907,42097778,42099231,42100690,42101888,42103107,42104330,42105505,42106770,42107722,42108742,42109725,42110696,42111684,42112670,42113667,42114960,42116326,42117729,42119125,42120618,42122096,42123508,42124942,42126340,42127921,42129367,42130857,42132390,42133984,42135601,42137083,42138586,42140203,42141597,42142999,42144434,42145863,42147268,42148642,42150112,42151540,42152888,42154304,42155721,42157069,42158459,42159412,42160335,42161284,42162276,42163301,42164249,42165185,42166136,42167198,42168106,42169086,42169979,42171220,42172616,42174067,42175405,42176803,42177765,42178667,42179610,42180557,42182258,42183836,42185434,42187008,42188525,42190105,42191663,42193243,42194927,42196291,42197612,42198972,42200336,42201581,42202905,42204225,42205544,42207154,42208721,42210318,42211504,42213049,42214463,42215726,42217167,42218767,42220302,42221920,42223475,42225106,42226818,42228514,42230255,42231974,42233510,42234740,42236148,42237561,42238948,42240371,42241556,42243013,42244430,42245853,42247359,42248831,42250435,42251881,42253566,42255200,42256804,42258416,42259991,42261563,42263162,42264748,42266390,42268112,42269765,42271334,42272994,42274411,42276029,42277563,42279142,42280825,42282431,42284043,42285641,42287246,42288748,42290353,42291978,42293555,42295222,42296889,42298481,42300151,42301612,42303227,42304795,42306404,42308045,42309685,42311252,42312796,42314351,42316199,42317727,42319295,42320847,42322554,42324327,42325944,42327502,42329091,42330908,42332534,42334209,42335853,42337526,42338471,42339448,42340398,42341349,42342970,42344451,42346017,42347493,42349096,42350361,42351623,42352938,42354337,42355466,42356629,42357881,42359218,42360490,42361470,42362406,42363485,42364852,42366037,42367160,42368253,42369497,42370649,42371525,42372503,42373656,42375563,42377023,42378987,42380509,42382103,42383523,42384979,42386301,42387701,42389125,42390548,42391905,42393519,42395033,42396552,42398081,42399620,42401149,42402672,42404195,42405732,42407371,42408792,42410167,42411547,42412923,42414327,42415703,42417046,42418637,42420172,42421687,42423213,42424789,42426344,42427862,42429392,42430936,42432688,42434283,42435883,42437544,42439179,42440753,42442363,42444012,42445731,42447316,42448781,42450183,42451578,42453012,42454490,42455903,42457329,42459110,42460883,42462621,42464310,42466038,42467789,42469501,42471190,42472942,42474809,42476548,42478226,42479867,42481610,42483318,42485009,42486667,42488377,42489439,42490580,42491756,42492869,42493968,42495036,42496325,42497483,42498531,42499509,42500467,42501137,42501805,42502497,42503542,42505290,42506980,42508728,42510401,42512145,42513822,42515539,42517200,42519071,42520829,42522539,42524179,42525851,42527528,42529246,42530964,42532753,42534583,42536333,42538141,42539854,42541640,42543388,42545151,42546885,42548768,42550521,42552238,42553872,42555532,42557196,42558900,42560588,42562310,42563813,42565310,42566684,42568177,42569600,42570593,42571601,42572603,42574081,42575936,42577735,42579559,42581314,42583145,42584926,42586789,42588646,42590225,42591446,42592634,42593938,42595662,42596740,42597783,42598838,42600530,42602176,42603790,42605391,42607067,42608595,42610234,42611826,42613501,42615098,42616578,42617995,42619428,42620790,42622252,42623663,42625093,42626541,42628157,42629725,42631256,42632825,42634274,42635714,42637167,42638617,42640202,42641835,42643476,42645054,42646608,42648279,42649889,42651485,42653147,42654769,42656221,42657710,42659161,42660569,42662048,42663469,42664914,42666481,42668328,42670135,42671988,42673733,42675580,42677359,42679247,42681088,42682767,42684376,42685968,42687586,42689140,42690776,42692409,42694023,42695765,42697312,42698804,42700257,42701664,42703164,42704619,42706080,42707587,42709292,42711112,42712948,42714806,42716489,42718360,42720170,42722028,42723881,42725530,42727167,42728752,42730466,42731964,42733610,42735212,42736830,42738468,42739946,42741392,42742828,42744199,42745720,42747195,42748624,42750072,42751929,42753735,42755551,42757430,42759098,42760957,42762776,42764638,42766378,42767092,42768743,42769806,42770481,42771655,42772304,42772982,42774158,42774826,42775810,42777359,42778017,42778691,42779356,42780793,42781998,42783101,42784418,42785705,42786600,42787603,42788861,42790059,42791296,42792615,42794103,42795609,42796974,42797991,42799212,42800916,42802479,42804219,42805862,42807600,42809142,42810717,42812450,42814167,42815196,42816348,42817799,42819185,42820722,42821902,42822898,42823895,42824903,42826292,42827372,42828498,42829625,42830718,42832298,42834315,42836353,42838357,42840346,42842370,42844369,42846363,42848373,42850404,42852446,42854479,42856497,42858506,42860526,42862544,42864499,42866512,42868547,42870592,42872590,42874580,42876616,42878607,42880600,42882590,42884612,42886636,42888663,42890661,42892656,42894667,42896673,42898628,42900655,42902697,42904588,42906511,42908387,42910314,42912226,42914075,42915932,42917804,42919684,42921575,42923466,42925294,42927168,42928992,42930830,42932714,42934590,42936241,42937909,42939601,42941272,42942938,42944596,42946215,42947950,42949626,42951287,42952924,42954551,42956194,42957847,42959490,42961083,42962811,42964261,42965722,42967167,42968591,42970016,42971441,42972833,42974239,42975844,42977261,42978615,42980299,42981654,42983113,42984610,42986284,42987695,42989173,42990713,42992303,42993843,42995241,42996847,42998376,42999984,43001337,43002790,43004139,43006011,43007788,43009281,43010894,43012550,43014117,43015707,43017204,43018903,43020558,43022118,43023696,43025357,43027115,43028815,43030371,43031946,43033627,43035157,43036719,43038257,43039829,43041363,43042913,43044442,43045962,43047492,43048983,43050628,43052216,43053747,43055431,43057112,43058744,43060398,43062102,43063944,43065463,43066985,43068945,43070866,43072568,43074273,43076071,43078018,43079954,43081882,43083868,43085791,43087754,43089663,43091582,43093448,43095269,43097111,43099012,43101010,43102871,43104743,43106576,43108408,43110179,43111952,43113714,43115618,43117613,43119568,43121542,43123473,43125376,43127287,43129193,43131110,43133152,43135017,43136911,43138768,43140587,43142402,43144231,43146007,43147878,43149899,43151890,43153867,43155853,43157781,43159722,43161645,43163563,43165571,43167373,43169147,43170893,43172623,43174363,43176147,43177866,43179646,43181614,43183428,43185228,43187052,43188830,43190644,43192423,43194198,43196103,43197560,43199001,43200427,43201856,43203255,43204649,43206097,43207524,43209453,43211421,43213351,43215394,43217336,43219283,43221179,43223086,43224990,43226917,43228787,43230717,43232682,43234647,43236590,43238483,43240399,43242320,43244217,43246148,43248068,43249590,43251087,43252681,43254301,43255881,43257496,43259033,43260553,43262528,43264349,43266145,43267888,43269654,43271387,43273128,43274840,43276631,43277973,43279299,43280587,43281948,43283252,43284567,43285924,43287301,43289046,43290745,43292484,43294303,43295988,43297638,43299271,43300881,43302594,43304100,43305559,43307045,43308617,43310202,43311697,43313174,43314641,43316299,43317993,43319456,43321134,43322771,43324362,43325920,43327426,43328795,43330123,43331450,43332678,43333959,43335125,43336389,43338092,43339969,43341829,43343709,43345613,43347501,43349378,43351247,43353116,43355075,43356968,43358836,43360709,43362593,43364477,43366360,43368233,43370155,43371578,43373012,43374388,43375780,43377264,43378736,43380192,43381649,43383417,43385080,43386793,43388533,43390223,43391825,43393411,43394949,43396635,43398154,43399702,43401283,43402891,43404615,43406335,43408036,43409676,43411391,43412844,43414311,43415775,43417237,43418622,43420002,43421415,43422920,43424496,43425970,43427466,43429020,43430180,43431712,43433225,43434657,43436328,43437819,43439347,43440830,43442157,43443663,43445156,43446688,43448206,43450200,43452159,43454085,43455800,43457219,43458635,43460055,43460893,43462311,43463711,43465112,43466725,43467913,43469043,43470169,43471288,43472331,43473394,43474560,43475724,43477229,43478678,43480111,43481980,43483885,43485779,43487695,43489598,43491505,43493409,43495337,43497033,43498638,43500156,43501652,43503150,43504554,43505421,43506397,43507186,43508088,43508873,43509863,43510550,43511482,43512353,43513357,43514122,43514996,43515920,43516935,43517925,43518815,43520232,43521491,43522823,43524130,43525036,43525389,43525970,43526410,43526879,43527119,43527624,43528248,43529606,43530564,43531381,43532169,43533293,43534612,43535341,43536683,43537509,43537666,43538141,43538400,43538727,43540046,43541414,43542939,43544606,43546449,43548191,43550000,43551822,43553625,43555390,43557142,43558935,43560710,43562352,43563993,43565569,43567193,43568783,43570435,43572026,43573664,43575071,43576373,43577697,43579030,43580611,43582294,43583965,43585630,43587280,43588965,43590617,43592288,43593964,43595641,43597313,43598971,43599942,43601493,43603313,43605176,43606945,43608740,43610539,43612423,43614259,43616011,43617666,43619112,43620579,43622035,43623661,43625523,43627361,43629229,43631088,43632950,43634819,43636668,43638532,43640385,43641455,43643208,43644464,43645581,43646821,43647868,43649018,43651069,43653073,43655045,43656969,43658930,43660891,43662797,43664704,43666586,43668552,43670507,43672459,43674365,43676285,43678174,43680099,43682109,43683906,43685571,43687336,43689145,43690956,43692743,43694438,43696045,43697897,43699952,43701995,43704046,43706087,43708136,43710185,43712228,43714282,43716330,43718385,43720428,43722472,43724519,43726558,43728598,43730635,43732690,43734551,43736480,43738344,43740195,43742020,43743881,43745718,43747587,43749541,43751443,43753326,43755187,43757047,43758870,43760735,43762574,43764519,43766365,43768260,43769078,43769838,43770640,43771380,43772191,43772537,43773361,43774233,43775070,43775551,43776059,43776842,43777751,43778537,43778918,43779596,43780391,43781239,43781921,43782320,43783066,43783925,43784771,43785280,43785800,43786968,43788011,43789231,43789783,43790322,43791567,43792609,43793750,43794307,43794896,43796108,43797202,43798303,43798682,43799507,43800655,43801683,43802645,43803793,43805021,43806567,43807868,43809534,43811196,43812189,43813336,43814462,43815576,43816765,43817883,43818955,43820068,43821202,43822347,43823534,43824700,43825810,43826913,43827957,43829021,43830665,43831720,43832792,43833976,43835088,43836146,43837224,43838264,43839292,43840328,43841206,43842243,43843304,43844234,43845120,43845882,43846763,43848192,43848622,43849156,43849655,43850191,43850741,43851243,43851801,43852336,43852794,43853267,43853753,43854268,43854800,43855312,43855877,43856402,43857667,43859132,43860594,43862095,43863646,43865133,43866644,43868160,43869620,43870874,43871841,43872816,43874080,43875805,43877227,43878613,43879949,43881251,43882706,43884426,43886058,43887703,43889375,43890987,43892593,43894251,43895905,43897566,43899465,43901171,43902879,43904615,43906297,43908014,43909751,43911417,43913213,43914250,43915367,43916584,43917918,43919217,43920493,43921835,43922948,43924291,43925722,43927132,43928576,43930095,43931594,43933152,43934681,43936286,43937851,43938853,43939977,43941143,43942256,43943447,43944550,43945652,43946747,43947914,43949078,43950237,43951422,43952567,43953655,43954707,43955830,43957444,43958539,43959661,43960849,43961944,43963008,43964068,43965145,43966160,43967180,43968057,43969050,43970048,43970962,43971865,43972643,43973523,43974933,43975367,43975897,43976399,43976935,43977508,43977991,43978550,43979108,43979571,43980065,43980527,43981059,43981566,43982093,43982655,43983186,43984686,43986470,43988244,43990052,43991852,43993654,43995401,43997265,43998663,44000061,44001423,44002806,44004477,44006315,44008122,44010018,44011852,44013752,44015586,44017449,44019308,44020885,44022411,44023991,44025525,44026987,44028660,44030264,44031972,44033571,44035288,44037098,44038915,44040679,44042248,44043472,44044616,44045748,44047083,44048442,44050131,44051880,44053693,44055495,44057229,44059076,44060863,44062591,44064352,44065774,44066912,44068029,44069206,44070543,44071967,44073445,44075393,44077066,44079014,44080743,44082538,44084368,44086119,44087973,44089729,44091473,44093222,44094982,44096633,44098282,44100056,44101800,44103582,44105167,44106835,44108168,44109884,44111502,44113110,44114715,44116284,44117852,44119449,44121061,44122843,44124283,44126030,44127819,44129353,44130740,44132481,44134284,44135859,44137588,44138646,44139723,44140859,44141994,44143141,44144278,44145373,44146523,44147608,44148763,44149899,44151104,44152255,44153345,44154406,44155541,44156857,44157882,44159126,44160234,44161104,44161757,44162843,44164094,44165212,44166192,44167112,44168328,44169459,44170437,44170989,44172137,44173380,44174549,44175543,44176385,44177583,44178717,44179711,44180128,44181320,44182495,44183681,44184653,44185440,44186593,44187736,44188792,44189216,44190398,44191550,44192694,44193651,44194448,44195530,44196767,44197865,44198269,44199373,44200566,44201686,44202607,44203994,44205146,44206236,44207398,44208442,44209503,44210640,44211693,44212669,44213698,44214590,44215612,44216638,44217492,44218320,44219128,44219988,44220990,44222183,44223368,44224534,44224924,44225876,44227129,44228237,44229193,44230442,44231562,44232784,44233929,44235136,44236335,44237446,44238695,44239885,44241163,44242296,44243427,44244632,44245807,44247078,44248227,44249369,44250605,44251729,44253075,44254286,44255309,44256328,44257461,44258754,44259861,44260879,44261902,44263014,44264369,44265467,44266441,44267491,44268781,44270010,44271050,44272066,44273154,44274597,44275358,44275834,44276396,44277632,44279159,44280916,44282760,44284638,44286470,44288072,44289477,44290047,44290549,44291075,44291596,44292167,44293019,44294570,44296026,44297623,44299165,44300623,44302234,44303767,44305224,44306845,44308366,44309817,44311452,44313194,44315032,44316814,44318563,44320445,44322186,44324017,44325844,44327642,44329390,44331214,44333085,44334787,44336539,44338422,44340129,44342039,44343804,44345563,44347441,44349178,44350904,44352719,44354761,44356496,44358306,44360145,44361826,44363730,44365405,44367239,44369018,44370817,44372596,44374388,44376210,44377986,44379813,44381617,44383377,44385282,44386987,44388735,44390624,44392329,44394175,44395956,44397706,44399573,44401438,44403153,44404867,44406770,44408458,44410291,44412182,44413876,44415759,44417477,44419326,44421076,44422919,44424670,44426460,44428318,44430082,44431854,44433729,44435465,44437315,44439065,44440814,44442741,44444436,44446267,44448046,44449909,44451153,44452320,44453492,44454727,44456003,44457158,44458405,44459516,44460404,44461082,44461855,44462728,44463375,44463782,44464535,44465373,44466271,44466766,44467265,44468053,44468883,44469787,44470351,44470709,44471516,44472382,44473227,44474024,44475355,44476345,44477489,44478649,44479780,44480924,44482008,44483097,44484193,44485356,44486455,44487669,44488863,44489945,44490999,44492063,44493316,44494841,44496422,44498109,44499186,44500273,44501433,44502543,44503615,44504677,44505768,44506787,44507802,44508693,44509695,44510720,44511679,44512545,44513322,44514226,44515599,44517059,44518465,44519883,44520304,44520843,44521350,44521898,44522445,44522906,44523477,44524036,44524491,44525022,44525490,44526003,44526502,44527032,44527619,44528126,44529633,44531280,44532937,44534515,44536209,44537893,44539539,44541204,44542879,44544593,44546369,44548025,44549639,44551240,44552889,44554521,44555755,44556244,44557552,44558970,44560337,44561629,44563025,44564382,44565779,44567085,44568382,44569420,44570621,44571711,44572937,44574037,44575261,44576336,44577534,44578927,44580296,44581757,44583189,44584701,44586055,44587491,44588911,44590466,44592038,44593514,44594885,44596352,44597764,44599196,44600552,44601965,44603209,44604329,44605583,44606701,44608020,44609170,44610513,44611675,44612958,44614086,44615317,44616547,44617897,44619073,44620175,44621408,44622517,44623999,44625479,44627006,44628528,44630239,44631701,44633281,44634778,44636220,44637577,44639046,44640375,44641410,44642607,44643784,44645269,44646658,44647713,44649075,44649864,44650902,44652127,44653077,44655113,44657152,44659187,44661190,44663211,44665204,44667198,44669171,44671190,44673225,44675236,44677263,44679275,44681296,44683313,44685277,44687301,44688663,44690032,44691613,44693200,44694324,44695447,44696570,44697695,44698816,44699934,44701055,44702720,44704225,44705680,44707279,44709071,44710769,44712511,44714258,44716121,44717691,44719183,44720678,44722311,44723914,44725487,44727029,44728637,44729212,44729299,44730777,44732786,44734790,44736668,44738561,44740448,44742277,44744152,44746042,44747937,44749824,44751770,44753670,44755627,44757545,44759402,44761312,44763233,44765119,44766969,44768890,44770868,44772745,44774660,44776606,44778534,44780257,44782033,44783859,44785587,44787578,44789486,44791355,44793234,44795118,44797043,44798928,44800823,44802694,44804665,44806442,44808271,44810135,44812049,44813870,44815389,44817046,44818737,44820390,44822047,44823776,44825442,44827131,44828772,44830505,44832138,44833789,44835459,44837203,44838854,44840547,44842191,44843863,44845718,44847177,44848721,44850336,44851938,44853507,44855031,44856516,44858110,44859719,44861331,44862989,44864489,44866013,44867577,44869144,44870697,44872599,44874102,44875778,44877324,44878839,44880807,44882601,44884382,44886170,44888025,44889916,44891774,44893621,44895566,44896893,44898170,44899476,44900843,44902198,44903569,44904915,44906187,44907821,44909300,44910737,44912182,44913676,44915154,44916634,44918074,44919624,44921131,44922595,44924056,44925519,44927008,44928462,44929923,44931342,44932954,44934418,44935867,44937310,44938774,44940283,44941752,44943188,44944677,44946301,44947725,44949139,44950612,44952090,44953561,44955006,44956413,44958014,44959439,44960830,44962254,44963694,44965167,44966604,44968026,44969412,44971029,44972406,44973800,44975260,44976747,44978199,44979612,44980995,44982604,44984014,44985386,44986774,44988222,44989684,44991103,44992543,44993956,44995588,44996994,44998387,44999877,45001361,45002856,45004301,45005707,45007308,45008790,45010231,45011689,45013166,45014634,45016132,45017602,45018965,45020584,45021938,45023262,45024623,45025987,45027363,45028703,45030002,45031355,45032829,45034200,45035534,45036910,45038254,45039637,45040952,45042221,45043785,45045096,45046385,45047730,45049098,45050405,45051721,45053073,45054307,45055955,45057408,45058839,45060322,45061792,45063304,45064784,45066169,45067807,45069218,45070615,45072056,45073574,45075032,45076482,45077915,45079317,45080913,45082288,45083666,45085091,45086550,45088029,45089435,45090806,45092412,45093831,45095218,45096578,45098056,45099508,45100925,45102316,45103747,45105344,45106751,45108135,45109570,45111038,45112516,45113921,45115347,45116853,45118430,45119866,45121292,45122747,45124223,45125665,45127119,45128539,45130304,45131963,45133804,45135551,45137386,45139102,45140797,45142590,45144408,45146242,45148040,45149777,45151430,45153221,45154951,45156763,45158466,45160322,45162078,45163959,45165817,45167670,45169552,45171455,45173308,45175201,45177132,45178964,45180751,45182545,45184367,45186156,45187926,45189700,45191644,45193409,45195137,45196829,45198550,45200274,45201968,45203655,45205391,45207235,45208978,45210721,45212419,45214157,45215866,45217599,45219265,45221052,45222984,45224823,45226647,45228446,45230239,45232079,45233882,45235689,45237605,45239327,45241081,45242830,45244562,45246297,45248030,45249817,45251592,45253387,45255296,45257139,45258985,45260827,45262629,45264373,45266154,45267926,45269834,45271483,45273246,45275000,45276489,45278254,45279991,45281612,45283395,45285191,45286937,45288689,45290440,45292060,45293737,45295324,45297145,45298990,45300651,45302334,45303986,45305627,45307314,45308994,45310671,45312333,45314110,45315766,45317393,45319023,45320716,45322428,45324116,45325794,45327486,45329361,45331179,45332893,45334668,45336514,45338310,45340121,45341922,45343771,45345555,45347281,45349001,45350758,45352552,45354304,45356111,45357844,45359622,45361333,45363031,45364773,45366502,45368256,45369953,45371676,45373473,45375177,45376877,45378629,45380282,45381976,45383662,45385380,45387107,45388876,45390558,45392282,45393917,45395565,45397223,45398934,45400665,45402470,45403908,45405409,45406904,45408463,45409974,45411473,45412999,45414476,45416381,45418367,45420294,45422255,45424277,45426226,45428178,45430166,45432058,45434008,45436015,45438038,45440017,45441936,45443910,45445932,45447970,45449825,45450920,45450960,45450998,45451038,45451352,45451390,45451430,45451468,45451508,45453294,45455106,45456915,45458749,45460591,45462426,45464237,45466036,45467960,45469408,45470908,45472372,45473812,45475199,45476676,45478123,45479584,45481486,45483317,45485118,45486882,45488693,45490433,45492211,45493981,45495702,45496377,45496692,45496732,45496772,45496810,45497129,45497167,45497207,45497247,45497832,45498992,45500446,45502109,45503817,45505469,45507174,45508868,45510529,45512229,45514027,45515044,45516275,45517706,45518998,45519775,45521347,45522796,45524080,45525050,45526844,45528462,45530103,45530720,45530760,45530798,45530838,45531155,45531195,45531235,45531273,45531774,45532965,45534348,45535545,45536794,45538459,45540123,45541734,45543416,45545092,45546778,45548445,45550064,45551731,45551786,45551825,45551865,45551903,45552987,45553495,45553582,45554641,45556489,45558481,45560277,45561944,45563561,45565197,45566887,45568545,45570260,45571999,45573690,45575430,45577169,45578907,45580652,45582382,45584074,45585752,45587455,45588595,45589681,45590265,45591161,45592983,45594752,45596475,45598195,45599918,45601710,45603390,45605118,45606989,45608848,45610649,45612514,45614314,45616230,45618044,45619946,45621746,45623596,45625273,45626955,45628732,45630364,45632170,45633933,45635635,45637520,45639294,45641262,45643053,45644996,45646866,45648745,45650633,45652489,45654522,45656007,45657402,45658747,45659968,45661227,45662799,45664353,45665821,45667180,45668580,45669840,45671131,45672364,45673659,45674967,45676369,45678171,45678808,45679581,45680471,45681397,45682709,45684385,45685544,45686235,45686849,45687571,45688919,45690478,45692193,45693722,45694548,45695779,45697289,45698742,45699911,45700851,45701688,45702615,45703406,45703991,45704924,45706125,45707497,45708724,45709894,45711250,45712600,45714012,45715328,45716736,45718505,45720236,45722039,45723760,45725533,45727244,45729000,45730730,45732484,45734242,45735992,45737757,45739513,45741299,45743062,45744833,45746105,45747017,45747965,45748879,45750331,45752288,45754066,45755918,45757858,45759008,45760175,45761366,45762582,45764550,45766575,45768556,45770587,45772545,45774452,45776343,45778257,45780169,45782209,45784245,45786284,45788327,45790124,45791936,45793719,45795563,45797369,45799202,45800904,45802724,45804461,45806111,45807739,45809350,45811018,45812652,45813941,45815235,45816898,45818262,45819456,45820750,45822029,45823388,45824582,45825815,45827017,45828557,45830080,45831265,45832447,45834064,45835743,45836569,45837358,45838838,45840384,45841263,45842007,45843134,45844452,45845719,45846458,45847388,45849100,45850750,45852116,45853536,45855201,45857106,45858993,45860851,45862733,45864585,45866523,45868491,45870458,45872345,45874017,45875675,45877333,45878967,45880689,45882474,45884260,45886010,45887636,45889099,45890485,45891913,45893490,45894946,45896349,45897788,45899373,45900904,45902338,45903827,45905373,45906995,45908509,45909964,45911510,45913385,45915363,45917326,45919243,45921259,45923219,45925189,45927160,45929171,45930959,45932732,45934476,45936228,45938029,45939631,45941165,45942737,45944597,45946514,45948342,45950211,45952142,45953918,45955747,45957522,45959355,45961333,45963190,45965025,45966939,45968840,45970648,45972434,45974235,45976115,45977637,45979236,45980869,45982439,45983614,45984848,45986459,45987829,45989003,45990227,45991458,45993103,45994335,45995552,45996820,45998581,46000345,46002119,46003894,46005644,46007522,46009313,46011094,46012883,46014743,46016587,46018407,46020220,46021804,46022623,46023454,46024283,46025152,46026323,46027478,46028635,46029816,46031094,46032271,46033466,46034664,46035978,46037360,46038765,46040038,46041568,46043391,46045243,46047110,46048950,46050847,46052641,46054504,46056336,46058288,46060176,46062110,46064042,46065973,46067888,46069814,46071773,46073745,46075457,46077235,46079003,46080688,46082468,46084247,46085899,46087437,46089039,46090722,46092517,46094299,46096127,46097976,46099706,46101560,46103349,46104896,46106374,46107775,46109270,46110814,46112394,46114151,46115763,46117310,46118927,46120580,46122287,46123962,46125706,46127497,46129249,46131066,46132946,46134991,46137038,46139020,46140973,46142943,46144932,46146898,46148874,46150819,46152774,46154697,46156586,46157829,46159089,46160512,46161562,46163240,46165023,46166758,46168518,46170270,46171820,46173433,46174897,46176527,46178312,46180060,46181846,46183586,46185430,46187240,46189040,46190824,46192609,46194316,46196037,46197736,46199421,46201058,46202875,46204671,46206274,46207633,46208610,46209733,46210800,46212451,46213020,46213577,46214133,46215790,46216628,46217956,46218793,46220177,46220740,46221377,46221870,46222438,46223390,46224150,46224918,46225596,46226342,46227475,46228725,46229936,46230960,46232410,46233755,46235204,46236625,46238179,46239541,46240935,46242514,46244051,46245499,46246936,46248466,46250006,46251561,46252936,46254473,46256024,46257511,46258853,46260256,46261728,46263302,46264731,46266135,46267634,46268728,46268945,46269175,46269365,46270130,46270624,46271119,46271562,46272235,46274276,46276296,46278347,46280376,46282397,46284438,46286477,46288517,46290549,46292516,46294457,46296432,46298328,46300233,46302166,46304078,46305965,46307491,46308892,46310317,46311766,46313113,46314294,46315467,46316612,46317845,46319258,46320633,46322138,46323539,46325412,46327221,46329064,46330937,46332827,46334651,46336426,46338218,46340131,46341915,46343656,46345406,46347232,46348888,46350592,46352364,46354105,46355714,46357021,46358306,46359655,46361217,46362540,46363815,46365201,46366819,46368611,46370343,46372170,46373881,46375175,46376397,46377621,46378869,46380681,46382494,46384267,46386049,46387785,46389235,46390606,46392164,46393657,46395684,46397720,46399757,46401773,46403801,46405786,46407767,46409754,46411564,46413071,46414601,46416078,46417765,46419454,46421109,46422759,46424434,46426451,46428420,46430421,46432423,46434328,46436042,46437761,46439505,46441437,46443492,46445542,46447591,46449639,46451214,46452776,46453658,46454194,46454735,46455279,46456142,46457552,46458984,46460403,46461589,46462833,46464410,46465993,46467176,46468640,46470214,46471701,46473251,46474830,46476472,46478186,46479866,46481745,46483561,46484985,46486186,46487537,46488780,46490028,46490989,46491973,46492928,46494217,46495082,46495999,46496984,46497833,46499056,46499761,46500403,46501799,46503796,46505789,46507750,46509726,46511684,46513658,46515648,46517635,46519318,46521211,46523116,46524978,46526957,46528967,46530339,46532342,46534372,46536288,46538174,46540066,46541970,46543979,46545987,46547609,46549612,46551330,46552917,46554584,46556086,46557586,46559101,46560714,46562207,46563679,46565569,46567475,46569344,46571211,46573105,46575006,46576868,46578717,46580598,46582132,46583604,46585049,46586905,46588852,46590828,46592814,46594825,46596708,46598520,46600318,46602120,46603967,46605832,46607715,46609604,46611342,46612734,46614180,46615595,46617028,46618462,46619984,46621468,46622914,46624452,46626105,46627824,46629468,46631014,46632535,46634132,46635660,46637249,46638998,46640634,46642358,46644086,46645786,46647513,46649183,46650931,46652567,46654259,46655772,46657488,46659141,46660799,46662310,46664012,46665715,46667164,46668747,46670318,46671883,46673265,46675036,46676585,46678196,46679643,46681111,46682671,46684168,46685672,46687120,46688665,46690395,46691901,46693203,46694466,46695938,46697559,46699242,46701025,46702385,46704132,46705743,46707319,46709099,46710804,46712405,46714128,46715561,46717258,46718801,46720329,46721957,46723477,46724922,46726407,46728253,46729575,46730978,46732372,46733623,46734762,46735884,46737170,46738337,46739734,46741214,46742583,46743918,46745492,46746894,46748086,46749431,46751259,46752920,46754717,46756286,46757597,46758656,46759668,46760585,46761492,46762592,46763770,46765094,46766365,46767913,46769532,46771064,46772745,46774709,46776056,46777339,46778868,46780340,46781852,46783365,46784827,46786245,46787686,46789355,46791076,46792787,46794502,46796148,46797888,46799685,46801608,46803311,46805129,46806890,46808516,46809863,46811204,46812520,46813896,46815317,46816881,46818498,46820116,46821712,46823141,46824580,46825938,46827492,46829014,46830351,46831712,46833119,46834524,46835909,46837547,46839054,46840578,46842029,46843458,46844885,46846330,46847777,46849307,46850709,46852424,46854269,46855808,46857231,46858632,46860008,46861413,46862745,46864117,46865577,46867254,46869024,46870807,46872386,46873943,46875426,46876860,46878276,46880053,46881475,46882894,46884290,46885716,46887124,46888678,46890359,46892005,46893614,46895066,46896594,46898082,46899456,46900902,46902355,46903782,46905453,46907037,46907567,46907817,46909280,46910869,46911431,46911681,46913073,46914637,46915209,46915459,46916858,46918447,46919018,46919295,46920709,46922276,46922877,46923126,46924450,46926032,46926644,46926888,46928067,46929334,46930622,46931888,46933324,46934588,46935899,46937259,46938666,46939991,46941252,46942575,46943850,46945263,46946599,46947941,46949188,46950615,46952164,46953464,46954721,46955988,46957216,46958453,46959727,46960969,46962237,46963753,46964914,46966130,46967338,46968576,46969803,46971030,46972242,46973738,46974972,46976249,46977513,46978837,46980089,46981353,46982643,46983888,46985705,46987429,46989189,46990887,46992559,46994207,46995997,46997751,46999326,47000579,47001930,47003223,47004600,47005930,47007278,47008526,47009908,47011232,47012643,47013951,47015324,47016674,47018096,47019445,47020868,47022713,47024387,47025986,47027562,47029202,47030779,47032275,47033693,47034981,47036381,47037783,47039247,47040807,47042339,47043761,47045329,47047047,47048928,47050613,47052186,47053763,47055421,47056997,47058512,47059968,47061245,47062611,47064019,47065478,47067061,47068581,47070019,47071524,47073237,47075127,47076823,47078419,47080018,47081690,47083263,47084780,47086276,47087527,47088894,47090279,47091742,47093316,47094834,47096283,47097785,47099515,47101417,47103108,47104726,47106309,47107958,47109515,47111058,47112530,47113770,47115152,47116509,47117949,47119535,47121039,47122494,47124006,47125699,47127621,47128850,47130148,47131246,47132233,47133193,47134334,47135413,47136495,47137629,47138890,47140122,47141329,47142294,47143258,47144314,47145375,47146903,47148250,47149542,47150675,47151631,47152630,47153712,47154822,47155849,47157017,47158270,47159524,47160749,47161738,47162670,47163745,47164796,47166204,47168195,47170118,47172036,47173998,47175955,47177920,47179874,47181798,47183674,47185472,47187265,47189104,47190988,47192927,47194842,47196798,47198664,47200227,47202194,47204122,47206100,47208115,47210102,47212017,47213976,47215961,47217104,47218269,47219415,47220588,47221902,47223039,47224175,47225304,47226957,47228714,47230463,47232234,47233995,47235759,47237542,47239380,47241124,47242926,47244703,47246498,47248301,47250074,47251678,47253649,47255616,47257523,47259413,47261309,47263284,47264969,47265669,47266462,47268372,47270312,47272313,47274297,47276275,47278228,47280234,47282182,47284158,47286132,47288090,47290062,47292038,47293989,47295966,47297900,47299853,47301743,47303316,47304863,47306426,47307988,47309581,47311137,47312699,47314300,47316050,47317706,47319346,47321044,47322638,47324456,47326123,47327866,47329480,47331207,47332674,47334265,47335730,47337374,47339051,47340787,47342477,47344146,47345897,47347544,47349298,47351012,47352900,47354621,47356445,47358252,47360075,47361732,47363420,47365059,47366779,47368493,47370234,47371964,47373632,47375359,47376881,47378502,47380025,47381699,47383323,47385093,47386775,47388527,47390219,47392001,47393799,47395595,47397251,47398731,47400504,47402141,47403964,47405752,47407590,47409365,47411185,47412990,47414796,47416595,47418367,47420080,47421786,47423546,47425136,47426781,47428331,47430113,47431750,47433588,47435270,47437131,47438920,47440652,47442325,47444105,47445895,47447602,47448938,47450828,47452747,47454573,47455913,47457831,47459732,47461189,47462690,47464214,47466221,47468226,47470230,47471805,47473180,47474622,47475916,47477230,47478428,47479569,47481166,47482792,47484394,47485931,47487430,47488939,47490499,47491987,47493581,47494923,47496116,47497086,47497981,47498993,47500361,47501410,47502389,47503577,47504628,47506513,47508304,47510173,47512047,47513855,47515688,47517492,47519288,47521219,47522963,47524530,47526213,47527879,47529584,47531329,47533084,47534803,47536654,47538490,47540348,47542216,47544025,47545885,47547660,47549463,47551434,47553173,47554765,47556444,47558105,47559828,47561598,47563387,47565086,47566926,47568721,47570632,47572449,47574339,47576129,47578059,47579851,47581792,47583762,47585614,47587600,47589549,47591447,47593410,47595423,47597344,47599313,47601161,47602841,47604636,47606434,47608222,47610050,47611882,47613712,47615143,47616450,47618131,47619567,47620835,47622375,47623928,47625674,47627102,47628184,47629510,47630918,47632051,47633076,47633766,47634095,47635147,47636450,47637704,47639030,47640356,47641790,47643085,47644401,47645738,47647039,47648518,47649817,47651121,47652469,47653844,47655223,47656577,47657903,47659246,47660773,47662177,47663666,47664756,47666326,47667971,47669853,47671815,47673843,47675891,47677893,47679890,47681882,47683816,47685543,47687172,47688696,47690202,47691898,47693482,47695195,47696906,47698662,47700431,47702192,47703851,47705573,47707170,47708760,47710363,47712015,47713448,47715186,47717059,47718989,47720832,47722490,47724187,47725966,47727940,47729906,47731767,47733521,47735213,47737046,47738971,47740833,47742618,47744033,47745813,47747748,47749639,47751522,47753174,47754866,47756780,47758751,47760743,47762695,47764471,47766097,47767970,47769829,47771718,47773558,47775043,47776060,47777050,47778005,47779268,47780711,47782277,47783882,47785545,47787158,47788793,47790450,47792166,47793606,47795532,47797229,47798944,47800687,47802287,47804014,47805661,47807291,47808998,47810687,47812561,47814353,47816105,47817863,47819608,47821289,47823059,47824678,47826353,47828053,47829780,47831519,47833289,47835250,47837068,47838533,47840365,47842241,47844094,47846033,47847996,47849924,47851827,47853549,47855267,47856974,47858656,47860364,47862308,47864221,47866135,47868033,47869942,47871929,47873845,47875761,47877708,47879646,47881486,47883270,47885062,47886857,47888693,47890649,47892523,47894431,47896318,47898236,47900076,47901948,47903764,47905074,47906138,47907494,47909190,47910797,47912471,47914084,47915920,47917699,47919433,47921206,47922946,47924691,47926459,47928214,47930006,47931743,47933531,47935212,47936412,47937002,47937562,47938253,47939501,47940556,47941870,47943145,47944378,47945331,47947120,47948845,47950500,47952066,47953791,47955419,47957039,47958732,47960406,47961746,47963458,47964949,47966308,47967434,47969033,47970608,47972336,47974027,47975698,47977417,47979153,47980730,47982324,47983955,47985449,47987048,47988567,47990232,47991789,47993469,47995002,47996581,47998267,47999852,48001491,48003025,48004708,48006236,48007813,48009349,48010863,48012475,48014008,48015620,48017169,48018708,48020385,48021933,48023618,48025147,48026748,48028428,48030229,48032048,48033904,48035779,48037632,48039480,48041303,48043188,48045024,48046847,48048677,48050599,48052521,48054401,48056267,48058130,48060098,48062123,48064102,48066031,48067914,48069822,48071756,48073672,48075585,48077515,48079463,48081373,48083237,48085112,48086953,48088858,48090762,48092600,48094273,48095906,48097514,48099262,48100865,48102468,48104126,48105725,48107337,48108976,48110592,48112318,48113973,48115624,48117271,48118915,48120544,48122197,48123831,48125455,48127209,48128869,48130497,48132129,48133772,48135406,48137040,48138690,48140497,48142362,48144247,48146092,48147956,48149818,48151669,48153534,48155370,48157311,48159155,48160996,48162818,48164678,48166518,48168361,48170207,48172135,48174023,48175880,48177730,48179594,48181458,48183289,48185146,48187022,48188790,48190141,48191579,48193006,48194339,48195762,48197192,48198794,48200194,48201535,48202978,48204477,48205888,48207316,48209030,48210892,48212752,48214593,48216359,48218167,48219966,48221880,48223770,48225488,48227194,48228923,48230642,48232393,48234050,48235787,48237444,48239142,48240743,48242485,48244214,48245875,48247651,48249397,48251098,48252710,48254406,48256240,48258078,48259882,48261763,48263421,48265154,48267029,48268932,48270813,48272653,48274401,48276076,48277852,48279641,48281428,48283218,48284589,48286307,48288010,48289667,48291503,48293149,48294810,48296605,48298379,48300193,48301952,48303716,48305344,48307067,48308705,48310366,48312133,48313844,48315246,48316770,48318267,48319838,48321326,48323020,48324426,48326105,48327690,48329180,48330781,48332476,48334078,48335593,48337210,48338773,48340275,48341892,48343417,48345183,48346969,48348727,48350518,48352287,48354047,48355787,48357212,48358603,48360389,48362179,48364002,48365745,48367458,48369157,48370645,48372369,48374074,48375823,48377466,48378818,48380124,48381888,48383642,48385371,48386818,48388343,48389780,48391233,48392907,48394440,48395975,48397467,48398946,48400456,48401952,48403500,48405040,48406569,48407844,48409315,48410859,48412420,48413963,48415453,48416948,48418449,48420120,48421629,48423178,48424555,48425946,48427399,48428902,48430703,48432480,48434352,48436155,48437978,48439821,48441626,48443362,48445072,48446616,48448353,48450131,48451818,48453617,48455288,48457038,48458809,48460542,48462285,48464290,48466332,48468329,48470341,48472359,48474350,48476162,48477913,48479635,48481278,48482997,48484719,48486493,48488199,48489891,48491596,48493402,48495150,48496767,48498584,48500280,48502001,48503679,48505335,48507003,48508728,48510408,48512163,48513852,48515619,48517297,48518961,48520696,48522417,48524070,48525857,48527419,48529228,48530875,48532301,48533704,48535460,48537213,48538901,48540601,48542303,48543717,48545233,48546752,48548244,48549719,48551183,48552760,48554249,48555803,48557592,48559336,48561017,48562774,48564428,48566145,48567911,48569666,48571288,48572958,48574619,48576302,48577917,48579532,48581159,48582813,48584499,48586182,48587813,48589419,48591121,48592744,48594407,48596050,48597788,48599430,48601078,48602709,48604378,48606027,48607664,48609320,48610959,48612657,48614286,48615940,48617582,48619281,48620921,48622548,48624138,48625880,48627466,48629138,48630832,48632595,48634302,48635944,48637568,48639200,48640916,48642559,48644230,48645903,48647717,48649338,48650940,48652569,48654276,48655936,48657749,48659609,48661291,48662937,48664667,48666491,48668155,48669874,48671646,48673474,48675238,48677041,48678945,48680817,48682708,48684716,48686690,48688645,48690589,48692549,48694397,48696227,48698135,48700095,48702092,48704109,48706110,48707994,48709895,48711766,48713565,48715431,48717421,48719436,48721444,48723446,48725427,48727407,48729322,48731226,48733098,48735014,48736948,48738878,48740830,48742844,48744601,48746456,48748345,48750258,48752140,48753958,48755533,48757126,48758951,48760807,48762635,48764281,48765901,48767507,48769138,48770768,48772495,48773624,48774730,48775690,48776785,48777971,48779266,48780383,48781723,48782933,48784180,48785318,48786511,48787808,48788950,48790121,48791349,48792549,48794213,48795912,48797639,48799365,48801020,48802737,48804412,48806167,48807822,48809508,48811263,48813069,48814708,48816423,48818059,48819757,48821405,48823126,48824744,48826408,48828071,48829788,48831454,48833142,48834769,48836475,48838167,48839853,48841509,48843148,48844995,48846718,48848435,48850166,48851841,48853555,48855284,48857035,48858823,48860582,48862267,48863988,48865741,48867772,48869765,48871783,48873830,48875869,48877912,48879939,48881972,48883998,48886033,48888056,48890098,48892150,48894199,48896255,48898291,48900333,48902300,48904156,48906017,48907922,48909833,48911731,48913611,48915473,48917382,48919033,48920708,48922291,48923952,48925744,48927467,48929010,48930631,48932387,48934015,48935709,48937394,48939019,48940729,48942469,48944214,48945875,48947588,48949256,48950806,48952489,48953899,48955558,48957293,48959216,48960920,48962590,48964261,48965984,48967913,48969777,48971642,48973430,48975206,48976948,48978750,48980593,48982500,48983905,48985917,48987865,48989890,48991863,48993769,48995669,48997420,48999134,49000780,49002547,49004259,49006033,49007800,49009573,49011239,49012991,49014706,49016388,49018082,49019785,49021246,49022761,49024276,49025794,49027292,49028807,49030359,49031886,49033344,49034902,49036416,49037896,49039407,49040951,49042468,49043977,49045474,49046993,49047960,49048838,49049792,49050757,49052236,49053658,49054940,49056359,49057691,49059123,49060496,49061923,49063349,49065009,49066710,49068370,49070026,49071652,49073253,49074897,49076611,49078395,49080092,49081743,49083416,49085221,49086987,49088680,49090416,49092065,49093859,49095477,49097162,49098838,49099638,49101225,49102874,49104583,49106457,49108347,49110261,49112181,49114051,49115950,49117858,49119759,49121662,49123618,49125328,49126913,49128419,49129936,49131382,49132953,49134643,49136603,49138508,49140342,49141991,49143558,49145119,49146757,49148578,49150476,49152371,49153986,49155681,49157305,49158937,49160562,49162249,49163952,49165696,49167160,49168584,49170235,49171907,49173616,49175345,49177088,49178288,49179778,49181035,49182405,49183889,49185564,49187306,49189052,49190429,49191769,49193330,49194752,49196154,49197497,49198868,49200215,49201624,49203021,49204474,49205965,49207218,49208610,49209964,49211302,49212651,49213938,49215260,49216861,49218216,49219804,49221311,49222998,49224726,49226181,49227317,49228788,49230132,49231451,49232912,49234492,49236126,49237616,49238964,49240110,49241745,49243209,49244581,49245946,49247144,49248421,49249650,49251109,49252753,49254253,49255703,49257374,49259095,49260847,49262513,49264320,49265599,49267264,49268571,49270247,49271812,49273511,49275177,49276666,49277856,49279400,49280994,49282243,49283728,49285353,49286989,49288481,49289917,49291182,49292830,49294121,49295609,49297066,49298758,49300501,49302191,49303728,49305162,49306837,49308319,49309809,49311227,49312769,49314263,49315739,49317206,49318931,49320733,49322459,49324211,49326010,49326594,49326677,49327665,49328349,49329076,49329683,49330234,49330709,49331526,49332084,49332688,49333864,49334748,49335636,49337076,49338495,49339877,49341305,49342723,49344227,49345861,49347584,49349192,49350829,49352389,49353966,49355799,49357447,49358636,49359742,49360940,49362155,49363436,49364710,49366015,49367285,49368726,49370222,49371816,49373383,49374880,49376421,49378081,49379709,49381090,49382431,49383828,49384863,49384888,49384918,49384943,49385240,49386007,49387120,49388000,49389332,49390955,49392612,49394227,49395832,49397139,49398705,49400248,49401871,49403410,49405044,49406943,49408873,49410797,49412726,49414621,49416511,49417985,49419463,49420939,49422348,49423246,49424186,49425434,49426742,49428167,49429614,49431086,49432579,49433991,49435494,49437236,49439010,49440532,49442145,49443643,49445211,49446784,49448286,49449832,49451492,49453543,49455599,49457641,49459668,49461556,49463464,49465487,49467484,49469225,49471089,49472954,49474889,49476880,49478916,49480915,49482947,49484938,49486968,49488951,49490969,49493016,49495045,49496759,49498552,49500557,49502552,49504546,49506517,49508187,49509806,49511047,49512274,49513470,49514802,49516780,49518741,49520433,49522171,49524058,49525943,49527701,49529498,49531271,49533083,49535107,49537128,49539124,49541128,49543165,49545150,49547176,49549143,49550658,49552198,49553740,49555267,49556810,49558352,49559897,49561443,49562813,49564221,49565532,49566870,49568147,49569453,49570802,49572252,49574264,49576274,49578263,49580238,49582246,49584211,49586142,49588062,49590072,49591960,49593669,49595371,49597009,49598731,49600363,49601855,49602118,49602480,49603692,49605057,49606400,49607448,49608450,49609423,49610518,49611661,49613286,49615013,49616581,49618285,49619997,49621696,49623203,49624751,49626315,49627923,49629455,49631040,49632535,49634013,49635308,49636730,49637806,49638927,49640206,49641576,49642811,49644126,49645572,49647024,49648602,49650227,49651678,49653182,49654545,49655910,49656820,49657841,49659436,49660987,49661836,49662941,49664220,49665600,49667066,49668520,49669992,49671507,49672682,49673951,49675502,49677137,49679079,49680952,49682258,49683623,49684833,49686211,49687796,49689397,49691004,49692656,49694228,49695850,49697331,49698894,49700402,49701875,49703106,49704487,49706061,49707628,49708982,49710368,49711731,49713133,49714488,49715855,49716388,49717042,49717482,49718075,49719508,49721055,49722619,49724193,49725581,49727059,49728589,49730081,49731511,49732875,49734034,49735162,49736451,49737816,49739344,49740785,49741871,49742783,49743680,49744837,49746606,49748491,49750281,49752061,49753597,49755073,49756036,49757122,49758684,49760250,49761807,49763370,49764962,49766557,49768122,49769783,49771586,49773410,49775173,49776981,49778799,49780659,49782464,49784267,49785650,49787092,49788462,49789864,49791287,49792748,49794420,49796154,49798098,49800073,49801932,49803878,49805822,49807797,49809656,49811631,49813516,49815393,49816949,49818338,49819037,49819723,49820555,49821679,49822998,49824589,49826262,49827999,49829469,49831023,49832424,49833787,49834969,49835963,49836573,49837372,49838197,49839081,49839690,49840437,49841929,49843260,49843753,49844288,49844796,49845572,49847320,49849098,49850189,49851338,49852376,49853498,49854869,49856224,49857368,49858382,49859285,49860286,49861735,49863190,49864639,49866079,49867498,49869011,49870707,49872448,49874108,49875850,49877716,49879599,49881152,49882611,49883597,49884656,49885796,49887009,49887938,49888927,49889801,49890823,49891822,49892918,49894143,49895339,49895810,49896327,49896933,49897575,49898063,49898591,49899206,49899851,49900334,49900859,49901488,49902164,49902661,49903212,49903821,49904476,49904909,49905369,49905925,49906772,49908663,49910437,49911481,49912593,49913625,49914733,49915764,49916883,49917968,49919201,49920994,49922677,49924357,49926068,49927698,49929360,49931091,49932696,49933843,49935074,49936739,49938392,49940072,49941828,49943724,49945369,49945559,49945821,49946112,49946467,49946652,49946890,49947168,49947555,49947606,49947872,49947897,49948058,49948211,49948427,49948667,49948913,49949159,49949650,49951081,49952598,49954183,49955738,49956813,49957915,49958998,49960167,49961380,49962631,49964119,49965631,49967099,49968672,49970531,49972402,49974087,49975790,49977223,49978776,49980396,49982056,49983426,49984944,49986917,49988891,49990917,49992954,49994901,49996859,49998838,50000804,50002767,50004738,50006760,50008654,50009923,50011201,50012749,50014387,50016007,50017169,50018833,50020281,50021779,50023267,50024779,50026216,50027677,50029144,50030671,50032207,50033713,50035187,50036182,50037467,50038717,50040149,50041300,50042553,50043875,50044946,50046009,50047067,50049111,50050663,50051304,50052848,50054896,50055891,50056602,50058387,50060290,50061160,50062166,50064214,50065738,50066380,50067929,50069861,50071876,50073924,50075972,50078011,50079921,50081903,50083951,50085999,50088047,50089913,50091888,50093744,50095774,50097720,50099700,50101752,50103617,50105595,50107584,50109530,50111479,50113398,50115349,50117256,50119236,50121191,50123174,50125188,50127096,50129077,50130953,50132938,50134803,50136797,50138662,50140640,50142688,50144736,50146602,50148580,50150628,50152676,50154542,50156522,50158508,50160458,50162455,50164309,50166286,50168338,50170371,50172391,50174306,50176293,50178350,50180404,50182367,50184350,50186295,50188281,50190223,50192199,50194215,50196263,50198311,50200353,50202260,50204240,50206288,50208336,50210384,50212262,50214292,50216294,50218240,50220229,50222103,50224078,50226069,50228046,50230062,50231928,50233907,50235783,50237761,50239805,50241842,50243739,50245754,50247802,50249846,50251792,50253771,50255820,50257868,50259874,50261807,50263803,50265851,50267891,50269789,50271769,50273823,50275871,50277735,50279716,50281764,50283812,50285726,50287734,50289630,50291639,50293564,50295550,50297498,50299485,50301414,50303400,50305307,50307288,50309188,50311197,50313048,50314984,50316890,50318763,50320750,50322785,50324833,50326740,50328750,50330795,50332843,50334710,50336690,50338738,50340792,50342662,50344636,50346684,50348740,50350606,50352586,50354635,50356500,50358514,50360562,50362432,50364447,50366425,50368402,50370380,50372287,50374226,50376141,50378083,50379986,50381909,50383844,50385756,50387713,50389682,50391579,50393558,50395427,50397457,50399322,50401280,50403164,50405138,50407195,50409208,50411141,50413140,50415188,50417124,50419105,50421032,50423023,50424910,50426918,50428802,50430833,50432704,50434734,50436740,50438686,50440648,50442546,50444497,50446392,50448344,50450238,50452198,50454085,50456061,50457931,50459902,50461904,50463923,50465819,50467824,50469855,50471867,50473871,50475803,50477771,50479677,50481648,50483530,50485506,50487376,50489406,50491361,50493344,50495394,50497311,50499319,50501314,50503246,50505245,50507109,50509086,50511134,50513190,50515053,50517051,50519099,50521147,50523010,50524983,50527031,50529079,50530950,50532978,50535026,50537074,50539063,50541009,50543002,50545050,50547106,50549050,50551031,50553081,50555129,50557177,50559052,50561033,50563081,50565129,50567041,50569048,50571103,50573159,50575144,50577103,50578904,50580885,50582881,50584816,50586788,50588778,50590743,50592675,50594641,50596556,50598448,50600423,50602373,50604306,50606303,50608310,50610247,50612242,50614258,50616273,50618303,50620204,50622186,50624221,50626229,50628259,50630125,50632100,50634085,50636061,50638071,50639934,50641914,50643789,50645765,50647681,50649690,50651732,50653739,50655659,50657646,50659681,50661545,50663542,50665590,50667450,50669446,50671494,50673355,50675332,50677195,50679173,50681038,50683025,50684890,50686868,50688733,50690710,50692580,50694556,50696427,50698403,50700268,50702247,50704295,50706350,50708398,50710260,50712232,50714280,50716328,50718359,50720265,50722246,50724121,50726152,50728194,50730109,50732045,50733962,50735894,50737828,50739823,50741686,50743664,50745608,50747588,50749629,50751606,50753583,50755590,50757571,50759541,50761474,50763420,50765361,50767292,50769293,50771341,50773389,50775422,50777341,50779329,50781377,50783425,50785460,50787365,50789346,50791394,50793442,50795467,50797399,50799400,50801448,50803496,50805502,50807448,50809423,50811300,50813240,50815140,50817080,50818999,50820985,50822994,50824926,50826933,50828908,50830895,50832922,50834785,50836763,50838731,50840718,50842744,50844792,50846840,50848704,50850701,50852749,50854797,50856826,50858747,50860740,50862788,50864836,50866799,50868773,50870823,50872871,50874919,50876796,50878772,50880647,50882662,50884528,50886542,50888408,50890388,50892250,50894227,50896210,50898174,50900170,50902039,50904031,50906084,50907960,50909991,50912039,50913996,50915977,50917861,50919866,50921744,50923774,50925639,50927567,50929476,50931391,50933328,50935208,50937180,50939037,50941018,50943073,50945124,50946985,50949017,50951073,50953106,50954970,50957000,50959019,50961018,50962934,50964902,50966912,50968780,50970809,50972794,50974771,50976756,50978652,50980628,50982654,50984673,50986544,50988574,50990619,50992629,50994618,50996551,50998543,51000406,51002383,51004298,51006305,51008285,51010262,51012139,51014166,51016165,51018146,51020007,51021986,51024034,51025904,51027875,51029923,51031856,51033858,51035915,51037931,51039861,51041856,51043904,51045929,51047844,51049788,51051695,51053586,51055563,51057543,51059454,51061440,51063304,51065259,51067151,51069087,51070994,51072933,51074852,51076774,51078713,51080538,51082553,51084417,51086348,51088263,51090173,51092119,51093999,51095972,51098024,51099999,51101976,51103991,51105988,51107945,51109941,51111923,51113909,51115931,51117883,51119862,51121881,51123788,51125769,51127642,51129618,51131613,51133559,51135552,51137417,51139389,51141437,51143485,51145533,51147407,51149439,51151487,51153535,51155591,51157571,51159465,51161476,51163392,51165289,51167338,51169222,51171067,51173118,51174997,51176840,51178855,51180803,51182674,51184697,51186552,51188589,51190458,51192495,51194351,51196331,51198195,51200042,51201908,51203773,51205620,51207486,51209299,51211206,51213059,51215069,51216929,51218796,51220819,51222669,51224521,51226543,51228430,51230451,51232309,51234224,51236132,51238023,51240010,51241948,51243911,51245833,51247800,51249654,51251689,51253542,51255426,51257272,51259140,51260990,51262963,51264869,51266737,51268681,51270495,51272455,51274245,51276169,51277929,51279807,51281670,51283526,51285389,51287244,51289124,51290970,51293005,51294860,51296897,51298813,51300663,51302548,51304398,51306412,51308268,51310303,51312078,51314041,51315916,51317951,51319802,51321727,51323606,51325470,51327312,51329350,51331205,51332374,51333524,51334919,51336512,51337795,51339316,51341005,51342244,51343231,51344462,51345617,51346749,51347893,51349036,51350245,51351649,51353452,51355402,51357294,51359260,51361137,51363008,51364861,51366806,51368711,51370622,51372561,51374430,51376409,51378268,51380299,51382160,51384138,51386195,51388243,51390107,51392050,51393950,51395930,51397819,51399851,51401717,51403644,51404779,51405934,51407166,51408228,51409963,51411990,51413861,51415783,51417713,51419592,51421573,51423426,51425454,51427319,51429248,51431163,51433063,51435029,51436831,51438861,51440727,51442673,51444571,51446485,51448417,51450296,51452286,51454138,51456115,51458163,51460211,51462074,51464050,51466098,51468145,51470021,51471998,51474046,51476087,51477988,51479968,51482016,51484028,51485966,51487988,51490036,51491907,51493935,51495983,51498023,51499915,51501892,51503940,51505939,51507904,51509897,51511953,51513823,51515818,51517681,51519658,51521533,51523509,51524897,51526222,51527931,51529280,51530445,51531970,51533294],"sizes":[1641,1482,1475,1484,1493,1482,1476,1483,1480,1476,1474,1476,1477,1481,1474,1492,1461,1478,1476,1484,1477,1495,1482,1478,1487,1485,1132,559,566,703,371,598,309,533,510,466,450,594,499,405,220,306,252,250,263,273,220,316,322,245,151,138,229,140,97,90,366,496,355,269,321,244,531,451,421,238,329,446,499,446,570,189,386,548,616,323,146,292,456,320,273,304,350,256,299,310,82,85,106,268,258,234,525,515,410,300,106,344,376,294,359,475,379,291,394,490,516,448,453,2052,2020,2048,2056,2031,2028,2054,2053,1822,1720,1724,1737,1698,1729,1722,1723,1721,1700,1707,1719,1719,1698,1698,1704,1677,1700,1737,1635,1671,1675,1694,1732,1719,1733,1730,1740,1724,1652,1737,1717,1737,1745,1726,1723,1705,1789,2048,2048,2048,2048,2048,1999,1734,1701,1686,1718,1748,1831,1773,1861,1650,1751,1787,1686,1750,1703,1691,1673,1592,1704,1678,1717,1676,1621,1695,1745,1690,1679,1726,1727,1771,1620,1657,1649,1735,1758,1735,1712,1734,1637,1756,1692,1713,722,447,567,641,1076,825,881,857,977,1021,1075,1443,1824,1870,1837,1874,1859,1871,1557,1478,1501,1455,1447,1442,1442,1442,1431,1441,1436,1476,1470,1463,1448,1471,1456,1475,1471,1466,1483,1466,1474,1423,1452,1473,1474,1471,1460,1479,1441,1455,1454,1469,1466,1469,1475,1478,1461,1461,1452,1470,1467,1446,1449,1456,1454,1446,1457,1481,1462,1474,1447,1474,1463,1447,1469,1461,1471,1474,1478,1487,1464,1478,1475,1459,1464,1463,1442,1438,1455,1459,1469,1467,959,594,456,539,362,331,356,387,473,526,529,428,547,527,398,459,458,474,446,448,478,431,437,583,596,483,440,610,558,356,519,637,456,593,633,466,465,350,424,384,429,476,392,421,472,389,423,308,201,251,538,493,395,363,603,441,460,554,566,621,575,497,468,547,472,503,478,471,495,397,534,375,344,330,510,483,451,511,589,631,473,493,544,371,505,515,535,338,587,598,572,600,586,581,600,491,512,460,530,461,444,444,475,564,451,536,546,497,598,454,546,535,590,613,487,491,453,459,465,379,428,343,497,451,496,469,437,406,471,478,552,613,565,487,368,419,349,564,503,623,343,209,168,106,205,365,453,266,270,307,472,409,414,414,387,431,441,348,449,548,589,400,523,517,446,413,491,509,504,536,616,599,665,624,616,579,537,487,558,572,571,417,582,540,516,518,544,523,414,517,551,499,452,500,521,515,477,580,562,412,409,442,515,632,522,485,475,466,458,318,490,234,365,449,263,346,397,343,388,505,407,340,491,509,518,513,493,535,466,456,505,459,465,469,450,428,424,409,439,457,457,455,427,423,461,309,357,432,441,380,366,401,507,403,417,434,377,448,334,439,517,459,463,525,1691,1945,2025,1987,1999,1999,1922,1982,2050,2046,2054,2042,2017,2027,2026,2030,2055,2055,2048,1879,1726,1723,1702,1722,1714,1714,1732,1721,1705,1737,1723,1693,1709,1700,1713,1720,1704,1696,1685,1705,1723,1691,1675,1699,1667,1685,1679,1697,1687,1695,1707,1699,1682,1693,1690,1688,1678,1701,1728,1704,1731,1727,1707,1666,1680,1700,1738,1726,1717,1694,1653,1680,1664,1697,1687,1695,1683,1684,1695,1729,1752,1725,1665,1660,1698,1713,1717,1702,1705,1700,1695,1708,1689,1697,1714,1697,1710,1701,1689,1696,1722,1700,1701,1693,1698,1694,1720,1680,1710,1740,1743,1749,1749,1763,1733,1767,1736,1671,1674,1661,1689,1704,1681,1683,1673,1675,1730,1740,1732,1735,1688,1670,1667,1689,1838,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1719,1752,1706,1749,1806,1688,1717,1754,1638,1781,1744,1662,1737,1747,1740,1696,1589,1670,1690,1621,1627,1684,1553,1570,1583,1636,1608,1669,1623,1637,1639,1622,1653,1727,1727,1695,1777,1717,1748,1649,1808,1886,1843,1746,1707,1651,1644,1735,1739,1714,1649,1774,1850,1873,1659,1671,1643,1517,1521,1533,1479,1492,1540,1608,1660,1666,1554,1520,1633,1667,1634,1683,1684,1712,1578,1527,1660,1532,1769,1844,1796,1794,1792,1779,1779,1836,1795,1686,1654,1678,1699,1674,1648,1712,1772,1771,1750,1726,1613,1679,1627,482,476,555,515,584,701,648,610,587,469,338,618,666,619,759,604,517,713,640,620,545,438,509,547,573,563,132,141,435,526,279,240,130,748,646,545,308,456,558,388,597,358,422,144,116,148,147,210,369,642,745,675,617,551,512,713,822,780,975,1052,1028,871,789,755,849,298,314,436,342,361,134,134,154,463,406,250,245,225,204,311,406,252,752,499,278,495,419,237,203,224,412,415,266,342,268,310,257,621,480,471,657,520,508,642,813,917,776,748,861,904,746,681,728,754,674,706,809,690,636,505,517,494,529,532,501,542,621,830,809,821,799,792,784,579,685,966,807,894,542,783,1006,937,804,933,966,856,929,869,861,812,720,691,930,800,749,786,773,651,767,850,379,175,125,114,253,968,996,981,1007,1072,915,963,958,942,917,770,791,675,555,512,849,841,767,741,844,707,565,472,558,834,1001,1039,1080,1055,1097,976,1095,1119,1142,1093,887,721,503,421,383,366,352,341,595,844,947,1015,947,826,735,525,668,780,890,779,734,811,804,907,934,983,996,789,835,1042,1065,1104,1183,1124,1019,1136,1081,840,870,1059,1065,1195,1247,1052,975,1179,1188,1103,981,1038,1016,822,1044,1256,1184,1786,1606,1845,1874,1834,1876,1891,1839,1828,1871,1937,1981,1929,1892,1886,1951,1956,1857,1698,1593,1640,1488,1486,1504,1493,1517,1507,1495,1500,1503,1524,1480,1497,1510,1480,1488,1494,1475,1489,1510,1460,1491,1494,1491,1519,1525,1489,1495,1504,1452,1470,1498,1504,1504,1510,1500,1517,1503,1143,532,511,581,441,546,500,534,566,510,573,535,636,600,602,622,411,618,624,504,519,589,532,547,566,708,613,517,493,450,543,433,564,591,610,588,623,630,577,482,494,420,453,486,559,562,576,535,568,533,473,354,594,363,198,342,235,488,470,410,616,306,609,535,421,566,488,453,402,436,543,515,510,456,321,373,506,672,461,648,598,454,423,497,410,406,240,45,162,324,328,289,423,258,251,355,385,284,322,445,315,405,316,590,551,573,526,420,343,351,489,355,575,540,532,527,491,558,398,568,472,334,425,487,467,502,506,588,533,455,699,2022,2018,2039,2017,1993,2024,1986,2054,2045,2042,1962,1698,1681,1725,1690,1645,1692,1717,1696,1672,1706,1708,1719,1727,1715,1726,1710,1711,1716,1727,1704,1721,1703,1696,1703,1692,1714,1708,1713,1709,1687,1701,1670,1701,1712,1718,1706,1725,1707,1739,1713,1726,1730,1729,1719,1721,1711,1730,1723,1730,1728,1641,1680,1713,1712,1715,1703,1988,2048,2048,2048,2048,2048,2037,1643,1683,1653,1709,1768,1676,1672,1797,1734,1741,1721,1787,1792,1800,1829,1764,1763,1780,1732,1685,1744,1704,1708,1776,1701,1772,1709,1685,1729,1754,1770,1712,1787,1785,1779,1773,1783,1781,1756,1759,1759,1803,1612,1716,1763,1649,1115,756,832,895,897,915,730,944,1179,1441,1264,937,1111,1169,1276,1105,1123,1085,937,913,1066,1133,904,1093,1073,1120,1934,1987,2007,2009,1993,2007,1992,1596,1596,1507,1461,1459,1438,1499,1477,1461,1015,621,398,461,573,487,604,613,583,557,550,501,496,426,484,125,570,338,589,448,559,540,1630,2017,1752,1709,1711,1708,1701,1720,1709,1714,1709,1777,2049,1791,1787,1897,1818,1730,1738,1499,634,587,376,25,25,25,1930,1013,1419,1444,1408,1383,1509,1496,1459,1454,1465,1458,1441,1445,1481,1439,1470,1472,1472,1461,1462,1489,748,349,426,356,333,493,414,503,453,265,417,315,499,339,652,561,635,551,535,582,362,494,509,530,505,483,504,560,442,542,451,442,512,420,491,497,484,508,357,503,473,394,497,440,332,410,275,286,442,373,545,2056,1952,2004,1971,1727,1718,1686,1724,1721,1685,1658,1687,1690,1654,1684,1669,1647,1670,1672,1697,1711,1726,1678,1666,1687,1673,2018,2048,1968,1853,1810,1716,1799,1705,1617,1649,1728,1786,1652,1715,1707,1782,1820,1754,1574,1673,1377,751,561,628,607,773,697,884,945,1051,1388,1268,1289,1209,1434,1558,890,1010,1132,759,631,1181,1539,1814,1757,1745,1714,1601,1573,1485,1487,1475,1479,1467,1460,1489,1495,1481,1483,1485,1492,1478,1457,1483,1442,1477,1471,1481,1470,1476,1473,1480,1482,1480,1504,1482,1487,1468,911,393,621,581,461,538,437,473,551,367,194,425,401,502,377,557,439,209,472,650,571,673,497,534,549,389,521,454,508,628,443,512,434,397,454,416,639,460,398,153,197,312,427,560,378,545,499,606,537,538,522,249,431,446,131,371,296,329,354,471,424,380,519,518,473,544,531,574,546,543,526,521,291,289,507,563,491,556,552,479,463,481,446,446,464,443,570,373,471,431,476,434,488,483,405,470,441,389,1850,2043,2043,2002,2054,2052,2040,1905,1686,1684,1713,1709,1728,1677,1717,1729,1723,1699,1695,1703,1716,1708,1715,1722,1703,1705,1665,1720,1652,1685,1701,1653,1703,1660,1700,1699,1692,1679,1659,1695,1694,1693,1698,1717,1715,1680,1646,1725,1683,1911,2048,2048,2048,2015,1634,1548,1686,1723,1802,1784,1814,1921,1690,1773,1865,1764,1717,1875,1715,1805,1542,1754,1744,1647,1784,1723,1674,1703,1719,1689,1800,1743,1640,1705,1703,752,820,895,809,774,605,551,528,460,206,410,534,794,617,520,353,454,775,676,679,737,717,575,629,478,436,492,660,830,762,534,747,773,759,686,725,809,681,729,594,516,180,342,322,283,390,234,180,286,659,638,615,860,659,640,630,631,774,820,621,627,530,698,613,633,929,1316,1490,1592,1824,1694,1682,1715,1719,1705,1729,1699,1554,1219,1438,1445,1469,1473,1476,1470,1494,1471,1487,1488,1487,1485,1478,1489,1480,1457,1473,1473,1486,1476,1505,1480,980,191,284,316,397,454,386,206,285,232,303,228,409,650,394,560,430,546,394,589,458,165,202,465,586,545,408,499,591,502,459,607,441,639,394,248,56,353,497,406,466,177,199,416,522,397,202,194,193,195,188,195,203,198,189,194,191,514,276,364,176,257,310,245,507,460,510,409,474,1578,1916,1910,1886,1908,2037,1965,1655,1676,1704,1672,1665,1701,1737,1653,1663,1701,1689,1681,1654,1670,1694,1666,1646,1679,1689,1689,1650,1658,1643,1648,1663,1644,1663,1664,1661,1681,1675,1667,1996,2048,2048,1931,1678,1745,1613,1690,1865,1680,1670,1754,1698,1599,1804,1601,1614,1600,1706,1658,1629,1611,1606,1628,1657,1717,1642,1180,832,740,602,188,486,829,929,880,1025,907,818,988,1014,915,844,561,702,688,609,1716,1524,1795,1814,1833,1743,1807,1742,1560,1542,1476,1486,1489,1484,1459,1498,1456,1491,1470,1485,1494,1499,865,551,612,548,492,381,434,285,379,551,257,559,536,560,422,569,544,589,562,512,541,351,216,478,448,484,524,600,548,558,341,142,117,387,311,1145,2004,2050,2032,1697,1683,1714,1703,1700,1661,1695,1684,1730,1678,1707,1712,1706,1686,1700,1753,2048,1979,1792,1808,1839,1774,1689,1751,1769,1754,1822,1814,1804,1752,859,895,742,913,1077,1087,877,1024,762,1464,1259,1581,1682,1663,1563,1521,1462,1567,1474,1481,1463,1491,1478,1480,1469,1488,1466,1483,1243,521,616,536,530,605,497,603,258,506,389,480,309,473,325,155,262,573,179,478,258,468,508,284,438,443,611,506,602,484,436,222,285,508,596,509,1589,1921,2024,1883,1669,1696,1673,1650,1652,1650,1660,1696,1670,1653,1667,1695,1733,1703,1733,2000,2039,1675,1696,1675,1679,1648,1669,1627,1729,1701,1871,1896,1736,773,833,766,696,660,632,919,947,581,1556,1562,1503,1585,1644,1515,1490,1466,1475,1480,1486,1459,1489,1484,1482,1478,1048,437,258,315,363,354,283,271,390,475,499,369,479,388,244,335,353,401,302,339,244,170,300,267,364,349,446,568,413,305,396,391,274,339,238,243,333,184,421,1397,2048,2046,2048,1716,1719,1704,1729,1735,1717,1732,1738,1733,1723,1737,1727,1672,1731,1713,1721,1705,1934,2048,2012,1815,1815,1779,1851,1774,1825,1827,1787,1840,1853,1816,1767,1670,1772,1855,1824,1800,952,955,1346,1820,1849,1747,1504,1406,1463,1466,1456,1479,1481,1462,1473,1505,1489,1467,1481,1490,1487,1476,1486,1494,1483,1487,1475,1503,1458,1480,1469,1324,180,277,210,253,489,481,548,293,364,345,317,476,369,318,369,284,413,458,239,295,357,445,331,429,396,293,197,224,284,414,362,293,341,395,444,361,292,491,258,364,278,424,476,183,189,79,256,226,552,199,399,352,303,355,466,382,553,385,67,62,466,315,385,339,463,433,355,350,332,398,372,453,521,376,389,1642,1916,1940,1947,1917,1942,1966,1708,1688,1689,1692,1697,1698,1707,1693,1701,1689,1690,1721,1704,1714,1697,1706,1705,1686,1719,1702,1705,1712,1702,1703,1720,1707,1697,1714,1699,1710,1696,1711,1675,1838,2048,2048,2048,1848,1573,1693,1720,1730,1687,1709,1713,1659,1654,1732,1667,1741,1736,1704,1790,1765,1758,1649,1823,1714,1785,1639,1698,1673,1696,1643,1702,1698,885,797,866,870,429,25,25,25,25,25,25,25,1996,1587,1711,1761,1785,1688,1833,1776,1467,1355,1463,1649,1564,1512,1521,1505,1507,1523,1521,1507,1464,1488,1489,1464,1493,1477,1475,1457,1436,1489,1481,1481,1480,1464,1468,1489,1461,1471,1485,1494,1280,659,618,644,597,607,623,691,616,707,680,655,705,683,631,632,586,719,708,619,723,659,606,706,713,655,595,523,562,594,666,584,548,608,474,614,539,644,585,527,487,532,547,589,497,537,606,636,566,654,543,555,668,602,666,553,462,578,479,446,418,417,480,569,437,463,476,606,354,542,609,442,488,424,342,494,561,623,551,532,454,569,579,588,316,494,513,530,594,474,176,375,470,474,464,410,388,396,602,577,564,535,441,2028,2044,2024,2019,1948,2018,2051,1908,1711,1694,1702,1714,1677,1670,1717,1753,1669,1681,1696,1745,1728,1654,1629,1711,1737,1722,1713,1706,1714,1694,1692,1694,1705,1749,1734,1703,1722,1740,1725,1695,1740,1721,1687,1694,1704,1688,1713,1722,1737,1684,1693,1697,2041,2048,2048,2048,2048,1984,1722,1704,1798,1614,1654,1784,1797,1616,1734,1750,1838,1689,1592,1777,1813,1739,1699,1744,1679,1682,1713,1775,1807,1752,1793,1711,1848,1688,1779,1723,1701,1718,1879,1793,1803,1787,1711,1749,1048,617,780,630,571,649,617,606,532,481,1390,1499,1484,1463,1581,1575,1638,1570,1536,1134,1155,1523,1474,1585,1397,1608,1568,1477,1596,1424,1403,1326,1411,1390,1351,913,1022,1280,877,747,1222,1360,1430,1619,1608,1729,1411,1835,1642,1414,1602,1693,1699,1692,1694,1643,1677,1637,1673,1566,1575,1558,1593,1438,1480,1479,1454,1478,1463,1462,1496,1485,1452,1475,1485,1443,1440,1459,1453,1454,1481,1465,1482,1496,1469,1466,1463,1472,1464,1457,1461,1470,1477,1472,1465,1473,1456,1467,1491,1462,1495,1451,1472,1497,1455,1443,1504,1471,1489,1488,1465,1487,539,459,539,506,461,379,386,429,420,482,481,359,452,493,488,402,351,564,458,261,274,343,281,417,316,366,293,259,515,466,470,485,470,403,290,458,286,407,530,400,371,371,353,570,517,482,469,421,341,206,338,533,312,306,407,506,481,478,339,222,428,534,425,523,431,403,256,180,472,487,426,456,411,428,385,369,413,453,478,516,491,411,346,306,467,335,431,261,424,229,332,368,311,194,317,474,318,277,309,181,386,306,364,352,424,255,345,411,359,335,423,401,490,529,510,460,281,349,193,362,464,310,484,199,463,442,453,314,421,268,423,331,287,421,412,474,387,240,162,501,500,475,436,362,493,807,2006,1996,1962,1977,1956,1954,2024,1941,1976,1925,2007,2048,1823,1694,1642,1660,1654,1693,1642,1689,1698,1658,1655,1685,1694,1672,1705,1660,1673,1706,1684,1669,1674,1691,1686,1713,1681,1663,1691,1692,1695,1681,1689,1675,1674,1676,1706,1704,1702,1675,1677,1686,1681,1675,1710,1700,1685,1705,1721,1668,1645,1683,1689,1724,1691,1674,1683,1677,1678,1683,1684,1671,1690,1681,1684,1749,2048,2048,2048,2048,2048,2048,1650,1696,1619,1660,1602,1697,1680,1649,1693,1722,1739,1624,1803,1653,1717,1757,1745,1692,1755,1787,1749,1716,1700,1765,1768,1743,1684,1708,1753,1701,1696,1858,1685,1672,1801,1799,1804,1701,1646,1722,1793,1724,1737,1551,980,840,791,832,787,751,912,658,899,855,697,651,413,464,329,417,351,416,236,555,486,533,447,338,265,576,450,499,498,610,677,343,216,471,463,394,773,584,502,330,469,329,453,151,351,436,419,512,407,362,482,799,1621,1629,1446,687,936,1626,1627,1639,1683,1681,1714,1738,1810,1723,1763,1743,1747,1692,1733,1689,1589,1543,1549,1497,1466,1467,1492,1475,1500,1484,1484,1494,1512,1498,1514,1490,1468,1469,627,421,193,417,599,452,75,75,258,349,609,595,447,500,433,582,477,439,541,602,475,391,417,506,554,356,552,516,334,480,386,406,429,341,302,220,355,327,514,494,552,444,593,267,1526,2012,1961,1955,1875,1702,1721,1739,1722,1727,1745,1727,1737,1728,1731,1724,1710,1738,1721,1713,1698,1715,1732,1701,1707,2015,2048,1981,1723,1739,1779,1752,1788,1703,1718,1751,1747,1732,1743,1778,1741,1763,1789,1751,1548,809,934,816,923,399,25,25,25,25,25,25,25,1606,1655,1551,1690,1695,1475,1336,1082,1195,1605,1526,1560,1487,1486,1509,1498,1483,1502,1493,1498,1493,1485,1468,1450,1460,1477,1434,1509,687,657,466,593,490,423,463,453,470,531,517,447,549,558,436,448,196,364,249,351,400,575,261,545,492,523,682,497,443,449,384,502,602,390,419,523,517,527,564,473,583,706,703,530,403,490,245,1485,2003,2053,2019,2022,1717,1715,1723,1709,1711,1664,1658,1696,1726,1726,1709,1670,1699,1716,1730,1704,1709,1724,1692,1665,1812,2048,2048,1936,1799,1784,1812,1848,1686,1755,1850,1792,1844,1847,1810,1854,1838,1761,1871,1790,1758,1737,776,637,975,812,678,725,779,526,814,848,753,754,869,872,357,688,955,1468,1110,843,1553,1470,1527,1626,1599,1615,1572,1418,1376,1479,1424,1365,1455,1421,1471,1477,1448,1474,1480,1497,1479,1469,1498,1498,1487,1493,1484,1483,1486,1495,1487,1468,1498,1463,1490,1499,1477,1499,1495,1522,1513,1471,1478,1502,1489,1486,1479,1453,1474,1493,1341,489,524,599,469,468,546,268,565,553,583,190,559,540,664,661,576,558,561,583,558,521,524,492,379,202,492,554,511,571,531,450,514,543,566,648,570,398,513,520,619,503,575,492,494,476,597,552,572,549,606,556,509,368,453,528,450,480,617,507,458,555,459,455,483,241,317,524,446,503,286,463,526,527,540,464,403,74,91,185,124,182,275,203,394,341,437,557,325,461,221,271,158,133,357,466,680,486,492,527,555,509,548,526,587,481,480,265,546,546,428,496,466,491,500,415,483,438,513,548,603,526,491,428,505,404,422,524,447,395,520,450,186,370,510,339,598,2007,1985,2020,2045,1987,2025,1964,2048,2048,2049,1986,1651,1633,1623,1646,1728,1715,1693,1686,1658,1671,1699,1704,1678,1710,1735,1729,1715,1726,1653,1694,1741,1698,1727,1686,1691,1745,1744,1735,1745,1697,1692,1643,1700,1747,1749,1737,1739,1735,1736,1719,1736,1725,1737,1731,1738,1686,1656,1684,1705,1676,1707,1727,1742,1736,1722,1725,1656,1676,1716,1720,2009,2048,2048,2048,2048,2048,2048,1929,1499,1430,1615,1716,1734,1690,1595,1656,1647,1734,1746,1811,1758,1716,1626,1697,1713,1725,1741,1582,1853,1876,1776,1748,1730,1585,1798,1817,1768,1758,1787,1769,1749,1824,1760,1742,1773,1726,1809,1717,1632,1618,1654,1736,1724,1791,1740,1744,1744,1507,1642,1799,1349,571,646,684,607,506,423,663,710,475,613,352,1408,1397,1398,1657,1209,1322,1480,1492,1682,1182,1138,1337,1405,1237,1372,1250,1150,1319,1660,715,1351,1396,1460,897,1469,1628,808,1196,1213,1431,1367,1385,1441,1570,809,898,565,1253,1708,1582,887,991,1435,1395,1318,1317,1369,1322,1607,1641,649,968,430,850,1252,1173,819,856,1535,1629,1710,1770,1801,1837,1783,1748,1734,1869,1805,1413,1436,1359,1314,1464,1436,1361,1331,1442,1509,1487,1453,1468,1458,1450,1468,1442,1477,1495,1487,1494,1497,1489,1481,1490,1484,1486,1502,1480,1453,1468,1489,1485,1477,1483,1470,1481,1433,1492,1498,1465,1458,1446,1487,1487,1461,1493,1493,1487,1488,1469,1484,1485,1475,1486,1491,1463,1462,1464,1505,1475,1470,1482,1486,1466,1485,1493,1463,1507,1482,1478,1473,1493,1477,1448,1465,1469,1470,1482,1486,1487,1467,1492,1496,1487,1489,1469,1034,365,577,589,660,521,590,555,547,621,628,587,666,621,590,606,565,377,512,528,555,493,391,610,616,580,619,617,247,559,586,576,470,746,670,501,646,634,639,474,506,478,540,484,611,553,646,565,624,604,598,497,459,420,490,498,513,561,452,465,451,469,497,544,511,565,558,644,545,584,595,617,616,569,586,597,650,527,605,625,521,521,460,517,507,294,400,473,514,528,513,532,542,564,579,635,556,600,575,580,625,542,582,527,499,594,352,299,543,587,536,522,456,540,478,441,439,336,482,320,378,453,513,551,513,517,573,482,361,161,447,532,392,419,469,418,433,464,362,459,513,456,487,370,431,585,746,626,428,550,493,552,550,474,550,594,521,570,531,618,318,519,375,482,469,516,534,504,478,536,550,581,503,329,475,471,434,552,507,548,569,602,538,456,385,607,446,489,454,512,469,278,429,474,560,564,605,461,487,498,466,430,495,519,624,343,465,338,508,320,485,402,462,463,495,353,351,302,221,181,256,318,308,233,414,389,270,465,206,151,300,306,237,633,608,692,527,517,597,454,631,466,537,595,646,416,383,501,419,574,532,565,553,658,632,608,615,596,425,509,568,570,359,518,454,527,485,569,474,549,434,225,271,330,320,385,532,385,554,522,631,567,1023,2026,2011,1919,1999,1991,2030,2004,2015,2034,2015,2004,2021,1959,2040,1988,2006,2031,2028,2055,1875,1730,1711,1659,1686,1693,1703,1723,1730,1737,1720,1739,1717,1696,1698,1666,1716,1699,1690,1675,1701,1726,1715,1715,1711,1667,1726,1708,1710,1717,1712,1708,1706,1718,1680,1666,1693,1685,1667,1682,1689,1651,1672,1688,1685,1702,1698,1688,1705,1686,1685,1685,1694,1693,1675,1681,1686,1709,1683,1693,1687,1682,1676,1674,1706,1694,1680,1689,1696,1692,1709,1698,1719,1710,1698,1664,1729,1707,1677,1682,1673,1709,1710,1680,1699,1697,1651,1665,1702,1721,1690,1693,1677,1658,1654,1653,1670,1651,1670,1708,1680,1709,1691,1718,1676,1685,1701,1694,1718,1736,1708,1701,1732,1665,1710,1678,1680,1684,1659,1698,1849,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1883,1766,1663,1676,1693,1670,1750,1720,1702,1717,1763,1643,1648,1679,1709,1715,1580,1756,1763,1667,1701,1670,1812,1702,1750,1847,1695,1712,1621,1611,1625,1660,1720,1633,1628,1673,1663,1657,1655,1667,1682,1678,1631,1534,1617,1705,1741,1679,1771,1681,1702,1618,1582,1662,1642,1580,1596,1680,1747,1788,1758,1729,1747,1819,1684,1667,1674,1797,1630,1671,1657,1604,1737,1660,1690,1556,1594,1583,1508,1667,1589,1732,1669,1711,1634,1730,1608,1764,1809,1755,1812,1815,1715,1637,1631,1688,1668,1739,1017,631,617,619,355,474,119,602,706,585,672,615,512,691,739,601,678,788,633,613,605,600,627,683,765,545,615,1208,1464,1364,1281,1644,1599,1493,1465,1603,1656,1329,1070,1417,1096,1016,1146,1011,861,956,1127,554,1144,976,719,1118,913,957,918,1032,1243,1406,1679,1622,1623,1588,1407,1713,1688,1586,1608,1690,1616,1531,1617,1574,1548,1312,1444,1548,1654,1700,1636,1543,1570,1422,1464,1339,1516,1428,1297,1597,1243,1600,1609,1548,1406,1389,1326,1522,1525,1458,1417,1608,1624,1624,1588,1415,905,1305,1249,813,409,887,1176,1202,1216,1016,1057,1002,961,1060,991,869,959,798,714,649,441,161,118,615,612,558,564,407,573,1179,1528,1316,1293,1172,1262,1184,1594,1580,1587,1450,1503,1411,1413,1418,1154,671,763,1060,1284,1460,1520,1541,1148,1617,1275,1475,1389,1576,1244,662,1247,1496,1489,1390,1411,1546,1461,1621,1523,1589,1505,921,972,931,551,1256,1422,1134,398,782,542,484,838,1161,848,1092,1157,872,596,1196,929,1473,1364,627,459,1482,1426,1308,1018,1212,1291,943,809,568,637,1100,488,691,252,615,937,724,645,807,476,439,1338,1520,1547,1284,1584,1670,1578,1437,1639,1575,1288,518,777,1397,1430,1412,1141,890,1544,1141,891,1388,1298,1021,1354,769,501,576,344,396,389,457,492,366,417,345,421,465,355,328,447,549,766,832,674,510,500,402,423,710,219,376,387,288,687,866,365,813,853,613,355,604,603,406,392,368,415,363,816,1573,1522,1583,1616,1639,1622,1353,580,599,219,211,243,462,1162,1598,1879,1916,1447,914,1625,1761,1687,1638,1738,1743,1746,1769,1816,1752,1812,1739,1794,1820,1802,1812,1831,1809,1798,1817,1850,1790,1734,1739,1577,1421,1492,1462,1483,1478,1474,1431,1478,1496,1476,1439,1482,1469,1470,435,518,433,375,463,473,494,358,500,379,435,550,395,402,278,308,346,343,315,284,268,554,432,334,585,434,499,459,487,388,526,345,523,503,490,507,441,452,357,347,615,1973,1959,1908,1725,1664,1670,1672,1682,1672,1668,1654,1665,1664,1664,1695,1684,1688,1695,1675,1681,1906,2048,1821,1669,1627,1680,1722,1678,1711,1708,1746,1746,1820,1587,1590,1186,422,379,548,112,930,979,1086,973,1005,1084,866,1077,1033,659,1120,1259,1667,1755,1731,1643,1264,1480,1470,1474,1491,1481,1490,1485,415,225,606,657,615,429,577,554,480,549,415,438,406,430,457,330,532,244,437,312,510,448,464,317,572,2047,1974,1658,1675,1721,1714,1690,1667,1655,1667,1652,1634,1659,1968,1932,1718,1802,1890,1799,1705,1763,1764,1686,1299,554,391,749,1114,949,1007,840,1069,988,1448,1495,1695,1554,1601,1478,1467,1486,1498,1476,1464,1452,1491,1250,584,586,546,346,328,372,487,392,512,555,386,467,483,482,452,439,465,422,576,462,468,574,417,515,496,403,530,538,1486,1999,1907,1693,1705,1689,1683,1708,1698,1690,1674,1720,1710,1693,1679,2030,1916,1782,1760,1675,1753,1770,1674,1808,1758,1674,888,674,591,1117,1645,1125,1353,1436,1823,1654,1555,1370,1495,1483,1479,1505,1530,1497,1485,1492,470,539,518,531,533,308,385,507,541,494,596,561,665,585,122,159,410,460,528,577,550,565,742,2029,1947,1688,1693,1682,1676,1678,1683,1673,1670,1663,1779,2008,1739,1719,1728,1691,1708,1642,1622,753,761,1141,1585,1220,1260,1444,1638,1622,1431,1388,1438,1538,1467,1498,1476,1437,1481,1482,1470,1471,1503,1516,1493,599,364,326,397,327,215,426,480,356,481,354,347,300,249,298,428,440,191,511,454,180,385,354,258,418,377,416,610,442,435,392,226,271,492,362,493,349,687,1992,1994,2001,1779,1690,1673,1657,1707,1696,1675,1679,1707,1714,1711,1707,1717,1695,1704,1692,1688,1870,2048,1978,1613,1628,1733,1740,1700,1809,1856,1808,1881,1804,1751,1706,1698,1447,564,690,734,865,1208,704,941,848,806,555,520,1707,1195,1335,1556,1536,1473,1545,1471,1474,1543,1496,1483,1491,1482,1483,1473,1503,1247,322,522,619,563,503,473,465,600,541,474,338,574,579,511,531,532,664,645,599,395,379,294,1728,1950,1792,1691,1693,1704,1706,1671,1682,1680,1688,1669,2037,1701,1707,1758,1729,1743,1750,1717,1085,714,1065,1548,1556,1493,1479,1534,1560,1458,1557,1513,1516,1546,1501,1520,1483,1480,1488,1503,1487,1475,1498,1486,1482,1454,1485,1509,1494,1472,1469,1493,1482,1483,1470,1505,982,636,629,599,668,521,202,458,280,326,569,237,374,608,522,646,544,474,590,613,436,566,429,691,624,580,548,557,682,604,644,669,582,556,485,546,437,412,529,478,628,552,497,416,525,611,522,625,587,510,481,123,139,289,431,532,313,349,438,518,613,596,431,579,587,394,314,245,583,554,704,495,479,1955,2006,2010,2019,1984,2027,1627,1706,1697,1698,1702,1711,1677,1696,1716,1700,1690,1697,1694,1706,1678,1682,1728,1680,1688,1680,1672,1698,1690,1689,1695,1700,1670,1698,1683,1669,1686,1818,2048,2048,2048,1793,1777,1728,1699,1820,1721,1759,1892,1708,1776,1760,1767,1717,1756,1758,1712,1724,1730,1680,1787,1788,1750,1783,1724,1790,1876,797,725,607,711,641,675,540,751,518,596,438,605,560,739,962,882,894,897,937,701,502,290,603,682,567,411,666,383,313,310,672,920,866,880,584,1277,958,634,299,1242,1603,1648,1624,1621,1802,1715,1685,1632,1528,1467,1580,1526,1455,1485,1485,1449,1475,1480,1473,1473,1475,1457,1462,1503,1485,1477,1453,616,513,510,441,441,568,291,512,443,596,149,294,591,494,540,322,566,570,604,486,385,612,248,175,504,554,299,262,166,332,485,552,496,518,500,248,385,402,402,507,535,413,316,350,532,536,613,2016,2048,2001,2029,1811,1712,1717,1702,1717,1730,1669,1705,1698,1741,1666,1714,1683,1683,1698,1729,1718,1677,1689,1680,1652,1973,2048,2029,1867,1869,1710,1801,1749,1791,1783,1928,1822,1810,1782,1842,1886,1870,1729,1801,1636,1290,690,809,666,763,708,875,1008,716,915,938,972,793,891,820,968,745,635,532,1113,1457,603,760,1520,1562,1605,1615,1607,1537,1502,1472,1042,610,626,484,380,1493,1665,1687,1841,1804,1066,1188,1513,1409,1500,1484,1472,1492,1499,1481,1464,1413,552,563,558,581,559,331,395,522,409,542,529,361,414,174,392,495,431,269,343,319,288,283,395,471,510,367,999,1932,1878,1650,1662,1655,1697,1672,1650,1683,1697,1676,1699,1676,1997,1729,1530,1633,1727,1732,1746,1699,1723,1602,595,629,460,1689,1399,1028,1216,1231,1622,1654,1624,1026,491,1120,1741,1457,1376,524,702,1690,1533,1611,1491,1519,1424,1456,1476,1499,1482,1463,1488,1476,1484,1483,1500,1490,1476,1482,1493,1518,1463,1514,1467,1479,1464,1481,1472,1484,1475,1473,1503,814,611,593,530,622,605,576,605,502,443,531,620,604,398,443,394,439,575,634,473,484,534,510,209,553,580,404,238,387,541,594,559,593,599,367,479,482,480,429,454,485,488,297,474,496,290,381,318,416,497,467,541,476,446,410,592,568,615,499,554,510,418,469,521,503,580,488,496,296,486,472,486,456,385,619,540,371,414,410,435,261,341,453,274,539,400,432,576,382,424,1881,2030,2054,2056,2016,2017,2044,1849,1724,1727,1733,1707,1739,1727,1729,1743,1723,1754,1737,1745,1733,1748,1743,1697,1742,1721,1705,1737,1715,1690,1653,1679,1677,1679,1681,1683,1697,1710,1728,1718,1718,1716,1725,1716,1643,1654,1750,2048,2048,2048,2048,1995,1833,1804,1806,1818,1806,1826,1794,1806,1778,1780,1810,1823,1856,1868,1893,1800,1812,1808,1792,1852,1711,1641,1717,1678,1708,1790,1774,1783,1753,1812,1781,1814,1636,1619,771,649,814,713,545,530,860,1303,1232,999,1000,819,1128,937,998,1155,1095,888,979,1117,873,692,682,973,1209,1716,1516,1326,1669,1603,1689,1639,1670,1613,1662,1738,1685,1380,536,698,1692,1527,1504,646,400,1630,1641,1505,902,433,1329,1765,1446,1212,545,875,1719,1492,1519,544,446,1721,1577,1502,792,420,1462,1785,1414,1048,506,1053,1727,1473,1419,535,639,1699,1533,1490,680,404,1596,1673,1487,956,461,1267,1757,1442,1281,570,825,1708,1506,1512,591,406,1715,1587,1510,817,405,1428,1781,1402,1097,529,1014,1719,1486,1439,539,594,1710,1546,1564,1474,1461,1478,1481,1457,961,450,398,218,226,204,348,474,349,484,544,396,402,407,278,242,400,337,356,1903,1877,1646,1634,1652,1670,1682,1642,1644,1629,1780,1779,1520,1599,1622,1593,1648,1303,380,171,829,991,1131,484,1692,1668,1263,546,831,1710,1502,1230,1483,1464,1477,1436,1447,1030,550,404,405,467,458,505,744,566,511,482,391,370,372,461,442,547,1666,1774,1660,1655,1681,1618,1651,1670,1904,1572,1590,1602,1160,444,536,462,239,528,884,1240,1571,1671,902,687,746,696,610,754,741,742,738,624,664,786,755,1164,1849,2057,2040,2048,2057,1184,1466,1442,1267,1366,1486,1460,1437,1511,1552,1515,1489,1459,1438,1344,1381,1480,1378,1558,1419,1340,1337,1451,1410,1317,1594,1539,1386,1351,1418,1545,1421,1562,1497,1366,1502,1006,408,46,72,376,356,347,417,574,425,455,538,624,976,1151,1085,1059,1046,1244,1239,1218,682,559,570,526,534,633,702,438,315,431,468,458,784,1526,1512,1451,1433,1472,1540,1593,1565,1547,1576,1573,1540,1650,1435,1509,1554,1605,1686,1611,1602,1692,1677,1607,1492,1616,1489,1515,1560,1598,1406,1273,933,968,980,1040,1158,1127,1163,1226,1215,1137,1209,1450,1432,1457,1353,1438,1414,1578,1316,1162,1172,1208,1171,1314,1276,1357,1454,1327,1414,1410,1374,1133,1390,1316,1014,1107,1120,1133,1167,1220,1489,1392,1199,1274,1578,1423,1321,1634,1470,1744,1060,1296,1187,1190,1667,1188,1155,1171,1150,1199,1167,1122,1302,1556,1524,1412,1450,1493,1571,1612,1561,1562,1609,1565,1549,1631,1482,1462,1599,1623,1700,1571,1660,1691,1663,1565,1464,1606,1478,1504,1568,1589,1352,1770,2051,2048,2027,2048,1879,1457,1572,1477,1460,1452,1528,1600,1574,1523,1581,1598,1567,1618,1498,1545,1485,1620,1677,1614,1575,1698,1674,1597,1528,1546,1552,1502,1555,1569,1484,1283,1086,1374,1284,1022,1087,1157,1123,1153,1216,1477,1419,1228,1304,1598,1365,1347,1609,1481,1747,1096,1304,1214,1167,1669,1230,1159,1182,1148,1172,1150,1134,650,480,387,824,755,817,732,848,757,847,762,649,627,857,579,700,583,763,816,803,517,778,721,749,819,927,735,689,362,364,811,598,708,621,819,830,1331,1529,1380,1006,898,808,791,1094,1188,1139,1094,1127,1003,1059,1035,1082,1071,1118,1123,1095,1069,1118,1070,1031,1072,1078,1059,1095,1092,1011,1054,1024,1000,953,1264,1081,837,1166,1212,1508,1150,900,854,860,860,1035,1187,1529,2050,2055,2056,1861,1456,1456,2056,2048,2048,2048,2048,2048,2057,2056,2048,2042,1955,2036,2048,1601,1917,1422,1789,1868,1795,1810,1868,1818,1830,1858,1826,1793,1872,1808,1998,1618,1355,1918,1319,1780,1025,1751,1879,1616,1651,1117,1722,745,1064,1229,1832,1783,1877,1802,1701,1628,1508,1460,1438,1357,1932,1929,1776,1649,1528,1435,1332,1286,1212,1212,1148,1401,1649,1677,1839,1969,1937,1963,2006,1878,1912,1885,2014,1804,1515,1459,2048,1621,1769,1824,1515,1029,1841,2055,1780,342,1117,1774,1246,2006,1398,662,2042,2048,2048,1217,1398,2048,1837,1031,423,1831,1726,630,1919,2057,2048,2048,1672,593,1910,2048,1964,1175,126,1177,2048,2057,2048,1503,1149,2053,2048,2048,2048,1734,1205,741,724,632,2002,2048,2048,2054,2004,1784,1552,1320,1080,1020,913,2048,1822,1870,2055,1993,1924,1573,604,384,1621,1012,1071,903,289,2003,2048,2048,2048,1906,437,1051,2048,2057,2034,1368,1218,1869,2048,2048,2056,2048,1895,1222,903,672,2049,1618,2048,1970,2048,1861,2018,1890,1566,1216,883,1396,2057,2048,2048,2048,2055,2048,2053,1942,2049,2049,2054,2022,2048,2057,2048,2052,2048,1850,1471,1127,886,903,621,283,2049,1965,1757,1456,1388,922,998,2048,2054,2048,1391,1331,1834,1906,1915,1970,1999,1955,2037,2015,1972,1998,1798,1221,1642,1944,2047,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,1984,1862,1694,1512,1348,1101,627,1054,1704,1713,2048,2048,1929,1745,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2057,1835,1138,1899,2048,2048,2048,2048,2048,2048,2048,2048,2043,1893,1646,1336,868,829,234,878,2048,2048,2048,2048,2048,2048,1442,544,459,1718,1974,1973,2037,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2049,2047,2053,2055,2048,2045,2051,2056,2052,2034,1963,1850,1696,1523,1322,1249,1542,2048,2057,1738,1255,1968,1412,1159,998,205,25,25,25,25,865,1625,1894,1923,2048,1979,1724,1001,435,2048,2048,2048,1731,1652,1565,2048,2052,2033,1960,1938,1324,1515,2048,2048,2048,1427,1987,2001,2048,2048,2048,2047,1943,1924,1843,1823,1612,1293,1062,870,1833,2048,2048,2048,2048,2053,1626,2048,2048,2048,1265,1829,2017,2048,2048,2048,2048,2019,1760,1506,1158,2033,1203,1750,2002,1937,1846,1605,1372,1415,1562,1642,1269,1837,1909,2048,2055,2048,1646,245,960,2048,2057,1849,1529,1377,1269,1080,1055,1060,1829,2055,1825,1288,1097,768,685,695,703,1152,2048,2015,1191,640,1271,2055,2048,2048,2048,2048,2048,2048,2048,2048,2008,1716,1433,1150,1391,2048,2048,2040,643,1826,2057,2048,2056,1747,309,100,1400,1712,2035,2048,2057,2048,1770,2048,2048,2048,2057,2048,1565,1636,1840,1468,2056,2048,2048,2048,2028,1245,1831,2051,2055,2048,2056,2048,2057,2031,1990,1964,1812,1609,1064,894,1591,2039,2028,1774,2048,2048,2057,2048,2048,1988,1408,922,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,1998,1806,1545,1092,1992,2048,2057,2048,2048,2048,2048,2048,1878,1207,780,356,503,2048,2048,2048,2048,2048,1903,1600,1564,1661,1849,1596,1016,598,1940,2051,2056,2057,2057,2048,2048,2048,2057,2056,2026,1915,1643,1403,882,473,433,575,525,512,2010,2048,2010,1850,1609,1450,1260,1140,1678,1957,1593,1369,1989,1829,1607,1449,1197,835,486,1285,1951,1752,1466,1132,1983,1892,1552,2051,2048,853,2048,1727,2048,1802,410,1749,2048,2048,2048,1907,1466,283,1336,2048,1350,25,1034,2057,2057,2048,2048,2048,2048,2048,2048,2048,2054,2055,1719,1176,2048,1885,902,1732,2048,2048,2048,2048,2048,2048,2034,1483,749,2048,2048,2048,2048,2056,2052,1747,1325,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,1517,455,868,2048,2016,2047,2053,2048,2048,2048,2048,2053,2048,2048,2048,2016,1613,1259,846,320,817,1901,1842,2011,2056,2048,2049,1786,970,1757,1728,785,1464,2048,2048,2048,2050,1596,1103,693,703,857,2048,2048,2048,2048,2051,2048,2048,2048,2048,2057,1879,1569,1163,815,1112,2048,2048,2048,2048,1888,1405,1213,658,1375,2055,2048,861,2048,2039,2048,2048,2048,1981,2035,1404,1389,958,584,598,1786,1941,1415,1519,2057,2048,2054,2057,2055,2057,1950,1999,1391,2057,2054,1915,1755,1481,1378,1204,1157,2048,2057,2048,2048,2048,2055,2048,1530,1034,1134,2048,2048,2048,2048,2048,2048,2053,2028,1883,1737,1556,1334,1275,2056,2057,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2054,2057,2057,2056,2050,2048,2053,2057,2056,2048,2048,2048,2057,2048,2057,1986,1293,1576,1817,2056,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2055,2034,1909,1695,1907,2030,1127,1922,2048,2048,2048,2048,2057,2048,2043,2038,1765,1084,886,1924,2048,2048,2048,2037,1499,2048,2048,2048,2048,2048,2048,2049,1272,1760,2048,2056,2028,1985,2027,1832,1567,1503,1479,1382,1160,1117,1175,1317,1458,1299,1174,1123,1060,1050,1182,1033,1070,1222,1110,1674,1458,1377,1463,1131,1274,1575,1183,1190,1402,1395,1367,1320,1231,1237,1071,668,1139,1256,1417,1483,1395,1387,1357,1115,1169,1369,1408,1123,1627,1346,1292,1022,1106,1186,1220,1088,1190,382,751,732,889,979,731,1169,663,1104,1102,1141,1218,1649,1657,1465,593,734,492,273,1371,975,525,362,612,563,830,934,694,701,832,679,673,754,705,714,990,621,348,1166,1510,981,1455,1542,521,1523,1383,587,293,241,484,1609,1120,582,548,389,791,166,135,69,75,92,513,708,958,596,272,312,827,885,532,592,518,73,71,364,827,748,498,608,512,539,580,229,272,547,609,573,222,274,172,340,306,363,579,118,489,559,74,133,118,160,159,473,1285,1253,581,222,82,473,442,684,492,342,243,386,418,319,313,310,452,146,691,719,475,474,535,640,409,453,398,334,302,395,189,1295,1683,1154,1056,904,916,1174,1264,1244,1249,1372,1319,1402,1415,1299,1314,1371,1405,1292,1450,1419,1492,1541,1484,1353,1179,1195,1172,1191,1099,918,867,1205,1301,1897,1594,1629,1524,1461,1567,1628,1588,1665,1779,1815,1809,1800,1845,1737,1791,1737,1658,1765,1597,1702,1756,1748,1680,1575,1682,1490,1636,1550,1608,1479,1512,1602,1853,1300,1277,1204,1269,1198,1311,1250,1355,1482,1463,1588,1583,1518,1522,1480,1457,1531,1532,1435,1471,1395,1514,1478,1160,1175,1095,1197,1229,1209,1312,1219,1342,1274,1209,1183,1154,1181,1153,1180,1500,1913,1489,1534,1434,1408,1574,1574,1928,1416,1304,1652,1468,1575,1511,1574,1790,1522,1569,1513,1571,1782,988,1021,1038,1278,1806,1571,1587,1533,1661,1368,1350,1307,1352,1203,888,1511,1741,1544,392,385,387,1150,1156,1194,1252,1872,1843,1969,1978,1958,1934,1779,1764,1628,1162,1404,1385,1274,1223,1654,1717,1791,1803,1780,1763,1663,1810,1613,1921,1926,1350,1080,1524,1678,1008,1557,1716,1677,1586,1716,1096,1174,1208,1566,1655,1686,1691,1288,1766,1595,1781,1813,1710,1655,1723,1627,1690,1767,1767,1616,1785,1691,1779,1797,1834,1686,1781,1738,1602,1743,1782,1785,1795,1826,1611,1814,1703,1694,1660,1690,1701,1594,1664,1793,1749,1637,1727,1716,1735,1743,1693,1660,1765,1653,1795,1850,1598,1785,1691,1743,1800,1641,1786,1771,1547,1737,1704,1569,1715,1748,1831,1703,1810,1597,1800,1816,1677,1672,1688,1639,1699,1829,1718,1778,1842,1831,1847,1808,1859,1856,1904,1755,1846,1742,1699,1721,1793,1619,1715,1710,1691,1686,1713,1620,1612,1943,1931,1881,1918,1935,1922,1898,1923,1912,1897,1884,1005,1846,1835,1733,1770,1794,1799,1762,1809,1812,1865,1735,1723,1848,1700,1791,1734,1784,1778,1764,1826,1689,1826,1816,1808,1755,1697,1737,1801,1793,1834,1791,1794,1752,1628,1678,1760,1722,1802,1696,1878,1813,1647,1872,1851,1825,1826,1688,1720,1824,1850,1764,1695,1822,1761,1829,1663,1697,1617,1655,1522,1513,1599,1651,757,1583,1468,1675,1606,1696,1528,1726,1077,1662,1254,1499,1528,1617,1646,1701,1556,1739,939,1696,1547,1478,1574,820,1584,1532,1559,1680,1592,1700,1571,1716,1646,1588,2030,1981,1966,1982,2016,1803,1996,1880,2016,2028,1796,2012,2041,1856,2014,2017,1987,1992,2032,1989,2013,1951,1936,1824,2040,2035,1713,1808,1924,1869,1835,1772,1721,1810,1855,1894,1873,1848,1789,1693,1722,1765,1822,1847,1849,1846,1772,1742,1742,1885,1879,1824,1861,1828,1725,1639,1790,1894,1822,1838,1859,1831,1708,1739,1784,1860,1764,1864,1893,1883,1763,1730,1853,1878,1820,1857,1750,1761,1723,1821,1870,1818,1835,1847,1719,1748,1839,1875,1849,1893,1811,1720,1844,1897,1869,1803,1808,1867,1784,1727,1824,1700,1486,1548,1526,1611,1482,1578,1616,1484,1726,1577,1521,1741,1514,1689,1964,1774,1735,1914,1717,1803,1769,1677,1523,1605,1520,1610,1487,1561,1590,1524,1681,1666,1614,1862,1599,1846,1891,1792,1698,1871,1734,1626,1574,1573,1664,1621,1502,1656,1480,1610,1559,1485,1709,1372,1580,1917,1716,1743,1832,1761,1802,1866,1747,1700,1779,1570,1675,1526,1515,1524,1457,1618,1505,1630,1625,1554,1909,1513,1697,1869,1775,1653,1788,1582,1527,1695,1603,1647,1497,1447,1615,1464,1663,1550,1450,1837,1561,1598,1863,1664,1689,1779,1728,1754,1837,1764,1713,1847,1767,1715,1637,1855,1759,1742,1827,1702,1775,1735,1739,1684,1684,1738,1509,1639,1750,1549,1802,1649,1733,1636,1716,1690,1658,1780,1594,1813,1674,1784,1685,1742,1712,1775,1496,1647,1589,1803,1637,1698,1559,1584,1558,1519,1539,1747,1600,1747,1592,1736,1794,1744,1670,1740,1892,1755,1710,1703,1601,1567,1717,1770,1635,1548,1662,1658,1467,1597,1671,1507,1525,1718,1666,1746,1844,1779,1731,1807,1770,1743,1837,1811,1658,1534,1874,1582,1618,1679,1571,1623,1424,1718,1438,1516,1748,1568,1651,1769,1490,1675,1861,1864,1691,1914,1719,1608,1877,1616,1537,1739,1613,1669,1444,1569,1447,1531,1682,1560,1605,1773,1597,1787,1874,1779,1743,1911,1802,1688,1782,1707,1580,1641,1592,1661,1407,1384,1697,1395,1555,1784,1510,1608,1690,1476,1647,1618,1645,1823,1733,1589,1760,1781,1692,1813,1653,1517,1718,1383,1569,1469,1497,1492,1549,1631,1645,1533,1796,1757,1784,1740,1658,1791,1750,1701,1714,1773,1741,1745,1693,1755,1817,1678,1754,1783,1680,1647,1734,1822,1665,1724,1778,1818,1657,1690,1760,1710,1623,1690,1695,1838,1784,1718,1652,1716,1819,1789,1799,1525,1446,1848,1815,1836,1534,1790,1788,1879,1731,1680,1709,1768,1803,1656,1656,1782,1759,1854,1677,1672,1770,1785,1775,1727,1641,1749,1868,1688,1766,1769,1534,1823,1847,1818,1811,1713,1792,1848,1746,1802,1713,1698,1701,1688,1687,1689,1742,1761,1905,1897,1898,1935,1942,1945,1941,1901,1707,1778,1891,1885,1776,1810,1789,1806,1828,1907,1934,1896,1895,1852,1828,1924,1838,1836,1815,1794,1868,1815,1925,1945,1910,1819,1810,1830,1859,1913,1914,1903,1832,1830,1796,1810,1910,1856,1826,1818,1893,1822,1762,1794,1884,1928,1942,1780,1912,1902,1906,1919,1942,1924,1904,1786,1915,1934,1933,1907,1836,1852,1738,1748,1766,1698,1746,1715,1807,1795,1792,1762,1811,1745,1884,1736,1837,1760,1868,1739,1714,1780,1706,1709,1802,1685,1862,1775,1874,1819,1867,1854,1834,1873,1843,1861,1823,1861,1849,1822,1852,1782,1858,1799,1805,1889,1763,1827,1809,1842,1863,1807,1792,1810,1802,1796,1790,1766,1794,1773,1852,1763,1880,1704,1813,1813,1698,1837,1749,1840,1804,1656,1765,1714,1700,1810,1827,1862,1851,1945,1890,1727,1892,1637,1907,1768,1940,1754,1736,1865,1769,1741,1907,1785,1728,1690,1681,1669,1756,1697,1726,1716,1686,1704,1752,1732,1757,1679,1783,1772,1729,1756,1762,1764,1692,1733,1742,1801,1746,1725,1758,1803,1817,1617,1943,1949,1594,1856,1632,1858,1810,1913,1562,1887,1532,1970,1854,1673,1733,1725,1751,1409,1933,1479,2002,1515,1891,1487,1688,1701,1776,1664,1501,1835,1500,1915,1523,1915,1512,1759,1656,1849,1653,1600,1742,1573,1868,1987,1938,2002,1962,1977,2011,1862,1972,2000,1906,1464,1858,1917,1491,1334,1413,684,853,793,989,1317,1496,849,2012,2016,2025,2018,2037,2020,2030,2000,1946,1927,1673,1667,1726,1728,1740,1663,1755,1756,1674,1692,1774,1585,1956,1727,1642,1569,1707,1700,1810,1764,1758,1890,1654,1775,1735,969,844,1543,1181,634,629,1651,1666,1810,1790,1798,1791,1854,1690,1623,1796,1985,1962,1992,1983,1984,1978,1976,1953,1935,1818,1932,1480,1584,767,1369,1744,1486,1392,1511,1455,924,1425,1432,1567,1592,1736,1851,1854,1814,1539,1533,1538,1584,1575,1614,1573,1566,1624,1834,1873,1857,1917,1998,1867,1847,1875,1858,1890,1872,1622,1934,1942,1640,1592,1517,1007,1610,1484,888,1651,1533,1572,1602,1780,1970,1584,1987,1975,1226,1965,1958,1823,1972,1982,1919,1265,1946,1957,1755,1393,1794,1844,1893,1914,1667,1855,2016,1815,1963,1440,1979,1873,1607,2000,1637,1989,1979,1211,1966,1960,1823,1975,1985,1931,1198,1962,1938,1753,1370,1788,1844,1880,1917,1661,1847,2007,1960,2005,1980,1929,1978,1970,1803,1724,1741,1710,1605,1558,1744,1428,1656,1565,1620,1798,1896,1859,1783,1771,1632,1814,1861,1758,1376,1741,1621,1746,1492,1712,1822,1998,1987,1966,1959,1965,1948,1967,1969,1184,1302,1642,1481,1574,2002,1843,1366,1806,1997,1880,1134,1914,1972,1838,1650,1862,1931,1980,1817,1625,1852,2021,1941,1849,1384,1859,2002,1833,1774,1302,1805,1903,1807,1439,1773,1678,1916,1370,1888,1972,1835,1774,1516,1270,1648,1792,1944,1918,1330,1920,1957,1969,1905,1966,1933,1938,1971,1877,1946,1974,1916,1957,1967,1927,1959,1976,1941,1981,1959,1953,1992,2001,1906,1498,1544,2000,2030,1997,1691,1913,1866,1979,1855,1721,1639,1545,1601,1462,1495,1049,1957,1987,1760,1136,1465,1384,1786,1955,1837,1703,1989,1950,1915,1883,1623,1751,1808,1622,1710,1781,1760,1900,1913,1840,1818,1723,1722,1310,993,1805,1559,1716,1398,1693,1403,1718,1755,1826,1716,1722,1603,1824,1922,1837,1696,1726,1518,1492,1152,1838,1832,1873,1871,1625,1403,1383,1904,1648,1791,1839,1736,1856,1743,1815,1746,1918,1865,1859,1768,1604,1545,1690,1725,1892,1779,1784,1720,1821,1741,1653,1382,1012,828,1231,1505,1814,1693,1843,1707,1710,1549,1596,1886,1751,1741,1667,1550,1719,1766,1769,1870,1799,1792,1794,1690,1720,1797,1816,1757,1413,1226,1146,1164,1162,1124,1067,1196,1404,1636,1630,1640,1591,1595,1660,1629,1632,1884,1764,1765,1748,1713,1772,1755,1718,1739,1716,1797,1970,1744,1770,1753,1918,1943,1885,1924,1915,1917,1902,1906,1868,1929,1889,2029,1865,1875,1900,1942,1712,1712,1677,1711,1677,1686,1708,1664,1886,1696,1690,1692,1702,1687,1683,1681,1758,1844,1761,1737,1767,1743,1744,1761,1744,1814,1502,1543,1524,1549,1540,1547,1531,1556,1581,1505,1521,1439,1783,1709,1680,1685,1706,1741,1701,1725,1776,1639,1730,1715,1752,1694,1732,1676,1734,1729,1737,1721,1751,1767,1671,1713,1685,1830,1757,1731,1753,1739,1773,1734,1754,1866,1741,1800,1829,1870,1792,1821,1793,1815,1810,1840,1803,1863,1919,1767,1788,1800,1862,1598,1626,1583,1587,1593,1605,1586,1687,1692,1637,1624,1631,1628,1608,1638,1636,1867,1809,1812,1797,1802,1780,1772,1792,1819,1783,1636,1245,1630,1597,1676,996,1644,1785,1783,1837,1868,1878,2047,1884,1931,1951,1867,1931,2037,1938,1902,1917,1878,1932,2043,1819,1590,1623,1642,1523,1648,1851,1670,1608,1627,1571,1689,1971,1791,1752,1601,1732,1757,1699,1595,1762,1892,1789,1659,1637,1784,1731,1626,1638,1912,1996,2002,1994,1993,2004,2020,2024,2021,2023,1995,2013,1992,1957,1757,1798,1932,1941,1889,1953,1971,1867,1820,1797,1837,1782,1915,1938,1893,1924,1817,1931,1905,1916,1860,1903,1916,1918,1876,1612,1834,1684,1676,1718,1653,1679,1838,1762,1866,1821,1832,1905,1884,1827,1873,1803,1587,1461,1394,1419,1769,1626,1671,1640,1642,1635,1633,1676,1613,1547,1594,1592,1645,1650,1673,1643,1641,1824,1601,1598,1632,1578,1611,1588,1589,1551,1794,1660,1621,1648,1578,1649,1635,1603,1740,1602,1610,1610,1575,1600,1601,1600,1581,1776,1679,1653,1650,1613,1656,1637,1625,1715,1612,1557,1537,1506,1510,1527,1523,1489,1764,1560,1567,1568,1596,1558,1542,1524,1602,1761,1581,1587,1619,1618,1587,1517,1561,1753,1597,1568,1560,1585,1579,1518,1481,1593,1752,1580,1611,1599,1622,1574,1534,1556,1743,1652,1600,1612,1636,1652,1601,1582,1634,1794,1564,1613,1597,1643,1594,1597,1550,1704,2006,2002,1972,2017,1951,1988,1907,1953,1918,1978,1909,1975,1952,1991,1937,1971,1979,1385,1362,1338,1284,1487,1425,1379,1377,1468,1380,1331,1379,1467,1439,1386,1378,1349,1369,1414,1374,1363,1481,1435,1386,1403,1471,1414,1399,1438,1413,1420,1361,1372,1296,1587,1417,1365,1381,1366,1379,1359,1377,1483,1357,1376,1357,1361,1595,1473,1566,1371,1336,1370,1376,1401,1411,1422,1373,1482,1417,1370,1395,1490,1426,1402,1404,1454,1554,1531,1598,1589,1456,1422,1516,1435,1524,1507,1545,1486,1578,1332,1207,1289,1398,1239,1334,1302,1256,1544,1447,1455,1489,1511,1337,1417,1380,1367,1405,1477,1404,1421,1795,1699,1604,1712,1597,1715,1598,1680,1770,1673,1643,1694,1697,1641,1689,1642,1723,1756,1833,1641,1838,1658,1774,1631,1782,1812,1733,1696,1717,1808,1636,1741,1650,1778,1735,1694,1596,1695,1640,1669,1617,1660,1719,1750,1734,1643,1783,1623,1729,1636,1745,1726,1499,967,1864,1968,1453,1571,1501,1801,1610,1460,1754,1614,1620,1655,1513,1522,1805,1637,1703,1657,1618,1823,1703,1459,1727,1772,1696,1359,1708,1837,1728,1673,1798,1797,1730,1801,1852,1728,1698,1691,1831,1731,1792,1706,1653,1832,1849,1802,1827,1864,1761,1497,1493,1405,1770,1731,1743,1622,1320,1763,1762,1861,1725,1733,1334,1587,1636,1647,1706,1459,1426,1855,1865,1840,1681,1337,1742,1870,1969,1899,1836,1319,1548,1809,1820,1776,1473,1575,1766,1791,1793,1735,1329,1719,1814,1934,1804,1802,1405,1483,1694,1703,1737,1550,1562,1702,1854,1811,1812,1341,1622,1825,1963,1831,1882,1512,1416,1718,1800,1791,1617,1677,1444,1312,990,959,1260,1305,1356,1175,1324,1372,1155,1090,980,1105,1236,1137,1169,1376,1235,1377,1328,1375,1330,1221,1228,1507,1840,1596,1561,1535,1519,1592,1572,1587,1588,1583,1567,1606,1630,1641,1621,1619,1513,1530,1477,1502,1608,1518,1464,1477,1466,1532,1821,1717,1720,1686,1711,1694,1666,1684,1747,1708,1717,1720,1722,1727,1707,1712,1708,1707,1690,1676,1583,1619,1679,1716,1676,1651,1723,1792,1751,1715,1732,1929,1933,1852,1871,1920,1884,1888,1742,1778,1521,1463,1791,1698,1710,1713,1682,1674,1710,1727,1756,1741,1696,1650,1734,1655,1660,1719,1708,1839,1685,1669,1680,1633,1676,1691,1684,1662,1709,1674,1504,1685,1484,1680,1484,1696,1745,1616,1610,1608,1625,1578,1587,1607,1600,1729,1617,1559,1631,1629,1637,1584,1639,1754,1621,1603,1550,1589,1561,1613,1551,1611,1672,1582,1421,1642,1433,1597,1415,1616,1598,2028,1988,1965,1995,2003,1995,1973,2026,2054,1983,1947,1953,1991,1959,1960,2004,1983,1903,1794,1774,1789,1811,1809,1783,1789,1961,1838,1858,1868,1861,1864,1849,1841,1864,1653,1565,1791,1694,1509,1688,1349,1573,1691,1703,1695,1650,1633,1695,1723,1663,1840,1722,1790,1741,1735,1730,1788,1768,1728,1831,1781,1800,1705,1729,1769,1822,1717,1858,1642,1625,1638,1658,1640,1656,1625,1649,1846,1713,1724,1703,1722,1724,1743,1699,1852,1960,2014,2006,2045,1987,1999,1979,2002,2004,2030,2009,2008,2011,2027,2004,2036,2025,2012,2021,2000,2008,1865,1875,1735,1869,1562,1303,1605,1860,1803,1901,1877,1783,1819,1735,2004,2003,2054,2018,1897,1534,1560,1575,1611,1790,1825,1767,1767,1795,1790,1827,1704,1734,1654,1634,1775,1758,1777,1732,1757,1760,1729,1688,1673,1816,1815,1816,1805,1778,1788,1763,1807,1805,1903,1981,1977,1988,1982,1889,1806,1839,1845,1830,1838,1793,1805,1915,1862,1868,1811,1984,1949,1980,2000,1967,1962,1994,1978,1968,1905,1998,1875,1867,1822,1758,1773,1903,1912,1930,1974,1925,1879,1747,1750,1873,1884,1836,1706,1596,1475,1572,1849,1962,1951,1973,1959,1857,1797,1886,1762,1840,1849,1781,1919,1703,1887,1813,1866,1785,1714,1765,1746,1747,1765,1807,1491,1724,1485,1624,1444,1464,1468,1635,790,1060,1165,998,744,848,820,980,1115,1001,1189,923,921,1012,835,900,1741,1834,1804,1845,1957,1926,1748,1744,1696,1764,1775,1744,1684,1736,1731,1727,1657,1594,1868,1930,1898,1972,1949,1939,2020,1962,2004,1836,1857,1857,1840,2038,2004,1979,1999,2048,2041,2025,2036,2039,1802,1593,1548,1556,1499,1609,1575,1737,2028,2019,2009,2041,2000,2030,2031,2013,2034,1906,2005,1975,1596,1624,1419,1346,1357,1543,1644,1711,1649,1659,2027,2030,1996,2045,1868,1648,1734,1603,1570,1714,1632,1885,1879,1921,1921,1874,1882,1925,1927,1954,1980,1865,1646,1799,1680,1930,1943,1983,1937,1961,1931,1923,1928,1928,1199,1092,1090,1078,1670,1749,1799,1784,1411,1328,1223,1370,1647,1828,1809,1863,1922,1901,1913,1932,1744,1434,1540,1444,1508,1514,1440,1626,1623,1363,1855,1888,1850,1598,1609,1619,1671,1842,1586,1579,1340,1574,1616,1826,1795,1583,1541,1430,1594,1642,1872,1715,1699,1660,1793,1719,1727,1709,1694,1735,1741,1746,1693,1925,1927,1918,1929,1943,1921,1911,1944,1933,2048,2003,1997,2018,1989,2031,1969,2036,2035,2034,2038,2022,2046,2027,2031,2020,2026,2053,2048,2036,2041,2031,2051,2023,2047,2048,2017,2020,2022,2034,2000,2017,2006,2035,1398,1061,1104,1060,1054,761,725,768,974,1914,1758,1917,1762,1508,1488,1502,1588,1502,1519,1489,1562,1500,1498,1527,1509,1486,1391,1366,1386,1408,1379,1333,1370,1459,1391,1342,1325,1381,1676,1518,1642,1679,1599,1703,1847,1821,1882,1731,1841,1664,1699,1659,1689,1679,1668,1684,1674,1741,1558,1529,1536,1591,1569,1546,1559,1690,1550,1568,1548,1575,1523,1501,1522,1544,1895,1902,1953,1928,1969,1976,1983,1997,2032,1879,1929,1890,1905,1939,1895,1913,1882,2013,2013,2052,2024,2052,1951,1992,1965,1992,2045,2013,2046,2049,2022,1775,1673,1821,1875,1894,1853,1830,1901,1784,1715,1624,1464,1504,1516,1388,1582,1781,1905,1937,1794,1708,1846,1686,1760,1799,1762,1934,1877,1968,1907,1600,1484,1683,1744,1831,1837,1791,1884,1846,1827,1822,1816,1830,1884,1691,1690,1687,1688,1715,1689,1658,1744,1934,1856,1918,1924,1897,1896,1860,1825,1999,1943,1868,1919,1931,1929,1918,1859,1917,1786,1825,1779,1778,1832,1863,1970,1859,1841,1849,1754,1890,1803,1835,1891,1852,1839,1939,1879,1863,1826,1552,1070,1395,1562,1569,1580,1591,1581,1628,1624,1594,1706,1815,1800,1685,1847,1820,1675,1821,1769,1714,1804,1712,1815,1741,1935,1881,1919,1931,1959,1895,1579,1881,1800,1488,1496,1505,1761,1647,1696,1767,1669,1600,1574,1651,1623,1644,1615,1673,1913,1954,1969,1989,1999,1988,1997,2003,1996,2030,1998,1985,1996,1810,1846,1747,1820,1773,1868,1754,1911,1740,1592,1589,1548,1656,1666,1460,1453,1580,1769,1611,1464,1599,1405,1590,1412,1567,1587,1570,1561,1466,1510,1415,1497,1405,1474,1623,1666,1558,1652,1594,1656,1539,1607,1641,1728,1629,1557,1624,1563,1625,1533,1575,1680,1625,1630,1627,1656,1654,1623,1596,1587,1764,1662,1617,1670,1641,1661,1620,1625,1773,1619,1612,1608,1608,1644,1598,1605,1587,1886,1790,1787,1768,1801,1769,1800,1767,1884,1650,1652,1638,1625,1646,1624,1616,1618,1886,1812,1831,1820,1820,1819,1812,1784,1892,1797,1762,1756,1753,1768,1727,1749,1746,1831,1827,1757,1767,1675,1543,1581,1632,1657,1817,1766,2048,2048,1808,1829,1744,1847,2004,1953,1794,1842,1868,1926,1951,1996,1970,1825,1667,1781,1718,1833,1853,1926,2048,2047,2048,2057,1920,1892,1757,1769,1726,1830,1647,1790,2056,2037,1940,1984,1899,1922,1931,1892,1838,1767,1600,1795,1935,1938,1778,1888,1943,1938,1802,1870,1957,1790,1444,1574,1698,1777,1788,1892,1873,1809,1459,1584,1785,1857,1835,1878,1746,1712,1594,1701,1801,1864,1875,1940,1977,1943,1862,1872,1643,1663,1575,1583,1797,1718,1716,1707,1633,1649,1641,1679,1572,1690,1904,1931,1854,1904,1693,1836,1651,1834,1692,1814,1679,1898,1919,1898,1709,1798,1639,1785,1962,1863,1663,1607,1704,1780,1689,1634,1446,1453,1480,1488,1449,1475,1452,1607,2025,2019,2023,2006,2024,2028,2024,2002,1832,1857,1859,1856,1863,1795,1529,1501,1556,1544,1541,1521,1312,1612,1734,1841,1790,1835,1830,1939,1836,1890,1624,1793,1917,1924,1943,1956,1901,1941,2004,1849,1543,1581,1632,1691,1809,1883,1795,1879,1808,1903,2037,2020,2022,1988,1812,1836,1810,1826,1853,1717,1590,1612,1620,1744,1862,1827,1661,1798,2034,2037,2024,1983,1806,1862,2003,1909,1734,1804,1743,1873,1883,1851,1692,1789,1642,1687,1619,1801,2051,2035,2043,1899,1586,1616,1677,1708,1663,1657,1298,1465,1554,1685,1795,1554,1122,1439,1969,1994,1842,1942,2036,2048,1984,2012,1869,1866,1808,1718,1797,1717,1796,1700,1739,1674,1694,1626,1583,1685,1693,1715,1565,1545,1439,1608,1807,1877,1806,1812,1550,1589,1396,1539,1574,1632,1629,1670,1707,1745,1698,1729,1780,1825,1672,1711,1573,1726,1778,1642,1281,1344,1419,1580,1853,1772,1457,1460,1384,1381,1346,1441,1497,1580,1603,1609,1584,1617,1572,1560,1365,1435,1463,1506,1404,1519,1518,1587,1615,1556,1645,1580,1598,1623,1590,1610,1400,1677,1663,1688,1659,1632,1564,1588,1625,1607,1542,1549,1550,1645,1636,1647,1530,1543,1586,1583,1640,1694,1648,1693,1518,1561,1497,1546,1648,1732,1828,1794,1647,1753,1836,1843,1805,1749,1444,1435,1412,1443,1443,1574,1689,1710,1671,1727,1787,1759,1671,1799,1532,1692,1204,1494,1548,1839,1668,1965,1699,1906,1621,1834,1459,1794,1633,1776,1292,1312,891,1132,1694,1478,1223,1382,1484,1470,1489,1465,1470,1458,1395,1364,1382,1419,1417,1261,1235,1022,1021,1789,1464,1557,1317,1459,1436,1646,1824,1962,2028,1792,1966,1929,1703,1783,992,748,798,909,1001,1000,1154,997,1059,867,783,949,1027,862,917,875,931,939,734,893,829,942,970,1104,873,916,1294,1251,562,542,542,515,520,1048,1007,1080,978,746,771,986,864,1044,1053,853,1007,926,776,543,520,603,744,868,1070,439,882,602,738,694,729,1103,962,1036,1068,573,684,492,565,594,738,688,915,731,787,671,918,1271,764,827,1005,958,1020,838,1045,745,893,1082,967,893,685,975,276,619,879,1058,390,568,973,678,717,573,612,692,909,923,860,617,695,720,775,2057,1801,775,988,1267,1265,782,1311,1074,1178,781,962,1319,1167,1599,1572,1483,1560,1652,45,44,82,48,92,45,106,222,365,460,571,621,581,672,814,685,1075,1422,1478,1468,1374,1679,1608,1547,1643,1628,1678,1669,1710,1776,1703,1629,1575,1702,1673,1531,1553,1484,1365,965,904,726,659,587,649,585,558,542,422,376,229,158,73,50,47,45,180,2048,88,48,47,45,44,45,48,47,45,44,66,243,819,1476,1278,1470,1449,1415,1291,1030,1104,863,658,711,903,764,839,852,926,988,904,845,756,752,875,973,824,798,807,843,757,665,542,523,201,46,49,47,45,44,47,49,47,45,44,48,49,1728,1633,1446,1381,1317,1315,1327,1340,1279,1310,1280,1356,1251,1211,1329,1150,1045,1046,933,896,974,818,783,1003,1120,1094,1350,1422,1614,1649,1566,1616,1679,1388,1391,1190,1195,1241,1329,1495,1417,1397,1038,968,1082,1162,1188,1274,1189,1254,1240,1284,1312,1342,1322,1356,1328,1330,1800,1107,45,50,47,45,44,208,563,896,956,1173,1482,1691,1722,1794,1730,1718,1723,1755,1773,1816,1857,1778,1737,1448,1354,1369,1375,1748,1842,1809,1898,1906,1922,1937,1894,1831,1902,1860,1800,1785,1753,1665,1807,1895,1711,1342,1403,1227,686,181,48,49,48,45,46,48,605,842,1011,1204,1236,1408,534,934,1070,902,900,1052,872,1642,1643,1533,1641,1744,1598,1590,1655,1736,1684,1485,1809,1647,1521,1615,1693,1631,1570,1668,1752,1658,1570,1595,1819,1688,1661,1512,1850,1854,1827,1783,1817,1938,2025,2014,1164,49,51,147,218,289,411,447,578,655,944,1049,1086,1383,1385,1379,1482,1455,1348,1359,1432,1485,1641,1647,1627,1580,1597,1506,1597,1484,1442,1489,1467,1429,1487,1609,1750,1686,1678,1634,1636,1646,1669,1556,1381,1450,1452,1401,1177,1038,1181,1078,1046,1070,1030,1022,1029,1280,2006,1424,1417,1387,1326,1302,1343,1312,1246,1313,1307,1329,1176,1240,1301,1139,1021,930,971,975,881,759,902,1091,1106,1218,1361,1537,1672,1579,1586,1655,1494,1446,1347,1117,1168,1328,1382,1482,1440,1225,974,1005,1131,1207,1285,1218,1280,1217,1233,1278,1277,1393,1286,1334,1314,1390,2048,1409,1339,1042,863,1404,1195,1096,861,953,954,867,791,1282,1501,1536,1352,1454,1517,1276,1388,1428,1523,1392,1405,1448,1413,1417,1191,1246,1114,1334,1562,1654,1721,1648,1406,1437,1491,1534,1488,1414,1476,1430,1251,1283,1075,1091,862,961,1210,1291,1352,1415,1365,1379,1381,1343,1939,616,45,45,91,69,63,63,175,279,397,523,627,608,607,727,724,817,1349,1436,1453,1420,1533,1696,1506,1585,1666,1630,1698,1666,1710,1783,1691,1600,1662,1665,1648,1473,1517,1404,1216,912,784,683,633,631,561,579,535,493,365,315,216,90,84,49,45,38,1203,1124,48,49,45,45,45,48,49,45,45,45,143,386,1318,1344,1412,1416,1424,1365,1111,1100,1000,754,625,899,849,790,839,888,960,968,840,791,758,758,973,823,793,779,838,743,700,660,598,322,86,48,49,45,38,45,48,49,45,38,45,48,703,1638,45,45,45,42,49,68,866,1094,1087,1072,1045,1044,1128,1081,963,1123,1131,1236,1478,1669,1671,1783,1590,1446,1467,1371,1299,1071,1242,1362,1244,1261,1287,1411,1546,1588,1451,1610,1700,1481,1475,1572,1603,1461,1059,969,955,1147,1222,1008,560,40,45,48,49,45,190,2048,75,44,109,197,248,366,459,539,622,795,1106,1159,1271,1484,1395,1483,1613,1553,1621,1540,1649,1710,1788,1765,1779,1754,1675,1658,1634,1582,1503,1552,1538,1558,1530,1779,1769,1741,1675,1685,1647,1662,1587,1490,1396,1532,1507,1260,1099,1146,1089,1082,1036,1064,1015,990,947,1809,2048,1506,953,1011,856,893,1013,951,909,984,885,877,753,884,1127,1276,1372,1219,1332,1362,1403,1428,1412,1445,1440,1313,1091,1001,1032,925,1163,1127,1119,1154,1156,975,1064,1261,1261,1280,1307,1152,1083,1264,1189,1161,1248,1249,1369,1329,1265,1283,1263,1251,1335,1293,1345,1357,1534,1330,1235,1252,1388,1374,1400,1412,1403,1416,1449,1411,1329,1310,1315,1433,1387,1384,1388,1338,1314,1269,1167,1170,1145,1318,1297,1152,1077,1200,1127,1074,866,1606,1380,1266,1235,1331,1344,1399,1444,1415,1428,1407,1424,1375,1272,1332,1366,1387,1411,1396,1320,1307,1263,1189,1208,1173,1242,1275,1182,1115,1207,1087,1092,982,1284,1732,908,984,883,902,1000,982,886,965,926,918,812,846,1030,1326,1357,1257,1297,1373,1370,1446,1392,1437,1456,1383,1144,1000,1034,956,1151,1101,1143,1057,1196,1004,1028,1239,1260,1248,1311,1209,1069,1199,1206,1177,1246,1248,1313,1344,1287,1284,1278,1257,1294,1327,1283,1398,1576,2048,155,97,1292,1285,937,1082,1173,1204,131,138,1982,1305,1112,994,993,1026,1290,1257,1355,1149,1242,1373,1291,1451,1383,1368,1263,1326,1523,1668,1512,1481,1391,1423,1479,1476,1420,1517,1517,1494,1396,1464,1514,1518,1569,1652,1692,1605,1497,1553,1544,1591,1554,1469,1486,1462,1477,1389,1297,1206,1208,1222,1231,1296,1297,1160,1157,1204,1793,1622,1119,1076,906,1049,1168,1257,1116,1061,955,1027,953,1002,1174,1207,1270,1206,1052,1186,1264,1432,1283,1350,1203,1223,1556,1534,1622,1682,1639,1671,1564,1537,1578,1658,1684,1753,1653,1643,1456,1424,1340,1389,1380,1352,1555,1615,1559,1523,1492,1454,1421,1428,1419,1396,1363,1351,1682,1643,697,722,840,942,1025,1043,1084,1170,1187,1177,1206,1247,1232,1393,1395,1346,1492,1435,1501,1492,1473,1506,1577,1696,1640,1572,1652,1665,1731,1764,1778,1858,1747,1582,1609,1636,1645,1722,1733,1726,1761,1715,1706,1645,1564,1778,1798,1755,1716,1687,1754,1714,1528,1233,1142,860,833,1230,1141,1649,1536,1572,1692,1172,49,45,45,45,48,211,967,1093,1117,1058,1034,1026,1202,1058,1003,1125,1134,1292,1487,1722,1690,1759,1534,1398,1548,1348,1223,1020,1350,1318,1241,1183,1303,1454,1589,1535,1486,1659,1671,1457,1524,1537,1617,1372,961,1040,1056,1157,1161,931,397,45,44,45,48,49,651,1687,38,45,48,49,45,38,45,48,49,45,68,313,1046,1422,1323,1447,1395,1382,1193,1039,1116,824,627,839,847,771,871,832,961,994,843,810,719,740,959,878,813,780,768,825,754,703,556,422,169,44,45,48,47,45,44,45,48,47,45,44,147,2048,935,911,867,1157,1105,956,945,1033,1015,972,860,1041,1035,1090,951,1200,1384,1396,1460,1522,1468,1603,1470,1359,1294,1258,1440,1351,1281,1321,1132,1181,1017,1095,1256,1452,1445,1457,1354,1203,1149,1156,1159,1387,1100,994,1126,1211,1070,912,829,998,1006,1077,1063,989,945,1827,632,41,45,48,49,50,287,624,861,1027,1183,1563,1699,1745,1790,1707,1710,1721,1754,1764,1827,1842,1793,1676,1414,1387,1291,1459,1784,1852,1844,1916,1889,1937,1933,1855,1848,1881,1869,1837,1840,1772,1741,1806,1893,1522,1436,1357,1177,537,122,44,45,50,47,45,44,666,1288,1349,989,887,707,937,1081,1022,1645,902,45,65,161,222,302,422,489,572,657,1005,1051,1063,1382,1396,1381,1473,1432,1376,1376,1455,1456,1628,1661,1623,1590,1571,1502,1581,1495,1467,1504,1477,1422,1467,1628,1716,1681,1660,1655,1651,1647,1667,1511,1388,1461,1465,1376,1135,1057,1113,1083,1062,1081,1003,1046,973,1429,1906,1433,1400,1357,1290,1291,1341,1317,1257,1338,1346,1293,1192,1294,1239,1085,1053,973,913,977,871,769,944,1094,1125,1239,1387,1563,1650,1590,1578,1692,1484,1443,1264,1138,1189,1330,1418,1456,1430,1191,975,1026,1113,1174,1288,1193,1295,1200,1256,1283,1310,1342,1303,1369,1345,1508,2023,1419,1303,983,915,1385,1139,1065,888,935,956,977,634,1393,1497,1530,1360,1436,1498,1270,1367,1482,1488,1432,1418,1476,1411,1405,1169,1254,1098,1370,1591,1620,1722,1641,1409,1445,1485,1559,1483,1433,1479,1365,1266,1268,1050,1103,851,1006,1208,1278,1347,1433,1371,1404,1354,1335,2024,353,47,45,44,48,49,556,1018,1119,1103,1063,990,1025,1158,964,1051,1156,1155,1371,1590,1708,1775,1667,1474,1426,1429,1358,1132,1108,1401,1235,1262,1188,1371,1493,1579,1460,1531,1697,1592,1397,1594,1552,1588,1202,987,942,1134,1216,1051,851,73,45,45,48,49,45,1464,863,46,48,89,57,96,52,174,286,390,471,577,603,614,697,741,801,1300,1442,1521,1443,1499,1702,1552,1582,1660,1606,1707,1650,1714,1799,1673,1603,1619,1685,1660,1470,1509,1408,1294,901,837,724,628,600,564,566,583,522,365,305,224,109,86,45,45,45,963,1374,49,47,45,45,48,49,46,45,45,48,114,361,1198,1362,1392,1426,1417,1381,1158,1086,1049,808,587,921,833,770,823,859,961,970,851,807,723,744,958,859,794,794,803,741,704,678,594,383,107,49,45,45,45,42,49,45,45,45,42,49,456,1873,45,45,48,49,45,45,45,48,49,45,75,298,928,1447,1304,1465,1401,1401,1256,1023,1124,839,634,793,835,761,864,835,954,998,896,831,743,747,957,879,818,791,800,812,778,702,546,445,174,45,45,43,49,45,45,45,44,49,45,45,45,1986,330,49,45,45,45,48,579,1030,1107,1124,1065,993,1037,1152,969,1053,1134,1181,1385,1592,1718,1768,1682,1461,1424,1444,1340,1148,1095,1408,1246,1252,1179,1366,1497,1590,1456,1538,1697,1595,1410,1573,1547,1603,1201,974,933,1154,1200,1051,853,49,45,45,45,48,49,1496,837,45,62,163,250,282,444,514,605,718,997,1118,1186,1495,1414,1451,1547,1597,1594,1568,1627,1686,1742,1802,1760,1743,1741,1646,1686,1592,1526,1588,1534,1506,1517,1713,1801,1711,1706,1660,1654,1637,1645,1525,1366,1538,1473,1383,1145,1077,1120,1096,1056,1103,1002,1016,987,1394,2048,1952,918,998,872,899,992,964,914,891,935,927,801,870,987,1303,1359,1264,1239,1406,1369,1462,1418,1466,1427,1423,1209,991,1040,932,1109,1110,1171,1030,1184,1051,1004,1259,1210,1198,1322,1267,1079,1170,1186,1180,1268,1243,1280,1305,1280,1300,1289,1290,1282,1340,1297,1416,1427,1353,1290,1276,1269,1331,1342,1406,1463,1428,1398,1425,1375,1299,1335,1357,1359,1389,1413,1336,1323,1241,1236,1205,1154,1217,1266,1195,1146,1208,1086,1053,1020,1199,1622,1272,1267,1287,1335,1337,1354,1491,1456,1375,1433,1373,1307,1389,1317,1387,1374,1417,1381,1355,1260,1213,1243,1226,1190,1250,1227,1151,1200,1146,1054,1048,845,2048,1006,978,910,862,945,1007,923,876,959,924,794,835,941,1253,1309,1320,1237,1342,1408,1396,1403,1469,1423,1367,1287,1039,1006,930,1031,1110,1199,1062,1170,1080,1006,1211,1228,1239,1277,1285,1122,1120,1188,1169,1256,1273,1289,1295,1296,1318,1337,1295,1274,1311,1296,1422,1391,1967,897,92,924,1266,1164,763,1366,1192,593,92,1329,1580,888,838,1041,1173,1023,960,1001,1091,927,950,938,1042,1094,1021,1078,1297,1393,1367,1449,1498,1504,1631,1361,1256,1356,1368,1411,1243,1402,1159,1183,1120,1008,1159,1358,1488,1430,1394,1326,1158,1196,1082,1316,1285,968,1104,1164,1137,947,853,922,1029,1015,1097,992,1003,1238,1904,1131,1025,1008,1021,1105,1288,1321,1187,1229,1288,1349,1327,1425,1409,1326,1227,1378,1580,1692,1433,1507,1411,1416,1481,1424,1420,1535,1546,1420,1403,1507,1528,1514,1634,1666,1689,1551,1497,1601,1529,1579,1521,1464,1491,1453,1443,1387,1275,1242,1197,1209,1241,1336,1245,1160,1105,1230,2048,114,49,45,45,45,79,368,764,920,1047,1267,1628,1704,1764,1778,1725,1731,1726,1781,1790,1863,1811,1781,1692,1341,1429,1247,1587,1797,1840,1850,1909,1894,1934,1938,1808,1874,1852,1867,1831,1841,1768,1757,1819,1842,1435,1457,1306,1064,459,48,49,45,39,45,48,49,1701,1470,1083,1057,927,1049,1154,1233,1175,1051,990,1010,931,1008,1205,1244,1271,1159,1036,1210,1327,1396,1350,1288,1137,1308,1560,1531,1620,1673,1629,1678,1548,1527,1577,1669,1683,1716,1644,1615,1479,1411,1350,1420,1376,1344,1586,1616,1555,1498,1478,1425,1426,1414,1425,1383,1346,1326,1785,1406,713,781,858,931,1034,1028,1076,1188,1231,1176,1192,1250,1232,1380,1372,1353,1491,1447,1497,1485,1430,1456,1559,1654,1610,1633,1615,1671,1779,1744,1768,1859,1704,1585,1613,1622,1662,1732,1709,1718,1738,1704,1710,1652,1605,1770,1803,1750,1702,1690,1752,1713,1482,1196,1121,824,880,1250,1230,1679,1520,1497,1175,1058,600,550,896,1078,1236,1078,2015,1441,1468,1464,1518,1520,1522,1533,1498,1493,1557,1665,1824,1884,1973,2004,1999,2010,1984,2012,2004,1947,1853,1771,1837,1882,1905,1915,2006,2010,1867,1852,1845,1784,1695,1749,1757,1831,1874,1943,1957,2019,2021,1994,1979,1785,1587,1488,1512,1505,1518,1510,1507,1484,1453,1461,1441,1461,2048,1375,1323,1296,1269,1284,1259,1377,1301,1259,1270,1326,1156,1358,1371,1447,1408,1447,1448,1392,1452,1538,1531,1457,1567,1551,1551,1664,1601,1617,1584,1606,1546,1534,1492,1607,1691,1654,1671,1689,1473,1351,1413,1364,1250,1243,1237,1237,1219,1196,1180,1200,1126,1226,1204,1282,1271,1235,1937,1391,1041,1171,1136,1065,960,1062,1116,1084,1141,1107,1169,1207,1349,1350,1475,1509,1591,1556,1514,1645,1550,1426,1450,1596,1559,1507,1529,1406,1447,1341,1335,1317,1352,1268,1417,1429,1546,1527,1469,1480,1332,1216,1162,1010,1033,1024,1151,1178,1168,953,917,1047,944,906,930,1024,1626,1811,1546,1614,1517,1634,1616,1652,1649,1524,1589,1646,1699,1500,1466,1563,1595,1558,1726,1689,1543,1642,1584,1452,1471,1450,1616,1554,1433,1527,1571,1547,1543,1508,1569,1572,1607,1670,1678,1678,1536,1522,1678,1641,1527,1383,1171,1489,1525,1534,1441,1547,1613,1680,1720,1686,1534,1570,1744,1947,953,997,990,1080,1070,1092,1067,1104,1061,1011,1164,1128,1185,1161,1083,1154,1105,1257,1229,1233,1245,1301,1327,1251,1109,1098,1029,1062,1029,978,1047,1043,905,958,908,946,950,1061,1076,1005,1024,986,996,993,951,997,997,1019,1078,1067,1145,1083,1133,1035,923,888,862,2048,1358,1291,1317,1288,1307,1252,1384,1315,1240,1268,1316,1122,1261,1264,1395,1346,1331,1336,1326,1443,1541,1636,1609,1502,1333,1346,1516,1554,1691,1738,1679,1523,1328,1340,1392,1485,1460,1529,1486,1443,1353,1413,1367,1252,1253,1216,1256,1227,1205,1181,1229,1138,1220,1213,1294,1272,1244,1944,1717,1574,1604,1591,1591,1570,1526,1630,1585,1543,1599,1644,1764,1809,1790,1797,1546,1641,1609,1770,1834,1853,1773,1822,1881,1860,1806,1885,1736,1820,1689,1743,1746,1743,1692,1707,1606,1829,1913,1697,1702,1320,1337,1335,1285,1504,1503,1469,1483,1533,1516,1504,1585,1502,1470,1446,1499,1829,1467,809,754,851,943,778,640,889,903,801,834,780,959,1069,1146,1245,1218,1332,1258,1414,1500,1577,1496,1628,1620,1648,1562,1632,1599,1616,1628,1555,1459,1444,1508,1522,1574,1474,1442,1448,1388,1336,1289,1123,1225,1168,1213,1036,1014,1036,1075,1001,951,1021,940,984,789,1135,2037,1747,1828,1893,1836,1814,1808,1849,1839,1724,1671,1549,1459,1497,2048,1651,1850,1897,1887,1854,1883,1903,1895,1712,1729,1568,1519,1487,2011,1751,1848,1894,1880,1931,1824,1781,1615,1472,1463,1555,1645,1642,1908,1695,1874,1964,1646,2001,1946,1685,2017,1828,1320,1487,1617,1489,1550,1972,1437,1381,1657,1548,1472,1815,1750,1299,1560,1608,1570,1561,2048,1660,1670,1654,1751,1785,1766,1731,1780,1775,1834,1809,1900,1745,1740,1781,1781,1829,1817,1827,1789,1878,1811,1763,1775,1772,1754,1767,1667,1791,1779,1744,1741,1797,1820,1767,1777,1763,1716,1715,1705,1745,1725,1722,1690,1621,1855,1870,1880,1848,1805,1824,1885,1873,1828,1759,1676,1547,2025,2003,1936,1891,1937,1929,1912,1898,1922,1905,1885,1853,1921,1882,1846,1761,1767,1745,1815,1827,1758,1848,1765,1863,1818,1826,1749,1780,1702,1601,1566,1587,1711,1795,1783,1729,1754,1679,1693,1745,1698,1755,1780,1788,1806,1722,1891,1905,1929,1892,1816,1837,1880,1915,1923,1903,1915,1879,1997,2050,1942,1959,2028,1996,1995,2009,1974,1946,1926,1941,1972,2010,1942,1932,1899,1990,1957,1972,1940,2023,2022,1996,1894,1933,1900,1947,1869,1687,1816,1791,1865,1920,1936,1963,1964,1979,1963,1961,1902,1998,1984,1867,1821,1847,1855,1864,1814,1798,1780,1827,1845,1769,1722,1636,1556,1431,1415,976,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2045,1931,1464,1376,1428,1532,1569,1489,1442,1469,1197,1225,1462,1516,1215,1217,1384,1461,1481,1445,1487,1391,1390,1380,1514,1452,1461,1485,1448,1527,1428,1547,1508,1564,1496,1489,1596,1487,1544,1536,1440,1527,1579,1522,1382,1450,1408,1656,1649,1641,1639,1538,1553,1686,1673,1506,1610,1622,1536,2048,1051,1082,1152,1124,1026,968,1061,1126,1126,1147,1102,1199,1207,1383,1379,1488,1552,1633,1540,1557,1628,1476,1410,1496,1599,1525,1555,1511,1377,1476,1287,1319,1375,1274,1305,1457,1445,1537,1532,1464,1437,1290,1217,1077,1021,1023,1047,1153,1178,1125,873,1005,1047,925,921,971,1070,1943,1326,1082,1129,1095,1064,1025,1080,1116,1047,1160,1187,1292,1266,1263,1605,1524,1432,1567,1484,1472,1608,1541,1448,1544,1600,1568,1466,1500,1472,1633,1631,1772,1848,1895,1721,1663,1808,1786,1648,1576,1577,1329,1308,1209,914,1143,1061,1144,1150,1150,962,939,1064,951,897,987,1050,1677,1810,1530,1504,1525,1539,1506,1456,1539,1534,1494,1534,1579,1700,1738,1775,1754,1645,1551,1566,1725,1756,1875,1696,1737,1806,1829,1746,1878,1533,1764,1744,1739,1700,1694,1589,1610,1615,1734,1888,1682,1810,1238,1332,1312,1242,1398,1464,1466,1431,1465,1467,1440,1483,1494,1394,1386,1437,1694,2015,1670,1669,1681,1773,1767,1737,1739,1786,1805,1818,1844,1894,1731,1733,1790,1798,1842,1823,1790,1853,1837,1781,1756,1756,1770,1785,1760,1709,1796,1758,1743,1731,1827,1782,1738,1754,1755,1704,1713,1721,1743,1734,1716,1673,1690,1864,1880,1871,1854,1812,1827,1901,1882,1804,1720,1648,1586,865,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2053,1210,1323,1335,1453,1457,1537,1506,1409,1449,1471,1479,1410,1449,1365,1342,1033,731,1076,1280,1532,1628,1779,1833,1838,1900,1859,1742,1764,1203,1770,1738,1838,1886,1850,1818,1788,1802,1708,1451,1206,985,1119,1347,1184,1252,1383,1153,1206,1204,1370,1447,1467,1522,1426,1436,1386,1341,2041,1513,1451,1494,1558,1477,1465,1532,1488,1453,1508,1601,1625,1409,1582,1676,1665,1680,1803,1731,1631,1720,1575,1583,1533,1553,1572,1587,1581,1613,1618,1598,1564,1525,1565,1600,1656,1558,1640,1552,1568,1597,1660,1605,1576,1327,1192,1473,1501,1437,1342,1479,1531,1575,1628,1460,1369,1494,1897,1647,1429,1399,1396,1440,1353,1467,1481,1369,1389,1476,1527,1139,1420,1542,1528,1526,1704,1647,1567,1638,1510,1472,1406,1564,1560,1580,1436,1514,1524,1560,1458,1497,1566,1536,1574,1562,1586,1635,1520,1527,1575,1502,1394,1261,889,1251,1368,1378,1246,1415,1449,1520,1546,1435,1325,1386,1674,1947,1627,1674,1657,1785,1759,1730,1740,1605,1714,1736,1828,1599,1503,1648,1636,1624,1741,1792,1647,1682,1651,1519,1550,1509,1675,1676,1492,1551,1593,1622,1655,1605,1643,1708,1685,1741,1750,1746,1620,1581,1727,1649,1574,1478,1258,1603,1694,1691,1570,1641,1711,1769,1821,1823,1654,1637,1758,1955,557,603,615,648,652,693,838,1000,1040,1052,885,1259,1465,1546,1631,1452,1186,1561,1543,1665,1801,1648,1580,1745,1663,1636,1751,1612,1595,1804,1684,1714,1785,1690,1615,1661,1742,1737,1803,1703,1429,1433,1402,1210,1217,1373,1382,1247,1249,1289,1329,1472,1563,1541,1523,1559,1663,931,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2055,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2046,2014,2031,2051,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2028,2011,2051,2054,2057,2048,2056,2047,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2057,2048,2057,2035,2008,2047,2050,2056,2048,2048,2049,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2051,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2037,2014,2035,2051,2057,2048,2048,2050,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1669,1299,1504,1325,1104,1028,1114,1129,1074,1199,1073,1092,1220,1080,1235,1059,1081,1108,1175,1168,1197,1125,1197,957,914,852,943,952,587,1054,838,875,1127,351,349,369,1131,1226,1480,1498,1493,1422,856,1077,958,902,878,934,1378,1405,1292,1185,1062,1026,1186,1187,983,1213,1093,1172,1161,1098,1223,1059,1159,1089,1106,1131,1227,1047,1039,918,972,858,978,975,559,974,775,759,840,355,350,354,1291,1322,1507,1465,1438,1117,1115,1153,915,933,849,1532,1442,45,44,45,62,126,121,171,193,175,270,210,246,574,972,1028,1003,1168,1438,1584,1582,1663,1627,1770,1744,1759,1616,1547,1552,1619,1691,1689,1762,1779,1649,1640,1651,1600,1631,1579,1075,946,959,793,577,272,175,128,117,144,173,115,59,56,50,47,45,147,655,1021,1900,148,256,197,186,220,395,402,391,413,440,259,359,690,814,989,946,1095,1285,1585,1703,1793,1755,1774,1852,1810,1747,1664,1678,1691,1862,1821,1889,1864,1809,1793,1917,1851,1860,1891,1300,983,888,874,695,528,401,338,308,405,338,442,151,157,137,197,203,118,2019,1346,1314,1303,1205,1326,1401,1431,1311,1386,1325,1406,1465,1409,1392,1447,1496,1453,1460,1463,1538,1376,1376,1396,1412,1277,1117,1270,1396,1305,1361,1341,1389,1250,1388,1431,1325,1284,1396,1530,1458,1401,1516,1284,1383,1410,1441,1422,1433,1373,1310,1376,1289,1477,1343,1191,1247,1220,1340,976,1037,1446,1483,44,45,48,316,1048,1039,1035,1341,1497,1504,1341,1807,1796,1759,1688,1679,1228,952,1459,1705,1741,1853,1705,1826,1828,1764,1632,1661,1689,1801,1882,1843,1886,1848,1751,1874,1887,1885,1843,1912,1582,1590,1507,1715,1566,1314,1262,1355,1156,1152,1117,706,884,47,45,44,315,691,1091,777,703,1058,1243,1316,1361,970,597,989,928,1049,678,866,694,673,706,708,965,887,843,898,848,988,849,669,636,977,958,902,888,961,533,762,770,802,705,716,795,910,981,687,829,833,827,861,879,891,915,922,847,832,839,850,1060,796,1060,1744,1383,1510,1507,1651,1588,1442,1761,1494,1553,1455,1678,1606,1530,1610,1465,1419,1481,1674,1604,1514,1616,1363,1506,1703,1925,1439,1492,1289,1122,1243,1343,1377,1088,1112,1230,1043,1135,1231,1262,1244,1102,826,850,843,1777,1550,1380,1459,1380,1295,1394,1178,1210,1379,1349,1255,1114,926,892,635,976,1919,1507,1496,1507,1403,1297,1367,1166,1245,1329,1316,1220,887,839,709,757,1903,1470,1483,1414,1480,1334,1249,1359,1176,1300,1395,1313,1198,1044,917,872,641,1021,1897,1433,1512,1421,1478,1535,1501,1344,1172,907,821,754,902,859,825,1754,1473,1471,1419,1454,1322,1244,1320,1167,1316,1352,1301,1133,943,947,751,696,1671,1655,1479,1362,1131,1251,1461,1410,1331,943,996,1391,1742,1594,1564,1363,1258,1136,1492,1391,1229,1047,1276,1273,1330,937,1187,1728,1773,1781,1832,1685,1589,1392,1854,1910,1786,1750,1917,1800,1292,1280,1290,1346,1450,1476,1876,1313,1427,1289,1364,1460,1536,1353,909,948,1171,1808,974,857,940,1771,1324,1365,1675,1598,1529,1745,1730,1786,1201,1528,1724,1515,1642,1890,1863,1580,1251,1607,1687,1542,1761,1916,1909,1399,1332,1664,1688,1602,1815,1918,1934,1297,1378,1673,1717,1535,1733,1916,1919,1412,1406,1649,1683,1519,1714,1854,1919,1342,1367,1683,1571,1524,1764,1709,1844,1194,1559,1733,1523,1638,1761,1825,1411,1333,1667,1651,1509,1715,1775,1857,1233,1488,1732,1560,1605,1825,1840,1579,1627,1505,1590,1571,1567,1674,1689,1539,1539,1596,1433,1589,1595,1558,1563,1431,1486,1541,1392,1500,1475,1162,1088,1174,1343,1291,1155,1305,1661,1564,1271,1284,1410,1393,1408,1195,1490,997,1395,1844,44,45,48,49,45,97,415,669,745,854,947,972,976,1058,932,1162,1107,1270,1321,1175,1309,1333,1166,1190,1115,994,1213,1032,1214,1175,1042,910,934,790,665,721,628,315,47,45,44,45,50,1315,876,743,811,1133,1290,1278,1004,1015,1009,1083,743,731,763,975,988,1097,1165,1117,1185,1276,1258,1202,1359,1366,1336,1349,1278,1320,1206,926,797,555,546,553,793,891,801,806,882,1034,947,883,1010,1240,1039,993,1036,821,1093,1239,1081,1043,965,1091,837,1374,732,1095,1145,1628,1201,1255,1340,1466,1466,1476,1649,1756,1794,1831,1816,1805,1721,1725,1616,1685,1768,1607,1669,1621,1649,1565,1482,1649,1679,1591,1558,1576,1591,1549,1416,1172,1067,1401,1616,1517,1584,1571,1443,1348,1435,1441,2018,696,744,1055,1111,1159,1316,1401,1317,1267,1532,1439,1296,751,930,1168,1302,1434,1248,1208,1220,1117,1166,1197,1199,1299,1187,1328,1416,1239,1268,1364,1391,1336,1299,1231,1248,1215,948,979,1148,1137,1293,1176,1442,620,1411,858,973,1251,1745,1695,818,956,1067,1703,807,847,820,1053,1094,1014,982,1032,1227,1344,1579,1653,1649,1636,1490,1341,1448,1516,1692,1595,1702,1630,1633,1616,1565,1484,1512,1660,1822,1855,1844,1827,1740,1747,1454,1386,1328,1358,1342,1236,1017,626,1013,1136,1119,1139,836,1241,835,1048,1104,937,854,1126,1266,1461,754,609,561,712,608,624,594,852,825,1130,1063,810,1095,796,812,784,828,787,967,876,905,923,888,864,913,903,904,991,1028,969,791,636,658,764,750,738,922,885,755,903,785,839,793,1056,766,1442,1807,2048,1560,2057,433,92,176,195,77,94,351,657,731,823,947,952,957,1030,947,1153,1126,1292,1338,1186,1309,1303,1170,1205,1034,1068,1199,1023,1216,1119,988,902,887,651,673,741,493,126,81,190,182,92,425,1503,711,719,995,1142,1382,1025,952,1049,932,806,669,764,946,923,969,1088,1061,1067,1156,1197,1096,1358,1413,1386,1272,1226,1363,1161,924,731,509,536,541,790,907,782,817,923,1023,904,912,1035,1179,1046,1382,697,1028,1112,1323,810,1373,631,1046,1218,963,1062,924,965,994,1078,1155,1075,1979,1134,1217,1389,1345,1509,1431,1578,1684,1786,1824,1817,1803,1709,1750,1675,1616,1781,1631,1647,1576,1644,1606,1479,1620,1675,1666,1521,1586,1561,1591,1495,1304,1067,1211,1632,1547,1598,1566,1542,1341,1362,1444,1783,1202,681,1000,1093,1121,1280,1335,1382,1281,1464,1486,1331,947,822,1044,1281,1384,1264,1242,1281,1110,1189,1143,1222,1316,1219,1214,1391,1358,1241,1319,1367,1315,1331,1259,1247,1199,1087,975,1077,1158,1261,1183,1347,772,1006,1165,1185,780,1749,1314,864,635,731,651,961,703,1330,1755,809,877,788,1071,1100,984,1019,1032,1186,1338,1572,1656,1649,1639,1492,1342,1405,1508,1661,1606,1694,1634,1631,1620,1579,1470,1514,1646,1822,1853,1850,1832,1743,1751,1497,1417,1324,1352,1359,1242,1006,614,978,1159,1105,1201,806,1232,854,1004,1106,1238,773,566,967,708,1286,1188,2003,1895,1847,1705,1754,1719,1714,1742,1923,1890,2057,464,45,48,49,45,41,45,48,49,45,44,45,148,784,1053,1417,1404,1569,1569,1429,1514,1549,1592,1670,1708,1764,1747,1666,1721,1624,1671,1637,1623,1567,1599,1440,1317,1280,1125,1166,895,476,322,208,139,44,45,48,47,45,44,45,50,47,45,44,45,1359,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1368,1226,1202,1234,1242,1094,1131,1137,1220,1202,1275,1281,1165,1321,1269,1459,1701,1554,1535,1365,1367,1515,1573,1439,1381,1600,1610,1549,1497,1488,1537,1431,1375,1394,1466,1452,1489,1268,1213,1335,1266,1266,1187,1099,869,1043,1033,1134,1001,824,686,742,817,689,640,624,534,1880,1664,1153,1079,1140,1004,1199,1281,1349,1141,1226,1193,1277,1350,1266,1586,1529,1779,1786,1685,1752,1784,1603,1463,1553,1477,1381,1585,1618,1456,1465,1631,1574,1654,1483,1711,1532,1376,1279,1373,1236,1109,1128,1018,1001,1085,914,990,1037,1050,1042,900,859,686,596,434,434,376,1371,1364,660,691,673,665,669,653,681,689,686,625,677,678,1226,1583,1502,1550,1583,1678,1611,1553,1499,1403,1081,887,1272,1462,1447,1551,1523,1447,1502,1419,1326,1144,949,1151,1418,1515,1482,1456,1493,1391,1232,936,696,639,677,701,674,674,655,676,710,665,648,666,1176,1741,698,661,635,665,702,697,655,656,695,705,712,661,821,1401,1624,1595,1631,1715,1689,1566,1513,1434,1370,1318,1362,1274,1312,1346,1327,1302,1276,1281,1151,1664,1677,1627,1618,1661,1595,1538,1389,1097,991,737,757,672,669,677,623,690,687,655,644,640,692,660,808,2028,850,400,544,652,629,717,871,914,996,1118,1030,1137,1346,1503,1507,1577,1559,1559,1518,1468,1434,1470,1454,1442,1489,1485,1422,1416,1399,1259,1360,1394,1416,1598,1618,1560,1447,1319,1118,1156,1266,1230,1228,1279,1152,1126,1017,941,1020,1013,1002,967,900,877,693,610,394,1227,1292,326,490,520,675,741,826,887,913,1011,1031,1162,1239,1343,1514,1620,1667,1722,1656,1633,1487,1432,1373,1306,1304,1374,1426,1465,1403,1447,1492,1443,1453,1412,1461,1450,1556,1683,1648,1530,1350,1301,1214,1239,1211,1210,1219,1178,1078,1058,1061,1003,907,795,763,684,514,884,1761,303,490,629,641,672,780,905,920,1065,1078,1036,1355,1555,1500,1490,1583,1517,1463,1314,1296,1320,1356,1322,1442,1389,1412,1364,1258,1402,1369,1371,1296,1349,1338,1293,1356,1538,1547,1620,1423,1468,1401,1370,1215,1186,1229,1221,1152,1084,1019,983,935,886,777,648,494,402,1750,1743,1723,1796,1701,2053,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2028,1976,2053,2012,2053,1990,2048,1960,2048,1971,2048,2004,1975,1876,2029,1997,1771,1883,1962,1997,1984,1969,1962,1962,1996,1939,1006,765,817,899,992,999,1127,1023,1070,847,783,964,1032,863,939,893,902,985,824,802,877,838,978,1087,884,687,881,1350,1283,1267,1373,1127,560,539,504,598,556,797,933,941,1052,958,708,996,726,943,998,1012,750,1060,817,514,539,686,734,708,1268,470,791,656,694,745,634,1134,903,1015,1039,740,745,540,542,543,696,747,808,823,662,694,884,973,1169,806,778,1011,999,999,1037,741,945,740,809,977,925,925,428,539,903,772,775,531,649,913,648,621,641,671,837,764,848,681,726,750,741,1638,1689,1707,1467,1435,1420,1355,1547,1671,1921,1742,1791,1462,1439,1421,1428,1556,1772,1966,1640,1635,1738,1636,1619,1688,1748,1799,1786,1751,1725,1655,1268,1185,1191,1455,1596,1614,1715,1769,1730,1776,1671,1752,1705,1739,1666,1752,1672,1759,1771,1658,1774,1799,1687,1740,1789,1764,1639,1574,1609,1411,1302,1311,1393,1531,1523,1612,1646,1561,1619,1616,1531,1576,1639,1615,1720,2034,1410,1405,1487,1546,1446,1480,1561,1477,1463,1532,1629,1568,1439,1642,1672,1648,1708,1778,1718,1672,1681,1570,1572,1508,1588,1605,1594,1568,1631,1641,1581,1555,1568,1650,1623,1641,1611,1612,1573,1566,1604,1642,1595,1566,1234,1250,1474,1508,1396,1393,1479,1555,1622,1613,1453,1399,1491,2051,1366,1230,1222,1257,1225,1259,1232,1245,1248,1282,1301,1403,1457,1291,1283,1293,1311,1310,1313,1271,1245,1289,1268,1253,1262,1258,1233,1254,1255,1252,1230,1188,1189,1248,1225,1246,1237,1237,1277,1245,1269,1246,1281,1300,1323,1575,1295,1276,1317,1335,1309,1291,1232,1255,1292,1274,1225,1820,1914,1727,1780,1787,1802,1810,1777,1774,1785,1784,1755,1724,1728,1710,1703,1670,1633,1624,1610,1654,1652,1594,1578,1713,1707,1701,1716,1762,1744,1803,1739,1766,1746,1735,1713,1589,1712,1682,1677,1661,1661,1671,1741,1711,1721,1730,1731,1745,1789,1797,1746,1744,1738,1756,1748,1752,1776,1509,1089,1624,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1680,654,603,582,643,598,591,596,629,632,612,623,1331,641,519,596,591,534,379,396,493,1693,1739,1383,1031,1125,1055,1303,1518,1475,1136,1357,1753,1223,1037,1440,396,428,449,474,515,467,511,434,355,261,279,280,402,1686,1898,1754,1704,1703,1775,1015,1176,1142,915,900,1121,1106,883,1181,593,1104,916,977,984,1369,629,1299,1077,1067,990,1046,921,1039,1248,954,897,842,1317,629,1172,1018,1308,1158,1027,1185,581,1131,1081,1158,927,915,1277,511,305,301,476,1307,1045,1254,791,1305,913,1807,933,1726,1307,1950,1462,1497,1558,1574,1598,1629,1631,1628,1685,1620,1654,1675,1590,1665,1639,1592,1620,1641,1740,1719,1685,1750,1749,1775,1696,1676,1772,1799,1813,1810,1854,1891,1893,1891,1906,1875,1761,1779,1827,1813,1810,1783,1791,1801,1752,1760,1572,1588,1624,1619,1566,1458,1493,1612,1560,1710,1666,2048,1411,1402,1501,1556,1496,1503,1558,1466,1470,1520,1629,1595,1396,1618,1681,1630,1696,1775,1737,1655,1710,1569,1595,1525,1561,1605,1600,1579,1609,1642,1590,1544,1548,1631,1608,1620,1587,1621,1563,1584,1612,1651,1619,1582,1273,1218,1477,1488,1418,1328,1490,1537,1608,1613,1431,1382,1475,1975,982,582,712,488,616,736,834,733,1000,958,1144,898,1186,1251,1295,1320,1336,1354,1379,1389,1406,1475,1358,1402,1456,1566,1443,1405,1474,1321,1028,980,911,1212,1260,1267,1265,1041,1114,959,936,994,882,919,1029,873,764,845,900,845,482,648,819,614,703,655,602,1408,1424,733,742,884,974,1053,1127,1039,1113,1161,1105,956,828,732,1009,1334,1309,1423,1443,1518,1475,1522,1343,1489,1548,1603,1543,1516,1610,1642,1703,1669,1564,1500,1542,1586,1480,1478,1469,1276,1312,1209,1084,930,1029,1074,1090,1061,1163,1218,1235,1102,995,833,734,813,771,1022,931,1652,2021,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2055,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2057,2048,2048,2048,2048,2048,2048,2022,1906,1981,2048,2048,2056,1914,2009,2048,2057,2048,2048,1867,2023,2055,2051,2056,1939,1994,2048,2045,1995,1931,1993,1993,2003,1863,1979,1993,2007,1863,1975,2027,2005,1914,1982,1995,1943,1993,1870,2030,2042,1896,1922,1933,1878,1984,1858,1975,1863,1947,1907,1904,1946,1919,1959,1859,2011,1858,1974,1863,2016,1863,1933,1906,1925,1933,1899,1984,1829,2031,1870,1994,1890,1912,1937,1932,1939,1950,1940,1921,1962,1892,1987,1916,1983,1853,2030,1875,2028,1867,1979,1863,1968,1878,1958,1890,1931,1918,1945,1919,1922,1939,1913,1960,1873,1979,1895,2005,1865,2011,1889,1937,1915,1985,1921,2010,1849,1994,1935,1972,1881,2022,1979,1977,1888,1981,2008,1903,1943,1907,1908,1939,1963,1898,1979,1869,1942,1896,1941,1907,1903,1951,1992,1868,1981,1865,1993,1863,1933,1914,1980,1870,2029,1867,1955,1894,1908,1939,1825,2018,1875,1985,1870,2016,2048,2027,1900,1979,2048,1981,1976,2016,2048,1863,1978,2044,2014,1918,1929,1933,1986,1879,1978,1864,1975,1866,1952,1907,1948,1901,1938,1917,1878,1986,1834,1945,1896,1909,1946,1807,2031,1864,1926,1932,1932,1933,1923,1946,1912,1977,1924,1977,1891,1981,1882,2015,1875,2029,1870,1960,1903,1948,1914,1942,1905,1938,1915,1926,1933,1930,1939,1888,1980,1928,1979,1898,2009,1890,2005,1896,2006,1896,2005,1912,2006,1903,2009,2019,1916,1940,1919,1929,1933,1930,1933,1928,1946,1884,1978,1855,2028,1865,1975,1864,1931,1910,1921,1937,1874,1981,1969,1960,1940,1937,1953,1905,1946,1903,1951,1900,1946,1907,1939,1909,1939,1902,1941,1917,1937,1930,1960,1907,1947,1901,1940,1910,1941,1907,1941,1914,1930,1932,1934,1939,1886,1979,1855,2014,1864,1957,1914,1944,1907,1942,1907,1940,1907,1938,1906,1942,1916,1942,1906,1938,1906,1941,1906,1949,1896,1937,1917,1908,1957,1800,2030,1864,1950,1915,1943,1910,1982,1864,1938,1898,1914,1932,1938,1951,1834,2009,1850,1977,1870,1975,1863,1981,1865,1979,1871,2029,1865,1943,1914,1983,1953,1980,1984,1946,1847,2009,1852,1998,1864,1981,1867,1964,1881,1914,1933,1951,1915,1939,1906,1908,1903,1950,1898,1904,1946,1832,2009,1859,2029,1866,1978,1870,1939,1896,1941,1917,1919,1939,1901,1979,1857,2006,1865,1978,1879,1976,1865,1945,1895,1979,1865,2014,1964,1980,1860,2033,2048,2048,1864,1997,2048,2029,1906,1981,2057,2030,1919,1992,2043,1870,1976,2048,2055,1863,1977,1864,1978,1931,2009,1975,1957,1875,1980,1878,2023,1877,2030,1864,1994,1864,1941,1907,1983,1881,2030,2048,1882,2030,2048,1870,2030,2033,1863,1973,2048,1870,1998,2048,1879,1976,2048,1871,1978,2048,1877,2030,1865,2014,2048,1876,1979,2048,2055,1880,1975,2048,1946,1979,1950,1987,1944,1976,1903,1976,1939,1980,1942,1980,1932,1980,1854,1975,1865,1975,1865,1992,1865,1984,1870,1975,1879,1976,1860,2009,1940,1978,1928,1979,1922,1980,1855,2030,1876,2030,1876,2029,1870,2032,1911,2008,1931,1979,1921,1996,2050,2057,2048,1985,1970,1988,1985,1941,1986,2019,1988,1867,1984,2048,2057,2055,1865,1998,1966,1989,1973,1920,1899,1977,1812,2030,1862,1910,1933,1843,2009,1851,1936,1907,1949,1900,1952,1896,1951,1900,1951,1896,1953,1895,1936,1903,1942,1915,1894,1973,1815,2030,1880,2032,1878,2029,1866,1994,1863,1968,1883,1932,1919,1950,1915,1941,1917,1950,1909,1981,1867,1977,1865,1977,1875,2019,1866,1978,1864,1996,1863,1963,1884,1943,1896,1946,1896,1945,1902,1916,1944,1892,1984,1842,2030,1867,1954,1901,1947,1903,1948,1901,1944,1905,1936,1927,1933,1936,1920,1946,1906,1977,1894,1979,1893,2005,1902,2010,1857,2032,1880,2032,1875,2030,1880,2028,1867,1951,1898,1915,1934,1927,1957,1925,1963,1881,1974,1893,2008,1866,2030,1880,1979,1870,1967,1882,1943,1907,1938,1902,1941,1917,1928,1937,1897,1977,1901,1982,1968,1977,1940,1946,1913,1977,1931,1958,1924,1963,1918,1957,1828,2005,2048,1865,1977,2014,1946,1876,1980,1953,1987,1950,1963,1922,1946,1830,2008,1857,1950,1905,1884,1986,1829,1945,1898,1903,1946,1993,1998,1964,1873,1982,1986,1946,1917,1961,1979,1890,1934,1910,1905,1946,1956,1915,1987,1864,1952,1907,1895,1960,1926,1946,1920,1964,1912,1977,1903,1977,1974,1959,1909,1977,1940,1961,1847,2009,1964,1977,1884,1982,1959,1983,1850,2017,1862,1934,1905,1882,1982,1906,1983,1853,1976,1862,1935,1913,1920,1937,1899,1986,1828,1977,1868,2030,1992,1962,1998,1861,1971,1862,1939,1896,1986,1880,2028,2048,1861,1972,1879,2033,2048,2048,2040,1919,1954,1903,1983,2048,1862,1978,1989,1959,1932,1950,1993,1861,1972,2048,2035,1924,1993,2048,1862,1943,1906,1985,1850,1975,1864,1992,1862,1927,1916,1923,1937,1918,1950,1997,2048,2025,1902,1947,1896,1984,1880,2028,1872,2029,2011,1933,1932,1934,1929,1933,2005,2048,2009,1937,1952,1905,1939,1906,1981,1862,1972,1871,2050,1868,1995,1880,2029,1988,1963,1954,1917,1989,1854,2031,2048,1890,1975,1871,1971,1862,1936,1908,1962,1893,1977,1945,1980,1896,2010,1964,1977,1940,1946,1905,1962,1919,1963,1996,1867,1972,2048,1876,1962,1882,1975,2010,1946,1993,1862,1962,1867,1972,1871,1938,1896,1945,1910,1920,1937,1996,1868,1971,1871,1971,1862,1973,1862,1964,1872,1939,1898,1904,1946,1958,1907,1982,1949,1979,2052,1909,2009,2053,2019,1931,2001,2021,1933,2002,2048,1870,2030,2020,1933,2004,1866,1978,1865,1979,1994,1960,1996,2048,1864,1998,2048,1964,1978,2052,1945,1979,2052,1864,1989,2013,1940,1995,1873,1979,2027,1902,1950,1901,1951,1895,1933,1906,1895,1958,1825,2005,1867,1958,1896,1916,1938,1963,1897,1980,1889,2031,2008,1938,1949,1920,1964,1892,1918,1932,1995,1945,1980,2052,1867,2013,1862,1972,2032,1895,1979,2048,1862,1978,2048,1863,1981,2048,1872,1975,2037,1894,1980,1100,1132,1145,1149,971,976,1918,1688,1854,1784,1866,1590,1204,1319,1975,2048,2048,1047,34,34,34,34,34,34,34,187,893,969,1071,1103,1068,946,878,729,946,949,998,917,1060,888,981,1128,976,1069,1024,927,885,851,848,1002,1117,910,923,835,901,969,908,913,1010,870,751,871,1074,1206,958,951,1347,1284,1269,1226,1290,1267,1476,1294,1511,1394,1406,1008,882,1062,1024,906,971,1051,1011,901,1144,987,1137,1027,1041,1088,1094,1034,1076,1185,1191,1105,1245,1330,1280,1093,913,347,777,906,1118,1081,1073,985,522,1252,1545,1521,1317,1462,1314,1397,1333,1073,1145,1189,913,1779,1293,1349,1282,1206,1195,1222,1147,1234,1479,1447,1381,1295,1308,1227,1311,1470,1535,1656,1570,1577,1611,1535,1563,1596,1511,1530,1493,1460,1389,1374,1360,1595,2054,2048,2048,2048,2048,2048,2055,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1472,1357,1440,1380,1351,1389,1447,1465,1495,1659,1657,1520,1450,1425,1289,1554,1667,1723,1756,1645,1646,1516,1432,1571,1645,1645,1660,1649,1581,1550,1433,1591,1978,2055,2055,1991,2048,2009,2022,2048,2018,2021,2048,1994,2041,2048,2022,2048,2048,2038,2055,2048,2029,1958,1926,2048,2043,1915,1527,1587,1612,1561,1572,1587,785,239,206,230,214,272,695,242,213,222,219,219,1167,1238,1335,1246,1162,1123,1232,1168,1269,1191,1183,1196,1110,1111,458,159,1670,1329,1872,2049,2034,2048,1446,878,2048,2048,2048,2048,2048,2048,1447,881,2048,2048,2048,2048,2048,2048,2048,1449,875,2051,2048,2048,2048,2048,2048,1417,947,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1715,1157,1019,81,424,2017,2048,2048,2048,2048,2048,2048,2048,2048,2048,2051,2048,2048,2048,2048,2039,2048,2048,2048,2048,2057,2056,2048,2048,2048,2048,2047,1927,2048,2048,2048,2048,2048,2055,2048,2048,2056,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2045,2048,2048,2048,2048,2032,2048,2048,2048,2048,2048,2033,2048,2048,2048,2013,2036,2048,2024,2048,2048,2032,2048,2025,1997,2048,2034,2057,2035,2048,2048,2034,2048,2048,2048,2054,2048,2056,2056,2048,1903,909,2054,2053,2048,1448,875,1947,2054,2048,1998,2048,2048,2048,2048,2048,2048,2056,2057,2048,2048,2048,2048,2048,2048,2035,2048,2053,2048,2048,2048,2049,2015,2048,2011,2048,2048,2057,2013,2048,1936,2048,2036,2048,2033,2048,2022,1990,2048,2033,2048,2032,2048,1912,2057,2035,2048,2035,2048,1933,2048,2051,2048,2052,2056,2001,2002,2048,2016,2048,2041,2036,2044,2048,2057,2048,2048,2048,2048,2055,2048,2032,2048,2023,2034,2048,2048,2048,2017,2048,2048,2048,2050,2048,2048,2048,2048,2048,2048,2056,2034,2037,2048,2048,2048,2048,2048,2016,2020,2007,2038,2041,2048,2043,2048,2024,1997,2048,2025,2048,2025,2057,1925,2048,2045,2048,2047,2048,1928,2048,2046,2048,2048,2048,1979,1990,2048,2028,2048,2016,2031,1952,2048,2030,2048,2033,2048,1910,2056,2044,2057,2044,2057,1916,1424,135,135,880,2048,1734,167,878,2045,1443,1140,1976,1980,2033,2013,2054,2014,258,874,2048,1377,936,2034,1726,136,880,2032,1338,131,137,427,284,874,2048,665,134,137,441,181,454,1014,899,864,905,976,927,869,805,924,891,898,805,1023,1120,908,941,1010,792,1082,1110,1092,966,1143,918,848,1179,1083,1097,1105,633,632,385,828,1238,955,1002,451,345,346,426,382,471,535,626,458,1472,1273,1008,923,1305,1448,1558,1531,1316,1401,1271,1542,1444,1243,1151,1203,1491,1433,1581,1546,1366,1237,1232,1330,1413,1468,1551,1448,1171,1179,1426,1430,1544,1612,1323,1222,1149,1498,1418,1561,1542,1251,1157,1206,1502,1464,1557,1479,1316,1197,1370,1331,1404,680,561,555,703,608,628,599,926,958,843,704,714,957,878,782,710,1015,815,740,446,771,589,870,817,739,799,674,854,484,665,637,414,749,728,719,736,694,715,594,604,598,649,526,523,616,458,474,481,561,645,1000,474,442,1385,1191,1253,1354,1588,1426,1251,1248,1169,1195,1018,1404,1253,1226,1431,1175,1137,1156,979,1493,839,1576,979,885,878,1613,944,954,865,980,876,1220,795,1190,1011,1119,758,904,924,844,967,1075,956,982,1076,1157,1004,1074,803,754,1009,1065,1126,1043,689,967,1137,660,550,487,450,740,685,692,862,760,654,654,654,779,799,1024,920,1150,916,513,886,830,786,856,615,697,866,360,333,608,710,770,949,695,1107,617,848,809,805,896,931,825,903,871,854,830,865,1016,582,848,904,880,811,985,681,722,1098,832,835,562,815,918,839,833,831,782,768,870,860,856,832,847,442,836,687,717,568,829,354,618,741,701,649,817,593,1297,776,762,1532,1757,1866,1702,1986,1857,2048,2048,2056,1812,1357,1659,1760,2053,2048,1856,1784,2048,1876,1765,2050,2048,2048,1988,1880,1854,1978,1842,1907,2011,1817,1946,1371,1179,642,663,494,1703,2053,1973,1621,1365,1173,1135,1196,2035,1874,1273,1244,1129,1019,1808,1386,1430,1173,528,164,383,1907,2048,2048,2048,2048,2048,2048,2057,2048,2048,2057,2048,2048,2024,1936,1381,2048,2048,2056,2048,2048,2048,2048,2048,823,25,1919,2020,2048,2048,2000,1389,2002,1889,2057,2003,1910,2048,2048,2048,2048,2027,1851,2048,2048,1850,2048,2024,2036,2048,2023,2053,2047,2039,1822,1410,1716,1867,2048,2048,2048,2048,2048,2048,2048,2048,1952,1936,1040,1040,1186,1123,1507,1081,1710,1469,1168,1566,1204,1301,1057,1102,1071,967,1202,1175,1558,1880,1923,1898,1887,1908,1350,1707,1677,1539,1700,1286,1025,1037,1110,1103,1756,1087,1034,1020,1160,1434,1003,1085,1264,1218,1307,1073,1758,2032,2048,1975,2048,1993,2048,2037,1972,2048,1975,2057,2048,1968,2056,1974,2048,2035,1981,2048,2048,2031,2027,2029,2038,2043,1973,2057,2036,1979,2057,2055,1979,2048,2051,1976,2057,2048,1981,2037,2048,1971,2048,2048,1976,2055,1972,2048,2048,2048,2055,1971,2057,2048,2048,2048,2048,2048,2048,2030,1936,2048,2048,2048,2048,2048,2048,2048,2048,2048,1943,2048,2048,2048,2048,2048,2048,2048,2048,1899,2048,2048,2048,2048,2048,2048,2048,1895,2048,2048,2048,2048,2048,2048,1929,2048,2056,2048,2048,2048,2048,2048,1891,2048,2048,2048,2048,2048,2048,2048,1895,2048,2048,2048,2048,2048,2048,2048,2048,2048,1926,1519,1670,1156,1759,1428,1688,1776,1789,1732,1795,1491,1526,1613,1577,1659,1767,1672,1662,1414,2051,1906,1021,1624,1320,1408,1101,1069,1653,1645,1731,1655,1735,1611,1884,1925,2050,2048,1441,1094,1176,1263,1133,1179,1196,951,1196,1731,1437,1554,1344,1454,1361,1435,1554,1530,1770,1592,1680,1580,1531,1603,1626,1789,1910,1757,1783,1827,1806,1858,1717,1772,1831,1718,1293,1751,1863,1623,1022,1381,1712,1792,1203,1528,1649,1540,1359,1457,1867,1575,1746,1792,1425,636,835,1371,1216,1220,1242,1336,1859,1739,1470,1520,1476,1459,1381,1714,1674,1969,2021,1622,1733,1877,1795,1845,1782,1832,1815,1702,1784,1543,1811,1767,1832,1653,1395,1469,1393,1517,1514,1338,1184,1424,1573,1635,1668,1515,1620,1540,1162,1562,1732,1569,1521,1483,1530,1525,1522,1532,1516,1480,930,765,601,637,729,667,684,634,642,600,625,668,742,634,708,682,735,669,760,792,764,595,610,533,643,614,292,399,484,469,1926,2024,1863,1728,1735,1721,1677,1684,1674,1715,1699,1696,1699,1706,1698,1878,2054,1753,1768,1763,1645,1653,1744,1729,1707,1760,1330,1009,990,1894,1813,1798,1672,1819,1658,1505,1481,1489,1482,1461,1481,1497,1495,1104,598,521,618,634,603,539,558,605,560,619,570,629,535,516,259,454,566,444,299,502,575,331,473,322,783,1979,1879,1655,1667,1670,1670,1668,1661,1696,1688,1694,1678,1742,2020,1613,1747,1757,1672,1717,1668,1710,933,750,752,1807,1890,1744,1576,1764,1792,1557,1529,1474,1523,1484,1483,1505,1506,1501,1491,1513,1496,1484,1490,1517,1495,1513,1510,1502,1469,1404,624,273,568,610,661,499,597,652,585,249,587,467,412,437,507,249,364,613,632,594,607,716,567,674,573,510,699,414,527,229,574,410,375,305,481,483,425,450,561,422,515,475,509,524,607,339,409,479,352,600,434,311,382,556,375,480,487,259,390,919,1993,2021,2024,1998,2025,1925,1689,1696,1689,1717,1700,1708,1712,1718,1662,1681,1684,1675,1675,1679,1706,1710,1677,1706,1701,1701,1690,1674,1696,1704,1688,1684,1786,2048,2048,1974,1634,1693,1724,1745,1665,1713,1690,1643,1684,1575,1726,1757,1696,1690,1715,1732,1654,1728,1708,1675,1398,1000,1068,1057,1338,1750,1606,1755,1647,1720,1334,1196,851,1756,1834,1831,1847,1823,1482,1554,1485,1518,1524,1497,1463,1490,1510,1485,1490,667,601,372,454,416,396,583,390,586,627,571,489,517,596,522,235,318,135,256,479,651,493,524,435,539,331,534,478,109,404,1009,2024,1988,1805,1714,1711,1714,1690,1690,1696,1664,1687,1702,1736,1679,1682,1836,2048,1784,1639,1761,1708,1749,1681,1672,1767,1798,1680,1537,928,1272,1306,1567,1754,1767,1533,1581,1488,1503,1486,1483,1489,1488,1493,1462,1497,872,342,366,309,476,597,306,254,289,384,179,420,336,495,142,108,343,238,335,290,425,407,341,478,600,538,469,301,545,533,1449,1995,2048,1762,1701,1686,1695,1675,1683,1693,1658,1718,1698,1720,1719,1704,1921,2048,1804,1787,1787,1758,1773,1608,1868,1781,1769,1835,1856,1115,809,1027,1578,1496,1661,1632,1799,1614,1492,1498,1488,1508,1480,1393,428,424,289,399,448,245,370,480,371,358,294,509,268,237,296,495,858,1960,1856,1684,1707,1671,1664,1699,1679,1725,1928,1843,1776,1619,1711,1752,1819,1829,969,1378,1221,1736,1637,1580,1515,1472,1496,1486,1479,1510,1506,1503,1537,505,583,621,643,483,572,581,597,606,468,546,656,692,545,594,545,564,512,597,474,427,427,572,475,400,298,576,662,1988,2017,1874,1725,1675,1679,1665,1694,1702,1684,1724,1678,1683,1669,1754,2048,1875,1765,1738,1680,1777,1776,1813,1759,1790,1513,824,826,943,1249,1315,1175,1435,1287,1658,1609,1631,1573,1459,1484,1494,1511,1495,1488,1498,1483,1489,1517,1522,1482,1496,1497,1547,1364,456,422,384,286,299,461,466,318,290,469,480,494,356,362,387,374,483,428,416,311,122,152,438,228,299,124,102,313,435,372,306,237,436,196,342,402,351,362,284,404,367,504,182,362,359,341,393,408,315,464,401,820,1977,1939,1955,1999,1895,1673,1659,1675,1674,1690,1687,1677,1662,1728,1704,1666,1675,1666,1670,1667,1675,1668,1695,1653,1660,1683,1699,1732,2048,2048,1753,1585,1642,1637,1654,1633,1806,1623,1736,1670,1713,1615,1604,1645,1687,1635,1727,1345,725,877,1301,1646,1552,1604,1345,1677,1864,1805,1838,1719,1585,1432,1490,1456,1477,1487,1499,1475,1502,1482,1496,1482,1498,1493,1473,1474,1458,529,583,558,654,567,584,384,521,309,353,465,307,402,436,608,436,399,342,569,520,677,674,572,363,524,453,528,593,683,578,674,563,211,134,520,620,683,522,647,594,625,622,626,560,632,593,529,586,634,496,1533,1998,1970,1967,1898,1699,1691,1691,1665,1678,1694,1684,1681,1699,1697,1710,1709,1719,1690,1700,1702,1687,1711,1685,1702,1727,1882,2048,2048,1709,1734,1685,1771,1782,1765,1743,1759,1824,1796,1752,1797,1770,1786,1670,1774,1786,1139,902,991,958,1060,960,1134,1286,1271,1070,1048,916,1260,1846,1709,1825,1833,1577,1666,1650,1496,1486,1518,1509,1491,1509,1502,1486,1494,1505,1501,1499,1491,1483,1486,1461,1474,1480,1501,1322,606,663,681,582,611,565,534,640,648,577,592,533,548,556,564,460,428,475,602,470,704,491,598,605,372,458,562,469,532,603,326,572,513,491,595,513,367,481,554,582,484,545,529,366,393,487,439,294,456,374,226,316,349,458,517,484,439,209,584,477,311,295,361,495,402,304,284,584,511,872,2057,2057,2052,2048,2057,2048,1779,1721,1728,1733,1741,1736,1700,1728,1734,1720,1705,1694,1743,1726,1745,1739,1726,1724,1720,1723,1722,1725,1727,1739,1746,1735,1735,1745,1719,1741,1712,1731,1996,2048,2048,2048,1970,1731,1789,1842,1847,1849,1856,1788,1843,1719,1756,1817,1818,1783,1815,1795,1777,1776,1841,1829,1823,1862,1813,1839,1863,1833,1837,1849,1827,1740,1811,1015,885,872,802,771,1283,1366,1529,1056,1298,1495,1459,976,915,749,1308,1231,1556,1192,1782,1827,1799,1661,1683,1643,1599,1573,1612,1565,1546,1494,1479,1531,1516,1554,1543,1497,1534,1506,1505,1509,1515,1521,1527,1544,1458,1495,1514,1494,1527,1524,1503,1498,1481,1521,1499,1476,1480,1512,1512,716,634,622,539,561,493,378,620,787,620,600,607,640,687,517,583,612,701,664,661,701,597,674,692,668,573,677,649,586,685,506,248,483,609,617,686,460,668,695,676,482,448,604,427,594,530,550,257,308,183,523,556,279,138,216,605,262,561,546,555,665,591,538,641,593,554,644,585,568,630,538,465,462,631,447,482,487,755,591,573,511,568,447,552,586,366,569,400,472,605,574,602,499,647,599,586,1630,2048,2005,2007,2005,1949,1967,2048,1843,1691,1677,1647,1674,1715,1691,1693,1684,1702,1729,1707,1696,1677,1715,1689,1700,1702,1701,1667,1717,1711,1707,1702,1706,1684,1711,1714,1693,1694,1685,1724,1690,1706,1698,1697,1692,1679,1711,1685,1670,1646,2024,2048,2048,2048,1902,1737,1698,1787,1701,1730,1773,1709,1656,1656,1706,1716,1739,1779,1715,1781,1827,1740,1749,1691,1779,1747,1729,1751,1730,1750,1785,1723,1792,1682,1741,1053,1022,964,1016,1117,1053,953,1043,1008,836,687,686,689,752,810,882,977,957,798,904,944,870,842,731,888,734,967,668,721,545,343,760,764,754,1090,1664,676,1718,1738,1660,1714,1813,1854,1838,1695,1711,1619,1588,1588,1610,1487,1517,1526,1511,1492,1486,1530,1495,1491,1544,1525,1476,1490,1490,1507,1498,1503,1489,1521,1495,1507,1510,1491,1504,1511,1506,1531,1517,1515,1530,1539,1483,1485,1497,1506,1529,1480,1529,1529,1479,1503,1520,1509,1490,1506,1511,1538,1490,1515,1035,693,641,738,644,812,664,713,478,681,733,767,667,691,708,405,567,677,685,740,728,643,753,664,663,406,470,710,664,622,487,747,717,707,721,655,539,666,531,718,657,607,687,625,522,330,575,651,366,751,574,644,709,582,660,503,533,747,689,648,572,641,630,624,574,680,584,565,481,505,510,612,666,747,598,638,599,673,594,659,693,764,691,786,668,681,777,737,718,619,721,687,728,666,675,736,618,664,684,580,606,260,595,647,580,580,628,593,532,504,740,390,583,352,637,566,674,673,524,744,671,701,634,665,623,627,639,437,692,476,524,586,766,570,640,682,559,495,437,459,544,668,640,669,666,632,1470,1987,1993,1969,1958,1960,1999,2034,1973,2015,2026,2019,2037,1989,1728,1722,1719,1725,1695,1686,1698,1715,1694,1687,1672,1669,1719,1713,1710,1694,1709,1705,1683,1676,1695,1693,1696,1671,1691,1738,1721,1692,1679,1692,1708,1717,1723,1746,1741,1724,1725,1740,1736,1702,1703,1689,1692,1685,1682,1683,1697,1717,1683,1700,1722,1724,1682,1667,1697,1748,1729,1735,1732,1726,1727,1789,2048,2048,2048,2048,2048,2048,1603,1567,1705,1770,1761,1713,1771,1695,1763,1806,1686,1697,1710,1678,1743,1716,1691,1786,1716,1664,1633,1710,1764,1733,1754,1795,1669,1728,1709,1700,1743,1730,1611,1744,1807,1785,1738,1736,1601,1685,1751,1749,1807,1586,1038,1061,987,957,1063,1041,948,991,989,879,1096,1589,1371,1596,1691,1559,1516,1581,1625,1677,1547,1761,1416,1503,1578,1348,1258,1223,1555,1092,1429,1609,1576,1241,1434,1466,1182,1290,1292,1469,1498,1573,1417,1491,1706,1607,1665,1468,1337,1513,1551,1604,1519,1457,1485,1507,1625,1728,1325,1859,1849,1854,1926,1884,1878,1868,1812,1759,1856,1818,1865,1447,1517,1468,1496,1489,1494,1485,1482,1500,1495,1076,505,437,507,513,385,520,499,418,439,291,542,475,533,445,519,566,211,394,353,396,419,383,326,422,259,308,520,124,375,401,502,1374,1946,2011,1779,1687,1701,1698,1700,1717,1689,1694,1701,1692,1681,1683,1670,1675,1669,2030,2024,1711,1761,1713,1754,1793,1716,1774,1770,1760,1713,1683,1562,827,790,926,1520,1478,1415,1129,1596,1641,1743,1554,1472,1521,1494,1470,1452,1501,1498,1496,1489,1517,452,523,471,503,382,697,564,604,538,603,490,430,410,368,329,428,466,371,359,397,350,448,546,398,318,534,335,433,2024,2045,1843,1688,1701,1718,1721,1739,1738,1700,1692,1701,1691,1700,1690,1936,2055,1571,1752,1837,1849,1794,1814,1759,1808,1777,1766,1793,1406,659,830,1616,1569,1661,1358,1626,1714,1690,1537,1622,1564,1504,1468,1492,1475,1485,1496,1487,1484,1461,1478,1474,1493,1455,1461,1478,1496,1479,1478,1492,1474,1460,1462,1483,1501,1453,1471,1489,1478,1489,1476,1499,1495,1500,1480,1480,1505,701,663,609,619,645,732,623,569,548,611,562,680,554,617,587,640,595,591,550,545,674,650,599,575,536,665,576,587,614,572,488,469,488,699,624,535,545,536,490,534,542,543,529,629,566,405,381,197,356,398,313,492,411,408,426,560,691,513,274,166,295,303,166,212,435,412,521,489,467,526,658,525,555,586,625,585,525,573,424,477,628,509,523,591,484,244,586,473,524,445,323,178,423,634,659,536,530,412,478,628,573,499,516,681,612,564,514,412,606,1135,2006,2007,1971,1975,1990,1951,1944,1970,2039,1782,1714,1712,1721,1710,1705,1709,1710,1674,1696,1674,1706,1672,1707,1708,1714,1686,1674,1682,1704,1682,1624,1686,1648,1688,1680,1678,1693,1687,1664,1672,1669,1680,1693,1695,1673,1683,1656,1694,1685,1700,1683,1691,1664,1653,1671,1737,2048,2048,2048,2048,1888,1740,1710,1726,1732,1688,1675,1744,1751,1809,1745,1753,1692,1710,1682,1587,1711,1680,1697,1742,1713,1730,1710,1739,1754,1685,1645,1650,1696,1686,1797,1650,1688,1062,902,935,830,816,946,905,896,964,903,1199,1166,903,1163,1046,1430,1185,1158,1141,1268,1356,1196,1316,1245,1485,1417,1472,1007,1129,1294,1116,764,776,954,703,358,578,1105,1054,1136,1014,1286,882,620,501,958,1138,1538,1578,1831,1851,1855,1908,1948,1937,1910,1910,1658,1550,1482,1488,1505,1503,1483,1497,1449,1491,1491,1487,1500,1362,461,308,368,560,508,354,512,619,538,204,287,205,263,329,334,449,527,423,408,322,292,403,474,307,429,343,337,365,402,318,314,386,411,269,659,617,600,1975,1981,2022,1865,1696,1679,1678,1699,1691,1709,1708,1682,1674,1700,1718,1720,1686,1699,1707,1799,2048,1881,1718,1672,1706,1758,1801,1789,1699,1742,1792,1794,1731,1764,1450,701,865,1494,1677,1392,582,860,1088,1672,1832,1789,1583,1627,1496,1491,1506,1490,1505,1512,1377,595,622,621,585,400,545,553,409,422,468,443,370,307,304,344,494,474,236,446,589,166,332,630,555,1905,2002,1752,1699,1700,1714,1718,1684,1671,1672,1695,1701,1697,2004,1836,1770,1869,1739,1767,1701,1750,1763,1847,1123,758,1023,1608,1545,1596,1355,1584,1694,1463,1492,1366,1464,1496,1474,1502,1457,1485,1474,1482,1493,1507,1474,1492,1491,943,512,494,587,580,497,574,493,415,698,531,494,591,640,415,315,475,509,357,436,471,484,408,509,277,231,324,641,624,646,595,612,501,585,546,298,545,426,524,604,602,377,543,487,966,1990,2009,2002,1846,1688,1688,1733,1689,1665,1689,1676,1670,1744,1702,1660,1684,1722,1716,1713,1703,1734,1709,1726,2021,2048,1848,1693,1711,1732,1754,1690,1694,1689,1652,1683,1778,1811,1688,1779,1793,1490,964,820,954,1666,1591,1364,1554,1526,1496,1695,1862,1771,1651,1490,1409,1495,1523,1499,1473,1485,1480,1495,1468,1468,1489,1495,1488,1456,1486,1150,479,606,620,568,381,453,566,627,590,311,465,465,458,323,413,452,488,503,481,435,471,531,453,297,241,208,220,544,453,242,209,85,212,394,298,187,443,523,299,533,331,329,279,396,383,533,1100,1953,1889,1983,1970,1702,1671,1695,1672,1692,1676,1720,1717,1677,1650,1666,1662,1708,1695,1654,1656,1694,1672,1682,1665,1828,2048,2048,1760,1693,1720,1785,1692,1815,1707,1663,1711,1682,1727,1574,1680,1758,1715,1768,1377,773,884,796,1562,1244,1387,1447,1388,944,1410,1538,1752,1690,1690,1626,1611,1498,1548,1503,1501,1512,1511,1467,1476,1491,1480,1500,1515,1499,1488,1507,1491,1484,1437,1475,1516,1514,1521,698,557,637,403,409,540,497,584,605,522,543,465,557,452,92,528,577,507,461,392,330,206,253,182,536,553,567,536,562,465,475,466,350,403,565,517,603,472,468,512,271,334,352,118,172,447,567,617,591,390,344,412,454,335,365,272,129,451,403,413,440,413,455,303,436,389,518,493,540,454,658,2036,2032,2048,2005,2038,2035,1647,1638,1690,1711,1682,1710,1722,1681,1694,1675,1683,1681,1704,1702,1714,1693,1662,1675,1681,1692,1728,1701,1700,1699,1674,1667,1702,1726,1703,1725,1704,1851,2048,2048,2048,1779,1571,1752,1779,1731,1789,1742,1723,1659,1693,1790,1699,1779,1723,1669,1719,1734,1849,1719,1697,1709,1731,1717,1720,1885,1774,1146,825,761,779,631,836,1027,829,653,959,1050,951,836,642,376,730,164,853,1274,909,959,1568,1678,1752,1736,1801,1756,1622,1655,1472,1492,1478,1479,1489,1487,1472,1467,1479,765,539,497,543,312,460,518,341,514,556,396,444,418,342,306,305,519,408,565,589,527,535,449,640,489,521,554,446,698,2006,2011,1893,1695,1691,1691,1650,1702,1695,1714,1724,1695,1697,1670,1716,1995,1944,1726,1734,1747,1818,1773,1827,1753,1755,1784,1460,890,805,955,1052,1059,1324,1648,1688,1607,1531,1640,1505,1519,1501,1494,1476,1496,1478,1492,1491,1465,1481,1478,1496,1503,1478,1487,1228,652,653,538,607,607,644,612,615,666,455,634,578,517,655,426,516,598,529,569,490,535,637,410,480,578,397,482,435,534,534,580,223,468,489,500,421,520,532,449,638,534,579,570,445,401,555,441,589,699,376,569,571,594,582,874,2047,2029,2047,2004,1906,1706,1703,1730,1704,1711,1710,1691,1678,1687,1678,1716,1679,1728,1722,1700,1695,1714,1690,1672,1659,1712,1714,1714,1757,2048,2048,1872,1709,1809,1655,1742,1673,1776,1753,1798,1838,1802,1711,1719,1695,1790,1768,1755,1239,781,789,793,671,1521,1799,1349,1320,1718,1783,1566,1115,1488,1835,1853,1783,1782,1651,1628,1393,1532,1470,1490,1484,1475,1478,1497,1467,1470,1504,1491,1446,1491,1494,1495,1530,1505,1498,1484,1494,1506,1166,444,118,266,263,461,551,470,439,480,526,619,543,245,463,368,415,334,292,550,604,488,330,358,94,572,166,263,539,445,614,582,525,387,574,517,274,321,538,390,542,610,537,561,428,160,145,432,395,378,515,488,616,573,588,628,508,557,494,400,326,434,456,261,217,395,414,460,289,441,460,1970,2057,2000,2018,2050,1923,1679,1706,1696,1677,1653,1689,1682,1648,1674,1695,1684,1674,1699,1706,1693,1687,1727,1701,1667,1693,1692,1699,1687,1693,1722,1704,1696,1711,1642,1711,1980,2048,2048,1936,1637,1750,1771,1688,1735,1610,1756,1740,1673,1760,1760,1786,1779,1816,1682,1750,1703,1637,1744,1716,1642,1539,1780,965,927,805,796,859,753,789,800,889,978,1126,1052,1012,796,882,785,1134,1162,970,1070,1083,993,1020,1044,943,312,251,1199,1251,1645,1825,1825,1837,1835,1711,1512,1524,1538,1516,1479,1494,1496,1506,1499,1477,1523,1508,436,350,221,254,423,408,340,453,449,495,415,550,294,427,340,414,405,218,385,284,365,437,375,418,396,282,249,263,291,264,477,456,240,269,302,908,1999,1976,1935,1690,1685,1716,1690,1671,1692,1676,1688,1664,1687,1691,1678,1666,1685,1670,1931,2048,1838,1728,1785,1715,1663,1764,1739,1728,1755,1787,1688,1664,1664,1309,797,859,1551,1610,1574,1880,1900,1761,1541,1555,1480,1508,1491,1502,1498,1502,1500,1496,1502,1493,1491,1510,1516,1519,1493,1486,1494,1500,1507,1501,1472,1504,1507,1473,1505,1505,1519,1473,1505,1517,1500,1461,1477,893,451,549,571,368,583,617,595,672,608,662,534,485,485,575,478,469,520,540,645,627,641,541,532,506,424,470,551,626,593,317,535,429,536,556,489,472,480,489,583,580,476,638,349,403,414,351,460,390,386,277,467,459,287,567,371,565,566,556,233,608,571,612,639,594,517,383,596,444,495,513,440,519,460,347,521,507,490,382,394,459,510,566,405,463,637,450,390,301,422,606,352,378,172,287,361,524,409,365,474,308,215,318,438,370,331,338,420,261,405,440,294,393,2055,2008,2048,1989,1975,2036,1999,2017,2055,1996,1730,1740,1758,1735,1698,1700,1690,1692,1692,1697,1677,1711,1697,1721,1701,1727,1717,1717,1703,1694,1686,1698,1718,1742,1722,1693,1680,1666,1681,1693,1705,1686,1661,1669,1678,1685,1687,1724,1712,1749,1756,1738,1747,1674,1686,1711,1696,1685,1660,1682,1725,2048,2048,2048,2048,2048,1883,1738,1764,1754,1698,1713,1637,1685,1621,1651,1765,1737,1694,1793,1708,1697,1738,1745,1690,1706,1660,1630,1607,1780,1747,1632,1678,1684,1599,1714,1694,1717,1804,1661,1750,1724,1614,1655,1493,782,860,770,837,893,704,847,751,1073,1004,1078,1077,930,639,777,862,1038,934,750,781,918,897,721,689,742,771,868,851,878,1017,1110,1303,1120,1115,1179,1075,1561,1482,1881,1805,1816,1882,1846,1826,1869,1839,1646,1623,1552,1557,1545,1519,1499,1524,1520,1502,1501,1494,1520,1500,1519,1456,1504,1107,591,743,689,501,641,563,614,484,516,464,491,644,765,500,803,677,654,668,501,752,709,469,718,663,553,521,617,580,749,655,429,528,553,266,287,348,575,560,642,615,520,588,513,486,611,523,2053,2047,2048,2045,1742,1725,1736,1728,1723,1725,1730,1743,1724,1724,1760,1732,1691,1715,1724,1687,1691,1731,1734,1735,1723,2015,2048,2044,1786,1844,1861,1866,1831,1882,1816,1870,1865,1855,1843,1776,1771,1810,1727,1815,1781,1820,1825,966,1020,872,899,1276,1336,1180,1218,944,1170,890,1059,1008,1544,1244,1543,1673,1691,1646,1609,1556,1517,1480,1488,1501,1475,1472,1467,1494,1515,1528,1479,1468,1477,1501,1483,1480,1468,1463,1481,1462,1473,1497,1464,1458,1489,1472,635,502,630,538,460,505,512,473,518,424,417,447,319,382,187,525,325,606,413,498,364,420,453,552,526,494,499,487,544,493,386,440,481,247,361,384,388,546,389,295,455,554,473,497,413,394,317,364,542,569,350,383,381,341,494,537,359,426,467,395,492,479,619,651,660,681,507,418,305,307,325,317,487,303,362,216,457,401,538,391,549,480,1748,1917,1910,1981,1980,1950,2037,1698,1707,1694,1676,1687,1701,1667,1654,1671,1670,1688,1694,1693,1675,1649,1679,1668,1664,1714,1734,1691,1713,1636,1668,1688,1681,1689,1660,1678,1667,1639,1629,1667,1646,1682,1739,2048,2048,2048,1948,1755,1779,1780,1754,1774,1664,1704,1711,1736,1665,1665,1686,1712,1784,1751,1760,1627,1685,1652,1592,1657,1688,1620,1627,1693,1576,839,811,695,894,823,721,1081,1320,1218,1303,1055,827,1074,1220,1318,1027,906,941,956,1199,1303,850,1267,795,427,1231,1749,1730,1726,1790,1865,1801,1606,1634,1605,1646,1516,1499,1515,1525,1520,1518,1520,1530,1499,1516,1513,1501,1501,1521,1497,1525,1526,1504,1511,1501,1508,1517,1529,1504,1509,1530,1493,1500,1546,1538,1522,1551,1507,1526,1516,1505,1510,1501,1495,1506,1489,1485,1469,1484,1501,1491,1500,1405,498,507,530,464,512,544,513,434,562,670,681,650,720,673,711,680,651,650,653,739,730,572,666,597,453,450,588,576,507,721,672,599,693,598,625,569,648,493,639,579,500,702,561,555,601,487,534,546,496,608,582,623,543,572,563,575,578,529,569,535,670,457,467,544,444,554,618,571,612,573,616,564,583,566,437,626,707,578,488,558,566,470,546,562,533,629,539,407,419,661,587,555,708,559,711,753,715,614,650,708,710,713,609,543,665,699,637,624,497,455,659,634,546,660,612,540,639,607,614,600,574,595,494,357,450,535,572,543,532,569,508,554,420,463,626,556,560,402,449,540,550,469,527,509,289,483,539,568,518,522,369,351,1357,2055,2053,2057,2041,2040,2054,2034,2048,2057,2048,2014,2052,1970,1719,1732,1678,1702,1708,1728,1703,1680,1713,1696,1705,1701,1698,1701,1685,1704,1739,1726,1703,1729,1723,1727,1746,1736,1752,1763,1762,1755,1740,1704,1693,1723,1719,1695,1692,1668,1697,1738,1697,1676,1711,1702,1694,1714,1718,1755,1742,1750,1746,1749,1712,1719,1721,1732,1725,1742,1730,1761,1743,1736,1741,1762,1746,1744,1731,1757,2032,2048,2048,2048,2048,2048,2048,1991,1719,1675,1706,1742,1708,1669,1703,1766,1697,1772,1778,1764,1850,1795,1829,1810,1785,1815,1769,1776,1780,1813,1596,1584,1699,1741,1679,1624,1580,1791,1705,1704,1715,1661,1751,1802,1833,1810,1833,1816,1822,1698,1716,1589,1656,1782,1808,1801,1807,1842,1847,1826,1776,1199,916,906,943,932,931,824,899,955,930,1330,1348,1336,1202,1259,1329,1267,1350,1350,1332,1189,1251,767,753,828,952,942,1010,1185,497,472,1301,1574,1559,1938,1785,1742,1890,1907,1856,1817,1838,1826,1846,1888,1586,1567,1557,1510,1499,1525,1544,1512,1500,1496,470,449,343,328,507,542,517,448,377,356,428,256,389,208,404,326,185,207,215,382,399,394,341,406,1175,2037,2021,1720,1702,1706,1696,1687,1697,1706,1702,1693,1673,1713,1747,2048,1930,1817,1812,1714,1798,1790,1816,1794,1742,1711,789,1268,1647,1591,1494,1589,1543,1439,1193,1506,1494,451,401,493,537,553,462,731,1855,1698,1682,1904,1738,1788,1080,826,1337,1580,1514,1503,1483,1292,307,444,373,417,344,101,321,546,427,219,275,645,553,1154,1899,1683,1670,1688,1661,1668,1725,1920,1771,1676,1701,1678,1255,1303,1780,1738,1598,1437,1511,1474,1510,1506,652,444,406,388,440,445,399,292,485,446,472,347,521,508,447,576,411,1888,1838,1679,1678,1672,1661,1675,1686,1742,1952,1712,1669,1695,1767,1430,638,1209,1487,984,1320,1618,1931,2048,2047,2040,2048,1829,1614,1570,1464,1255,1577,1501,1193,870,927,1261,2019,2019,1960,1928,1819,754,1303,1324,1295,1381,1471,1411,1402,1104,1199,696,904,1108,1179,1016,851,935,922,911,828,1028,1049,1132,1087,908,1087,993,1009,1135,1081,1084,1117,1073,928,929,1146,1117,1036,1195,782,716,708,825,1335,1080,937,858,1052,845,883,929,629,1266,1150,929,1033,1018,793,936,968,883,952,1107,469,1382,2048,1328,1088,1061,945,955,985,1128,994,999,941,1033,1190,881,1066,1020,914,1038,921,868,741,794,859,1090,1279,1412,1511,1396,1514,1972,2048,2057,1945,1407,2039,2050,2048,2048,2035,1783,2048,1669,1921,2055,2048,2048,2048,2048,2048,2048,2048,2027,2031,2018,2043,2040,2023,1951,1846,1710,1938,2048,2048,2048,2048,2048,2048,2048,2056,2048,2048,2056,2022,1971,1834,1810,1433,1649,1937,1899,1816,1890,2051,2054,2057,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1988,1539,1017,2020,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2043,1699,1904,2048,2048,2051,1893,1598,1390,1212,1021,738,504,1807,2048,2048,2048,2054,2056,2056,2048,2056,2048,1891,1450,810,1971,2048,2019,1968,1853,1717,1536,1234,897,619,288,176,1885,2055,2048,2052,2049,2048,2057,2057,2048,2048,2048,2048,2056,2000,1828,1636,1502,1283,2029,2057,2057,2048,2057,2048,2048,2057,2048,2048,2057,2043,2024,1994,1721,1499,1030,1084,1793,1879,1996,2057,2048,2057,1955,1708,1335,860,2055,2049,2048,1902,1905,2048,2050,1828,712,54,216,34,596,2048,2048,2048,2048,2056,2048,2048,2045,1922,2043,1972,1704,2048,2048,2048,2048,2048,2048,2048,2048,2048,1983,1519,1976,1994,1536,1587,1814,1667,897,863,1687,1951,2032,2056,2057,2056,2050,2019,1814,1262,177,1525,2054,2056,2048,2049,2048,2048,2057,2048,2043,2043,1988,1822,1900,1939,1540,2057,2048,2057,2057,2048,2048,2048,2048,1907,2055,2048,2048,2048,2056,2048,2057,2048,1796,1870,1965,1967,1585,1412,2054,2057,1993,1762,1857,2048,2048,2048,2048,2052,2048,2048,2048,2056,1709,1264,1794,1953,1989,2013,2045,2045,2034,2047,2048,2053,2049,2054,2003,2031,1982,1981,1986,2056,2035,2046,2049,2021,2033,2036,2043,2051,2037,2043,2028,1894,1769,1545,1384,1282,1219,1155,1221,1002,1054,1095,1009,1036,859,860,922,728,693,483,444,188,150,97,59,364,2056,2024,2048,2048,2046,1871,1748,1581,1047,1131,2048,2048,2048,2048,1895,2048,2048,2048,1963,2048,2048,2048,2026,2057,2057,2054,2048,2048,2037,2048,2057,2034,2049,2048,2026,1942,1878,1799,1745,1759,1560,2056,2048,2048,2057,2048,2051,2055,1741,2054,2048,2048,2055,2055,2056,2050,2030,1951,2057,2008,1913,1414,2050,2048,2045,1464,1938,2048,2048,2048,2048,2048,2048,2050,2044,2000,1833,1740,1523,1357,1254,1183,1737,2048,2048,2048,2055,2018,1863,1621,852,379,1129,1533,1755,1900,1965,1924,1948,1993,1892,1698,1509,1313,969,541,544,1772,2037,2029,1302,798,2056,2048,2048,2048,2048,2048,2048,2048,2018,1983,2036,2005,1753,1409,876,1862,2035,1749,1435,1838,2048,2048,2049,2056,2053,2048,2056,2040,1947,1752,1751,2048,1405,855,1680,2056,2048,2048,2048,2048,2048,2024,1806,1959,2048,2048,2048,2048,2057,2048,1760,980,1547,1943,2038,2057,2057,2010,1192,1821,1818,2053,2048,2048,2048,2057,1989,1766,1246,952,726,448,314,224,352,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2024,1189,2048,2048,2054,2050,2057,2048,1892,1964,2010,1639,1913,1399,658,1287,1685,1949,2053,2048,2048,2048,2048,2048,2048,2048,2048,2046,1904,1660,1510,1389,1187,1097,985,947,735,835,987,944,812,1590,2041,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,1892,1286,762,667,1669,2048,2048,2057,2030,1569,2048,2048,2048,2051,2056,2057,2048,2023,1527,1453,1520,1333,1137,2048,1928,1286,442,1779,1961,1983,2046,2055,2048,2051,2050,2045,1515,1804,1795,1959,1952,2052,2057,2048,2048,2048,2057,2057,2043,2024,1774,1514,929,687,1515,2045,2048,2048,2048,2048,2048,2057,2057,2056,1989,1776,1476,1123,978,243,308,2032,2044,1973,1920,1804,1709,1711,2057,2042,1805,1563,1276,1769,1764,1984,2048,1932,2048,993,2048,1706,1855,1863,2048,1680,1918,1400,1444,1109,1576,2002,2055,2016,1910,1963,1967,1914,2048,2048,2036,1772,1068,1179,1955,2055,2048,2048,1872,1797,1358,925,869,2048,2048,2057,2048,1669,427,1583,2048,2036,2048,2048,2057,2057,1986,2028,2057,1522,1997,2048,1721,2056,2048,1590,2009,2048,1540,1289,1739,1685,618,2005,2048,2048,2049,1541,177,100,1169,2018,2057,2057,2048,2048,2054,2053,1811,1800,1904,1568,976,202,821,1959,2048,1966,2048,2057,2031,2048,2032,2048,1836,1993,1646,1986,1397,1954,1257,1526,1629,1707,1355,1335,1660,2056,1948,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2052,2057,1998,1882,1872,1972,1665,1927,2056,1926,1478,1553,2013,2048,2048,2048,2048,2048,2048,2057,2048,2048,2050,1988,1801,1586,1417,1199,925,1251,2048,2048,2048,2048,2057,1650,622,2056,2048,1996,1971,2018,1967,2007,2023,2011,2057,2048,2048,2055,2003,1745,1457,1984,2047,2048,2017,1878,2022,2056,2056,2048,2057,2056,2048,2048,1971,1796,1432,817,1030,2048,2048,2048,2048,2048,1943,2057,2057,2048,2048,2039,1215,2042,2048,2048,2048,2048,2054,2048,2048,1911,1536,1733,2048,2048,2048,2048,2048,1877,2048,1327,552,376,1182,1832,2057,2048,2048,2048,2048,2048,2048,2048,2048,2056,2042,1943,1813,1772,1761,1604,1453,1277,1237,1258,1110,812,609,579,498,512,403,505,370,460,411,511,565,492,350,275,703,1218,1168,1263,1182,1043,991,889,742,556,352,161,424,1822,2056,1821,1726,1908,1913,2048,2050,2018,2008,2048,2048,2047,2051,1913,1514,1853,2020,1750,1380,1970,1858,1999,2048,2008,2032,1822,2043,2048,2044,1839,2036,2037,2037,1931,1948,1990,1855,1398,1538,1999,2033,2007,2055,2048,1971,1821,1776,1959,2057,2011,2043,2048,2032,1983,1887,1932,1802,1819,1931,2000,1849,2022,1788,2038,1932,2048,2048,2048,2057,2036,1639,1325,1739,1406,860,1198,2042,2048,2055,2007,1928,1871,1801,1862,1731,1980,1874,1898,1970,1940,1918,2048,1961,1710,2019,1487,1515,1871,2025,2016,1904,1848,1891,1848,1748,1768,1538,1805,1838,1396,1512,1343,953,1065,1998,1960,1893,1814,1799,1628,1736,1689,1353,1417,1268,1457,1295,1305,1150,962,1384,1133,1167,1220,1337,1279,1412,1514,1821,1783,1702,1975,1969,2056,2010,2022,1839,1754,1580,1438,897,1364,1791,1989,2053,2055,2048,1331,182,1081,2048,2048,2045,1406,2053,1028,2057,2056,1562,1534,2057,2048,2048,2048,1527,2057,1962,1568,1312,2048,2048,2048,2048,2048,2048,1995,2047,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2052,1999,2055,2048,2048,2056,2048,2032,1964,2009,2056,2048,2057,2046,2048,2048,2048,2048,2048,2055,1753,1311,2048,2050,2048,2048,2048,2045,2048,1917,1915,1822,1547,1609,1433,1721,1845,1580,1449,1379,1130,915,381,1581,1827,1872,2045,2048,2048,2002,1590,1106,2048,2048,1790,2034,2048,2048,2038,1598,1832,2048,2018,1569,1497,1826,1853,1280,783,668,1339,1435,1446,1447,1187,1312,571,778,900,475,274,407,491,416,953,869,481,459,534,456,777,474,531,626,296,385,621,655,517,912,741,1141,718,648,1016,732,627,1024,752,433,655,409,527,645,305,563,515,366,604,618,629,473,1163,806,1168,931,1007,690,505,624,541,623,507,683,329,267,389,509,672,449,326,647,543,426,994,1307,510,354,392,269,413,610,616,607,451,528,681,579,339,531,364,1112,1237,1169,1006,299,472,375,408,455,460,264,500,171,319,496,170,519,230,550,714,309,382,626,294,621,911,527,234,369,318,459,282,226,377,420,1000,506,497,462,706,508,460,406,241,701,331,329,626,576,1073,913,521,282,273,237,283,397,405,291,265,203,418,614,706,770,970,1340,1147,966,791,575,415,443,597,718,1354,1223,531,736,641,587,590,567,591,792,673,606,707,689,654,770,786,877,1178,1179,1383,925,571,628,561,1031,1213,1158,1153,1143,1109,1004,404,368,1158,1088,932,620,546,1438,266,412,324,192,332,227,207,71,238,334,433,135,121,134,316,419,606,316,667,604,413,901,486,646,162,365,603,283,346,337,697,435,598,490,288,297,281,319,497,189,327,173,216,338,194,512,273,298,177,224,176,220,538,377,440,322,703,1174,241,438,467,493,604,630,316,572,1057,887,846,542,544,367,362,412,336,372,479,280,268,281,149,180,774,868,833,779,631,535,609,252,447,292,455,648,251,231,420,250,160,383,448,412,450,129,191,306,133,169,231,171,294,502,233,259,575,378,269,532,269,352,447,711,955,1325,896,419,451,712,393,513,662,377,418,803,1046,763,309,1087,1005,1254,1084,460,591,316,708,671,589,588,254,309,308,363,354,1073,806,416,539,385,546,381,440,441,911,826,661,851,309,382,675,781,457,672,941,1030,904,793,879,1310,1886,1590,987,987,987,1711,1886,1886,986,994,987,1329,1375,1115,1145,1173,670,953,509,1168,405,463,890,757,704,638,703,572,741,640,504,588,755,643,1010,400,116,181,450,550,169,122,233,466,277,383,539,613,1136,637,321,412,599,532,328,496,472,400,358,295,709,918,1086,1752,578,531,881,471,419,382,445,638,308,311,423,554,302,480,235,447,286,431,363,298,204,513,321,352,228,230,291,355,472,229,402,172,643,331,410,126,502,550,711,286,154,290,448,455,426,361,295,662,418,641,227,455,782,278,621,986,644,406,64,59,918,897,371,745,822,485,479,514,672,674,568,470,448,530,545,252,489,636,529,654,772,824,484,614,569,420,481,497,467,824,1084,671,741,526,544,612,534,756,528,731,264,638,562,917,273,381,663,250,416,202,177,204,357,120,446,563,159,226,292,175,304,131,136,658,515,484,390,415,405,211,252,259,462,312,246,892,327,396,390,362,403,619,901,728,978,822,733,801,197,647,973,375,732,1277,345,711,874,1227,1203,634,305,602,298,918,1552,1043,1248,1320,1446,1468,1429,1515,1540,1481,1527,1552,1465,1521,1514,1551,1532,1539,1479,1485,1550,1415,1434,1299,1235,1182,1318,1409,1293,1210,1154,1077,1110,1558,1541,1722,1791,1734,1774,1685,1693,1707,1748,1687,1737,1725,1698,1736,1759,1757,1745,1726,1541,1668,1653,1640,1701,1682,1694,1727,1711,1664,1631,1667,1684,1626,1581,1635,1627,1840,1592,1708,1665,1647,1664,1736,1747,1746,1803,1848,1794,1785,1812,1759,1715,1721,1747,1750,1879,1836,1686,1646,1812,1758,1705,1785,1813,1765,1680,1701,1666,1523,1869,1562,1653,1598,1587,1618,1604,1688,1686,1706,1643,1721,1732,1686,1745,1748,1706,1645,1774,1699,1690,1724,1653,1648,1692,1625,1639,1606,1601,1571,1542,1517,1509,1803,1650,1581,1519,1381,1430,1568,1484,1490,1260,1238,1426,1500,1321,1348,1388,1433,1256,1408,1579,1549,1571,1545,1393,1410,1524,1383,1366,1535,1564,1425,1538,1583,1416,1902,1416,1432,1396,1417,1584,1423,1493,1478,1575,1411,1342,1279,1362,372,213,384,216,218,704,988,1367,1207,894,1313,1393,1205,1581,1692,1216,1197,1559,1178,759,1334,1339,1547,1490,1681,1532,1620,1585,1558,1540,1358,1597,1322,1639,1377,1466,1763,1258,1636,1616,1126,1479,1413,1447,1555,1483,1766,1353,979,1734,1530,1475,1650,1388,1297,1463,1669,1695,1320,1419,1664,1314,1767,1400,1570,1472,1301,1608,1565,1420,1335,1335,1421,1534,1725,1328,1712,1533,1209,1608,1452,1574,1021,1550,1615,1588,1448,1470,1423,1337,1708,1362,1119,1277,1466,1301,1194,1462,1514,1356,1375,1311,1628,1552,1684,1578,1433,1209,1265,1627,1427,1836,1308,1709,1330,1863,1325,1633,1400,1600,1857,1688,1799,1604,1767,1682,1400,1903,1392,1441,1596,1715,1750,1672,1598,1654,1633,1532,1544,1741,1741,1432,1555,1238,1606,1459,1651,1540,1205,1525,1637,1652,1714,1448,1822,1707,1270,1637,1586,1960,2054,2026,1994,2042,2054,2020,2049,2029,2023,2030,2030,2038,2024,2033,2053,2043,2039,2055,1993,2030,1975,2023,2017,2031,2052,2053,2053,2044,2043,2024,2010,2012,2046,2046,2021,2040,2056,2036,2019,2014,1941,2000,2012,2033,2045,2055,2034,2025,2049,2032,1994,1969,1991,2002,2007,1990,2033,2027,2025,2048,2032,1996,1950,2007,2011,1982,2018,2026,2020,2020,2057,2027,1997,1968,2007,1998,1977,2017,2029,2051,2048,2034,2035,1952,2009,2022,2015,2013,2034,2040,2057,2029,2034,2044,2028,2049,2041,2046,2041,2043,1985,1981,1988,2014,1955,1960,1987,2008,1975,1904,1979,1968,1989,1988,2013,1951,1972,1978,2000,1952,1963,1983,2001,1965,1987,1949,1981,1986,1996,1995,1958,1982,1983,1984,1990,1966,1967,1980,1998,1997,1995,1972,1998,1990,1975,1980,1950,1966,2000,1982,1972,2007,1967,2003,1954,1975,1948,1985,1985,1983,2047,1971,2002,2007,2008,1992,2006,1988,2001,1941,1903,1787,1818,1806,1765,1917,1953,1824,1707,1912,1785,1683,1741,1725,1828,1926,1961,1933,1817,1835,1940,1862,1842,1794,1658,1675,1675,1685,1759,1906,1902,1798,1883,1997,2057,2055,2039,1899,1955,1804,1882,1819,1909,1869,1733,1721,1710,1833,1869,1907,1831,1778,1821,1819,1675,1753,1853,1843,1814,1856,1816,1745,1830,1620,1878,1729,1887,1803,1912,1768,1930,1743,1828,1589,1787,1833,1861,1750,1964,1821,1858,1815,1700,1740,1756,1828,1842,1862,1771,1880,1764,1869,1501,1871,1635,1957,1906,1947,1938,1803,1928,1842,1905,1723,1906,1866,1990,1929,1929,2012,1909,1694,1969,1740,1949,1655,1776,1846,1801,1956,1812,1840,1955,1822,1816,1853,1890,1840,1820,1828,1869,1880,1755,1930,1790,1861,1770,1765,1872,1832,1796,1643,1887,1844,1697,1900,1912,1875,1918,1930,1942,1933,1924,1951,1947,1941,1902,1951,1908,1952,1956,1876,1922,1982,1944,1904,1516,1391,1391,1339,1445,1548,1514,1414,1620,1479,1608,1556,1663,1713,1579,1667,1867,1984,1967,1833,1975,1681,1917,1816,1680,1960,1923,1977,1849,2000,1799,1895,1737,1878,1850,1880,1982,1980,1826,1978,1676,1954,1791,1702,1967,1876,1991,1826,1904,1882,1677,1878,1729,1584,1940,1909,1970,1875,1982,1839,1802,1878,1808,1692,1958,1791,1941,1861,2006,1858,1866,1799,1891,1845,1953,1987,1971,1870,1997,1697,1948,1856,1777,1986,1907,1951,1939,1897,1969,1948,1948,1884,1922,1916,1713,1659,1916,2008,1986,1949,1991,2020,2012,2018,1990,2013,1994,1997,1984,1973,1977,1976,1964,1987,2000,2013,1997,1960,1984,1978,2006,1996,2001,1995,2036,2031,1999,1983,2006,2039,2031,2022,2001,2028,1979,2032,2009,2019,2021,2031,1998,2025,2020,1985,2018,2034,2030,2016,2012,1982,2018,1975,1997,2015,2005,2010,2006,1998,1994,2011,2042,2040,1999,1998,1885,1756,1788,1746,1706,1670,1680,1793,1641,1635,1560,1798,1694,1652,1746,1825,1566,1712,1785,1626,1564,1782,1654,1626,1769,1819,1683,1680,1781,1833,1734,1671,1748,1777,1767,1722,1781,1703,1959,1935,1945,2014,1993,1933,1922,1965,1940,1981,1978,1985,1988,1975,1987,1986,2005,1997,1974,1974,1962,2006,1977,1994,1997,1990,1968,1981,1952,1978,1981,1997,1992,1989,1959,1995,1991,1955,1944,1965,1912,1920,1850,1929,1905,1816,1879,1867,1812,1899,1853,1921,1842,1864,1925,1853,1834,1951,1913,1987,1981,1981,1957,1902,1932,1902,1926,1928,1961,1936,1893,1949,1966,1940,1947,1978,1888,1977,1760,1900,1872,2050,2044,2026,2030,2005,2021,2032,2020,2033,2015,2041,2030,2033,2045,2006,1978,1920,1970,2010,2045,2052,2053,2014,2042,2028,2016,1994,2028,2031,2045,2034,2052,2050,2040,2033,2003,2012,2016,2008,2005,2011,2033,2051,1988,2006,1997,1973,1972,1993,2014,2029,2032,2023,2003,1999,2021,1986,1986,1995,1977,1994,2040,2037,2030,2006,2011,2006,1995,1993,1995,1972,1992,2018,2046,2024,2044,2042,2043,1994,2010,2016,1999,2010,2026,2032,2051,2046,2044,2055,2019,2037,2052,2053,2043,2051,2042,2013,1977,1980,2014,1980,1961,1979,2024,1991,1990,1982,1938,1998,1967,1974,1963,1980,1971,1979,2001,1951,1967,1887,1953,1962,1977,1983,1987,2023,1991,1977,1999,1990,1969,1950,1987,1956,1951,1848,1843,2040,2056,2026,2032,2025,2021,1748,1883,1990,1961,1864,1906,1941,1977,1969,1898,1932,1931,1988,1941,1919,1842,1912,1984,1994,1894,1847,1954,1972,1945,1874,1877,1936,1928,1980,1894,1852,1938,1970,1957,1900,1876,1973,1934,1887,1815,1979,1925,1889,1839,1859,1914,1913,1923,1885,1889,1883,1871,1896,1885,1824,1916,1888,1811,1898,1788,1773,2014,1955,1927,1923,1926,1820,1838,1879,1840,1806,2000,2008,2003,2029,2009,1988,1876,1731,1943,1927,2039,2030,2017,1954,1975,2012,1976,2016,1972,1951,1941,2053,1997,1981,1759,1971,2006,2014,1993,1909,1977,2022,2002,2011,1958,1986,1994,2025,2019,1969,1815,1975,1981,1979,2009,1991,2011,2034,2013,1990,2002,1897,2016,1997,1983,1987,2036,2040,2025,2022,2021,2011,1935,1901,2002,1973,1969,2038,1960,1956,1971,1983,1927,2017,1880,1974,1998,1945,1968,1989,1981,1966,1868,1933,1947,1966,1873,1907,1990,2000,2031,2007,1986,1913,1887,1966,1926,1931,1896,1981,1973,1974,1991,2009,1990,1978,1965,1936,1963,1938,1952,2025,2011,1950,2024,1992,1971,1949,1982,1958,1966,1869,1963,1960,1956,1975,1992,1998,1951,2009,1970,1989,2033,1945,1978,1992,1945,1990,2005,1977,1958,1888,1961,1995,1937,1940,1962,1933,1989,1953,1950,1942,1945,1933,1878,1849,1953,1990,1915,1894,1970,1882,1942,1975,1888,1961,1981,1950,1964,2009,1921,1987,1969,1971,1988,1948,1994,2023,2003,2051,2028,1962,2007,2032,1974,2017,2027,2046,2037,2045,2000,2000,2011,1969,2026,2033,2030,2046,2011,2020,2027,2016,1996,2032,2051,2031,2052,2033,1999,1943,2030,1982,2027,2028,2039,2050,2047,2011,1982,2019,1969,2041,2028,2054,2033,2032,2014,2012,1951,1983,1799,1976,1964,2004,1970,2015,2046,2012,1980,1980,1752,2010,2011,1966,2036,2015,1954,2029,1986,1976,2047,1962,1919,1879,1800,1757,1729,1427,1487,1559,1340,1561,1331,1500,1422,1116,1559,1174,1435,1213,1516,1107,1334,1333,1003,1190,1484,1415,1076,1310,1493,976,1100,1346,1255,1251,1497,1121,1408,1137,1596,1161,1387,1462,1441,1379,1422,1581,1448,1574,1491,1398,1389,1494,1429,1167,1668,1212,1397,1087,1642,1196,1463,1306,896,1515,1401,1353,1096,1289,1583,985,1097,1372,1316,1406,1290,1204,1333,1145,1640,1253,1475,1510,1275,1647,1401,1511,1514,1438,1599,1247,1486,1546,1259,1483,1373,1302,1314,1133,1640,1214,1452,1298,874,1607,1408,1305,1178,1224,1613,889,1132,1395,1253,1437,1195,1273,1359,1174,1625,1277,1496,1500,1233,1649,1355,1516,1538,1362,1567,1314,1500,1491,1116,1610,1224,1447,1346,1222,1544,1175,1437,1226,822,1573,1340,1216,1205,1276,1555,869,1248,1404,1115,1523,1100,1384,1172,1591,1112,1306,1428,1447,1321,1526,1562,1430,1591,1369,1491,1349,1486,1516,1212,1635,1162,1414,1153,1572,1174,1448,1347,939,1309,1406,1430,1084,1306,1504,1149,1039,1291,1376,1207,1489,1164,1331,1126,1640,1220,1516,1488,1306,1553,1341,1531,1510,1426,1654,1252,1472,1510,1376,1391,1425,1331,1361,1167,1584,1174,1451,1251,864,1584,1341,1352,1164,1307,1607,813,1211,1429,1225,1426,1239,1298,1346,1186,1622,1260,1514,1518,1273,1640,1345,1592,1563,1430,1586,1348,1561,1567,1257,1282,1486,1274,1284,1149,1570,1199,1425,1289,867,1538,1343,1348,1140,1259,1603,867,1182,1417,1167,1356,1193,1288,1351,1223,1616,1130,1474,1555,1388,1587,1398,1562,1567,1488,1617,1346,1554,1584,1265,1164,1616,1273,1335,1110,1583,1211,1349,1324,917,1253,1460,1442,1089,1321,1498,1010,1024,1364,1266,1068,1546,1122,1432,1199,1724,1178,1312,1554,1462,1360,1656,1481,1443,1589,1431,1593,1335,1511,1499,1156,1663,1193,1408,1193,1558,1265,1326,1397,1006,1167,1461,1414,1127,1260,1226,1534,902,1311,1461,1198,1644,1031,1393,1199,1616,1226,1387,1433,1423,1323,1574,1591,1489,1580,1488,1527,1416,1542,1478,1150,1682,1257,1430,1209,1533,1285,1333,1420,1044,1077,1524,1386,1138,1294,1157,1655,806,1256,1489,1358,1662,1056,1357,1339,1393,1539,1279,1526,1558,1248,1692,1615,1596,1592,1442,1739,1196,1261,1282,1319,1327,1783,1527,1448,1224,1291,1582,1516,1445,1811,1447,1318,1223,1541,1405,1446,1815,1442,1425,1329,1286,1485,1357,1399,1809,1428,1587,1396,1236,1457,1254,1254,1438,1772,1124,1221,1288,1362,1704,1342,1332,1433,1588,1353,1696,1719,1761,1919,1672,1934,1894,1792,1748,1860,1848,1749,1899,1195,941,1699,1694,1757,1737,1712,1676,1490,905,1029,1987,1912,1757,1555,1303,1328,1447,1612,1614,1883,1864,1845,1405,1634,1761,1714,1890,1875,1890,1752,1596,1796,1401,1942,1922,1891,1834,1849,1811,1912,1690,1768,1849,1842,1889,1861,1768,1640,1767,1507,1516,1706,1502,1647,1559,1583,1593,1465,1608,1507,1535,1539,1412,1405,1853,1929,1913,1690,1851,1835,1922,1791,1873,1872,1763,1838,1901,1829,1833,1988,1958,1954,1858,1947,1927,1980,1846,1927,1964,1968,1870,1926,1789,1884,1653,2038,2045,2032,1942,1963,1888,1854,1951,1931,1914,1974,1925,1984,1946,1909,1955,1919,1939,1950,1887,1903,1953,1895,1896,1946,1920,1961,1829,1922,1655,1775,1873,1811,1725,1712,1796,1590,1293,1450,1924,1471,1790,1680,1656,1770,1567,1656,1681,1389,1197,1094,1211,1502,1689,1684,1449,1185,1482,1693,1449,1171,1720,1900,1793,1729,1770,1799,1566,1947,1838,1697,1670,1681,1739,1571,1753,1645,1558,1674,1452,1542,1575,1445,1255,1613,1675,1113,949,1526,1596,1699,1717,2036,1964,1977,1996,1916,1878,1627,1513,1835,1980,1874,1887,1898,1747,1763,1802,1717,1714,1832,1875,1739,1855,1667,1842,1586,1574,1664,1554,1730,1721,1809,1815,1675,1685,1658,1426,1380,1742,1911,1806,1745,1308,1422,1709,1752,1615,1434,1639,1667,1604,1609,1616,1518,1708,1554,1326,1581,1411,1691,1666,1329,1628,1463,1682,1647,1470,1335,1581,1578,1131,1328,1358,1201,1385,1288,1537,1182,1296,1445,1322,1430,1299,1349,1379,1540,1591,1610,1804,1317,1515,1809,1902,1847,1912,1559,1921,1420,1429,1289,1467,1727,2045,2005,2005,1418,1859,1718,1703,1852,1435,1830,1793,1807,1576,1803,1553,1565,1506,1318,1652,1868,1774,1529,1842,1259,1841,1681,1895,1470,1497,1750,1704,1805,1758,1999,1605,1514,1711,1676,1710,1642,1742,1710,474,613,429,567,864,576,517,567,1048,2014,1967,1990,1937,1956,1972,1961,1933,1884,1642,1633,1626,1791,1547,1566,1734,1589,1714,1564,1783,1371,1501,1441,1582,1354,1423,1486,1635,1353,1299,1226,1486,1384,1555,1423,1335,1547,1450,1443,1585,1419,1364,1401,1410,1441,1375,1404,1692,1765,1781,1835,1886,1882,1882,1757,1727,1779,1647,1758,1806,1828,1766,1730,1685,1634,798,819,803,831,1750,1722,1626,1622,1702,1589,1675,1644,1666,1750,1666,1735,1651,1735,1784,1794,1903,1411,1781,1559,1812,1176,1781,1575,1899,1743,1853,1789,1866,1827,1818,1813,1850,1409,1050,1064,1040,1089,1067,1073,1044,1399,1530,1540,1530,1581,1547,1545,1567,1534,1624,1435,1600,1603,1639,1101,1051,1014,1061,1501,1424,1737,1822,1554,1250,1138,1548,1412,1068,1430,1612,1366,1493,1624,1609,1547,1621,1604,1388,1280,820,1047,758,749,920,699,1347,1407,1378,505,650,648,556,841,487,856,717,911,522,511,923,688,857,518,866,672,744,598,522,942,701,916,488,765,618,660,547,286,607,203,618,230,394,282,255,633,161,535,190,527,38,77,569,236,599,185,871,1453,1459,1198,1219,1223,1175,1265,952,1020,983,971,988,986,997,1293,1366,1403,1396,1493,1478,1412,1434,1398,1581,1446,1490,1533,1594,1617,1482,1503,1617,1394,1402,1435,1429,1405,1374,1470,1428,1348,1416,1417,1348,1390,953,923,949,992,1025,948,936,951,1062,908,980,893,1241,1396,1451,1338,1398,962,902,943,947,1701,1578,1598,1574,1517,1580,1558,1580,1684,1364,1321,1360,1364,1245,1324,1320,1319,1610,1567,1597,1186,1545,1414,1263,1441,1600,1535,1618,1555,1631,1712,1696,1741,1719,1536,1230,1408,1413,1387,1423,1185,1457,1417,1423,1506,1472,1604,1446,1685,1634,1604,1612,1575,1572,1599,1586,1642,1722,1653,1569,1660,1417,1618,1534,1579,1683,1606,1612,1598,1605,1502,1605,1625,1577,1667,1667,1592,1670,1461,1615,1568,1609,1641,1640,1567,1544,1555,1848,1528,1568,1552,1707,1773,1617,1558,1589,1817,1626,1675,1644,1673,945,977,950,951,1621,1481,1566,1476,1603,1265,1262,1315,1399,1129,1163,1252,1337,1272,980,936,1079,1367,1185,1123,1093,1244,1152,876,978,1153,1907,1460,1964,1522,1594,1420,1456,1322,1400,1424,1423,1357,1614,1514,1519,1529,1539,1529,1523,1523,1537,1639,1421,1375,1380,1376,1404,1376,1343,1591,1535,1515,1526,1576,1555,1518,1530,1544,1752,1595,1600,1661,1635,1574,1610,1649,1719,1585,1465,1402,1395,1434,1478,1413,1426,1781,1773,1738,1689,1728,1751,1712,1689,1752,1867,1739,1678,1641,1743,1708,1691,1658,1710,1062,1141,1176,1113,1099,1068,1289,1158,1048,978,958,670,668,692,1045,1748,1690,1748,1673,1744,1677,1717,1661,1871,1758,1710,1640,1672,1677,1718,1718,1789,1830,1750,1808,1713,1786,1748,1763,1734,1883,1753,1717,1634,1660,1664,1704,1688,1722,1503,1497,1374,1493,1423,993,1008,1002,1478,1855,1799,1824,1755,1831,1781,1863,1857,1579,1221,1188,1304,1724,1078,1043,1055,1692,1646,1614,1601,1676,1528,1639,1592,1675,1597,1480,1417,1433,1362,1462,1411,1430,1448,1616,1568,1531,1569,1449,1440,1453,1450,1585,1633,1641,1578,1554,1671,1610,1596,1662,1622,1452,1489,1451,1408,1479,1421,1445,1567,1847,1807,1853,1745,1847,1779,1888,1841,1679,1609,1592,1618,1554,1636,1633,1614,1742,1547,1492,1453,1407,1500,1455,1461,1507,1705,1820,1836,1858,1683,1871,1810,1858,1853,1649,1637,1585,1714,1498,1646,1602,1618,1638,1478,1446,1436,1371,1521,1475,1429,1448,1857,1806,1816,1879,1668,1859,1819,1862,1740,714,1651,1063,675,1174,649,678,1176,668,984,1549,658,674,665,1437,1205,1103,1317,1287,895,1003,1258,1198,1237,1319,1488,1506,1365,1017,1221,1704,1563,1740,1643,1738,1542,1575,1733,1717,1029,1152,1451,1386,1537,1180,996,997,1008,1389,1080,1126,1127,1093,1580,2017,2038,2004,1989,2024,1999,1994,2010,2031,2042,2033,2018,2009,2020,2018,1955,2013,2035,2045,1998,1990,2036,1991,1993,1990,2022,2024,2027,1998,1995,2011,2006,1955,2027,2042,1891,1923,1876,1927,1912,1849,1857,1872,1880,1891,1891,1828,1874,1824,1838,1884,1876,1651,1668,1692,1671,1666,1658,1619,1735,1676,1661,1637,1627,1643,1653,1643,1593,1728,1450,1461,1445,1424,1425,1425,1392,1406,1605,1417,1354,1684,1355,1459,1497,1674,1411,1478,1540,1590,1540,1398,1606,1529,1608,1353,1453,1349,1872,1777,1493,1613,1656,1567,1590,1497,1699,1655,1560,1578,1661,1758,1700,1556,1575,1681,1530,1562,1538,1572,1534,1550,1529,1520,1530,1491,1645,1588,1531,1684,1681,1632,1654,1704,1842,1519,1522,1960,1921,1702,1705,1798,1947,1936,1928,1986,1923,1963,1909,1919,1866,1821,1842,1901,1998,1861,1872,1833,1832,1771,1773,1762,1904,1995,1955,1974,1931,1903,1911,1906,1917,2042,1865,1894,1857,1819,1815,1829,1776,1871,2021,1991,1977,1986,1928,1941,1923,1918,2008,1802,1774,1746,1730,1740,1784,1719,1780,1968,1814,1800,1824,1778,1814,1779,1775,1905,1457,1441,1426,1429,1399,1394,1448,1427,1929,1968,1930,2043,1942,1947,1896,1907,1904,1927,1870,1930,1965,1965,1943,1893,1916,1921,1897,1931,1920,1522,1497,1594,1620,1580,1615,1537,1520,1975,1821,1796,1743,1766,1733,1741,1712,1791,1342,1326,1288,1361,1304,1315,1357,1377,1745,1699,1739,1819,1685,1650,1633,1610,1713,1506,1459,1486,1572,1585,1495,1477,1467,1658,1694,1463,1678,1637,1591,1558,1506,1369,1328,1327,1228,1281,1166,1264,1703,1877,1860,1880,1904,1888,1877,1869,1869,1959,1893,1868,1873,1884,1884,1883,1873,1922,1423,1434,1376,1392,1484,1472,1456,1457,1768,1663,1713,1740,1690,1602,1586,1538,1686,1519,1548,1581,1608,1724,1720,1701,1640,1715,1453,1467,1464,1462,1385,1380,1413,1505,1576,1474,1496,1554,1160,1532,1513,1432,1671,1491,1528,1483,1327,1506,1493,1532,1518,1994,1959,1926,1715,1419,1416,1420,838,1418,1400,1401,1613,1188,1130,1126,1119,1043,1063,1166,1164,1505,1449,1433,1869,1905,1894,1916,1903,1907,1904,1928,1696,1605,1518,1496,1498,1404,867,976,789,902,785,990,687,932,871,1004,765,874,924,1015,990,890,1417,1259,1332,1307,906,353,581,440,469,240,505,624,1358,958,817,788,1124,1319,729,1342,826,157,475,259,327,1319,1368,1525,1667,1843,1742,1809,1822,1803,1765,1752,1793,1775,1642,1641,1576,1624,1590,1652,1591,1638,1407,1302,1324,1333,1581,1683,1671,1665,1650,1685,1652,1671,1676,1677,1672,1658,971,1551,1820,1863,1769,1795,1799,1884,1836,1752,1655,1446,1467,1456,1626,1862,1838,1868,1859,1862,1869,1849,1864,1853,1070,1753,1256,1117,1240,1047,1150,2051,2004,1972,1924,1961,1961,1906,1907,1882,1966,1955,1952,1906,1920,1889,1925,2010,1797,1665,1765,1809,1811,1787,1695,1607,1852,2055,2043,2051,2041,2049,2049,2043,2054,2048,2055,2043,2044,2047,2039,2040,2037,2055,1861,1929,1864,1851,1825,1861,1837,1869,1954,1902,1883,1861,1860,1823,1865,1839,1945,1846,1895,818,760,802,740,811,346,824,872,837,481,508,783,909,786,381,678,795,848,682,399,746,859,846,509,520,1168,1043,1220,552,539,1245,1042,1141,557,589,1212,1094,1101,379,825,1148,1028,962,1148,1228,1546,1301,1666,1662,993,1147,1126,1114,1189,1118,1072,1113,1134,1145,1187,1166,1110,1103,1044,1064,1644,1055,1072,1184,1112,1058,1078,1040,1028,1036,878,1037,1061,930,886,762,881,1429,430,534,499,536,550,502,558,535,458,473,486,515,532,512,565,525,1265,1465,1462,1501,1551,1487,1511,1516,1460,1254,967,975,1264,1725,1422,1386,1336,1302,1455,1720,1632,1645,1672,1612,1606,1658,1654,1661,1899,1706,1708,1736,1682,1717,1737,1666,1796,1037,1117,1217,1334,1299,1276,1342,1113,1343,1431,1410,1444,1519,1499,1558,1529,1605,1565,1002,1124,1166,1113,1191,1103,1102,1095,1167,1164,1159,1185,1145,1088,1052,1123,1614,1095,1122,1188,1095,1064,1060,1077,1015,1020,877,993,998,914,903,778,880,1410,434,530,502,536,573,483,559,558,463,494,462,532,507,527,562,531,1500,1784,1774,1808,1800,1802,1747,1864,1398,1398,1362,1383,1671,1838,1807,1896,1834,1900,1834,1863,1859,1577,1526,1580,1534,1462,1673,1604,1708,1599,1717,1810,1817,1764,1569,1224,1144,1132,1335,1359,1689,1749,1813,1802,1734,1847,1787,1728,1761,1422,1138,1117,1177,1337,1424,1478,1948,1673,1948,1729,1795,1830,1751,1854,1756,1744,1749,1760,1651,1649,1774,1744,1782,1585,1668,1333,1716,1618,1608,1605,1569,1568,1597,1612,1782,1440,1747,1789,1534,1387,1741,1803,1575,1729,1058,1077,1136,1135,1147,1137,1095,1150,1085,1155,1136,1205,1151,1090,1061,1135,1316,1025,1244,1108,870,653,1086,1251,1118,980,920,1216,1131,978,552,1148,1243,1169,994,842,1198,1134,994,417,1192,1175,1186,972,787,1153,1143,1056,424,1182,1152,1144,957,797,1082,1237,1098,404,1104,1193,1120,921,1387,1152,1090,1162,1044,1061,1137,1053,976,1029,892,1022,1026,854,828,808,860,1002,1193,1185,1166,390,952,1253,1108,956,1249,1120,1222,1145,1207,1199,1111,1249,1190,1278,1133,1131,1205,1175,1271,1149,1142,1236,1124,1346,1211,1023,1019,1133,1293,1107,1018,1023,1112,1355,1098,974,1050,1290,1229,1040,1016,1088,1443,761,476,562,1236,1527,1757,1844,1878,1832,1602,1405,570,502,526,521,571,852,1551,1456,1597,1542,1458,1611,1533,1457,1621,1521,1451,1635,1742,1838,1782,1749,1882,1741,1831,1827,1798,1748,1824,1871,1702,1752,1883,1707,1910,1765,1759,1878,1737,1726,1815,2042,1735,1810,1839,1681,1904,1675,1834,1779,1799,1779,1792,1822,1776,1827,1804,1760,1905,1705,1748,1889,1705,1846,1781,1750,1867,1865,1715,1714,1903,1688,1833,1891,1694,1883,1718,1849,1750,1843,1751,1790,1858,1764,1772,1875,1736,1850,1750,1749,1927,1695,1831,1779,1863,1244,1167,1172,1235,1276,1155,1247,1111,888,678,773,873,647,407,753,838,898,495,499,788,830,904,564,358,807,866,845,797,1331,990,1144,1160,1131,1144,1084,1089,1096,1163,1099,1214,1194,1082,1054,1064,1253,1525,1581,1687,1077,1087,1160,1110,1072,1062,1091,1019,1015,891,1002,1025,959,866,777,904,1373,1460,1406,1418,421,539,507,548,547,461,571,559,455,531,468,513,499,530,587,507,1507,1647,1657,1578,1694,1684,1646,1665,1675,1714,1776,1656,1614,1601,1649,1632,1234,489,1308,1418,1367,1292,1396,1357,1397,1306,1297,1038,1201,1090,1226,1100,1224,1075,1198,1393,1369,1461,1432,1512,1354,1436,1420,1555,1572,1476,1371,1467,1412,1432,1356,1413,1244,1120,1254,1118,1319,1150,1343,1162,1283,1128,1231,1230,1350,1176,1102,1233,1109,1482,1480,1527,1522,1711,1462,1580,1497,1442,1357,1469,1329,1035,1197,1177,1485,1389,1055,1362,789,1038,1225,950,2036,2039,2035,2003,2021,1993,1994,1973,2019,2035,2011,2027,2012,2021,2017,1964,2024,1362,1369,1581,1587,1124,1123,1123,1125,1121,1118,1121,1665,1505,1455,1599,1792,1698,1742,1747,1863,1570,1492,1495,1633,1603,1573,1542,1608,575,87,1478,2009,2004,1878,1893,1887,1829,1875,1890,1895,1887,1946,1900,1957,1918,1857,1910,1921,1886,1850,1921,1978,1877,1915,1946,1928,1723,1776,1826,1728,1991,1908,1869,1879,1884,1925,1885,1895,1871,1971,1777,1829,1864,1914,1821,1519,1657,1691,1653,1657,1729,1666,1689,1641,1733,1633,1651,1670,1744,1651,1693,1644,1672,1855,1459,1544,1615,1602,1569,1524,1485,1594,1609,1612,1658,1500,1524,1564,1567,1553,1902,1503,1676,1546,1515,1968,1794,1781,1788,1855,1891,1858,1847,1945,1327,1277,1306,1367,1355,1371,1346,1272,1634,1479,1437,1445,1494,1478,1480,1440,1550,1507,1464,1461,1463,1489,1454,1461,1419,1612,1464,1449,1443,1464,1509,1469,1436,1489,1624,1424,1414,1473,1478,1471,1445,1407,1601,1425,1391,1424,1440,1473,1437,1422,1386,1617,1377,1394,1460,1487,1452,1413,1383,1609,1410,1372,1388,1448,1462,1419,1440,1413,1632,1406,1393,1490,1484,1495,1445,1406,1601,1482,1441,1458,1477,1468,1498,1470,1363,1619,1354,1324,1361,1364,1376,1340,1299,1353,1474,1371,1334,1376,1344,1383,1315,1269,1564,1311,1289,1345,1368,1307,1316,1352,1234,1648,1453,1431,1483,1470,1512,1480,1385,1638,1411,1397,1441,1518,1458,1450,1433,1402,1596,1375,1378,1425,1459,1479,1406,1371,1606,1419,1387,1360,1478,1452,1417,1391,1431,1597,1407,1384,1435,1468,1478,1405,1426,1506,1577,1436,1426,1455,1476,1442,1454,1420,1765,1659,1841,1747,1835,1716,1695,1793,1818,1834,1798,1737,1653,1791,1730,1812,1703,1856,1756,1881,1858,1853,1882,1903,1853,1893,1931,1832,1787,1794,1822,1789,1770,1774,1944,1765,1728,1692,1721,1724,1694,1687,1736,1844,1743,1743,1698,1738,1709,1733,1666,1787,1932,1839,1824,1799,1793,1840,1803,1807,1916,1722,1754,1749,1732,1735,1733,1787,1775,1795,1909,1843,1846,1842,1802,1744,1781,1772,1908,1649,1763,1754,1489,1765,1737,1621,1783,1796,1746,1752,1751,1620,1677,1587,1821,1845,1661,1683,1652,1641,1687,1680,1677,1662,1777,1656,1627,1630,1693,1712,1688,1678,1692,1875,1818,1714,1775,1846,1796,1811,1801,1849,1784,1726,1720,1757,1794,1752,1807,1733,1778,1711,1698,1742,1729,1754,1697,1723,1797,1704,1700,1752,1653,1694,1686,1718,1727,1769,1682,1724,1635,1648,1658,1711,1731,1805,1438,1501,1495,1559,1511,1499,1526,1477,1905,1986,1927,1961,2022,1949,1952,1988,1892,1950,2007,2023,1979,1919,1974,2022,2038,1855,1095,40,38,40,314,38,40,38,40,1786,1812,1809,1834,1842,1835,1811,1799,1924,1448,1500,1464,1440,1387,1477,1447,1461,1902,1831,1801,1764,1811,1740,1778,1770,1721,675,315,40,40,38,319,38,40,40,585,1160,1454,1663,1708,1652,1705,1694,1661,1700,1798,1017,1231,1431,1292,777,1572,1449,1284,970,1794,1618,1641,617,40,38,40,317,40,40,38,501,1191,1383,1197,1249,1665,1664,1611,1682,1676,1686,1667,1619,1667,55,39,40,38,1084,508,87,1059,1848,1992,1796,1667,1617,1636,1690,1658,1715,1739,1691,1740,1739,1738,1745,1730,1692,1678,1703,1140,1086,584,896,1822,1769,1723,1720,1723,1792,1680,1728,1871,1859,1801,1865,1800,1916,1814,1902,1800,1850,1677,1682,1777,1632,1806,1763,1702,1885,1774,1968,1791,1943,1870,1879,1888,1856,2033,1485,1395,1345,1221,1259,1572,1554,1468,1359,1400,1260,1291,1233,1295,1308,1402,1802,637,773,890,926,1312,1676,1159,691,614,722,1348,1559,1715,1529,826,1231,1510,1453,1169,940,837,927,791,585,933,1201,1372,1227,1170,1356,1350,1412,1316,1408,1769,1731,1803,1721,1773,1711,1756,1730,1754,1758,1750,1765,1756,1786,1763,1771,1272,912,948,914,1452,1957,1778,1852,1940,1150,1167,1191,1216,1968,2025,1981,2031,1958,1907,1891,1914,1912,2040,2036,2039,2043,1797,1812,1783,1844,1806,1833,1702,1820,1737,1650,1628,1611,1668,1634,1289,1294,1663,1364,1194,1294,1279,1359,1194,1233,1202,1540,1523,1185,1182,1617,1679,826,789,1480,1546,879,744,1127,1318,1267,739,930,1712,1650,1366,1420,1665,1905,1887,1858,1882,1852,1938,1968,1967,1887,1672,1658,1658,1634,1722,1785,1786,1750,1626,1463,1386,1428,1577,1456,1403,1439,1585,1531,1434,1489,1546,1622,1514,1455,1546,1875,1978,1963,1917,2016,1960,1970,1971,2011,1788,1773,1744,1752,1801,1602,1534,1572,1860,1917,1828,1869,1931,1776,1829,1775,1833,1978,1857,1835,1914,1901,1808,1786,1801,1880,1522,1599,1633,1570,1175,1234,1611,1370,1174,1224,1231,1645,1232,1217,1268,1761,1764,1774,1775,1750,1878,1791,1781,1789,1860,1844,1820,1813,1584,819,831,829,869,1171,1155,1157,1181,1278,1177,1195,1198,1314,1382,1405,1273,1530,1823,1852,1867,1840,1897,1794,1863,1832,1952,1888,1934,1932,1931,1915,1926,1959,1972,1712,1778,1768,1685,1780,1779,1652,1538,1602,1683,1795,1782,1828,1849,1730,1854,1789,1547,1478,1401,1495,1544,1580,1757,1612,1547,1617,1653,1707,1675,1744,1791,1752,1817,1880,2045,2047,1982,1953,1970,1989,1966,1976,1945,1955,1923,1889,1243,1260,1423,1050,1678,1783,1735,1760,1752,1550,1613,1464,1630,1785,1748,1786,1740,1844,1810,1800,1784,1785,1707,1721,1699,1685,1637,1817,1796,1603,1359,977,1123,1067,1651,569,557,556,1657,838,1328,837,1384,563,637,493,568,952,760,768,678,746,1133,1250,1211,1024,1450,1345,1449,1421,1554,1362,1394,1579,1537,1448,1437,1530,1540,1555,1375,1537,1551,1487,1342,1403,1472,1574,1429,1404,1499,1094,217,230,190,765,494,495,443,673,2041,2020,2051,2029,2021,2041,2039,2040,2032,1967,1941,1975,1896,1905,1933,1912,1887,1526,1401,1425,1449,1347,1181,1173,1145,1233,1413,1375,1505,1401,1873,1809,1843,1873,1890,1824,1775,1792,1913,1784,1741,1750,1826,1656,1704,1772,1741,1609,1307,1285,1349,1562,1323,1275,1386,1618,1792,1732,1827,1711,1294,1222,1224,1248,1812,1813,1773,1782,1736,1450,1371,1558,1493,2027,2036,2037,2016,2028,1985,1981,1987,1810,1507,1530,1477,1687,1689,1655,1650,1675,2017,1969,2001,2002,1905,1714,1719,1744,1932,2055,2050,2049,2048,1575,1562,882,536,541,544,863,1410,1432,1419,1186,1244,1577,1583,1183,1464,1574,1487,1550,1579,1642,1714,1680,1879,1816,1424,1201,1351,1243,1248,961,984,955,1289,865,917,985,849,1223,705,642,1396,1997,1993,1961,1976,1958,1974,1990,1987,1683,1893,1905,1862,1979,2010,1372,2003,2030,1916,1886,1892,1904,2009,2008,1622,2003,1718,1587,1667,1502,1500,1515,1613,1493,1472,1890,1906,1869,1867,1894,1901,1862,1849,1881,1534,1472,1445,1856,1947,1976,1986,2011,1883,1812,1798,1802,1847,1865,1883,1889,1738,1392,1446,1415,1433,1434,1522,1484,1446,1538,1653,1719,1644,1546,1521,1597,1528,1589,1749,1636,1724,1728,1700,1727,1670,1748,1636,1692,1513,1716,1653,1658,1511,1702,1703,1449,1583,1571,1565,1382,1771,1549,1611,1447,1468,1560,1497,1504,1448,1545,1730,1506,1302,1263,1472,1621,1683,1783,1360,1747,1611,1576,1780,1705,1601,1723,1433,1697,1543,1528,1628,1520,1445,1485,1846,1322,1403,1394,1251,1139,1122,1286,1167,1397,1480,1369,1335,1574,1402,1192,1345,1828,1661,1797,1569,1311,1059,1012,917,907,1100,1178,1324,1271,1548,1619,1532,1681,1964,1347,1283,1529,1472,1512,1513,1462,1418,1441,1669,1721,1711,1715,1646,1740,1797,1923,1703,1818,1761,1626,1347,1341,1316,1376,1421,1564,1617,1618,1596,1429,1439,1358,1554,1522,1337,1361,1407,1405,1385,1638,1507,1524,1451,1429,1427,1445,1447,1530,1402,1715,1845,1539,1423,1401,1376,1405,1332,1372,1460,1677,1770,1783,1579,1557,1483,1434,1416,1777,1422,1419,1396,1426,1408,1554,1681,1646,1609,1452,1528,1488,1374,1446,1453,1427,1671,1584,530,250,1463,1589,562,250,1392,1564,572,250,1399,1589,571,277,1414,1567,601,249,1324,1582,612,244,1179,1267,1288,1266,1436,1264,1311,1360,1407,1325,1261,1323,1275,1413,1336,1342,1247,1427,1549,1300,1257,1267,1228,1237,1274,1242,1268,1516,1161,1216,1208,1238,1227,1227,1212,1496,1234,1277,1264,1324,1252,1264,1290,1245,1817,1724,1760,1698,1672,1648,1790,1754,1575,1253,1351,1293,1377,1330,1348,1248,1382,1324,1411,1308,1373,1350,1422,1349,1423,1845,1674,1599,1576,1640,1577,1496,1418,1288,1400,1402,1464,1560,1532,1422,1568,1718,1881,1685,1573,1577,1658,1576,1515,1456,1277,1366,1408,1459,1583,1520,1438,1505,1713,1890,1696,1596,1599,1672,1573,1517,1496,1251,1367,1385,1463,1574,1518,1449,1502,1730,1902,1691,1618,1583,1649,1557,1543,1472,1240,1382,1357,1440,1586,1504,1455,1512,1693,1922,1229,1298,1098,987,960,1141,1079,1082,1134,1261,1232,1207,965,964,1056,1061,1528,1347,1292,1133,956,999,1082,1110,1027,1168,1253,1254,1225,989,932,1075,1051,1408,1991,1923,1918,1962,1957,1965,1954,1924,1876,1798,1793,1839,1884,1939,1915,1956,1866,1563,1967,1928,1978,2015,1987,1915,1959,1985,1143,1165,1146,1173,1314,1137,1136,1129,1653,1757,1749,1771,1761,1764,1783,1838,1744,1802,1777,1795,1803,1773,1604,1971,1967,1907,1890,1896,1975,1685,700,793,1910,1940,2001,1984,1978,1953,2006,1948,1976,1974,1958,1972,1976,1951,1977,1934,1953,1890,1573,1547,1563,1562,1593,1556,1562,1601,1750,1656,1640,1698,1594,1818,1667,1743,1614,1727,1467,1591,1465,1644,1677,1736,1690,1669,1751,1647,1754,1714,1888,1721,1824,1807,1823,1657,1688,1639,1720,1714,1741,1730,1668,1727,1522,1621,1523,1674,1624,1770,1682,1752,1692,1782,1798,1796,1656,1480,1773,1637,1823,1788,1838,1775,1820,1805,1806,1799,1772,1713,1706,1760,1590,1645,1550,1782,1637,1838,1682,1861,1789,1732,1673,1780,1790,1707,1336,1890,1919,1826,1340,1918,1901,1457,1501,1524,2007,2005,2004,1575,1375,1442,1294,1314,1198,1141,1597,1626,1602,1537,1499,1509,1560,1488,1594,1342,1193,970,895,1012,1368,1049,979,1188,1051,1885,1791,1869,1874,1808,1833,1804,1796,1931,1744,1567,1683,1666,1705,1745,1755,1719,1851,1836,1858,1868,1809,1860,1775,1803,1971,1739,1592,1679,1661,1723,1770,1789,1699,1840,1795,1911,1817,1890,1790,1930,1792,1941,1970,1852,1986,1949,1898,1963,2013,1921,1969,1848,1680,1795,1798,1788,1828,1832,1830,1431,1307,1681,1436,1268,1540,1553,1746,1428,1082,1326,1408,1133,1025,690,329,1052,1303,1254,1326,1326,1434,1295,1316,1337,1301,1479,1299,1304,1348,1375,1379,1354,1326,1343,1527,1404,1489,1090,1570,1645,1882,1962,2028,2048,2002,1997,1992,1934,1727,1629,1524,1506,1696,1584,1713,1711,1756,1769,1761,1659,1722,1597,1590,1603,1652,1433,1738,1873,1930,1843,1658,1697,1779,1974,1966,1861,1754,1692,1833,1925,1862,1785,1415,1780,1935,1891,1883,1652,1692,1914,1971,1992,1952,1776,1626,1873,1859,1889,1840,1485,1017,990,955,1263,1443,1566,1605,1663,1613,1635,1657,1716,1440,1926,1697,1715,1743,1600,1727,1647,1630,1707,1689,1874,1792,1752,1758,1745,1681,1770,1619,1675,1700,1727,1739,1770,1961,1818,1465,1832,1876,1853,1939,1963,1928,1903,1722,1718,1707,1682,1708,1944,1913,1914,1898,1909,1987,1916,1916,1947,1938,1840,1784,1792,1795,1836,1956,1874,1908,1887,1918,1840,1872,1816,1310,1064,1356,1696,1607,1674,1613,1836,1779,1734,1773,1740,1745,1768,1755,1792,1737,1788,1681,1200,590,560,691,1248,1055,1314,1275,1233,953,1789,1725,1655,1566,1725,1628,1620,1693,1674,1340,1712,1491,1359,1126,1599,1575,1728,1691,1671,1719,1736,1577,1594,1631,1494,1599,1519,1665,1557,1680,1533,1579,1686,1585,1639,1534,1683,1528,1577,1536,1514,1612,1533,1612,1549,1539,1677,1548,1685,1529,1601,1680,1801,1819,1856,1875,1853,1848,1823,1885,1836,1823,1830,1922,1922,1880,1866,1863,1968,2025,1979,1929,1883,1908,1934,1916,1913,1930,1948,1910,1864,1875,1841,1905,1904,1838,1673,1633,1608,1748,1603,1603,1658,1599,1612,1639,1616,1726,1655,1651,1647,1644,1629,1653,1634,1624,1754,1660,1628,1632,1643,1634,1634,1650,1807,1865,1885,1845,1864,1862,1851,1865,1836,1941,1844,1841,1822,1860,1840,1843,1846,1928,1888,1857,1850,1864,1864,1831,1857,1876,1768,1351,1438,1427,1333,1423,1430,1602,1400,1341,1443,1499,1411,1428,1714,1862,1860,1841,1766,1808,1799,1914,1890,1718,1706,1729,1719,1751,1657,1737,1657,1698,1601,1742,1729,1661,1776,1746,1701,1612,1696,1834,1838,1804,1881,1658,1733,1875,1903,1881,1840,1748,1675,1776,1789,1787,1790,1371,1718,1703,1657,1836,1646,1661,1795,1774,1814,1759,1764,1628,1723,1638,1661,1767,1711,1402,1524,1497,1571,1488,1694,1406,1679,1585,1490,1601,1695,1602,1515,1617,1563,1502,1617,1525,1766,1786,1758,1791,1769,1760,1740,1425,1391,1786,1790,1823,1743,1713,1699,1488,1724,1705,1749,1643,1352,1306,1764,1754,1729,1447,1525,1437,1453,1674,1533,1535,1492,1479,1510,1496,1548,1540,1529,1275,1471,1544,1561,1543,1490,1495,1501,1671,1509,1549,1377,1391,1453,1503,1801,1777,1872,1803,1823,1843,1805,1736,1710,1544,1737,1778,1687,1799,1671,1750,1771,1733,1743,2005,2042,1997,2012,2018,1991,1812,1751,1722,1643,1719,1722,1774,1706,1692,1705,1806,1748,1617,1817,1696,1721,1678,1656,1668,1725,1680,1755,1689,1767,1678,1664,1735,1721,1653,1787,1562,1809,1647,1426,1403,1756,1753,1688,1700,1702,1414,1516,1519,1492,1475,1464,1577,1489,1554,1789,1744,1681,1757,1654,1717,1766,1755,1622,1670,1661,1683,1615,1615,1627,1654,1686,1683,1631,1606,1702,1623,1663,1643,1738,1642,1648,1631,1669,1649,1637,1656,1639,1698,1629,1654,1642,1699,1640,1627,1590,1742,1586,1672,1694,1763,1707,1642,1624,1632,1716,1643,1671,1673,1814,1621,1602,1629,1707,1660,1813,1860,1682,1646,1730,1824,1664,1719,1772,1828,1764,1803,1904,1872,1891,2008,1974,1955,1944,1960,1848,1830,1908,1960,1997,2017,2001,1884,1901,1871,1799,1866,1990,2015,2008,2002,1981,1980,1915,1904,1872,1916,1934,1930,1952,2014,1757,1855,1889,1913,1882,1818,1575,1593,1825,1856,1828,1646,1620,1606,1631,1630,1727,1129,1106,960,1095,1186,1295,1117,1340,1210,1247,1138,1193,1297,1142,1171,1228,1200,1664,1699,1727,1726,1655,1717,1675,1755,1655,1686,1755,1806,1639,1715,1636,1698,1648,1721,1618,1664,1663,1717,1666,1688,1627,1706,1692,1686,1656,1639,1847,1723,1717,1731,1675,1714,1729,1751,1788,1759,1685,1721,1753,2031,1993,2018,2047,2039,2043,2027,2033,2026,2035,2023,2042,2052,2049,2056,2036,2042,1967,1856,1861,1905,1911,1898,1880,1862,1909,1651,1675,1583,1661,1792,1723,1543,1621,1756,1628,1694,1685,1625,1710,1740,1745,1661,1713,1668,1550,1683,1410,1659,1735,1923,1704,1670,1671,1723,1929,1864,1865,1788,1776,1742,1802,1843,1907,1405,2012,1948,2025,1973,1906,1900,1751,1714,1646,1767,1712,1774,1767,1773,1666,1752,1715,1682,1694,1703,1461,1515,1515,1518,1498,1515,1552,1527,1458,1558,1514,1480,1511,1544,1517,1509,1497,1519,967,878,954,965,1479,1422,1282,1419,1332,1432,1373,1427,1426,1660,1701,1660,1656,1626,1601,1644,1714,1784,1697,1651,1673,1805,1766,1693,1736,1649,1794,1618,1685,1676,800,1587,1649,1709,1874,1890,1914,1920,1870,1899,1908,1901,1903,1956,1710,1585,1506,1517,1446,1571,1690,1960,1905,1834,1649,1567,1561,1638,1821,1898,1895,1615,1695,1624,1632,1625,1687,1703,1744,1464,1424,1651,1672,1709,1729,1743,1200,1490,1257,1370,1484,1675,1742,1746,1377,1340,1561,1422,1402,1343,1371,1347,1409,1397,1453,1491,1253,1392,1354,1338,1349,1287,1322,1601,1355,1588,1507,1687,1728,1455,1136,1471,1344,1319,1461,1580,1634,1490,1348,1146,1635,1464,1372,1365,1198,1277,1229,1459,1644,1500,1450,1671,1721,1752,1666,1807,1279,1665,1307,1676,1565,1699,1666,1489,1190,1544,1594,1249,1485,1625,1636,1492,1436,1265,1648,1291,1488,1457,1692,1743,1690,1537,1434,1675,1482,1490,1418,1542,1494,1476,1467,1725,1802,1726,1752,1799,584,83,988,684,727,607,551,475,817,558,604,1176,884,888,1440,1419,1382,1428,1418,1504,1634,1723,1608,1637,1560,1577,1833,1648,1189,1106,1198,1215,1281,1274,1305,1270,1441,1496,1594,1567,1497,1541,1660,1628,1381,1341,1397,1035,25,30,25,297,767,1113,880,1332,1623,1657,1615,1605,1307,1566,1543,1623,1539,1634,1899,1930,1924,1929,1895,1890,1474,1478,1476,1409,898,940,1248,1308,1425,1447,1472,1493,1412,1503,1742,1774,1522,1613,1498,1568,1573,1502,1546,1660,2051,2056,2042,2027,1888,1908,2023,1997,1741,1864,1865,1935,1991,2036,1999,2032,1991,2030,1983,2018,2047,2029,1714,1793,2005,1995,1994,1971,1670,1619,1241,1227,1196,1332,1978,1961,1692,1738,1887,1885,1758,1797,1773,1812,2024,2021,1996,2004,2037,1985,2026,1967,1515,1540,1542,1527,1543,1542,1545,1546,1370,1408,1311,1338,1277,1306,1349,1450,2012,2010,1989,1975,2008,1965,1931,1920,2010,1888,1709,1702,1638,1722,1632,1492,263,362,1212,1365,1343,1048,1002,973,1095,1143,1625,1727,1568,1704,1712,1699,1507,1548,1564,1608,1532,1585,1495,1478,1295,1422,1076,1121,1279,1370,1235,1315,1446,1452,1578,1625,1451,1504,1363,1365,910,1021,1595,1551,849,1105,1279,1380,1466,1454,1472,1515,1175,1269,1551,1635,1942,1873,1306,1365,1210,1378,1585,1601,1607,1652,1572,1622,1481,1563,1508,1473,1231,1381,1574,1567,1354,1386,1363,1402,1355,1367,533,654,440,593,1433,1547,1564,1574,1388,1478,1530,1492,1430,1364,1159,1128,1289,1365,1528,1441,1086,912,897,1157,1769,1885,1790,1780,1536,1476,963,1086,1562,1566,1557,1563,1592,1595,1565,1661,1803,1824,1763,1808,1818,1860,1805,1803,1383,1442,1370,1402,1423,1461,1672,1734,1944,1975,1859,1946,1944,1975,1859,1975,1885,1877,1556,1389,699,686,832,1124,1319,1591,1673,1737,1470,1554,1401,1363,1182,994,610,799,825,884,609,747,1492,1331,493,535,508,776,1748,1778,1091,1149,1038,1122,1371,1355,1144,1014,903,1001,1449,1455,1449,1440,1419,1513,1696,1741,1660,1742,1866,1883,1553,1459,986,1059,1140,1213,929,989,874,1022,999,1096,1225,1196,471,517,606,642,488,528,615,645,483,525,629,676,497,551,609,655,433,460,556,847,1891,1774,1044,1112,1032,1108,1031,1119,1085,1233,1793,1683,1680,1711,1630,1662,1731,1605,1147,1231,1665,1653,1680,1756,1896,1645,190,262,291,355,185,238,278,387,51,266,25,161,153,216,240,246,246,491,1431,1517,1585,1555,1075,1102,1083,1169,1213,1251,1488,1512,1468,1573,1859,1871,1685,1703,1433,1553,1620,1660,1370,1518,1973,1974,2026,2037,1947,1958,1979,1966,1963,1971,2022,1894,1269,1278,1548,1638,1620,1162,1664,1448,1498,1488,1512,1437,1461,1467,1527,1536,1506,1474,995,1285,1250,1432,1151,1253,1322,1071,1063,1058,2044,1552,641,1544,2048,995,711,1785,1903,870,1006,2048,1524,642,1549,1932,2015,2048,2048,2039,1910,1982,2048,2048,2048,1866,1975,1856,2030,1946,1980,2052,1865,1978,1989,1946,1949,1919,1951,1907,1980,1955,1983,2014,1908,1981,1876,1985,1865,1994,1865,1978,2048,2048,1866,1978,2048,2048,1866,1980,1986,1950,1997,1854,1977,2052,2033,2020,1915,1987,2057,2054,1963,1983,1945,1986,1942,1976,2016,2048,2048,2042,1907,1980,2048,2048,2048,1878,2030,2002,1946,1989,1874,1975,1991,1977,2016,1866,1979,1876,1978,2044,2037,1897,2015,2048,2044,1946,1979,2049,2048,2006,1933,1996,2048,2040,1898,1980,2054,2048,1864,1981,2048,2048,1914,2008,1896,2009,1925,1986,1948,1987,1929,1986,1907,1981,1900,2009,1851,1936,1906,1873,1987,2035,2048,1907,2010,2045,2048,1867,1980,2048,2054,1870,1974,2048,2056,1866,1980,2049,1865,2014,2048,1870,2015,1978,1977,1978,1907,1939,1915,1942,1903,1923,1935,1912,1957,1969,1897,1979,1869,2030,1865,1958,1884,1974,2057,2013,1933,1999,2048,1936,1981,1927,1991,1887,2008,1884,2031,1871,2030,2006,1946,1962,1898,1951,1895,1952,1894,1960,1887,1976,1870,1971,2002,2019,1896,2005,2031,2012,2004,1932,1968,1906,1971,1882,1976,1870,2030,1955,1983,2050,1917,2008,1995,1932,1999,1864,1977,2048,2056,1863,1998,2048,2048,1863,1973,2048,2048,1871,2028,2048,2048,1989,1946,1993,2048,2056,1944,1981,2050,2048,2048,1875,1981,2048,2048,1912,2007,2055,2056,1985,1959,1801,1981,1996,1935,1972,1990,1965,1932,1966,1915,1892,1975,1950,1933,1997,2007,1937,1995,2016,2015,2030,1901,1982,2035,2008,2030,1866,1975,1985,1976,2010,1863,1980,1875,1976,1916,2009,2042,2007,1920,1987,2035,1864,1997,2048,1860,1996,2048,1861,1977,1863,1978,1865,1987,1865,1978,1865,1977,1870,1976,1871,1976,1865,1979,2048,2055,2048,1862,1972,2048,2048,2031,1906,1981,1875,2031,2042,1915,1936,1917,1932,1934,1995,1863,1978,1944,1980,2041,1977,1977,2007,1981,1970,1933,1946,1941,1931,2001,2048,2048,2033,1919,1988,2048,2048,2035,1905,1981,2048,2048,2025,1932,2001,2048,2048,2006,1946,1975,1877,1940,1900,1940,1919,1986,2009,1932,2007,1975,1987,2027,1863,1978,1968,1987,2026,2048,2048,1864,1997,2048,2048,2029,1921,1993,2048,2048,1963,1974,2050,2048,2048,1877,1976,1875,2015,1866,2014,1866,1980,1862,1977,1983,1964,1996,1869,1992,2053,1876,2031,2048,1957,1981,1884,2005,1878,2030,1865,1928,1909,1915,1937,1880,1972,1857,1981,2055,2051,1861,2032,2056,2033,1864,2030,2019,1999,1916,1968,2010,1868,2029,1985,1977,1985,1896,1976,2026,2019,1871,2030,2045,2010,1989,1933,1992,1863,1977,1915,2007,1980,1977,1877,2027,1999,1981,1861,1979,2048,1870,1971,2048,1933,2002,2057,2016,1930,1995,2048,2025,1915,1944,1907,1891,1977,1980,1911,1986,1864,1955,1892,1936,1907,1939,1919,1922,1939,1825,2015,1864,1931,1915,1910,1946,1880,1973,2052,1975,1977,2015,1997,1957,1996,1982,1986,2022,1952,1979,2019,1907,1981,1873,1976,1995,1946,1993,1865,1972,2048,2048,2048,1874,2032,2048,2048,2056,1980,1894,2011,1916,1897,2049,1884,1845,2051,1879,1843,2015,1948,1871,2023,1855,2037,1869,2037,1856,1980,1864,1847,1866,1865,1847,1866,1813,1907,1853,2010,1860,1867,2023,1850,1852,2022,1887,2021,1858,1915,1908,1891,1987,1938,1963,1922,1967,1854,2035,1853,1884,1846,1868,1850,1973,1906,1868,1944,1814,1960,1790,1924,1760,1878,1863,1856,1863,1855,1880,1846,2035,1855,2037,1916,1850,1885,1850,2014,1856,2035,1775,1963,1875,2035,1851,1925,1879,1864,1842,2038,1855,1169,1150,1395,1593,1283,1521,1689,1239,987,1231,1155,1132,1144,1143,1209,1404,1803,1950,1892,1966,1877,1871,1853,1945,1905,1911,1939,1869,1979,1859,2031,1861,1978,2057,2048,1864,1943,1900,1980,1889,2032,1866,1927,1135,1155,1232,1062,1735,2027,1871,1922,1930,1879,1981,1853,2028,1865,1929,1915,1900,1966,1802,2030,1866,1946,1898,1914,1932,1879,1990,1852,1977,2048,2048,1863,1976,2048,2047,1876,1977,2048,2041,1901,1980,2048,2012,1938,2022,2048,1871,2028,2048,2040,1892,1977,2048,1999,1965,1993,2056,1870,1995,1863,1977,1875,1976,1388,1325,1709,1349,1165,1525,1324,1131],"successes":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1,0,0,1,0,0,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,0,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}
;
            compressedData['data'] = byteArray;
            assert(typeof Module['LZ4'] === 'object', 'LZ4 not present - was your app build with -sLZ4?');
            Module['LZ4'].loadPackage({ 'metadata': metadata, 'compressedData': compressedData }, false);
            Module['removeRunDependency']('datafile_/home/dasho/Desktop/EDGE-classic/web/site/edge-classic.data');
      };
      Module['addRunDependency']('datafile_/home/dasho/Desktop/EDGE-classic/web/site/edge-classic.data');

      Module['preloadResults'] ??= {};

        function preloadFallback(error) {
          console.error(error);
          console.error('falling back to default preload behavior');
          fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, processPackageData, handleError);
        };

        openDatabase(
          (db) => checkCachedPackage(db, PACKAGE_PATH + PACKAGE_NAME,
              (useCached, metadata) => {
                Module['preloadResults'][PACKAGE_NAME] = {fromCache: useCached};
                if (useCached) {
                  fetchCachedPackage(db, PACKAGE_PATH + PACKAGE_NAME, metadata, processPackageData, preloadFallback);
                } else {
                  fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE,
                    (packageData) => {
                      cacheRemotePackage(db, PACKAGE_PATH + PACKAGE_NAME, packageData, {uuid:PACKAGE_UUID}, processPackageData,
                        (error) => {
                          console.error(error);
                          processPackageData(packageData);
                        });
                    }
                  , preloadFallback);
                }
              }, preloadFallback)
        , preloadFallback);

        Module['setStatus']?.('Downloading...');

    }
    if (Module['calledRun']) {
      runWithFS(Module);
    } else {
      (Module['preRun'] ??= []).push(runWithFS); // FS is not initialized yet, wait for it
    }

    }
    loadPackage({"files": [{"filename": "/.gitkeep", "start": 0, "end": 0}, {"filename": "/blasphem.wad", "start": 0, "end": 23224248}, {"filename": "/crosshairs/.gitignore", "start": 23224248, "end": 23224248}, {"filename": "/crosshairs/Angle.png", "start": 23224248, "end": 23224433}, {"filename": "/crosshairs/Carat.png", "start": 23224433, "end": 23224727}, {"filename": "/crosshairs/Circle.png", "start": 23224727, "end": 23226111}, {"filename": "/crosshairs/Cross.png", "start": 23226111, "end": 23226452}, {"filename": "/crosshairs/Dot.png", "start": 23226452, "end": 23226645}, {"filename": "/crosshairs/Double.png", "start": 23226645, "end": 23227064}, {"filename": "/crosshairs/Plus.png", "start": 23227064, "end": 23227249}, {"filename": "/crosshairs/Spiked.png", "start": 23227249, "end": 23227436}, {"filename": "/crosshairs/Thin.png", "start": 23227436, "end": 23227702}, {"filename": "/edge_base/blasphemer/graphics/ARTISOAR.png", "start": 23227702, "end": 23228054}, {"filename": "/edge_base/blasphemer/graphics/NULL.png", "start": 23228054, "end": 23229214}, {"filename": "/edge_base/blasphemer/graphics/STBARL.lmp", "start": 23229214, "end": 23233455}, {"filename": "/edge_base/blasphemer/graphics/STBARR.lmp", "start": 23233455, "end": 23237696}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK0.png", "start": 23237696, "end": 23239192}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK1.png", "start": 23239192, "end": 23240282}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK10.png", "start": 23240282, "end": 23241233}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK11.png", "start": 23241233, "end": 23242204}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK12.png", "start": 23242204, "end": 23243476}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK13.png", "start": 23243476, "end": 23244708}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK14.png", "start": 23244708, "end": 23246248}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK15.png", "start": 23246248, "end": 23247215}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK2.png", "start": 23247215, "end": 23248275}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK3.png", "start": 23248275, "end": 23248942}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK4.png", "start": 23248942, "end": 23249506}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK5.png", "start": 23249506, "end": 23250444}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK6.png", "start": 23250444, "end": 23251779}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK7.png", "start": 23251779, "end": 23252409}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK8.png", "start": 23252409, "end": 23253825}, {"filename": "/edge_base/blasphemer/graphics/tome/SPINBK9.png", "start": 23253825, "end": 23254787}, {"filename": "/edge_base/blasphemer/scripts/anims.ddf", "start": 23254787, "end": 23256049}, {"filename": "/edge_base/blasphemer/scripts/attacks.ddf", "start": 23256049, "end": 23301046}, {"filename": "/edge_base/blasphemer/scripts/colmap.ddf", "start": 23301046, "end": 23301329}, {"filename": "/edge_base/blasphemer/scripts/flats.ddf", "start": 23301329, "end": 23301992}, {"filename": "/edge_base/blasphemer/scripts/fonts.ddf", "start": 23301992, "end": 23303076}, {"filename": "/edge_base/blasphemer/scripts/games.ddf", "start": 23303076, "end": 23305914}, {"filename": "/edge_base/blasphemer/scripts/images.ddf", "start": 23305914, "end": 23307743}, {"filename": "/edge_base/blasphemer/scripts/language.ldf", "start": 23307743, "end": 23311594}, {"filename": "/edge_base/blasphemer/scripts/levels.ddf", "start": 23311594, "end": 23323805}, {"filename": "/edge_base/blasphemer/scripts/lines.ddf", "start": 23323805, "end": 23328376}, {"filename": "/edge_base/blasphemer/scripts/lua/edge_hud.lua", "start": 23328376, "end": 23347712}, {"filename": "/edge_base/blasphemer/scripts/playlist.ddf", "start": 23347712, "end": 23349791}, {"filename": "/edge_base/blasphemer/scripts/rscript.rts", "start": 23349791, "end": 23362052}, {"filename": "/edge_base/blasphemer/scripts/sectors.ddf", "start": 23362052, "end": 23365822}, {"filename": "/edge_base/blasphemer/scripts/sounds.ddf", "start": 23365822, "end": 23376737}, {"filename": "/edge_base/blasphemer/scripts/styles.ddf", "start": 23376737, "end": 23381603}, {"filename": "/edge_base/blasphemer/scripts/switch.ddf", "start": 23381603, "end": 23381988}, {"filename": "/edge_base/blasphemer/scripts/things.ddf", "start": 23381988, "end": 23466908}, {"filename": "/edge_base/blasphemer/scripts/weapons.ddf", "start": 23466908, "end": 23478092}, {"filename": "/edge_base/chex1/graphics/M_SKULL1.png", "start": 23478092, "end": 23478659}, {"filename": "/edge_base/chex1/graphics/M_SKULL2.png", "start": 23478659, "end": 23479407}, {"filename": "/edge_base/chex1/graphics/STBAR.lmp", "start": 23479407, "end": 23502949}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT033.lmp", "start": 23502949, "end": 23503066}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT034.lmp", "start": 23503066, "end": 23503199}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT035.lmp", "start": 23503199, "end": 23503450}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT036.lmp", "start": 23503450, "end": 23503777}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT037.lmp", "start": 23503777, "end": 23504040}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT038.lmp", "start": 23504040, "end": 23504132}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT039.lmp", "start": 23504132, "end": 23504290}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT040.lmp", "start": 23504290, "end": 23504448}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT041.lmp", "start": 23504448, "end": 23504608}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT042.lmp", "start": 23504608, "end": 23504728}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT043.lmp", "start": 23504728, "end": 23504803}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT044.lmp", "start": 23504803, "end": 23504881}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT045.lmp", "start": 23504881, "end": 23504955}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT046.lmp", "start": 23504955, "end": 23505146}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT047.lmp", "start": 23505146, "end": 23505373}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT048.lmp", "start": 23505373, "end": 23505511}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT049.lmp", "start": 23505511, "end": 23505755}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT050.lmp", "start": 23505755, "end": 23506002}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT051.lmp", "start": 23506002, "end": 23506208}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT052.lmp", "start": 23506208, "end": 23506452}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT053.lmp", "start": 23506452, "end": 23506691}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT054.lmp", "start": 23506691, "end": 23506889}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT055.lmp", "start": 23506889, "end": 23507116}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT056.lmp", "start": 23507116, "end": 23507355}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT057.lmp", "start": 23507355, "end": 23507443}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT058.lmp", "start": 23507443, "end": 23507549}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT059.lmp", "start": 23507549, "end": 23507710}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT060.lmp", "start": 23507710, "end": 23507802}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT061.lmp", "start": 23507802, "end": 23507963}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT062.lmp", "start": 23507963, "end": 23508157}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT063.lmp", "start": 23508157, "end": 23508378}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT064.lmp", "start": 23508378, "end": 23508579}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT065.lmp", "start": 23508579, "end": 23508782}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT066.lmp", "start": 23508782, "end": 23509008}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT067.lmp", "start": 23509008, "end": 23509204}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT068.lmp", "start": 23509204, "end": 23509362}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT069.lmp", "start": 23509362, "end": 23509587}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT070.lmp", "start": 23509587, "end": 23509814}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT071.lmp", "start": 23509814, "end": 23509925}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT072.lmp", "start": 23509925, "end": 23510116}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT073.lmp", "start": 23510116, "end": 23510322}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT074.lmp", "start": 23510322, "end": 23510484}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT075.lmp", "start": 23510484, "end": 23510772}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT076.lmp", "start": 23510772, "end": 23510995}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT077.lmp", "start": 23510995, "end": 23511218}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT078.lmp", "start": 23511218, "end": 23511388}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT079.lmp", "start": 23511388, "end": 23511617}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT080.lmp", "start": 23511617, "end": 23511831}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT081.lmp", "start": 23511831, "end": 23512035}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT082.lmp", "start": 23512035, "end": 23512194}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT083.lmp", "start": 23512194, "end": 23512415}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT084.lmp", "start": 23512415, "end": 23512611}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT085.lmp", "start": 23512611, "end": 23512928}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT086.lmp", "start": 23512928, "end": 23513130}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT087.lmp", "start": 23513130, "end": 23513300}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT088.lmp", "start": 23513300, "end": 23513500}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT089.lmp", "start": 23513500, "end": 23513718}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT090.lmp", "start": 23513718, "end": 23513909}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT091.lmp", "start": 23513909, "end": 23514127}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT092.lmp", "start": 23514127, "end": 23514310}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT093.lmp", "start": 23514310, "end": 23514390}, {"filename": "/edge_base/chex1/graphics/chex_font/FONT094.lmp", "start": 23514390, "end": 23514482}, {"filename": "/edge_base/chex1/graphics/credit.lmp", "start": 23514482, "end": 23633770}, {"filename": "/edge_base/chex1/graphics/help1.lmp", "start": 23633770, "end": 23753058}, {"filename": "/edge_base/chex1/graphics/titlepic.lmp", "start": 23753058, "end": 23872346}, {"filename": "/edge_base/chex1/graphics/wimap0.lmp", "start": 23872346, "end": 23991634}, {"filename": "/edge_base/chex1/scripts/attacks.ddf", "start": 23991634, "end": 23994836}, {"filename": "/edge_base/chex1/scripts/fonts.ddf", "start": 23994836, "end": 23995440}, {"filename": "/edge_base/chex1/scripts/games.ddf", "start": 23995440, "end": 23996473}, {"filename": "/edge_base/chex1/scripts/language.ldf", "start": 23996473, "end": 24002285}, {"filename": "/edge_base/chex1/scripts/levels.ddf", "start": 24002285, "end": 24005269}, {"filename": "/edge_base/chex1/scripts/styles.ddf", "start": 24005269, "end": 24008189}, {"filename": "/edge_base/chex1/scripts/things.ddf", "start": 24008189, "end": 24017307}, {"filename": "/edge_base/chex1/sprites/DOGSA1.lmp", "start": 24017307, "end": 24018442}, {"filename": "/edge_base/chex1/sprites/DOGSA2A8.lmp", "start": 24018442, "end": 24020111}, {"filename": "/edge_base/chex1/sprites/DOGSA3A7.lmp", "start": 24020111, "end": 24022021}, {"filename": "/edge_base/chex1/sprites/DOGSA4A6.lmp", "start": 24022021, "end": 24023687}, {"filename": "/edge_base/chex1/sprites/DOGSA5.lmp", "start": 24023687, "end": 24024806}, {"filename": "/edge_base/chex1/sprites/DOGSB1.lmp", "start": 24024806, "end": 24025971}, {"filename": "/edge_base/chex1/sprites/DOGSB2B8.lmp", "start": 24025971, "end": 24027659}, {"filename": "/edge_base/chex1/sprites/DOGSB3B7.lmp", "start": 24027659, "end": 24029586}, {"filename": "/edge_base/chex1/sprites/DOGSB4B6.lmp", "start": 24029586, "end": 24031292}, {"filename": "/edge_base/chex1/sprites/DOGSB5.lmp", "start": 24031292, "end": 24032406}, {"filename": "/edge_base/chex1/sprites/DOGSC1.lmp", "start": 24032406, "end": 24033541}, {"filename": "/edge_base/chex1/sprites/DOGSC2C8.lmp", "start": 24033541, "end": 24035210}, {"filename": "/edge_base/chex1/sprites/DOGSC3C7.lmp", "start": 24035210, "end": 24037120}, {"filename": "/edge_base/chex1/sprites/DOGSC4C6.lmp", "start": 24037120, "end": 24038786}, {"filename": "/edge_base/chex1/sprites/DOGSC5.lmp", "start": 24038786, "end": 24039905}, {"filename": "/edge_base/chex1/sprites/DOGSD1.lmp", "start": 24039905, "end": 24041070}, {"filename": "/edge_base/chex1/sprites/DOGSD2D8.lmp", "start": 24041070, "end": 24042758}, {"filename": "/edge_base/chex1/sprites/DOGSD3D7.lmp", "start": 24042758, "end": 24044685}, {"filename": "/edge_base/chex1/sprites/DOGSD4D6.lmp", "start": 24044685, "end": 24046391}, {"filename": "/edge_base/chex1/sprites/DOGSD5.lmp", "start": 24046391, "end": 24047505}, {"filename": "/edge_base/chex1/sprites/DOGSE1.lmp", "start": 24047505, "end": 24048643}, {"filename": "/edge_base/chex1/sprites/DOGSE2E8.lmp", "start": 24048643, "end": 24050418}, {"filename": "/edge_base/chex1/sprites/DOGSE3E7.lmp", "start": 24050418, "end": 24052474}, {"filename": "/edge_base/chex1/sprites/DOGSE4E6.lmp", "start": 24052474, "end": 24054238}, {"filename": "/edge_base/chex1/sprites/DOGSE5.lmp", "start": 24054238, "end": 24055466}, {"filename": "/edge_base/chex1/sprites/DOGSF1.lmp", "start": 24055466, "end": 24056722}, {"filename": "/edge_base/chex1/sprites/DOGSF2F8.lmp", "start": 24056722, "end": 24058689}, {"filename": "/edge_base/chex1/sprites/DOGSF3F7.lmp", "start": 24058689, "end": 24060927}, {"filename": "/edge_base/chex1/sprites/DOGSF4F6.lmp", "start": 24060927, "end": 24062836}, {"filename": "/edge_base/chex1/sprites/DOGSF5.lmp", "start": 24062836, "end": 24064189}, {"filename": "/edge_base/chex1/sprites/DOGSG1.lmp", "start": 24064189, "end": 24065445}, {"filename": "/edge_base/chex1/sprites/DOGSG2G8.lmp", "start": 24065445, "end": 24067412}, {"filename": "/edge_base/chex1/sprites/DOGSG3G7.lmp", "start": 24067412, "end": 24069650}, {"filename": "/edge_base/chex1/sprites/DOGSG4G6.lmp", "start": 24069650, "end": 24071559}, {"filename": "/edge_base/chex1/sprites/DOGSG5.lmp", "start": 24071559, "end": 24072912}, {"filename": "/edge_base/chex1/sprites/DOGSH1.lmp", "start": 24072912, "end": 24074239}, {"filename": "/edge_base/chex1/sprites/DOGSH2H8.lmp", "start": 24074239, "end": 24076127}, {"filename": "/edge_base/chex1/sprites/DOGSH3H7.lmp", "start": 24076127, "end": 24078234}, {"filename": "/edge_base/chex1/sprites/DOGSH4H6.lmp", "start": 24078234, "end": 24080110}, {"filename": "/edge_base/chex1/sprites/DOGSH5.lmp", "start": 24080110, "end": 24081511}, {"filename": "/edge_base/chex1/sprites/DOGSI0.lmp", "start": 24081511, "end": 24082845}, {"filename": "/edge_base/chex1/sprites/DOGSJ0.lmp", "start": 24082845, "end": 24084380}, {"filename": "/edge_base/chex1/sprites/DOGSK0.lmp", "start": 24084380, "end": 24086138}, {"filename": "/edge_base/chex1/sprites/DOGSL0.lmp", "start": 24086138, "end": 24087092}, {"filename": "/edge_base/chex1/sprites/DOGSM0.lmp", "start": 24087092, "end": 24087319}, {"filename": "/edge_base/chex1/sprites/DOGSN0.lmp", "start": 24087319, "end": 24087437}, {"filename": "/edge_base/chex3v/graphics/BOSSBACK.lmp", "start": 24087437, "end": 24206725}, {"filename": "/edge_base/chex3v/graphics/CQ1TITLE.lmp", "start": 24206725, "end": 24326013}, {"filename": "/edge_base/chex3v/graphics/CQ2TITLE.lmp", "start": 24326013, "end": 24445301}, {"filename": "/edge_base/chex3v/graphics/ENDPIC.lmp", "start": 24445301, "end": 24564589}, {"filename": "/edge_base/chex3v/graphics/HELP.lmp", "start": 24564589, "end": 24683877}, {"filename": "/edge_base/chex3v/graphics/HELP2.lmp", "start": 24683877, "end": 24803165}, {"filename": "/edge_base/chex3v/graphics/INTERPIC.lmp", "start": 24803165, "end": 24922453}, {"filename": "/edge_base/chex3v/graphics/M_SKULL1.png", "start": 24922453, "end": 24923020}, {"filename": "/edge_base/chex3v/graphics/M_SKULL2.png", "start": 24923020, "end": 24923768}, {"filename": "/edge_base/chex3v/graphics/PFUB0.lmp", "start": 24923768, "end": 25111216}, {"filename": "/edge_base/chex3v/graphics/PFUB1.lmp", "start": 25111216, "end": 25179384}, {"filename": "/edge_base/chex3v/graphics/PFUB2.lmp", "start": 25179384, "end": 25298672}, {"filename": "/edge_base/chex3v/graphics/STBAR.lmp", "start": 25298672, "end": 25321640}, {"filename": "/edge_base/chex3v/graphics/VICTORY2.lmp", "start": 25321640, "end": 25440928}, {"filename": "/edge_base/chex3v/graphics/WIMAP1.lmp", "start": 25440928, "end": 25560216}, {"filename": "/edge_base/chex3v/graphics/WIMAP2.lmp", "start": 25560216, "end": 25679504}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT033.lmp", "start": 25679504, "end": 25679621}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT034.lmp", "start": 25679621, "end": 25679754}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT035.lmp", "start": 25679754, "end": 25680005}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT036.lmp", "start": 25680005, "end": 25680332}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT037.lmp", "start": 25680332, "end": 25680595}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT038.lmp", "start": 25680595, "end": 25680687}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT039.lmp", "start": 25680687, "end": 25680845}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT040.lmp", "start": 25680845, "end": 25681003}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT041.lmp", "start": 25681003, "end": 25681163}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT042.lmp", "start": 25681163, "end": 25681283}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT043.lmp", "start": 25681283, "end": 25681358}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT044.lmp", "start": 25681358, "end": 25681436}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT045.lmp", "start": 25681436, "end": 25681510}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT046.lmp", "start": 25681510, "end": 25681701}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT047.lmp", "start": 25681701, "end": 25681928}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT048.lmp", "start": 25681928, "end": 25682066}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT049.lmp", "start": 25682066, "end": 25682310}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT050.lmp", "start": 25682310, "end": 25682557}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT051.lmp", "start": 25682557, "end": 25682763}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT052.lmp", "start": 25682763, "end": 25683007}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT053.lmp", "start": 25683007, "end": 25683246}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT054.lmp", "start": 25683246, "end": 25683444}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT055.lmp", "start": 25683444, "end": 25683671}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT056.lmp", "start": 25683671, "end": 25683910}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT057.lmp", "start": 25683910, "end": 25683998}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT058.lmp", "start": 25683998, "end": 25684104}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT059.lmp", "start": 25684104, "end": 25684265}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT060.lmp", "start": 25684265, "end": 25684357}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT061.lmp", "start": 25684357, "end": 25684518}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT062.lmp", "start": 25684518, "end": 25684712}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT063.lmp", "start": 25684712, "end": 25684933}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT064.lmp", "start": 25684933, "end": 25685134}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT065.lmp", "start": 25685134, "end": 25685337}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT066.lmp", "start": 25685337, "end": 25685563}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT067.lmp", "start": 25685563, "end": 25685759}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT068.lmp", "start": 25685759, "end": 25685917}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT069.lmp", "start": 25685917, "end": 25686142}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT070.lmp", "start": 25686142, "end": 25686369}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT071.lmp", "start": 25686369, "end": 25686480}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT072.lmp", "start": 25686480, "end": 25686671}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT073.lmp", "start": 25686671, "end": 25686877}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT074.lmp", "start": 25686877, "end": 25687039}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT075.lmp", "start": 25687039, "end": 25687327}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT076.lmp", "start": 25687327, "end": 25687550}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT077.lmp", "start": 25687550, "end": 25687773}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT078.lmp", "start": 25687773, "end": 25687943}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT079.lmp", "start": 25687943, "end": 25688172}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT080.lmp", "start": 25688172, "end": 25688386}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT081.lmp", "start": 25688386, "end": 25688590}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT082.lmp", "start": 25688590, "end": 25688749}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT083.lmp", "start": 25688749, "end": 25688970}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT084.lmp", "start": 25688970, "end": 25689166}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT085.lmp", "start": 25689166, "end": 25689483}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT086.lmp", "start": 25689483, "end": 25689685}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT087.lmp", "start": 25689685, "end": 25689855}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT088.lmp", "start": 25689855, "end": 25690055}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT089.lmp", "start": 25690055, "end": 25690273}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT090.lmp", "start": 25690273, "end": 25690464}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT091.lmp", "start": 25690464, "end": 25690682}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT092.lmp", "start": 25690682, "end": 25690865}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT093.lmp", "start": 25690865, "end": 25690945}, {"filename": "/edge_base/chex3v/graphics/chex_font/FONT094.lmp", "start": 25690945, "end": 25691037}, {"filename": "/edge_base/chex3v/graphics/credit.lmp", "start": 25691037, "end": 25810325}, {"filename": "/edge_base/chex3v/graphics/help1.lmp", "start": 25810325, "end": 25929613}, {"filename": "/edge_base/chex3v/graphics/titlepic.lmp", "start": 25929613, "end": 26048901}, {"filename": "/edge_base/chex3v/graphics/wimap0.lmp", "start": 26048901, "end": 26168189}, {"filename": "/edge_base/chex3v/scripts/UMAPINFO.txt", "start": 26168189, "end": 26172081}, {"filename": "/edge_base/chex3v/scripts/fonts.ddf", "start": 26172081, "end": 26172685}, {"filename": "/edge_base/chex3v/scripts/games.ddf", "start": 26172685, "end": 26175100}, {"filename": "/edge_base/chex3v/scripts/language.ldf", "start": 26175100, "end": 26175813}, {"filename": "/edge_base/chex3v/scripts/levels.ddf", "start": 26175813, "end": 26181029}, {"filename": "/edge_base/chex3v/scripts/rscript.rts", "start": 26181029, "end": 26181404}, {"filename": "/edge_base/chex3v/scripts/styles.ddf", "start": 26181404, "end": 26184323}, {"filename": "/edge_base/chex3v/scripts/things.ddf", "start": 26184323, "end": 26186376}, {"filename": "/edge_base/chex3vm/graphics/BOSSBACK.lmp", "start": 26186376, "end": 26305664}, {"filename": "/edge_base/chex3vm/graphics/CQ1TITLE.lmp", "start": 26305664, "end": 26424952}, {"filename": "/edge_base/chex3vm/graphics/CQ2TITLE.lmp", "start": 26424952, "end": 26544240}, {"filename": "/edge_base/chex3vm/graphics/CREDIT.lmp", "start": 26544240, "end": 26663528}, {"filename": "/edge_base/chex3vm/graphics/ENDPIC.lmp", "start": 26663528, "end": 26782816}, {"filename": "/edge_base/chex3vm/graphics/HELP.lmp", "start": 26782816, "end": 26902104}, {"filename": "/edge_base/chex3vm/graphics/HELP1.lmp", "start": 26902104, "end": 27021392}, {"filename": "/edge_base/chex3vm/graphics/HELP2.lmp", "start": 27021392, "end": 27140680}, {"filename": "/edge_base/chex3vm/graphics/INTERPIC.lmp", "start": 27140680, "end": 27259968}, {"filename": "/edge_base/chex3vm/graphics/M_SKULL1.png", "start": 27259968, "end": 27260535}, {"filename": "/edge_base/chex3vm/graphics/M_SKULL2.png", "start": 27260535, "end": 27261283}, {"filename": "/edge_base/chex3vm/graphics/PFUB0.lmp", "start": 27261283, "end": 27448731}, {"filename": "/edge_base/chex3vm/graphics/PFUB1.lmp", "start": 27448731, "end": 27516899}, {"filename": "/edge_base/chex3vm/graphics/PFUB2.lmp", "start": 27516899, "end": 27636187}, {"filename": "/edge_base/chex3vm/graphics/STBAR.lmp", "start": 27636187, "end": 27659155}, {"filename": "/edge_base/chex3vm/graphics/TITLEPIC.lmp", "start": 27659155, "end": 27778443}, {"filename": "/edge_base/chex3vm/graphics/VICTORY2.lmp", "start": 27778443, "end": 27897731}, {"filename": "/edge_base/chex3vm/graphics/WIMAP0.lmp", "start": 27897731, "end": 28017019}, {"filename": "/edge_base/chex3vm/graphics/WIMAP1.lmp", "start": 28017019, "end": 28136307}, {"filename": "/edge_base/chex3vm/graphics/WIMAP2.lmp", "start": 28136307, "end": 28255595}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT033.lmp", "start": 28255595, "end": 28255712}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT034.lmp", "start": 28255712, "end": 28255845}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT035.lmp", "start": 28255845, "end": 28256096}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT036.lmp", "start": 28256096, "end": 28256423}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT037.lmp", "start": 28256423, "end": 28256686}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT038.lmp", "start": 28256686, "end": 28256778}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT039.lmp", "start": 28256778, "end": 28256936}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT040.lmp", "start": 28256936, "end": 28257094}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT041.lmp", "start": 28257094, "end": 28257254}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT042.lmp", "start": 28257254, "end": 28257374}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT043.lmp", "start": 28257374, "end": 28257449}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT044.lmp", "start": 28257449, "end": 28257527}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT045.lmp", "start": 28257527, "end": 28257601}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT046.lmp", "start": 28257601, "end": 28257792}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT047.lmp", "start": 28257792, "end": 28258019}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT048.lmp", "start": 28258019, "end": 28258157}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT049.lmp", "start": 28258157, "end": 28258401}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT050.lmp", "start": 28258401, "end": 28258648}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT051.lmp", "start": 28258648, "end": 28258854}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT052.lmp", "start": 28258854, "end": 28259098}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT053.lmp", "start": 28259098, "end": 28259337}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT054.lmp", "start": 28259337, "end": 28259535}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT055.lmp", "start": 28259535, "end": 28259762}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT056.lmp", "start": 28259762, "end": 28260001}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT057.lmp", "start": 28260001, "end": 28260089}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT058.lmp", "start": 28260089, "end": 28260195}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT059.lmp", "start": 28260195, "end": 28260356}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT060.lmp", "start": 28260356, "end": 28260448}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT061.lmp", "start": 28260448, "end": 28260609}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT062.lmp", "start": 28260609, "end": 28260803}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT063.lmp", "start": 28260803, "end": 28261024}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT064.lmp", "start": 28261024, "end": 28261225}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT065.lmp", "start": 28261225, "end": 28261428}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT066.lmp", "start": 28261428, "end": 28261654}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT067.lmp", "start": 28261654, "end": 28261850}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT068.lmp", "start": 28261850, "end": 28262008}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT069.lmp", "start": 28262008, "end": 28262233}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT070.lmp", "start": 28262233, "end": 28262460}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT071.lmp", "start": 28262460, "end": 28262571}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT072.lmp", "start": 28262571, "end": 28262762}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT073.lmp", "start": 28262762, "end": 28262968}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT074.lmp", "start": 28262968, "end": 28263130}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT075.lmp", "start": 28263130, "end": 28263418}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT076.lmp", "start": 28263418, "end": 28263641}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT077.lmp", "start": 28263641, "end": 28263864}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT078.lmp", "start": 28263864, "end": 28264034}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT079.lmp", "start": 28264034, "end": 28264263}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT080.lmp", "start": 28264263, "end": 28264477}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT081.lmp", "start": 28264477, "end": 28264681}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT082.lmp", "start": 28264681, "end": 28264840}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT083.lmp", "start": 28264840, "end": 28265061}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT084.lmp", "start": 28265061, "end": 28265257}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT085.lmp", "start": 28265257, "end": 28265574}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT086.lmp", "start": 28265574, "end": 28265776}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT087.lmp", "start": 28265776, "end": 28265946}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT088.lmp", "start": 28265946, "end": 28266146}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT089.lmp", "start": 28266146, "end": 28266364}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT090.lmp", "start": 28266364, "end": 28266555}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT091.lmp", "start": 28266555, "end": 28266773}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT092.lmp", "start": 28266773, "end": 28266956}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT093.lmp", "start": 28266956, "end": 28267036}, {"filename": "/edge_base/chex3vm/graphics/chex_font/FONT094.lmp", "start": 28267036, "end": 28267128}, {"filename": "/edge_base/chex3vm/scripts/fonts.ddf", "start": 28267128, "end": 28267732}, {"filename": "/edge_base/chex3vm/scripts/games.ddf", "start": 28267732, "end": 28268612}, {"filename": "/edge_base/chex3vm/scripts/language.ldf", "start": 28268612, "end": 28269257}, {"filename": "/edge_base/chex3vm/scripts/levels.ddf", "start": 28269257, "end": 28276248}, {"filename": "/edge_base/chex3vm/scripts/styles.ddf", "start": 28276248, "end": 28279167}, {"filename": "/edge_base/chex3vm/scripts/things.ddf", "start": 28279167, "end": 28282183}, {"filename": "/edge_base/doom/doom_wadfix.wad", "start": 28282183, "end": 28282297}, {"filename": "/edge_base/doom/graphics/CREDIT.lmp", "start": 28282297, "end": 28401585}, {"filename": "/edge_base/doom/graphics/ENDPIC.lmp", "start": 28401585, "end": 28520873}, {"filename": "/edge_base/doom/graphics/HELP1.lmp", "start": 28520873, "end": 28640161}, {"filename": "/edge_base/doom/graphics/INTERPIC.lmp", "start": 28640161, "end": 28759449}, {"filename": "/edge_base/doom/graphics/PFUB1.lmp", "start": 28759449, "end": 28878737}, {"filename": "/edge_base/doom/graphics/PFUB2.lmp", "start": 28878737, "end": 28998025}, {"filename": "/edge_base/doom/graphics/TITLEPIC.lmp", "start": 28998025, "end": 29117313}, {"filename": "/edge_base/doom/graphics/VICTORY2.lmp", "start": 29117313, "end": 29236601}, {"filename": "/edge_base/doom/graphics/WIA20000.lmp", "start": 29236601, "end": 29265721}, {"filename": "/edge_base/doom/graphics/WIA20001.lmp", "start": 29265721, "end": 29294841}, {"filename": "/edge_base/doom/graphics/WIA20002.lmp", "start": 29294841, "end": 29323961}, {"filename": "/edge_base/doom/graphics/WIA20400.lmp", "start": 29323961, "end": 29329559}, {"filename": "/edge_base/doom/graphics/WIA20401.lmp", "start": 29329559, "end": 29335157}, {"filename": "/edge_base/doom/graphics/WIA20402.lmp", "start": 29335157, "end": 29340755}, {"filename": "/edge_base/doom/graphics/WIA20500.lmp", "start": 29340755, "end": 29353963}, {"filename": "/edge_base/doom/graphics/WIA20501.lmp", "start": 29353963, "end": 29367171}, {"filename": "/edge_base/doom/graphics/WIA20502.lmp", "start": 29367171, "end": 29380379}, {"filename": "/edge_base/doom/graphics/WIMAP0.lmp", "start": 29380379, "end": 29499667}, {"filename": "/edge_base/doom/graphics/WIMAP1.lmp", "start": 29499667, "end": 29618955}, {"filename": "/edge_base/doom/graphics/WIMAP2.lmp", "start": 29618955, "end": 29738243}, {"filename": "/edge_base/doom/scripts/games.ddf", "start": 29738243, "end": 29738654}, {"filename": "/edge_base/doom/scripts/images.ddf", "start": 29738654, "end": 29740377}, {"filename": "/edge_base/doom/textures/SKY1_B.png", "start": 29740377, "end": 29755020}, {"filename": "/edge_base/doom/textures/SKY1_E.png", "start": 29755020, "end": 29778199}, {"filename": "/edge_base/doom/textures/SKY1_N.png", "start": 29778199, "end": 29801086}, {"filename": "/edge_base/doom/textures/SKY1_S.png", "start": 29801086, "end": 29823711}, {"filename": "/edge_base/doom/textures/SKY1_T.png", "start": 29823711, "end": 29850903}, {"filename": "/edge_base/doom/textures/SKY1_W.png", "start": 29850903, "end": 29873746}, {"filename": "/edge_base/doom/textures/SKY2_B.png", "start": 29873746, "end": 29890613}, {"filename": "/edge_base/doom/textures/SKY2_E.png", "start": 29890613, "end": 29917182}, {"filename": "/edge_base/doom/textures/SKY2_N.png", "start": 29917182, "end": 29944038}, {"filename": "/edge_base/doom/textures/SKY2_S.png", "start": 29944038, "end": 29971538}, {"filename": "/edge_base/doom/textures/SKY2_T.png", "start": 29971538, "end": 29995892}, {"filename": "/edge_base/doom/textures/SKY2_W.png", "start": 29995892, "end": 30022079}, {"filename": "/edge_base/doom/textures/SKY3_B.png", "start": 30022079, "end": 30034062}, {"filename": "/edge_base/doom/textures/SKY3_E.png", "start": 30034062, "end": 30053628}, {"filename": "/edge_base/doom/textures/SKY3_N.png", "start": 30053628, "end": 30073329}, {"filename": "/edge_base/doom/textures/SKY3_S.png", "start": 30073329, "end": 30093663}, {"filename": "/edge_base/doom/textures/SKY3_T.png", "start": 30093663, "end": 30118106}, {"filename": "/edge_base/doom/textures/SKY3_W.png", "start": 30118106, "end": 30137151}, {"filename": "/edge_base/doom/textures/SKY4_B.png", "start": 30137151, "end": 30175487}, {"filename": "/edge_base/doom/textures/SKY4_E.png", "start": 30175487, "end": 30188096}, {"filename": "/edge_base/doom/textures/SKY4_N.png", "start": 30188096, "end": 30199812}, {"filename": "/edge_base/doom/textures/SKY4_S.png", "start": 30199812, "end": 30211528}, {"filename": "/edge_base/doom/textures/SKY4_T.png", "start": 30211528, "end": 30249864}, {"filename": "/edge_base/doom/textures/SKY4_W.png", "start": 30249864, "end": 30262473}, {"filename": "/edge_base/doom1/doom1_wadfix.wad", "start": 30262473, "end": 30262587}, {"filename": "/edge_base/doom1/graphics/CREDIT.lmp", "start": 30262587, "end": 30381875}, {"filename": "/edge_base/doom1/graphics/HELP1.lmp", "start": 30381875, "end": 30501163}, {"filename": "/edge_base/doom1/graphics/HELP2.lmp", "start": 30501163, "end": 30620451}, {"filename": "/edge_base/doom1/graphics/TITLEPIC.lmp", "start": 30620451, "end": 30739739}, {"filename": "/edge_base/doom1/graphics/WIMAP0.lmp", "start": 30739739, "end": 30859027}, {"filename": "/edge_base/doom1/scripts/images.ddf", "start": 30859027, "end": 30860759}, {"filename": "/edge_base/doom1/textures/SKY1_B.png", "start": 30860759, "end": 30875402}, {"filename": "/edge_base/doom1/textures/SKY1_E.png", "start": 30875402, "end": 30898581}, {"filename": "/edge_base/doom1/textures/SKY1_N.png", "start": 30898581, "end": 30921468}, {"filename": "/edge_base/doom1/textures/SKY1_S.png", "start": 30921468, "end": 30944093}, {"filename": "/edge_base/doom1/textures/SKY1_T.png", "start": 30944093, "end": 30971285}, {"filename": "/edge_base/doom1/textures/SKY1_W.png", "start": 30971285, "end": 30994128}, {"filename": "/edge_base/doom2/graphics/BOSSBACK.lmp", "start": 30994128, "end": 31113416}, {"filename": "/edge_base/doom2/graphics/CREDIT.lmp", "start": 31113416, "end": 31232704}, {"filename": "/edge_base/doom2/graphics/HELP.lmp", "start": 31232704, "end": 31351992}, {"filename": "/edge_base/doom2/graphics/INTERPIC.lmp", "start": 31351992, "end": 31471280}, {"filename": "/edge_base/doom2/graphics/TITLEPIC.lmp", "start": 31471280, "end": 31590568}, {"filename": "/edge_base/doom2/scripts/games.ddf", "start": 31590568, "end": 31590999}, {"filename": "/edge_base/doom2/scripts/images.ddf", "start": 31590999, "end": 31592337}, {"filename": "/edge_base/doom2/textures/SKY1_B.png", "start": 31592337, "end": 31613617}, {"filename": "/edge_base/doom2/textures/SKY1_E.png", "start": 31613617, "end": 31631297}, {"filename": "/edge_base/doom2/textures/SKY1_N.png", "start": 31631297, "end": 31648977}, {"filename": "/edge_base/doom2/textures/SKY1_S.png", "start": 31648977, "end": 31666657}, {"filename": "/edge_base/doom2/textures/SKY1_T.png", "start": 31666657, "end": 31687937}, {"filename": "/edge_base/doom2/textures/SKY1_W.png", "start": 31687937, "end": 31705617}, {"filename": "/edge_base/doom2/textures/SKY2_B.png", "start": 31705617, "end": 31719540}, {"filename": "/edge_base/doom2/textures/SKY2_E.png", "start": 31719540, "end": 31744759}, {"filename": "/edge_base/doom2/textures/SKY2_N.png", "start": 31744759, "end": 31769991}, {"filename": "/edge_base/doom2/textures/SKY2_S.png", "start": 31769991, "end": 31795194}, {"filename": "/edge_base/doom2/textures/SKY2_T.png", "start": 31795194, "end": 31819946}, {"filename": "/edge_base/doom2/textures/SKY2_W.png", "start": 31819946, "end": 31845150}, {"filename": "/edge_base/doom2/textures/SKY3_B.png", "start": 31845150, "end": 31928720}, {"filename": "/edge_base/doom2/textures/SKY3_E.png", "start": 31928720, "end": 32023529}, {"filename": "/edge_base/doom2/textures/SKY3_N.png", "start": 32023529, "end": 32122300}, {"filename": "/edge_base/doom2/textures/SKY3_S.png", "start": 32122300, "end": 32221071}, {"filename": "/edge_base/doom2/textures/SKY3_T.png", "start": 32221071, "end": 32407562}, {"filename": "/edge_base/doom2/textures/SKY3_W.png", "start": 32407562, "end": 32502371}, {"filename": "/edge_base/freedoom1/freedoom_wadfix.wad", "start": 32502371, "end": 32502485}, {"filename": "/edge_base/freedoom1/graphics/STBARL.lmp", "start": 32502485, "end": 32505896}, {"filename": "/edge_base/freedoom1/graphics/STBARR.lmp", "start": 32505896, "end": 32509307}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT033.png", "start": 32509307, "end": 32509652}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT034.png", "start": 32509652, "end": 32509999}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT035.png", "start": 32509999, "end": 32510430}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT036.png", "start": 32510430, "end": 32510839}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT037.png", "start": 32510839, "end": 32511260}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT038.png", "start": 32511260, "end": 32511707}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT039.png", "start": 32511707, "end": 32512028}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT040.png", "start": 32512028, "end": 32512418}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT041.png", "start": 32512418, "end": 32512807}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT042.png", "start": 32512807, "end": 32513258}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT043.png", "start": 32513258, "end": 32513617}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT044.png", "start": 32513617, "end": 32513941}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT045.png", "start": 32513941, "end": 32514254}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT046.png", "start": 32514254, "end": 32514550}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT047.png", "start": 32514550, "end": 32514973}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT048.png", "start": 32514973, "end": 32515378}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT049.png", "start": 32515378, "end": 32515758}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT050.png", "start": 32515758, "end": 32516166}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT051.png", "start": 32516166, "end": 32516629}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT052.png", "start": 32516629, "end": 32517048}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT053.png", "start": 32517048, "end": 32517456}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT054.png", "start": 32517456, "end": 32517864}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT055.png", "start": 32517864, "end": 32518268}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT056.png", "start": 32518268, "end": 32518740}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT057.png", "start": 32518740, "end": 32519155}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT058.png", "start": 32519155, "end": 32519503}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT059.png", "start": 32519503, "end": 32519864}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT060.png", "start": 32519864, "end": 32520233}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT061.png", "start": 32520233, "end": 32520574}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT062.png", "start": 32520574, "end": 32520995}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT063.png", "start": 32520995, "end": 32521398}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT064.png", "start": 32521398, "end": 32521816}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT065.png", "start": 32521816, "end": 32522319}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT066.png", "start": 32522319, "end": 32522744}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT067.png", "start": 32522744, "end": 32523147}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT068.png", "start": 32523147, "end": 32523580}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT069.png", "start": 32523580, "end": 32523996}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT070.png", "start": 32523996, "end": 32524401}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT071.png", "start": 32524401, "end": 32524820}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT072.png", "start": 32524820, "end": 32525245}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT073.png", "start": 32525245, "end": 32525647}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT074.png", "start": 32525647, "end": 32526116}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT075.png", "start": 32526116, "end": 32526550}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT076.png", "start": 32526550, "end": 32526939}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT077.png", "start": 32526939, "end": 32527394}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT078.png", "start": 32527394, "end": 32527904}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT079.png", "start": 32527904, "end": 32528314}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT080.png", "start": 32528314, "end": 32528721}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT081.png", "start": 32528721, "end": 32529138}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT082.png", "start": 32529138, "end": 32529557}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT083.png", "start": 32529557, "end": 32529983}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT084.png", "start": 32529983, "end": 32530368}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT085.png", "start": 32530368, "end": 32530783}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT086.png", "start": 32530783, "end": 32531207}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT087.png", "start": 32531207, "end": 32531652}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT088.png", "start": 32531652, "end": 32532078}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT089.png", "start": 32532078, "end": 32532543}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT090.png", "start": 32532543, "end": 32532961}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT091.png", "start": 32532961, "end": 32533348}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT092.png", "start": 32533348, "end": 32533782}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT093.png", "start": 32533782, "end": 32534178}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT094.png", "start": 32534178, "end": 32534529}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT095.png", "start": 32534529, "end": 32534842}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT096.png", "start": 32534842, "end": 32535162}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT097.png", "start": 32535162, "end": 32535620}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT098.png", "start": 32535620, "end": 32536020}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT099.png", "start": 32536020, "end": 32536454}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT100.png", "start": 32536454, "end": 32536861}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT101.png", "start": 32536861, "end": 32537257}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT102.png", "start": 32537257, "end": 32537648}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT103.png", "start": 32537648, "end": 32538092}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT104.png", "start": 32538092, "end": 32538494}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT105.png", "start": 32538494, "end": 32538874}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT106.png", "start": 32538874, "end": 32539318}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT107.png", "start": 32539318, "end": 32539787}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT108.png", "start": 32539787, "end": 32540161}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT109.png", "start": 32540161, "end": 32540582}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT110.png", "start": 32540582, "end": 32540998}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT111.png", "start": 32540998, "end": 32541447}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT112.png", "start": 32541447, "end": 32541837}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT113.png", "start": 32541837, "end": 32542295}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT114.png", "start": 32542295, "end": 32542692}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT115.png", "start": 32542692, "end": 32543103}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT116.png", "start": 32543103, "end": 32543537}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT117.png", "start": 32543537, "end": 32543939}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT118.png", "start": 32543939, "end": 32544400}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT119.png", "start": 32544400, "end": 32544817}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT120.png", "start": 32544817, "end": 32545261}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT121.png", "start": 32545261, "end": 32545654}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT122.png", "start": 32545654, "end": 32546089}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT123.png", "start": 32546089, "end": 32546479}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT124.png", "start": 32546479, "end": 32546840}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT125.png", "start": 32546840, "end": 32547228}, {"filename": "/edge_base/freedoom1/graphics/freedoom_font/FONT126.png", "start": 32547228, "end": 32547618}, {"filename": "/edge_base/freedoom1/scripts/attacks.ddf", "start": 32547618, "end": 32567906}, {"filename": "/edge_base/freedoom1/scripts/fonts.ddf", "start": 32567906, "end": 32568544}, {"filename": "/edge_base/freedoom1/scripts/games.ddf", "start": 32568544, "end": 32568955}, {"filename": "/edge_base/freedoom1/scripts/images.ddf", "start": 32568955, "end": 32576151}, {"filename": "/edge_base/freedoom1/scripts/language.ldf", "start": 32576151, "end": 32586988}, {"filename": "/edge_base/freedoom1/scripts/styles.ddf", "start": 32586988, "end": 32591916}, {"filename": "/edge_base/freedoom1/scripts/things.ddf", "start": 32591916, "end": 32600234}, {"filename": "/edge_base/freedoom2/graphics/STBARL.lmp", "start": 32600234, "end": 32603645}, {"filename": "/edge_base/freedoom2/graphics/STBARR.lmp", "start": 32603645, "end": 32607056}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT033.png", "start": 32607056, "end": 32607401}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT034.png", "start": 32607401, "end": 32607748}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT035.png", "start": 32607748, "end": 32608179}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT036.png", "start": 32608179, "end": 32608588}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT037.png", "start": 32608588, "end": 32609009}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT038.png", "start": 32609009, "end": 32609456}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT039.png", "start": 32609456, "end": 32609777}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT040.png", "start": 32609777, "end": 32610167}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT041.png", "start": 32610167, "end": 32610556}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT042.png", "start": 32610556, "end": 32611007}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT043.png", "start": 32611007, "end": 32611366}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT044.png", "start": 32611366, "end": 32611690}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT045.png", "start": 32611690, "end": 32612003}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT046.png", "start": 32612003, "end": 32612299}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT047.png", "start": 32612299, "end": 32612722}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT048.png", "start": 32612722, "end": 32613127}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT049.png", "start": 32613127, "end": 32613507}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT050.png", "start": 32613507, "end": 32613915}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT051.png", "start": 32613915, "end": 32614378}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT052.png", "start": 32614378, "end": 32614797}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT053.png", "start": 32614797, "end": 32615205}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT054.png", "start": 32615205, "end": 32615613}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT055.png", "start": 32615613, "end": 32616017}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT056.png", "start": 32616017, "end": 32616489}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT057.png", "start": 32616489, "end": 32616904}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT058.png", "start": 32616904, "end": 32617252}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT059.png", "start": 32617252, "end": 32617613}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT060.png", "start": 32617613, "end": 32617982}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT061.png", "start": 32617982, "end": 32618323}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT062.png", "start": 32618323, "end": 32618744}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT063.png", "start": 32618744, "end": 32619147}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT064.png", "start": 32619147, "end": 32619565}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT065.png", "start": 32619565, "end": 32620068}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT066.png", "start": 32620068, "end": 32620493}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT067.png", "start": 32620493, "end": 32620896}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT068.png", "start": 32620896, "end": 32621329}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT069.png", "start": 32621329, "end": 32621745}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT070.png", "start": 32621745, "end": 32622150}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT071.png", "start": 32622150, "end": 32622569}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT072.png", "start": 32622569, "end": 32622994}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT073.png", "start": 32622994, "end": 32623396}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT074.png", "start": 32623396, "end": 32623865}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT075.png", "start": 32623865, "end": 32624299}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT076.png", "start": 32624299, "end": 32624688}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT077.png", "start": 32624688, "end": 32625143}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT078.png", "start": 32625143, "end": 32625653}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT079.png", "start": 32625653, "end": 32626063}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT080.png", "start": 32626063, "end": 32626470}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT081.png", "start": 32626470, "end": 32626887}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT082.png", "start": 32626887, "end": 32627306}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT083.png", "start": 32627306, "end": 32627732}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT084.png", "start": 32627732, "end": 32628117}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT085.png", "start": 32628117, "end": 32628532}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT086.png", "start": 32628532, "end": 32628956}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT087.png", "start": 32628956, "end": 32629401}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT088.png", "start": 32629401, "end": 32629827}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT089.png", "start": 32629827, "end": 32630292}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT090.png", "start": 32630292, "end": 32630710}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT091.png", "start": 32630710, "end": 32631097}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT092.png", "start": 32631097, "end": 32631531}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT093.png", "start": 32631531, "end": 32631927}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT094.png", "start": 32631927, "end": 32632278}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT095.png", "start": 32632278, "end": 32632591}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT096.png", "start": 32632591, "end": 32632911}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT097.png", "start": 32632911, "end": 32633369}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT098.png", "start": 32633369, "end": 32633769}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT099.png", "start": 32633769, "end": 32634203}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT100.png", "start": 32634203, "end": 32634610}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT101.png", "start": 32634610, "end": 32635006}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT102.png", "start": 32635006, "end": 32635397}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT103.png", "start": 32635397, "end": 32635841}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT104.png", "start": 32635841, "end": 32636243}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT105.png", "start": 32636243, "end": 32636623}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT106.png", "start": 32636623, "end": 32637067}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT107.png", "start": 32637067, "end": 32637536}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT108.png", "start": 32637536, "end": 32637910}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT109.png", "start": 32637910, "end": 32638331}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT110.png", "start": 32638331, "end": 32638747}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT111.png", "start": 32638747, "end": 32639196}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT112.png", "start": 32639196, "end": 32639586}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT113.png", "start": 32639586, "end": 32640044}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT114.png", "start": 32640044, "end": 32640441}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT115.png", "start": 32640441, "end": 32640852}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT116.png", "start": 32640852, "end": 32641286}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT117.png", "start": 32641286, "end": 32641688}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT118.png", "start": 32641688, "end": 32642149}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT119.png", "start": 32642149, "end": 32642566}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT120.png", "start": 32642566, "end": 32643010}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT121.png", "start": 32643010, "end": 32643403}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT122.png", "start": 32643403, "end": 32643838}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT123.png", "start": 32643838, "end": 32644228}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT124.png", "start": 32644228, "end": 32644589}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT125.png", "start": 32644589, "end": 32644977}, {"filename": "/edge_base/freedoom2/graphics/freedoom_font/FONT126.png", "start": 32644977, "end": 32645367}, {"filename": "/edge_base/freedoom2/scripts/attacks.ddf", "start": 32645367, "end": 32665655}, {"filename": "/edge_base/freedoom2/scripts/fonts.ddf", "start": 32665655, "end": 32666293}, {"filename": "/edge_base/freedoom2/scripts/games.ddf", "start": 32666293, "end": 32666724}, {"filename": "/edge_base/freedoom2/scripts/images.ddf", "start": 32666724, "end": 32673920}, {"filename": "/edge_base/freedoom2/scripts/language.ldf", "start": 32673920, "end": 32684621}, {"filename": "/edge_base/freedoom2/scripts/styles.ddf", "start": 32684621, "end": 32689191}, {"filename": "/edge_base/freedoom2/scripts/things.ddf", "start": 32689191, "end": 32697504}, {"filename": "/edge_base/hacx/graphics/CREDIT.lmp", "start": 32697504, "end": 32816792}, {"filename": "/edge_base/hacx/graphics/ENDOOM.bin", "start": 32816792, "end": 32820792}, {"filename": "/edge_base/hacx/graphics/HELP.lmp", "start": 32820792, "end": 32940080}, {"filename": "/edge_base/hacx/graphics/INTERPIC.lmp", "start": 32940080, "end": 33059368}, {"filename": "/edge_base/hacx/graphics/STBARL.lmp", "start": 33059368, "end": 33062779}, {"filename": "/edge_base/hacx/graphics/STBARR.lmp", "start": 33062779, "end": 33066190}, {"filename": "/edge_base/hacx/graphics/TITLEPIC.lmp", "start": 33066190, "end": 33185478}, {"filename": "/edge_base/hacx/scripts/anims.ddf", "start": 33185478, "end": 33188413}, {"filename": "/edge_base/hacx/scripts/attacks.ddf", "start": 33188413, "end": 33195587}, {"filename": "/edge_base/hacx/scripts/colmap.ddf", "start": 33195587, "end": 33195855}, {"filename": "/edge_base/hacx/scripts/flats.ddf", "start": 33195855, "end": 33196235}, {"filename": "/edge_base/hacx/scripts/fonts.ddf", "start": 33196235, "end": 33196862}, {"filename": "/edge_base/hacx/scripts/games.ddf", "start": 33196862, "end": 33197293}, {"filename": "/edge_base/hacx/scripts/language.ldf", "start": 33197293, "end": 33202953}, {"filename": "/edge_base/hacx/scripts/levels.ddf", "start": 33202953, "end": 33207622}, {"filename": "/edge_base/hacx/scripts/lines.ddf", "start": 33207622, "end": 33208470}, {"filename": "/edge_base/hacx/scripts/playlist.ddf", "start": 33208470, "end": 33209903}, {"filename": "/edge_base/hacx/scripts/styles.ddf", "start": 33209903, "end": 33212508}, {"filename": "/edge_base/hacx/scripts/switch.ddf", "start": 33212508, "end": 33215529}, {"filename": "/edge_base/hacx/scripts/things.ddf", "start": 33215529, "end": 33299316}, {"filename": "/edge_base/hacx/scripts/weapons.ddf", "start": 33299316, "end": 33304333}, {"filename": "/edge_base/hacx/sprites/CHGFA0.lmp", "start": 33304333, "end": 33319137}, {"filename": "/edge_base/hacx/sprites/CHGFB0.lmp", "start": 33319137, "end": 33334163}, {"filename": "/edge_base/hacx/sprites/CHGGA0.lmp", "start": 33334163, "end": 33348737}, {"filename": "/edge_base/hacx/sprites/CHGGB0.lmp", "start": 33348737, "end": 33355094}, {"filename": "/edge_base/hacx/sprites/CRYXHRA0.lmp", "start": 33355094, "end": 33356194}, {"filename": "/edge_base/hacx/sprites/MISFA0.lmp", "start": 33356194, "end": 33396466}, {"filename": "/edge_base/hacx/sprites/MISFB0.lmp", "start": 33396466, "end": 33431632}, {"filename": "/edge_base/hacx/sprites/MISFC0.lmp", "start": 33431632, "end": 33464785}, {"filename": "/edge_base/hacx/sprites/MISFD0.lmp", "start": 33464785, "end": 33501168}, {"filename": "/edge_base/hacx/sprites/MISGA0.lmp", "start": 33501168, "end": 33532698}, {"filename": "/edge_base/hacx/sprites/MISGB0.lmp", "start": 33532698, "end": 33567804}, {"filename": "/edge_base/hacx/sprites/PISGD0.lmp", "start": 33567804, "end": 33591947}, {"filename": "/edge_base/hacx/sprites/PISGE0.lmp", "start": 33591947, "end": 33621613}, {"filename": "/edge_base/hacx/sprites/PLSGA0.lmp", "start": 33621613, "end": 33632477}, {"filename": "/edge_base/hacx/sprites/PLSGB0.lmp", "start": 33632477, "end": 33645871}, {"filename": "/edge_base/hacx/sprites/SAWGA0.lmp", "start": 33645871, "end": 33660320}, {"filename": "/edge_base/hacx/sprites/SAWGB0.lmp", "start": 33660320, "end": 33674428}, {"filename": "/edge_base/hacx/sprites/SAWGC0.lmp", "start": 33674428, "end": 33683513}, {"filename": "/edge_base/hacx/sprites/SAWGD0.lmp", "start": 33683513, "end": 33692598}, {"filename": "/edge_base/hacx/sprites/SHT2A0.lmp", "start": 33692598, "end": 33708109}, {"filename": "/edge_base/hacx/sprites/SHT2B0.lmp", "start": 33708109, "end": 33723850}, {"filename": "/edge_base/hacx/sprites/SHT2C0.lmp", "start": 33723850, "end": 33739883}, {"filename": "/edge_base/hacx/sprites/SHT2D0.lmp", "start": 33739883, "end": 33756010}, {"filename": "/edge_base/hacx/sprites/SHT2E0.lmp", "start": 33756010, "end": 33772296}, {"filename": "/edge_base/hacx/sprites/SHT2F0.lmp", "start": 33772296, "end": 33788450}, {"filename": "/edge_base/hacx/sprites/SHT2G0.lmp", "start": 33788450, "end": 33804266}, {"filename": "/edge_base/hacx/sprites/SHT2H0.lmp", "start": 33804266, "end": 33819777}, {"filename": "/edge_base/hacx/sprites/SHT2I0.lmp", "start": 33819777, "end": 33835460}, {"filename": "/edge_base/hacx/sprites/SHT2J0.lmp", "start": 33835460, "end": 33851665}, {"filename": "/edge_base/hacx/sprites/SHTFA0.lmp", "start": 33851665, "end": 33860727}, {"filename": "/edge_base/hacx/sprites/SHTFB0.lmp", "start": 33860727, "end": 33870218}, {"filename": "/edge_base/hacx/sprites/SHTGA0.lmp", "start": 33870218, "end": 33878877}, {"filename": "/edge_base/hacx/sprites/SHTGB0.lmp", "start": 33878877, "end": 33891959}, {"filename": "/edge_base/hacx/sprites/SHTGC0.lmp", "start": 33891959, "end": 33911198}, {"filename": "/edge_base/hacx/sprites/SHTGD0.lmp", "start": 33911198, "end": 33929445}, {"filename": "/edge_base/harmony/ENDOOM.bin", "start": 33929445, "end": 33933445}, {"filename": "/edge_base/harmony/graphics/BOSSBACK.lmp", "start": 33933445, "end": 34024191}, {"filename": "/edge_base/harmony/graphics/CREDIT.lmp", "start": 34024191, "end": 34114937}, {"filename": "/edge_base/harmony/graphics/CWILV00.lmp", "start": 34114937, "end": 34116987}, {"filename": "/edge_base/harmony/graphics/CWILV01.lmp", "start": 34116987, "end": 34119139}, {"filename": "/edge_base/harmony/graphics/CWILV02.lmp", "start": 34119139, "end": 34120917}, {"filename": "/edge_base/harmony/graphics/CWILV03.lmp", "start": 34120917, "end": 34123517}, {"filename": "/edge_base/harmony/graphics/CWILV04.lmp", "start": 34123517, "end": 34125608}, {"filename": "/edge_base/harmony/graphics/CWILV05.lmp", "start": 34125608, "end": 34129474}, {"filename": "/edge_base/harmony/graphics/CWILV06.lmp", "start": 34129474, "end": 34133062}, {"filename": "/edge_base/harmony/graphics/CWILV07.lmp", "start": 34133062, "end": 34135557}, {"filename": "/edge_base/harmony/graphics/CWILV08.lmp", "start": 34135557, "end": 34138396}, {"filename": "/edge_base/harmony/graphics/CWILV09.lmp", "start": 34138396, "end": 34142231}, {"filename": "/edge_base/harmony/graphics/CWILV10.lmp", "start": 34142231, "end": 34143849}, {"filename": "/edge_base/harmony/graphics/CWILV11.lmp", "start": 34143849, "end": 34145578}, {"filename": "/edge_base/harmony/graphics/HELP.lmp", "start": 34145578, "end": 34234620}, {"filename": "/edge_base/harmony/graphics/INTERPIC.lmp", "start": 34234620, "end": 34325366}, {"filename": "/edge_base/harmony/graphics/M_EPISOD.lmp", "start": 34325366, "end": 34328563}, {"filename": "/edge_base/harmony/graphics/M_JKILL.lmp", "start": 34328563, "end": 34329981}, {"filename": "/edge_base/harmony/graphics/M_NEWG.lmp", "start": 34329981, "end": 34332355}, {"filename": "/edge_base/harmony/graphics/M_NGAME.lmp", "start": 34332355, "end": 34333305}, {"filename": "/edge_base/harmony/graphics/M_RDTHIS.lmp", "start": 34333305, "end": 34335164}, {"filename": "/edge_base/harmony/graphics/M_SAVEG.lmp", "start": 34335164, "end": 34336177}, {"filename": "/edge_base/harmony/graphics/M_THERML.png", "start": 34336177, "end": 34337117}, {"filename": "/edge_base/harmony/graphics/M_THERMM.png", "start": 34337117, "end": 34338046}, {"filename": "/edge_base/harmony/graphics/M_THERMO.png", "start": 34338046, "end": 34338961}, {"filename": "/edge_base/harmony/graphics/M_THERMR.png", "start": 34338961, "end": 34339899}, {"filename": "/edge_base/harmony/graphics/STBARL.lmp", "start": 34339899, "end": 34343310}, {"filename": "/edge_base/harmony/graphics/STBARR.lmp", "start": 34343310, "end": 34346721}, {"filename": "/edge_base/harmony/graphics/TITLEPIC.lmp", "start": 34346721, "end": 34435763}, {"filename": "/edge_base/harmony/graphics/WICOLON.lmp", "start": 34435763, "end": 34435865}, {"filename": "/edge_base/harmony/graphics/WIF.lmp", "start": 34435865, "end": 34435913}, {"filename": "/edge_base/harmony/graphics/WIFRGS.lmp", "start": 34435913, "end": 34437044}, {"filename": "/edge_base/harmony/graphics/WIKILRS.lmp", "start": 34437044, "end": 34437517}, {"filename": "/edge_base/harmony/graphics/WIMINUS.lmp", "start": 34437517, "end": 34437637}, {"filename": "/edge_base/harmony/graphics/WIMSTT.lmp", "start": 34437637, "end": 34438737}, {"filename": "/edge_base/harmony/graphics/WINUM0.lmp", "start": 34438737, "end": 34438987}, {"filename": "/edge_base/harmony/graphics/WINUM1.lmp", "start": 34438987, "end": 34439133}, {"filename": "/edge_base/harmony/graphics/WINUM2.lmp", "start": 34439133, "end": 34439419}, {"filename": "/edge_base/harmony/graphics/WINUM3.lmp", "start": 34439419, "end": 34439672}, {"filename": "/edge_base/harmony/graphics/WINUM4.lmp", "start": 34439672, "end": 34439896}, {"filename": "/edge_base/harmony/graphics/WINUM5.lmp", "start": 34439896, "end": 34440151}, {"filename": "/edge_base/harmony/graphics/WINUM6.lmp", "start": 34440151, "end": 34440413}, {"filename": "/edge_base/harmony/graphics/WINUM7.lmp", "start": 34440413, "end": 34440630}, {"filename": "/edge_base/harmony/graphics/WINUM8.lmp", "start": 34440630, "end": 34440892}, {"filename": "/edge_base/harmony/graphics/WINUM9.lmp", "start": 34440892, "end": 34441151}, {"filename": "/edge_base/harmony/graphics/WIOSTF.lmp", "start": 34441151, "end": 34441391}, {"filename": "/edge_base/harmony/graphics/WIOSTI.lmp", "start": 34441391, "end": 34442839}, {"filename": "/edge_base/harmony/graphics/WIOSTK.lmp", "start": 34442839, "end": 34444184}, {"filename": "/edge_base/harmony/graphics/WIOSTS.lmp", "start": 34444184, "end": 34445353}, {"filename": "/edge_base/harmony/graphics/WIPAR.lmp", "start": 34445353, "end": 34446330}, {"filename": "/edge_base/harmony/graphics/WIPCNT.lmp", "start": 34446330, "end": 34446579}, {"filename": "/edge_base/harmony/graphics/WISCRT2.lmp", "start": 34446579, "end": 34448354}, {"filename": "/edge_base/harmony/graphics/WISUCKS.lmp", "start": 34448354, "end": 34450063}, {"filename": "/edge_base/harmony/graphics/WITIME.lmp", "start": 34450063, "end": 34450910}, {"filename": "/edge_base/harmony/graphics/WIVCTMS.lmp", "start": 34450910, "end": 34451710}, {"filename": "/edge_base/harmony/scripts/attacks.ddf", "start": 34451710, "end": 34459233}, {"filename": "/edge_base/harmony/scripts/colmap.ddf", "start": 34459233, "end": 34459532}, {"filename": "/edge_base/harmony/scripts/flats.ddf", "start": 34459532, "end": 34459853}, {"filename": "/edge_base/harmony/scripts/games.ddf", "start": 34459853, "end": 34460284}, {"filename": "/edge_base/harmony/scripts/language.ldf", "start": 34460284, "end": 34463885}, {"filename": "/edge_base/harmony/scripts/levels.ddf", "start": 34463885, "end": 34479265}, {"filename": "/edge_base/harmony/scripts/lua/edge_hud.lua", "start": 34479265, "end": 34482488}, {"filename": "/edge_base/harmony/scripts/playlist.ddf", "start": 34482488, "end": 34483917}, {"filename": "/edge_base/harmony/scripts/styles.ddf", "start": 34483917, "end": 34486248}, {"filename": "/edge_base/harmony/scripts/things.ddf", "start": 34486248, "end": 34553179}, {"filename": "/edge_base/harmony/scripts/weapons.ddf", "start": 34553179, "end": 34556752}, {"filename": "/edge_base/harmony/sprites/CELLA0.png", "start": 34556752, "end": 34558494}, {"filename": "/edge_base/harmony/sprites/CLIPA0.png", "start": 34558494, "end": 34561180}, {"filename": "/edge_base/harmony/sprites/ROCKA0.png", "start": 34561180, "end": 34562611}, {"filename": "/edge_base/harmony/sprites/SHELA0.png", "start": 34562611, "end": 34564795}, {"filename": "/edge_base/harmonyc/graphics/BOSSBACK.lmp", "start": 34564795, "end": 34653837}, {"filename": "/edge_base/harmonyc/graphics/CREDIT.lmp", "start": 34653837, "end": 34742879}, {"filename": "/edge_base/harmonyc/graphics/CWILV00.lmp", "start": 34742879, "end": 34744929}, {"filename": "/edge_base/harmonyc/graphics/CWILV01.lmp", "start": 34744929, "end": 34747081}, {"filename": "/edge_base/harmonyc/graphics/CWILV02.lmp", "start": 34747081, "end": 34751100}, {"filename": "/edge_base/harmonyc/graphics/CWILV03.lmp", "start": 34751100, "end": 34753700}, {"filename": "/edge_base/harmonyc/graphics/CWILV04.lmp", "start": 34753700, "end": 34755791}, {"filename": "/edge_base/harmonyc/graphics/CWILV05.lmp", "start": 34755791, "end": 34759657}, {"filename": "/edge_base/harmonyc/graphics/CWILV06.lmp", "start": 34759657, "end": 34763245}, {"filename": "/edge_base/harmonyc/graphics/CWILV07.lmp", "start": 34763245, "end": 34765740}, {"filename": "/edge_base/harmonyc/graphics/CWILV08.lmp", "start": 34765740, "end": 34768574}, {"filename": "/edge_base/harmonyc/graphics/CWILV09.lmp", "start": 34768574, "end": 34772409}, {"filename": "/edge_base/harmonyc/graphics/CWILV10.lmp", "start": 34772409, "end": 34774027}, {"filename": "/edge_base/harmonyc/graphics/CWILV11.lmp", "start": 34774027, "end": 34775580}, {"filename": "/edge_base/harmonyc/graphics/CWILV12.lmp", "start": 34775580, "end": 34777230}, {"filename": "/edge_base/harmonyc/graphics/CWILV13.lmp", "start": 34777230, "end": 34779082}, {"filename": "/edge_base/harmonyc/graphics/CWILV14.lmp", "start": 34779082, "end": 34781398}, {"filename": "/edge_base/harmonyc/graphics/CWILV30.lmp", "start": 34781398, "end": 34783250}, {"filename": "/edge_base/harmonyc/graphics/HELP.lmp", "start": 34783250, "end": 34872292}, {"filename": "/edge_base/harmonyc/graphics/INTERPIC.lmp", "start": 34872292, "end": 34963038}, {"filename": "/edge_base/harmonyc/graphics/M_EPISOD.lmp", "start": 34963038, "end": 34966235}, {"filename": "/edge_base/harmonyc/graphics/M_JKILL.lmp", "start": 34966235, "end": 34967653}, {"filename": "/edge_base/harmonyc/graphics/M_NEWG.lmp", "start": 34967653, "end": 34970027}, {"filename": "/edge_base/harmonyc/graphics/M_NGAME.lmp", "start": 34970027, "end": 34970977}, {"filename": "/edge_base/harmonyc/graphics/M_RDTHIS.lmp", "start": 34970977, "end": 34972836}, {"filename": "/edge_base/harmonyc/graphics/M_SAVEG.lmp", "start": 34972836, "end": 34973849}, {"filename": "/edge_base/harmonyc/graphics/M_THERML.lmp", "start": 34973849, "end": 34973989}, {"filename": "/edge_base/harmonyc/graphics/M_THERMM.lmp", "start": 34973989, "end": 34974195}, {"filename": "/edge_base/harmonyc/graphics/M_THERMO.lmp", "start": 34974195, "end": 34974303}, {"filename": "/edge_base/harmonyc/graphics/M_THERMR.lmp", "start": 34974303, "end": 34974443}, {"filename": "/edge_base/harmonyc/graphics/STBAR.lmp", "start": 34974443, "end": 34991917}, {"filename": "/edge_base/harmonyc/graphics/TITLEPIC.lmp", "start": 34991917, "end": 35080959}, {"filename": "/edge_base/harmonyc/graphics/WICOLON.lmp", "start": 35080959, "end": 35081061}, {"filename": "/edge_base/harmonyc/graphics/WIF.lmp", "start": 35081061, "end": 35081109}, {"filename": "/edge_base/harmonyc/graphics/WIFRGS.lmp", "start": 35081109, "end": 35082240}, {"filename": "/edge_base/harmonyc/graphics/WIKILRS.lmp", "start": 35082240, "end": 35082713}, {"filename": "/edge_base/harmonyc/graphics/WIMINUS.lmp", "start": 35082713, "end": 35082833}, {"filename": "/edge_base/harmonyc/graphics/WIMSTT.lmp", "start": 35082833, "end": 35083933}, {"filename": "/edge_base/harmonyc/graphics/WINUM0.lmp", "start": 35083933, "end": 35084183}, {"filename": "/edge_base/harmonyc/graphics/WINUM1.lmp", "start": 35084183, "end": 35084329}, {"filename": "/edge_base/harmonyc/graphics/WINUM2.lmp", "start": 35084329, "end": 35084615}, {"filename": "/edge_base/harmonyc/graphics/WINUM3.lmp", "start": 35084615, "end": 35084868}, {"filename": "/edge_base/harmonyc/graphics/WINUM4.lmp", "start": 35084868, "end": 35085092}, {"filename": "/edge_base/harmonyc/graphics/WINUM5.lmp", "start": 35085092, "end": 35085347}, {"filename": "/edge_base/harmonyc/graphics/WINUM6.lmp", "start": 35085347, "end": 35085609}, {"filename": "/edge_base/harmonyc/graphics/WINUM7.lmp", "start": 35085609, "end": 35085826}, {"filename": "/edge_base/harmonyc/graphics/WINUM8.lmp", "start": 35085826, "end": 35086088}, {"filename": "/edge_base/harmonyc/graphics/WINUM9.lmp", "start": 35086088, "end": 35086347}, {"filename": "/edge_base/harmonyc/graphics/WIOSTF.lmp", "start": 35086347, "end": 35086587}, {"filename": "/edge_base/harmonyc/graphics/WIOSTI.lmp", "start": 35086587, "end": 35088035}, {"filename": "/edge_base/harmonyc/graphics/WIOSTK.lmp", "start": 35088035, "end": 35089380}, {"filename": "/edge_base/harmonyc/graphics/WIOSTS.lmp", "start": 35089380, "end": 35090549}, {"filename": "/edge_base/harmonyc/graphics/WIPAR.lmp", "start": 35090549, "end": 35091526}, {"filename": "/edge_base/harmonyc/graphics/WIPCNT.lmp", "start": 35091526, "end": 35091775}, {"filename": "/edge_base/harmonyc/graphics/WISCRT2.lmp", "start": 35091775, "end": 35093550}, {"filename": "/edge_base/harmonyc/graphics/WISUCKS.lmp", "start": 35093550, "end": 35095259}, {"filename": "/edge_base/harmonyc/graphics/WITIME.lmp", "start": 35095259, "end": 35096106}, {"filename": "/edge_base/harmonyc/graphics/WIVCTMS.lmp", "start": 35096106, "end": 35096906}, {"filename": "/edge_base/harmonyc/scripts/attacks.ddf", "start": 35096906, "end": 35099793}, {"filename": "/edge_base/harmonyc/scripts/colmap.ddf", "start": 35099793, "end": 35100092}, {"filename": "/edge_base/harmonyc/scripts/language.ldf", "start": 35100092, "end": 35100834}, {"filename": "/edge_base/harmonyc/scripts/levels.ddf", "start": 35100834, "end": 35105377}, {"filename": "/edge_base/harmonyc/scripts/lua/edge_hud.lua", "start": 35105377, "end": 35110173}, {"filename": "/edge_base/harmonyc/scripts/styles.ddf", "start": 35110173, "end": 35112504}, {"filename": "/edge_base/harmonyc/scripts/weapons.ddf", "start": 35112504, "end": 35113147}, {"filename": "/edge_base/heretic/graphics/BARBACK.lmp", "start": 35113147, "end": 35133661}, {"filename": "/edge_base/heretic/graphics/CREDIT.lmp", "start": 35133661, "end": 35252949}, {"filename": "/edge_base/heretic/graphics/E2END.png", "start": 35252949, "end": 35309373}, {"filename": "/edge_base/heretic/graphics/FINAL1.lmp", "start": 35309373, "end": 35428661}, {"filename": "/edge_base/heretic/graphics/FINAL2.lmp", "start": 35428661, "end": 35547949}, {"filename": "/edge_base/heretic/graphics/HELP1.lmp", "start": 35547949, "end": 35667237}, {"filename": "/edge_base/heretic/graphics/HELP2.lmp", "start": 35667237, "end": 35786525}, {"filename": "/edge_base/heretic/graphics/LTFCTOP.lmp", "start": 35786525, "end": 35787216}, {"filename": "/edge_base/heretic/graphics/MAPE1.lmp", "start": 35787216, "end": 35906504}, {"filename": "/edge_base/heretic/graphics/MAPE2.lmp", "start": 35906504, "end": 36025792}, {"filename": "/edge_base/heretic/graphics/MAPE3.lmp", "start": 36025792, "end": 36145080}, {"filename": "/edge_base/heretic/graphics/NULL.png", "start": 36145080, "end": 36146240}, {"filename": "/edge_base/heretic/graphics/RTFCTOP.lmp", "start": 36146240, "end": 36146989}, {"filename": "/edge_base/heretic/graphics/STBARL.lmp", "start": 36146989, "end": 36151230}, {"filename": "/edge_base/heretic/graphics/STBARR.lmp", "start": 36151230, "end": 36155471}, {"filename": "/edge_base/heretic/graphics/TITLE.png", "start": 36155471, "end": 36206094}, {"filename": "/edge_base/heretic/graphics/_WIENTER.png", "start": 36206094, "end": 36206993}, {"filename": "/edge_base/heretic/graphics/_WIF.png", "start": 36206993, "end": 36207739}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL00.png", "start": 36207739, "end": 36208915}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL01.png", "start": 36208915, "end": 36210124}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL02.png", "start": 36210124, "end": 36211389}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL03.png", "start": 36211389, "end": 36212701}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL04.png", "start": 36212701, "end": 36214115}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL05.png", "start": 36214115, "end": 36215429}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL06.png", "start": 36215429, "end": 36216816}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL07.png", "start": 36216816, "end": 36218090}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL08.png", "start": 36218090, "end": 36219144}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL09.png", "start": 36219144, "end": 36220142}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL10.png", "start": 36220142, "end": 36221234}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL11.png", "start": 36221234, "end": 36222491}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL12.png", "start": 36222491, "end": 36223974}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL13.png", "start": 36223974, "end": 36225324}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL14.png", "start": 36225324, "end": 36226928}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL15.png", "start": 36226928, "end": 36228429}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL16.png", "start": 36228429, "end": 36229707}, {"filename": "/edge_base/heretic/graphics/skull/M_SKL17.png", "start": 36229707, "end": 36230939}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK0.png", "start": 36230939, "end": 36231921}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK1.png", "start": 36231921, "end": 36232797}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK10.png", "start": 36232797, "end": 36233438}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK11.png", "start": 36233438, "end": 36234082}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK12.png", "start": 36234082, "end": 36234910}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK13.png", "start": 36234910, "end": 36235866}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK14.png", "start": 36235866, "end": 36237058}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK15.png", "start": 36237058, "end": 36238078}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK2.png", "start": 36238078, "end": 36238828}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK3.png", "start": 36238828, "end": 36239382}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK4.png", "start": 36239382, "end": 36240014}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK5.png", "start": 36240014, "end": 36240647}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK6.png", "start": 36240647, "end": 36241236}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK7.png", "start": 36241236, "end": 36241739}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK8.png", "start": 36241739, "end": 36242420}, {"filename": "/edge_base/heretic/graphics/tome/SPINBK9.png", "start": 36242420, "end": 36243004}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY0.png", "start": 36243004, "end": 36244129}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY1.png", "start": 36244129, "end": 36245235}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY10.png", "start": 36245235, "end": 36246161}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY11.png", "start": 36246161, "end": 36246867}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY12.png", "start": 36246867, "end": 36247793}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY13.png", "start": 36247793, "end": 36248913}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY14.png", "start": 36248913, "end": 36250048}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY15.png", "start": 36250048, "end": 36251221}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY2.png", "start": 36251221, "end": 36252133}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY3.png", "start": 36252133, "end": 36252833}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY4.png", "start": 36252833, "end": 36253754}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY5.png", "start": 36253754, "end": 36254856}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY6.png", "start": 36254856, "end": 36255954}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY7.png", "start": 36255954, "end": 36257068}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY8.png", "start": 36257068, "end": 36258185}, {"filename": "/edge_base/heretic/graphics/wings/SPFLY9.png", "start": 36258185, "end": 36259290}, {"filename": "/edge_base/heretic/scripts/anims.ddf", "start": 36259290, "end": 36260926}, {"filename": "/edge_base/heretic/scripts/attacks.ddf", "start": 36260926, "end": 36306875}, {"filename": "/edge_base/heretic/scripts/colmap.ddf", "start": 36306875, "end": 36307157}, {"filename": "/edge_base/heretic/scripts/flats.ddf", "start": 36307157, "end": 36307820}, {"filename": "/edge_base/heretic/scripts/fonts.ddf", "start": 36307820, "end": 36308904}, {"filename": "/edge_base/heretic/scripts/games.ddf", "start": 36308904, "end": 36311717}, {"filename": "/edge_base/heretic/scripts/images.ddf", "start": 36311717, "end": 36314725}, {"filename": "/edge_base/heretic/scripts/language.ldf", "start": 36314725, "end": 36324433}, {"filename": "/edge_base/heretic/scripts/levels.ddf", "start": 36324433, "end": 36337340}, {"filename": "/edge_base/heretic/scripts/lines.ddf", "start": 36337340, "end": 36341911}, {"filename": "/edge_base/heretic/scripts/lua/edge_hud.lua", "start": 36341911, "end": 36361252}, {"filename": "/edge_base/heretic/scripts/playlist.ddf", "start": 36361252, "end": 36363331}, {"filename": "/edge_base/heretic/scripts/rscript.rts", "start": 36363331, "end": 36375594}, {"filename": "/edge_base/heretic/scripts/sectors.ddf", "start": 36375594, "end": 36379364}, {"filename": "/edge_base/heretic/scripts/sounds.ddf", "start": 36379364, "end": 36390279}, {"filename": "/edge_base/heretic/scripts/styles.ddf", "start": 36390279, "end": 36395532}, {"filename": "/edge_base/heretic/scripts/switch.ddf", "start": 36395532, "end": 36395957}, {"filename": "/edge_base/heretic/scripts/things.ddf", "start": 36395957, "end": 36480877}, {"filename": "/edge_base/heretic/scripts/weapons.ddf", "start": 36480877, "end": 36492061}, {"filename": "/edge_base/heretic/sprites/STFFC0.lmp", "start": 36492061, "end": 36509191}, {"filename": "/edge_base/heretic/sprites/STFFH0.lmp", "start": 36509191, "end": 36527237}, {"filename": "/edge_base/plutonia/graphics/BOSSBACK.lmp", "start": 36527237, "end": 36646525}, {"filename": "/edge_base/plutonia/graphics/CREDIT.lmp", "start": 36646525, "end": 36765813}, {"filename": "/edge_base/plutonia/graphics/INTERPIC.lmp", "start": 36765813, "end": 36885101}, {"filename": "/edge_base/plutonia/graphics/TITLEPIC.lmp", "start": 36885101, "end": 37004389}, {"filename": "/edge_base/plutonia/scripts/games.ddf", "start": 37004389, "end": 37004820}, {"filename": "/edge_base/plutonia/scripts/images.ddf", "start": 37004820, "end": 37006155}, {"filename": "/edge_base/plutonia/scripts/language.ldf", "start": 37006155, "end": 37009224}, {"filename": "/edge_base/plutonia/textures/SKY1_B.png", "start": 37009224, "end": 37024255}, {"filename": "/edge_base/plutonia/textures/SKY1_E.png", "start": 37024255, "end": 37039251}, {"filename": "/edge_base/plutonia/textures/SKY1_N.png", "start": 37039251, "end": 37052330}, {"filename": "/edge_base/plutonia/textures/SKY1_S.png", "start": 37052330, "end": 37065409}, {"filename": "/edge_base/plutonia/textures/SKY1_T.png", "start": 37065409, "end": 37080440}, {"filename": "/edge_base/plutonia/textures/SKY1_W.png", "start": 37080440, "end": 37095436}, {"filename": "/edge_base/plutonia/textures/SKY2_B.png", "start": 37095436, "end": 37123371}, {"filename": "/edge_base/plutonia/textures/SKY2_E.png", "start": 37123371, "end": 37135011}, {"filename": "/edge_base/plutonia/textures/SKY2_N.png", "start": 37135011, "end": 37146920}, {"filename": "/edge_base/plutonia/textures/SKY2_S.png", "start": 37146920, "end": 37158829}, {"filename": "/edge_base/plutonia/textures/SKY2_T.png", "start": 37158829, "end": 37186764}, {"filename": "/edge_base/plutonia/textures/SKY2_W.png", "start": 37186764, "end": 37198404}, {"filename": "/edge_base/plutonia/textures/SKY3_B.png", "start": 37198404, "end": 37397154}, {"filename": "/edge_base/plutonia/textures/SKY3_E.png", "start": 37397154, "end": 37487747}, {"filename": "/edge_base/plutonia/textures/SKY3_N.png", "start": 37487747, "end": 37571131}, {"filename": "/edge_base/plutonia/textures/SKY3_S.png", "start": 37571131, "end": 37654515}, {"filename": "/edge_base/plutonia/textures/SKY3_T.png", "start": 37654515, "end": 37853265}, {"filename": "/edge_base/plutonia/textures/SKY3_W.png", "start": 37853265, "end": 37943858}, {"filename": "/edge_base/rekkr/graphics/M_DOOM.lmp", "start": 37943858, "end": 37969149}, {"filename": "/edge_base/rekkr/graphics/M_EPISOD.lmp", "start": 37969149, "end": 37986619}, {"filename": "/edge_base/rekkr/graphics/M_HURT.lmp", "start": 37986619, "end": 37988758}, {"filename": "/edge_base/rekkr/graphics/M_JKILL.lmp", "start": 37988758, "end": 37991517}, {"filename": "/edge_base/rekkr/graphics/M_LGTTL.lmp", "start": 37991517, "end": 37993704}, {"filename": "/edge_base/rekkr/graphics/M_LOADG.lmp", "start": 37993704, "end": 37995821}, {"filename": "/edge_base/rekkr/graphics/M_NEWG.lmp", "start": 37995821, "end": 37999096}, {"filename": "/edge_base/rekkr/graphics/M_NGAME.lmp", "start": 37999096, "end": 38001144}, {"filename": "/edge_base/rekkr/graphics/M_NMARE.lmp", "start": 38001144, "end": 38003578}, {"filename": "/edge_base/rekkr/graphics/M_OPTION.lmp", "start": 38003578, "end": 38005415}, {"filename": "/edge_base/rekkr/graphics/M_QUITG.lmp", "start": 38005415, "end": 38007483}, {"filename": "/edge_base/rekkr/graphics/M_RDTHIS.lmp", "start": 38007483, "end": 38008728}, {"filename": "/edge_base/rekkr/graphics/M_ROUGH.lmp", "start": 38008728, "end": 38011297}, {"filename": "/edge_base/rekkr/graphics/M_SAVEG.lmp", "start": 38011297, "end": 38013517}, {"filename": "/edge_base/rekkr/graphics/M_SGTTL.lmp", "start": 38013517, "end": 38015737}, {"filename": "/edge_base/rekkr/graphics/M_SKILL.lmp", "start": 38015737, "end": 38043829}, {"filename": "/edge_base/rekkr/graphics/M_SKULL1.png", "start": 38043829, "end": 38044417}, {"filename": "/edge_base/rekkr/graphics/M_SKULL2.png", "start": 38044417, "end": 38044999}, {"filename": "/edge_base/rekkr/graphics/M_SKULL3.png", "start": 38044999, "end": 38045594}, {"filename": "/edge_base/rekkr/graphics/M_SKULL4.png", "start": 38045594, "end": 38046182}, {"filename": "/edge_base/rekkr/graphics/M_ULTRA.lmp", "start": 38046182, "end": 38048556}, {"filename": "/edge_base/rekkr/graphics/STBARL.lmp", "start": 38048556, "end": 38051967}, {"filename": "/edge_base/rekkr/graphics/STBARR.lmp", "start": 38051967, "end": 38055378}, {"filename": "/edge_base/rekkr/graphics/WIENTER.lmp", "start": 38055378, "end": 38057303}, {"filename": "/edge_base/rekkr/graphics/WIF.lmp", "start": 38057303, "end": 38059084}, {"filename": "/edge_base/rekkr/graphics/WILV00.lmp", "start": 38059084, "end": 38060683}, {"filename": "/edge_base/rekkr/graphics/WILV01.lmp", "start": 38060683, "end": 38061699}, {"filename": "/edge_base/rekkr/graphics/WILV02.lmp", "start": 38061699, "end": 38063726}, {"filename": "/edge_base/rekkr/graphics/WILV03.lmp", "start": 38063726, "end": 38066293}, {"filename": "/edge_base/rekkr/graphics/WILV04.lmp", "start": 38066293, "end": 38068008}, {"filename": "/edge_base/rekkr/graphics/WILV05.lmp", "start": 38068008, "end": 38069736}, {"filename": "/edge_base/rekkr/graphics/WILV06.lmp", "start": 38069736, "end": 38073120}, {"filename": "/edge_base/rekkr/graphics/WILV07.lmp", "start": 38073120, "end": 38076624}, {"filename": "/edge_base/rekkr/graphics/WILV08.lmp", "start": 38076624, "end": 38079467}, {"filename": "/edge_base/rekkr/graphics/WILV10.lmp", "start": 38079467, "end": 38080846}, {"filename": "/edge_base/rekkr/graphics/WILV11.lmp", "start": 38080846, "end": 38082482}, {"filename": "/edge_base/rekkr/graphics/WILV12.lmp", "start": 38082482, "end": 38084802}, {"filename": "/edge_base/rekkr/graphics/WILV13.lmp", "start": 38084802, "end": 38086012}, {"filename": "/edge_base/rekkr/graphics/WILV14.lmp", "start": 38086012, "end": 38088709}, {"filename": "/edge_base/rekkr/graphics/WILV15.lmp", "start": 38088709, "end": 38091796}, {"filename": "/edge_base/rekkr/graphics/WILV16.lmp", "start": 38091796, "end": 38093437}, {"filename": "/edge_base/rekkr/graphics/WILV17.lmp", "start": 38093437, "end": 38095325}, {"filename": "/edge_base/rekkr/graphics/WILV18.lmp", "start": 38095325, "end": 38096512}, {"filename": "/edge_base/rekkr/graphics/WILV20.lmp", "start": 38096512, "end": 38098473}, {"filename": "/edge_base/rekkr/graphics/WILV21.lmp", "start": 38098473, "end": 38101589}, {"filename": "/edge_base/rekkr/graphics/WILV22.lmp", "start": 38101589, "end": 38103350}, {"filename": "/edge_base/rekkr/graphics/WILV23.lmp", "start": 38103350, "end": 38106209}, {"filename": "/edge_base/rekkr/graphics/WILV24.lmp", "start": 38106209, "end": 38107922}, {"filename": "/edge_base/rekkr/graphics/WILV25.lmp", "start": 38107922, "end": 38110186}, {"filename": "/edge_base/rekkr/graphics/WILV26.lmp", "start": 38110186, "end": 38111419}, {"filename": "/edge_base/rekkr/graphics/WILV27.lmp", "start": 38111419, "end": 38112162}, {"filename": "/edge_base/rekkr/graphics/WILV28.lmp", "start": 38112162, "end": 38115940}, {"filename": "/edge_base/rekkr/graphics/WILV30.lmp", "start": 38115940, "end": 38117792}, {"filename": "/edge_base/rekkr/graphics/WILV31.lmp", "start": 38117792, "end": 38119430}, {"filename": "/edge_base/rekkr/graphics/WILV32.lmp", "start": 38119430, "end": 38120552}, {"filename": "/edge_base/rekkr/graphics/WILV33.lmp", "start": 38120552, "end": 38122891}, {"filename": "/edge_base/rekkr/graphics/WILV34.lmp", "start": 38122891, "end": 38124894}, {"filename": "/edge_base/rekkr/graphics/WILV35.lmp", "start": 38124894, "end": 38127028}, {"filename": "/edge_base/rekkr/graphics/WILV36.lmp", "start": 38127028, "end": 38130094}, {"filename": "/edge_base/rekkr/graphics/WILV37.lmp", "start": 38130094, "end": 38132089}, {"filename": "/edge_base/rekkr/graphics/WILV38.lmp", "start": 38132089, "end": 38133949}, {"filename": "/edge_base/rekkr/graphics/WIOSTF.lmp", "start": 38133949, "end": 38134211}, {"filename": "/edge_base/rekkr/graphics/WIOSTI.lmp", "start": 38134211, "end": 38135417}, {"filename": "/edge_base/rekkr/graphics/WIOSTK.lmp", "start": 38135417, "end": 38136482}, {"filename": "/edge_base/rekkr/graphics/WIOSTS.lmp", "start": 38136482, "end": 38137512}, {"filename": "/edge_base/rekkr/graphics/WIPAR.lmp", "start": 38137512, "end": 38138274}, {"filename": "/edge_base/rekkr/graphics/WISCRT2.lmp", "start": 38138274, "end": 38139841}, {"filename": "/edge_base/rekkr/graphics/WITIME.lmp", "start": 38139841, "end": 38140755}, {"filename": "/edge_base/rekkr/scripts/anims.ddf", "start": 38140755, "end": 38140889}, {"filename": "/edge_base/rekkr/scripts/attacks.ddf", "start": 38140889, "end": 38141582}, {"filename": "/edge_base/rekkr/scripts/fonts.ddf", "start": 38141582, "end": 38141825}, {"filename": "/edge_base/rekkr/scripts/games.ddf", "start": 38141825, "end": 38142236}, {"filename": "/edge_base/rekkr/scripts/images.ddf", "start": 38142236, "end": 38149945}, {"filename": "/edge_base/rekkr/scripts/language.ldf", "start": 38149945, "end": 38151459}, {"filename": "/edge_base/rekkr/scripts/styles.ddf", "start": 38151459, "end": 38155587}, {"filename": "/edge_base/rekkr/scripts/things.ddf", "start": 38155587, "end": 38157757}, {"filename": "/edge_base/rekkr/scripts/weapons.ddf", "start": 38157757, "end": 38159622}, {"filename": "/edge_base/rekkr/sprites/SSWVA1.lmp", "start": 38159622, "end": 38160247}, {"filename": "/edge_base/rekkr/sprites/SSWVA2A8.lmp", "start": 38160247, "end": 38161222}, {"filename": "/edge_base/rekkr/sprites/SSWVA3A7.lmp", "start": 38161222, "end": 38162197}, {"filename": "/edge_base/rekkr/sprites/SSWVA4A6.lmp", "start": 38162197, "end": 38163172}, {"filename": "/edge_base/rekkr/sprites/SSWVA5.lmp", "start": 38163172, "end": 38163803}, {"filename": "/edge_base/rekkr/sprites/SSWVB1.lmp", "start": 38163803, "end": 38164386}, {"filename": "/edge_base/rekkr/sprites/SSWVB2B8.lmp", "start": 38164386, "end": 38165353}, {"filename": "/edge_base/rekkr/sprites/SSWVB3B7.lmp", "start": 38165353, "end": 38166320}, {"filename": "/edge_base/rekkr/sprites/SSWVB4B6.lmp", "start": 38166320, "end": 38167287}, {"filename": "/edge_base/rekkr/sprites/SSWVB5.lmp", "start": 38167287, "end": 38167869}, {"filename": "/edge_base/strife/games.ddf", "start": 38167869, "end": 38168689}, {"filename": "/edge_base/strife/images.ddf", "start": 38168689, "end": 38169025}, {"filename": "/edge_base/strife/playlist.ddf", "start": 38169025, "end": 38169999}, {"filename": "/edge_base/tnt/graphics/BOSSBACK.lmp", "start": 38169999, "end": 38289287}, {"filename": "/edge_base/tnt/graphics/CREDIT.lmp", "start": 38289287, "end": 38408575}, {"filename": "/edge_base/tnt/graphics/INTERPIC.lmp", "start": 38408575, "end": 38527863}, {"filename": "/edge_base/tnt/graphics/TITLEPIC.lmp", "start": 38527863, "end": 38647151}, {"filename": "/edge_base/tnt/scripts/games.ddf", "start": 38647151, "end": 38647582}, {"filename": "/edge_base/tnt/scripts/images.ddf", "start": 38647582, "end": 38648919}, {"filename": "/edge_base/tnt/scripts/language.ldf", "start": 38648919, "end": 38652275}, {"filename": "/edge_base/tnt/textures/SKY1_B.png", "start": 38652275, "end": 38668268}, {"filename": "/edge_base/tnt/textures/SKY1_E.png", "start": 38668268, "end": 38687734}, {"filename": "/edge_base/tnt/textures/SKY1_N.png", "start": 38687734, "end": 38705160}, {"filename": "/edge_base/tnt/textures/SKY1_S.png", "start": 38705160, "end": 38721067}, {"filename": "/edge_base/tnt/textures/SKY1_T.png", "start": 38721067, "end": 38761185}, {"filename": "/edge_base/tnt/textures/SKY1_W.png", "start": 38761185, "end": 38780509}, {"filename": "/edge_base/tnt/textures/SKY2_B.png", "start": 38780509, "end": 38781820}, {"filename": "/edge_base/tnt/textures/SKY2_E.png", "start": 38781820, "end": 38786343}, {"filename": "/edge_base/tnt/textures/SKY2_N.png", "start": 38786343, "end": 38787572}, {"filename": "/edge_base/tnt/textures/SKY2_S.png", "start": 38787572, "end": 38793789}, {"filename": "/edge_base/tnt/textures/SKY2_T.png", "start": 38793789, "end": 38797916}, {"filename": "/edge_base/tnt/textures/SKY2_W.png", "start": 38797916, "end": 38799458}, {"filename": "/edge_base/tnt/textures/SKY3_B.png", "start": 38799458, "end": 38823929}, {"filename": "/edge_base/tnt/textures/SKY3_E.png", "start": 38823929, "end": 38831631}, {"filename": "/edge_base/tnt/textures/SKY3_N.png", "start": 38831631, "end": 38839510}, {"filename": "/edge_base/tnt/textures/SKY3_S.png", "start": 38839510, "end": 38846858}, {"filename": "/edge_base/tnt/textures/SKY3_T.png", "start": 38846858, "end": 38871329}, {"filename": "/edge_base/tnt/textures/SKY3_W.png", "start": 38871329, "end": 38878670}, {"filename": "/edge_defs/SNDFONT.sf3", "start": 38878670, "end": 41236840}, {"filename": "/edge_defs/colormaps/AUTOMAPS.dat", "start": 41236840, "end": 41237352}, {"filename": "/edge_defs/colormaps/LAVAMAP.cmp", "start": 41237352, "end": 41246056}, {"filename": "/edge_defs/colormaps/NITEVMAP.cmp", "start": 41246056, "end": 41246312}, {"filename": "/edge_defs/colormaps/PLYRMAPS.dat", "start": 41246312, "end": 41250152}, {"filename": "/edge_defs/colormaps/SARGMAPS.dat", "start": 41250152, "end": 41251688}, {"filename": "/edge_defs/colormaps/SHADEMAP.cmp", "start": 41251688, "end": 41251944}, {"filename": "/edge_defs/colormaps/SKINMAPS.dat", "start": 41251944, "end": 41253224}, {"filename": "/edge_defs/colormaps/SLIMEMAP.cmp", "start": 41253224, "end": 41261928}, {"filename": "/edge_defs/colormaps/TEXTMAPS.dat", "start": 41261928, "end": 41263720}, {"filename": "/edge_defs/colormaps/TXTBLUES.dat", "start": 41263720, "end": 41265000}, {"filename": "/edge_defs/colormaps/TXTBRNS1.dat", "start": 41265000, "end": 41266280}, {"filename": "/edge_defs/colormaps/TXTBRNS2.dat", "start": 41266280, "end": 41267560}, {"filename": "/edge_defs/colormaps/TXTGREYS.dat", "start": 41267560, "end": 41268840}, {"filename": "/edge_defs/colormaps/TXTGRNS.dat", "start": 41268840, "end": 41270120}, {"filename": "/edge_defs/colormaps/TXTORANS.dat", "start": 41270120, "end": 41271400}, {"filename": "/edge_defs/colormaps/TXTPNKS1.dat", "start": 41271400, "end": 41272680}, {"filename": "/edge_defs/colormaps/TXTPNKS2.dat", "start": 41272680, "end": 41273960}, {"filename": "/edge_defs/colormaps/TXTPURPS.dat", "start": 41273960, "end": 41275240}, {"filename": "/edge_defs/colormaps/TXTREDS.dat", "start": 41275240, "end": 41276520}, {"filename": "/edge_defs/colormaps/TXTYLWS1.dat", "start": 41276520, "end": 41277800}, {"filename": "/edge_defs/colormaps/TXTYLWS2.dat", "start": 41277800, "end": 41279080}, {"filename": "/edge_defs/colormaps/WATERMAP.cmp", "start": 41279080, "end": 41287784}, {"filename": "/edge_defs/graphics/CREDIT2.lmp", "start": 41287784, "end": 41354672}, {"filename": "/edge_defs/graphics/DLITEXPN.png", "start": 41354672, "end": 41369015}, {"filename": "/edge_defs/graphics/EDGECRED.png", "start": 41369015, "end": 41536614}, {"filename": "/edge_defs/graphics/EDGETTL.lmp", "start": 41536614, "end": 41603502}, {"filename": "/edge_defs/graphics/ENDFONT.png", "start": 41603502, "end": 41610606}, {"filename": "/edge_defs/graphics/FONTVERD.png", "start": 41610606, "end": 41655237}, {"filename": "/edge_defs/graphics/MOUSE.lmp", "start": 41655237, "end": 41655420}, {"filename": "/edge_defs/graphics/M_EPI5.lmp", "start": 41655420, "end": 41656564}, {"filename": "/edge_defs/graphics/M_EPI6.lmp", "start": 41656564, "end": 41659594}, {"filename": "/edge_defs/graphics/STBARL.lmp", "start": 41659594, "end": 41663005}, {"filename": "/edge_defs/graphics/STBARR.lmp", "start": 41663005, "end": 41666416}, {"filename": "/edge_defs/graphics/STCFN000.lmp", "start": 41666416, "end": 41666560}, {"filename": "/edge_defs/graphics/STCFN132.lmp", "start": 41666560, "end": 41666702}, {"filename": "/edge_defs/graphics/STCFN134.lmp", "start": 41666702, "end": 41666829}, {"filename": "/edge_defs/graphics/STCFN148.lmp", "start": 41666829, "end": 41666964}, {"filename": "/edge_defs/graphics/STDESYNC.lmp", "start": 41666964, "end": 41669561}, {"filename": "/edge_defs/graphics/STFB0.lmp", "start": 41669561, "end": 41670969}, {"filename": "/edge_defs/graphics/STFB1.lmp", "start": 41670969, "end": 41672377}, {"filename": "/edge_defs/graphics/STFB2.lmp", "start": 41672377, "end": 41673785}, {"filename": "/edge_defs/graphics/STFB3.lmp", "start": 41673785, "end": 41675193}, {"filename": "/edge_defs/graphics/STFB4.lmp", "start": 41675193, "end": 41676601}, {"filename": "/edge_defs/graphics/STFB5.lmp", "start": 41676601, "end": 41678009}, {"filename": "/edge_defs/graphics/STFB6.lmp", "start": 41678009, "end": 41679417}, {"filename": "/edge_defs/graphics/STFB7.lmp", "start": 41679417, "end": 41680825}, {"filename": "/edge_defs/graphics/STKEYS6.lmp", "start": 41680825, "end": 41680945}, {"filename": "/edge_defs/graphics/STKEYS7.lmp", "start": 41680945, "end": 41681065}, {"filename": "/edge_defs/graphics/STKEYS8.lmp", "start": 41681065, "end": 41681185}, {"filename": "/edge_defs/graphics/STKEYS9.PNG", "start": 41681185, "end": 41681369}, {"filename": "/edge_defs/graphics/STKEYSA.PNG", "start": 41681369, "end": 41681621}, {"filename": "/edge_defs/graphics/STPB0.lmp", "start": 41681621, "end": 41683099}, {"filename": "/edge_defs/graphics/STPB1.lmp", "start": 41683099, "end": 41684577}, {"filename": "/edge_defs/graphics/STPB2.lmp", "start": 41684577, "end": 41686055}, {"filename": "/edge_defs/graphics/STPB3.lmp", "start": 41686055, "end": 41687533}, {"filename": "/edge_defs/graphics/STPB4.lmp", "start": 41687533, "end": 41689011}, {"filename": "/edge_defs/graphics/STPB5.lmp", "start": 41689011, "end": 41690489}, {"filename": "/edge_defs/graphics/STPB6.lmp", "start": 41690489, "end": 41691967}, {"filename": "/edge_defs/graphics/STPB7.lmp", "start": 41691967, "end": 41693445}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN001.png", "start": 41693445, "end": 41693802}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN002.png", "start": 41693802, "end": 41694147}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN003.png", "start": 41694147, "end": 41694503}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN004.png", "start": 41694503, "end": 41694851}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN005.png", "start": 41694851, "end": 41695190}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN006.png", "start": 41695190, "end": 41695508}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN007.png", "start": 41695508, "end": 41695858}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN008.png", "start": 41695858, "end": 41696214}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN009.png", "start": 41696214, "end": 41696493}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN010.png", "start": 41696493, "end": 41696818}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN011.png", "start": 41696818, "end": 41697187}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN012.png", "start": 41697187, "end": 41697511}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN013.png", "start": 41697511, "end": 41697877}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN014.png", "start": 41697877, "end": 41698233}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN015.png", "start": 41698233, "end": 41698606}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN016.png", "start": 41698606, "end": 41698940}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN017.png", "start": 41698940, "end": 41699315}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN018.png", "start": 41699315, "end": 41699673}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN019.png", "start": 41699673, "end": 41700024}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN020.png", "start": 41700024, "end": 41700343}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN021.png", "start": 41700343, "end": 41700689}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN022.png", "start": 41700689, "end": 41701018}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN023.png", "start": 41701018, "end": 41701373}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN024.png", "start": 41701373, "end": 41701724}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN025.png", "start": 41701724, "end": 41702073}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN026.png", "start": 41702073, "end": 41702411}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN027.png", "start": 41702411, "end": 41702700}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN028.png", "start": 41702700, "end": 41703014}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN029.png", "start": 41703014, "end": 41703257}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN030.png", "start": 41703257, "end": 41703500}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN031.png", "start": 41703500, "end": 41703766}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN032.png", "start": 41703766, "end": 41703999}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN033.png", "start": 41703999, "end": 41704337}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN034.png", "start": 41704337, "end": 41704630}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN035.png", "start": 41704630, "end": 41704968}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN036.png", "start": 41704968, "end": 41705297}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN037.png", "start": 41705297, "end": 41705626}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN038.png", "start": 41705626, "end": 41705959}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN039.png", "start": 41705959, "end": 41706295}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN040.png", "start": 41706295, "end": 41706592}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN041.png", "start": 41706592, "end": 41706932}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN042.png", "start": 41706932, "end": 41707272}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN043.png", "start": 41707272, "end": 41707507}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN044.png", "start": 41707507, "end": 41707827}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN045.png", "start": 41707827, "end": 41708111}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN046.png", "start": 41708111, "end": 41708441}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN047.png", "start": 41708441, "end": 41708779}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN048.png", "start": 41708779, "end": 41709094}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN049.png", "start": 41709094, "end": 41709423}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN050.png", "start": 41709423, "end": 41709745}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN051.png", "start": 41709745, "end": 41710062}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN052.png", "start": 41710062, "end": 41710401}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN053.png", "start": 41710401, "end": 41710721}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN054.png", "start": 41710721, "end": 41710995}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN055.png", "start": 41710995, "end": 41711302}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN056.png", "start": 41711302, "end": 41711647}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN057.png", "start": 41711647, "end": 41711945}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN058.png", "start": 41711945, "end": 41712299}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN059.png", "start": 41712299, "end": 41712638}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN060.png", "start": 41712638, "end": 41712977}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN061.png", "start": 41712977, "end": 41713301}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN062.png", "start": 41713301, "end": 41713641}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN063.png", "start": 41713641, "end": 41713966}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN064.png", "start": 41713966, "end": 41714305}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN065.png", "start": 41714305, "end": 41714611}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN066.png", "start": 41714611, "end": 41714945}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN067.png", "start": 41714945, "end": 41715277}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN068.png", "start": 41715277, "end": 41715625}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN069.png", "start": 41715625, "end": 41715966}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN070.png", "start": 41715966, "end": 41716291}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN071.png", "start": 41716291, "end": 41716623}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN072.png", "start": 41716623, "end": 41716952}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN073.png", "start": 41716952, "end": 41717186}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN074.png", "start": 41717186, "end": 41717432}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN075.png", "start": 41717432, "end": 41717758}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN076.png", "start": 41717758, "end": 41718045}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN077.png", "start": 41718045, "end": 41718363}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN078.png", "start": 41718363, "end": 41718683}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN079.png", "start": 41718683, "end": 41718994}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN080.png", "start": 41718994, "end": 41719311}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN081.png", "start": 41719311, "end": 41719626}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN082.png", "start": 41719626, "end": 41719928}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN083.png", "start": 41719928, "end": 41720256}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN084.png", "start": 41720256, "end": 41720588}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN085.png", "start": 41720588, "end": 41720836}, {"filename": "/edge_defs/graphics/edge1_font/ED1FN086.png", "start": 41720836, "end": 41721087}, {"filename": "/edge_defs/movies/ECINTRO.mpg", "start": 41721087, "end": 42398975}, {"filename": "/edge_defs/scripts/anims.ddf", "start": 42398975, "end": 42401003}, {"filename": "/edge_defs/scripts/attacks.ddf", "start": 42401003, "end": 42425244}, {"filename": "/edge_defs/scripts/coal_api.ec", "start": 42425244, "end": 42440118}, {"filename": "/edge_defs/scripts/coal_hud.ec", "start": 42440118, "end": 42457178}, {"filename": "/edge_defs/scripts/colmap.ddf", "start": 42457178, "end": 42461356}, {"filename": "/edge_defs/scripts/flats.ddf", "start": 42461356, "end": 42466633}, {"filename": "/edge_defs/scripts/fonts.ddf", "start": 42466633, "end": 42468094}, {"filename": "/edge_defs/scripts/games.ddf", "start": 42468094, "end": 42472509}, {"filename": "/edge_defs/scripts/images.ddf", "start": 42472509, "end": 42491986}, {"filename": "/edge_defs/scripts/language.ldf", "start": 42491986, "end": 42600523}, {"filename": "/edge_defs/scripts/levels.ddf", "start": 42600523, "end": 42615820}, {"filename": "/edge_defs/scripts/lines.ddf", "start": 42615820, "end": 42709678}, {"filename": "/edge_defs/scripts/lua/core/base64.lua", "start": 42709678, "end": 42716857}, {"filename": "/edge_defs/scripts/lua/core/debugger.lua", "start": 42716857, "end": 42738275}, {"filename": "/edge_defs/scripts/lua/core/json.lua", "start": 42738275, "end": 42747912}, {"filename": "/edge_defs/scripts/lua/core/mat2.lua", "start": 42747912, "end": 42752599}, {"filename": "/edge_defs/scripts/lua/core/mat3.lua", "start": 42752599, "end": 42760901}, {"filename": "/edge_defs/scripts/lua/core/mat4.lua", "start": 42760901, "end": 42774005}, {"filename": "/edge_defs/scripts/lua/core/mat4Extended.lua", "start": 42774005, "end": 42777880}, {"filename": "/edge_defs/scripts/lua/core/quat.lua", "start": 42777880, "end": 42781756}, {"filename": "/edge_defs/scripts/lua/core/vec2.lua", "start": 42781756, "end": 42784722}, {"filename": "/edge_defs/scripts/lua/core/vec3.lua", "start": 42784722, "end": 42788246}, {"filename": "/edge_defs/scripts/lua/core/vec4.lua", "start": 42788246, "end": 42792118}, {"filename": "/edge_defs/scripts/lua/edge_api.lua", "start": 42792118, "end": 42800876}, {"filename": "/edge_defs/scripts/lua/edge_hud.lua", "start": 42800876, "end": 42819246}, {"filename": "/edge_defs/scripts/movies.ddf", "start": 42819246, "end": 42819296}, {"filename": "/edge_defs/scripts/playlist.ddf", "start": 42819296, "end": 42822114}, {"filename": "/edge_defs/scripts/reverbs.ddf", "start": 42822114, "end": 42822247}, {"filename": "/edge_defs/scripts/rscript.rts", "start": 42822247, "end": 42823850}, {"filename": "/edge_defs/scripts/sectors.ddf", "start": 42823850, "end": 42841899}, {"filename": "/edge_defs/scripts/sounds.ddf", "start": 42841899, "end": 42855216}, {"filename": "/edge_defs/scripts/styles.ddf", "start": 42855216, "end": 42861293}, {"filename": "/edge_defs/scripts/switch.ddf", "start": 42861293, "end": 42865344}, {"filename": "/edge_defs/scripts/things.ddf", "start": 42865344, "end": 42998271}, {"filename": "/edge_defs/scripts/wadfixes.ddf", "start": 42998271, "end": 42998965}, {"filename": "/edge_defs/scripts/weapons.ddf", "start": 42998965, "end": 43004449}, {"filename": "/edge_defs/sounds/DPBAREXP.lmp", "start": 43004449, "end": 43004532}, {"filename": "/edge_defs/sounds/DPBDCLS.lmp", "start": 43004532, "end": 43004578}, {"filename": "/edge_defs/sounds/DPBDOPN.lmp", "start": 43004578, "end": 43004619}, {"filename": "/edge_defs/sounds/DPBFG.lmp", "start": 43004619, "end": 43004807}, {"filename": "/edge_defs/sounds/DPBGACT.lmp", "start": 43004807, "end": 43004906}, {"filename": "/edge_defs/sounds/DPBGDTH1.lmp", "start": 43004906, "end": 43004995}, {"filename": "/edge_defs/sounds/DPBGDTH2.lmp", "start": 43004995, "end": 43005084}, {"filename": "/edge_defs/sounds/DPBGSIT1.lmp", "start": 43005084, "end": 43005195}, {"filename": "/edge_defs/sounds/DPBGSIT2.lmp", "start": 43005195, "end": 43005306}, {"filename": "/edge_defs/sounds/DPBOSCUB.lmp", "start": 43005306, "end": 43005342}, {"filename": "/edge_defs/sounds/DPBOSDTH.lmp", "start": 43005342, "end": 43005621}, {"filename": "/edge_defs/sounds/DPBOSPIT.lmp", "start": 43005621, "end": 43005666}, {"filename": "/edge_defs/sounds/DPBOSPN.lmp", "start": 43005666, "end": 43005704}, {"filename": "/edge_defs/sounds/DPBOSSIT.lmp", "start": 43005704, "end": 43005838}, {"filename": "/edge_defs/sounds/DPBRSDTH.lmp", "start": 43005838, "end": 43005950}, {"filename": "/edge_defs/sounds/DPBRSSIT.lmp", "start": 43005950, "end": 43006058}, {"filename": "/edge_defs/sounds/DPBSPACT.lmp", "start": 43006058, "end": 43006114}, {"filename": "/edge_defs/sounds/DPBSPDTH.lmp", "start": 43006114, "end": 43006205}, {"filename": "/edge_defs/sounds/DPBSPSIT.lmp", "start": 43006205, "end": 43006344}, {"filename": "/edge_defs/sounds/DPBSPWLK.lmp", "start": 43006344, "end": 43006389}, {"filename": "/edge_defs/sounds/DPCACDTH.lmp", "start": 43006389, "end": 43006478}, {"filename": "/edge_defs/sounds/DPCACSIT.lmp", "start": 43006478, "end": 43006590}, {"filename": "/edge_defs/sounds/DPCLAW.lmp", "start": 43006590, "end": 43006636}, {"filename": "/edge_defs/sounds/DPCYBDTH.lmp", "start": 43006636, "end": 43006773}, {"filename": "/edge_defs/sounds/DPCYBSIT.lmp", "start": 43006773, "end": 43006922}, {"filename": "/edge_defs/sounds/DPDBCLS.lmp", "start": 43006922, "end": 43006933}, {"filename": "/edge_defs/sounds/DPDBLOAD.lmp", "start": 43006933, "end": 43006944}, {"filename": "/edge_defs/sounds/DPDBOPN.lmp", "start": 43006944, "end": 43006955}, {"filename": "/edge_defs/sounds/DPDMACT.lmp", "start": 43006955, "end": 43006982}, {"filename": "/edge_defs/sounds/DPDMPAIN.lmp", "start": 43006982, "end": 43007023}, {"filename": "/edge_defs/sounds/DPDORCLS.lmp", "start": 43007023, "end": 43007094}, {"filename": "/edge_defs/sounds/DPDOROPN.lmp", "start": 43007094, "end": 43007167}, {"filename": "/edge_defs/sounds/DPDSHTGN.lmp", "start": 43007167, "end": 43007210}, {"filename": "/edge_defs/sounds/DPFIRSHT.lmp", "start": 43007210, "end": 43007245}, {"filename": "/edge_defs/sounds/DPFIRXPL.lmp", "start": 43007245, "end": 43007262}, {"filename": "/edge_defs/sounds/DPFLAME.lmp", "start": 43007262, "end": 43007339}, {"filename": "/edge_defs/sounds/DPFLAMST.lmp", "start": 43007339, "end": 43007353}, {"filename": "/edge_defs/sounds/DPGETPOW.lmp", "start": 43007353, "end": 43007490}, {"filename": "/edge_defs/sounds/DPHOOF.lmp", "start": 43007490, "end": 43007570}, {"filename": "/edge_defs/sounds/DPITEMUP.lmp", "start": 43007570, "end": 43007657}, {"filename": "/edge_defs/sounds/DPITMBK.lmp", "start": 43007657, "end": 43007742}, {"filename": "/edge_defs/sounds/DPKEENDT.lmp", "start": 43007742, "end": 43007848}, {"filename": "/edge_defs/sounds/DPKEENPN.lmp", "start": 43007848, "end": 43007904}, {"filename": "/edge_defs/sounds/DPKNTDTH.lmp", "start": 43007904, "end": 43008027}, {"filename": "/edge_defs/sounds/DPKNTSIT.lmp", "start": 43008027, "end": 43008093}, {"filename": "/edge_defs/sounds/DPMANATK.lmp", "start": 43008093, "end": 43008159}, {"filename": "/edge_defs/sounds/DPMANDTH.lmp", "start": 43008159, "end": 43008237}, {"filename": "/edge_defs/sounds/DPMANSIT.lmp", "start": 43008237, "end": 43008334}, {"filename": "/edge_defs/sounds/DPMETAL.lmp", "start": 43008334, "end": 43008353}, {"filename": "/edge_defs/sounds/DPMNPAIN.lmp", "start": 43008353, "end": 43008413}, {"filename": "/edge_defs/sounds/DPNOWAY.lmp", "start": 43008413, "end": 43008454}, {"filename": "/edge_defs/sounds/DPOOF.lmp", "start": 43008454, "end": 43008473}, {"filename": "/edge_defs/sounds/DPPDIEHI.lmp", "start": 43008473, "end": 43008551}, {"filename": "/edge_defs/sounds/DPPEDTH.lmp", "start": 43008551, "end": 43008660}, {"filename": "/edge_defs/sounds/DPPEPAIN.lmp", "start": 43008660, "end": 43008710}, {"filename": "/edge_defs/sounds/DPPESIT.lmp", "start": 43008710, "end": 43008827}, {"filename": "/edge_defs/sounds/DPPISTOL.lmp", "start": 43008827, "end": 43008845}, {"filename": "/edge_defs/sounds/DPPLASMA.lmp", "start": 43008845, "end": 43008887}, {"filename": "/edge_defs/sounds/DPPLDETH.lmp", "start": 43008887, "end": 43009036}, {"filename": "/edge_defs/sounds/DPPLPAIN.lmp", "start": 43009036, "end": 43009066}, {"filename": "/edge_defs/sounds/DPPODTH1.lmp", "start": 43009066, "end": 43009155}, {"filename": "/edge_defs/sounds/DPPODTH2.lmp", "start": 43009155, "end": 43009244}, {"filename": "/edge_defs/sounds/DPPODTH3.lmp", "start": 43009244, "end": 43009333}, {"filename": "/edge_defs/sounds/DPPOPAIN.lmp", "start": 43009333, "end": 43009371}, {"filename": "/edge_defs/sounds/DPPOSACT.lmp", "start": 43009371, "end": 43009401}, {"filename": "/edge_defs/sounds/DPPOSIT1.lmp", "start": 43009401, "end": 43009512}, {"filename": "/edge_defs/sounds/DPPOSIT2.lmp", "start": 43009512, "end": 43009623}, {"filename": "/edge_defs/sounds/DPPOSIT3.lmp", "start": 43009623, "end": 43009734}, {"filename": "/edge_defs/sounds/DPPSTART.lmp", "start": 43009734, "end": 43009775}, {"filename": "/edge_defs/sounds/DPPSTOP.lmp", "start": 43009775, "end": 43009792}, {"filename": "/edge_defs/sounds/DPPUNCH.lmp", "start": 43009792, "end": 43009829}, {"filename": "/edge_defs/sounds/DPRADIO.lmp", "start": 43009829, "end": 43009881}, {"filename": "/edge_defs/sounds/DPRLAUNC.lmp", "start": 43009881, "end": 43009944}, {"filename": "/edge_defs/sounds/DPRXPLOD.lmp", "start": 43009944, "end": 43010116}, {"filename": "/edge_defs/sounds/DPSAWFUL.lmp", "start": 43010116, "end": 43010144}, {"filename": "/edge_defs/sounds/DPSAWHIT.lmp", "start": 43010144, "end": 43010172}, {"filename": "/edge_defs/sounds/DPSAWIDL.lmp", "start": 43010172, "end": 43010177}, {"filename": "/edge_defs/sounds/DPSAWUP.lmp", "start": 43010177, "end": 43010265}, {"filename": "/edge_defs/sounds/DPSGCOCK.lmp", "start": 43010265, "end": 43010328}, {"filename": "/edge_defs/sounds/DPSGTATK.lmp", "start": 43010328, "end": 43010402}, {"filename": "/edge_defs/sounds/DPSGTDTH.lmp", "start": 43010402, "end": 43010491}, {"filename": "/edge_defs/sounds/DPSGTSIT.lmp", "start": 43010491, "end": 43010602}, {"filename": "/edge_defs/sounds/DPSHOTGN.lmp", "start": 43010602, "end": 43010644}, {"filename": "/edge_defs/sounds/DPSKEACT.lmp", "start": 43010644, "end": 43010684}, {"filename": "/edge_defs/sounds/DPSKEATK.lmp", "start": 43010684, "end": 43010743}, {"filename": "/edge_defs/sounds/DPSKEDTH.lmp", "start": 43010743, "end": 43010823}, {"filename": "/edge_defs/sounds/DPSKEPCH.lmp", "start": 43010823, "end": 43010860}, {"filename": "/edge_defs/sounds/DPSKESIT.lmp", "start": 43010860, "end": 43010966}, {"filename": "/edge_defs/sounds/DPSKESWG.lmp", "start": 43010966, "end": 43011006}, {"filename": "/edge_defs/sounds/DPSKLATK.lmp", "start": 43011006, "end": 43011086}, {"filename": "/edge_defs/sounds/DPSKLDTH.lmp", "start": 43011086, "end": 43011103}, {"filename": "/edge_defs/sounds/DPSLOP.lmp", "start": 43011103, "end": 43011212}, {"filename": "/edge_defs/sounds/DPSPIDTH.lmp", "start": 43011212, "end": 43011325}, {"filename": "/edge_defs/sounds/DPSPISIT.lmp", "start": 43011325, "end": 43011473}, {"filename": "/edge_defs/sounds/DPSSDTH.lmp", "start": 43011473, "end": 43011562}, {"filename": "/edge_defs/sounds/DPSSSIT.lmp", "start": 43011562, "end": 43011673}, {"filename": "/edge_defs/sounds/DPSTNMOV.lmp", "start": 43011673, "end": 43011681}, {"filename": "/edge_defs/sounds/DPSWTCHN.lmp", "start": 43011681, "end": 43011709}, {"filename": "/edge_defs/sounds/DPSWTCHX.lmp", "start": 43011709, "end": 43011738}, {"filename": "/edge_defs/sounds/DPTELEPT.lmp", "start": 43011738, "end": 43011840}, {"filename": "/edge_defs/sounds/DPTINK.lmp", "start": 43011840, "end": 43011892}, {"filename": "/edge_defs/sounds/DPVILACT.lmp", "start": 43011892, "end": 43011947}, {"filename": "/edge_defs/sounds/DPVILATK.lmp", "start": 43011947, "end": 43012010}, {"filename": "/edge_defs/sounds/DPVILDTH.lmp", "start": 43012010, "end": 43012278}, {"filename": "/edge_defs/sounds/DPVILSIT.lmp", "start": 43012278, "end": 43012354}, {"filename": "/edge_defs/sounds/DPVIPAIN.lmp", "start": 43012354, "end": 43012465}, {"filename": "/edge_defs/sounds/DPWPNUP.lmp", "start": 43012465, "end": 43012509}, {"filename": "/edge_defs/sounds/DSACIDFT.ogg", "start": 43012509, "end": 43020059, "audio": 1}, {"filename": "/edge_defs/sounds/DSCRUSH.lmp", "start": 43020059, "end": 43027077}, {"filename": "/edge_defs/sounds/DSDGACT.ogg", "start": 43027077, "end": 43034738, "audio": 1}, {"filename": "/edge_defs/sounds/DSDGATK.ogg", "start": 43034738, "end": 43041544, "audio": 1}, {"filename": "/edge_defs/sounds/DSDGDTH.ogg", "start": 43041544, "end": 43052360, "audio": 1}, {"filename": "/edge_defs/sounds/DSDGPAIN.ogg", "start": 43052360, "end": 43058352, "audio": 1}, {"filename": "/edge_defs/sounds/DSDGSIT.ogg", "start": 43058352, "end": 43064515, "audio": 1}, {"filename": "/edge_defs/sounds/DSFSWAT1.wav", "start": 43064515, "end": 43079859, "audio": 1}, {"filename": "/edge_defs/sounds/DSFSWAT2.wav", "start": 43079859, "end": 43095331, "audio": 1}, {"filename": "/edge_defs/sounds/DSFSWAT3.wav", "start": 43095331, "end": 43107571, "audio": 1}, {"filename": "/edge_defs/sounds/DSFSWAT4.wav", "start": 43107571, "end": 43122937, "audio": 1}, {"filename": "/edge_defs/sounds/DSGLSBRK.wav", "start": 43122937, "end": 43155535, "audio": 1}, {"filename": "/edge_defs/sounds/DSJPDOWN.lmp", "start": 43155535, "end": 43172123}, {"filename": "/edge_defs/sounds/DSJPFLOW.lmp", "start": 43172123, "end": 43176045}, {"filename": "/edge_defs/sounds/DSJPIDLE.lmp", "start": 43176045, "end": 43179012}, {"filename": "/edge_defs/sounds/DSJPMOVE.lmp", "start": 43179012, "end": 43180429}, {"filename": "/edge_defs/sounds/DSJPRISE.lmp", "start": 43180429, "end": 43188249}, {"filename": "/edge_defs/sounds/DSMUCKFT.ogg", "start": 43188249, "end": 43194323, "audio": 1}, {"filename": "/edge_defs/sounds/DSSECRET.ogg", "start": 43194323, "end": 43207164, "audio": 1}, {"filename": "/edge_defs/sounds/DSWATRFT.ogg", "start": 43207164, "end": 43214825, "audio": 1}, {"filename": "/edge_defs/sounds/DSWTDIVE.wav", "start": 43214825, "end": 43237301, "audio": 1}, {"filename": "/edge_defs/sounds/HEARTBT1.ogg", "start": 43237301, "end": 43257656, "audio": 1}, {"filename": "/edge_defs/sprites/ARM3A0.png", "start": 43257656, "end": 43258406}, {"filename": "/edge_defs/sprites/ARM3B0.png", "start": 43258406, "end": 43259084}, {"filename": "/edge_defs/sprites/ARM4A0.png", "start": 43259084, "end": 43259878}, {"filename": "/edge_defs/sprites/ARM4B0.png", "start": 43259878, "end": 43260579}, {"filename": "/edge_defs/sprites/ARM5A0.png", "start": 43260579, "end": 43261082}, {"filename": "/edge_defs/sprites/ARM5B0.png", "start": 43261082, "end": 43261597}, {"filename": "/edge_defs/sprites/BSPHA0.png", "start": 43261597, "end": 43262813}, {"filename": "/edge_defs/sprites/BSPHB0.png", "start": 43262813, "end": 43264034}, {"filename": "/edge_defs/sprites/BSPHC0.png", "start": 43264034, "end": 43265244}, {"filename": "/edge_defs/sprites/BSPHD0.png", "start": 43265244, "end": 43266445}, {"filename": "/edge_defs/sprites/BSPHE0.png", "start": 43266445, "end": 43267726}, {"filename": "/edge_defs/sprites/BSPHF0.png", "start": 43267726, "end": 43269069}, {"filename": "/edge_defs/sprites/BSPHG0.png", "start": 43269069, "end": 43270473}, {"filename": "/edge_defs/sprites/BSPHH0.png", "start": 43270473, "end": 43271818}, {"filename": "/edge_defs/sprites/BSPHI0.png", "start": 43271818, "end": 43273125}, {"filename": "/edge_defs/sprites/BSPHJ0.png", "start": 43273125, "end": 43274392}, {"filename": "/edge_defs/sprites/BSPHK0.png", "start": 43274392, "end": 43275629}, {"filename": "/edge_defs/sprites/GLS1A0.lmp", "start": 43275629, "end": 43275723}, {"filename": "/edge_defs/sprites/GLS2A0.lmp", "start": 43275723, "end": 43275937}, {"filename": "/edge_defs/sprites/GLS3A0.lmp", "start": 43275937, "end": 43276241}, {"filename": "/edge_defs/sprites/GLS4A0.lmp", "start": 43276241, "end": 43276609}, {"filename": "/edge_defs/sprites/GLS5A0.lmp", "start": 43276609, "end": 43277004}, {"filename": "/edge_defs/sprites/GLS6A0.lmp", "start": 43277004, "end": 43277440}, {"filename": "/edge_defs/sprites/GLS7A0.lmp", "start": 43277440, "end": 43277910}, {"filename": "/edge_defs/sprites/GLS8A0.lmp", "start": 43277910, "end": 43278342}, {"filename": "/edge_defs/sprites/GLS9A0.lmp", "start": 43278342, "end": 43278705}, {"filename": "/edge_defs/sprites/JPCKA0.lmp", "start": 43278705, "end": 43279521}, {"filename": "/edge_defs/sprites/JPCKB0.lmp", "start": 43279521, "end": 43280339}, {"filename": "/edge_defs/sprites/JPCKC0.lmp", "start": 43280339, "end": 43281157}, {"filename": "/edge_defs/sprites/LVASA0.png", "start": 43281157, "end": 43282455}, {"filename": "/edge_defs/sprites/LVASB0.png", "start": 43282455, "end": 43283838}, {"filename": "/edge_defs/sprites/LVASC0.png", "start": 43283838, "end": 43285192}, {"filename": "/edge_defs/sprites/LVASD0.png", "start": 43285192, "end": 43286492}, {"filename": "/edge_defs/sprites/LVASE0.png", "start": 43286492, "end": 43287761}, {"filename": "/edge_defs/sprites/LVASF0.png", "start": 43287761, "end": 43288984}, {"filename": "/edge_defs/sprites/MUDSA0.png", "start": 43288984, "end": 43290194}, {"filename": "/edge_defs/sprites/MUDSB0.png", "start": 43290194, "end": 43291406}, {"filename": "/edge_defs/sprites/MUDSC0.png", "start": 43291406, "end": 43292597}, {"filename": "/edge_defs/sprites/MUDSD0.png", "start": 43292597, "end": 43293782}, {"filename": "/edge_defs/sprites/MUDSE0.png", "start": 43293782, "end": 43295033}, {"filename": "/edge_defs/sprites/MUDSF0.png", "start": 43295033, "end": 43296274}, {"filename": "/edge_defs/sprites/MUDSG0.png", "start": 43296274, "end": 43297523}, {"filename": "/edge_defs/sprites/MUDSH0.png", "start": 43297523, "end": 43298745}, {"filename": "/edge_defs/sprites/NVSCA0.lmp", "start": 43298745, "end": 43299349}, {"filename": "/edge_defs/sprites/NVSCB0.lmp", "start": 43299349, "end": 43299953}, {"filename": "/edge_defs/sprites/PLAYX1.lmp", "start": 43299953, "end": 43300876}, {"filename": "/edge_defs/sprites/PLAYX2X8.lmp", "start": 43300876, "end": 43302092}, {"filename": "/edge_defs/sprites/PLAYX3X7.lmp", "start": 43302092, "end": 43303487}, {"filename": "/edge_defs/sprites/PLAYX4X6.lmp", "start": 43303487, "end": 43304616}, {"filename": "/edge_defs/sprites/PLAYX5.lmp", "start": 43304616, "end": 43305418}, {"filename": "/edge_defs/sprites/PLAYY1.lmp", "start": 43305418, "end": 43306366}, {"filename": "/edge_defs/sprites/PLAYY2Y8.lmp", "start": 43306366, "end": 43307594}, {"filename": "/edge_defs/sprites/PLAYY3Y7.lmp", "start": 43307594, "end": 43308980}, {"filename": "/edge_defs/sprites/PLAYY4Y6.lmp", "start": 43308980, "end": 43310118}, {"filename": "/edge_defs/sprites/PLAYY5.lmp", "start": 43310118, "end": 43310915}, {"filename": "/edge_defs/sprites/PLS1A0.lmp", "start": 43310915, "end": 43311300}, {"filename": "/edge_defs/sprites/PLS1B0.lmp", "start": 43311300, "end": 43311699}, {"filename": "/edge_defs/sprites/PLS1C0.lmp", "start": 43311699, "end": 43312084}, {"filename": "/edge_defs/sprites/PLS1D0.lmp", "start": 43312084, "end": 43312483}, {"filename": "/edge_defs/sprites/PLS1E0.lmp", "start": 43312483, "end": 43314841}, {"filename": "/edge_defs/sprites/PLS1F0.lmp", "start": 43314841, "end": 43317199}, {"filename": "/edge_defs/sprites/PLS1G0.lmp", "start": 43317199, "end": 43319426}, {"filename": "/edge_defs/sprites/PLS2A0.lmp", "start": 43319426, "end": 43319642}, {"filename": "/edge_defs/sprites/PLS2B0.lmp", "start": 43319642, "end": 43319885}, {"filename": "/edge_defs/sprites/PLS2C0.lmp", "start": 43319885, "end": 43320097}, {"filename": "/edge_defs/sprites/PLS2D0.lmp", "start": 43320097, "end": 43320487}, {"filename": "/edge_defs/sprites/PLS2E0.lmp", "start": 43320487, "end": 43321181}, {"filename": "/edge_defs/sprites/PRT1A0.png", "start": 43321181, "end": 43322053}, {"filename": "/edge_defs/sprites/PRT2A0.png", "start": 43322053, "end": 43322925}, {"filename": "/edge_defs/sprites/PRT3A0.png", "start": 43322925, "end": 43323054}, {"filename": "/edge_defs/sprites/SLDGA0.png", "start": 43323054, "end": 43324270}, {"filename": "/edge_defs/sprites/SLDGB0.png", "start": 43324270, "end": 43325488}, {"filename": "/edge_defs/sprites/SLDGC0.png", "start": 43325488, "end": 43326684}, {"filename": "/edge_defs/sprites/SLDGD0.png", "start": 43326684, "end": 43327871}, {"filename": "/edge_defs/sprites/SLDGE0.png", "start": 43327871, "end": 43329122}, {"filename": "/edge_defs/sprites/SLDGF0.png", "start": 43329122, "end": 43330363}, {"filename": "/edge_defs/sprites/SLDGG0.png", "start": 43330363, "end": 43331612}, {"filename": "/edge_defs/sprites/SLDGH0.png", "start": 43331612, "end": 43332834}, {"filename": "/edge_defs/sprites/SLIMA0.png", "start": 43332834, "end": 43334035}, {"filename": "/edge_defs/sprites/SLIMB0.png", "start": 43334035, "end": 43335240}, {"filename": "/edge_defs/sprites/SLIMC0.png", "start": 43335240, "end": 43336427}, {"filename": "/edge_defs/sprites/SLIMD0.png", "start": 43336427, "end": 43337605}, {"filename": "/edge_defs/sprites/SLIME0.png", "start": 43337605, "end": 43338850}, {"filename": "/edge_defs/sprites/SLIMF0.png", "start": 43338850, "end": 43340086}, {"filename": "/edge_defs/sprites/SLIMG0.png", "start": 43340086, "end": 43341331}, {"filename": "/edge_defs/sprites/SLIMH0.png", "start": 43341331, "end": 43342547}, {"filename": "/edge_defs/sprites/SPSHA0.png", "start": 43342547, "end": 43343764}, {"filename": "/edge_defs/sprites/SPSHB0.png", "start": 43343764, "end": 43344984}, {"filename": "/edge_defs/sprites/SPSHC0.png", "start": 43344984, "end": 43346195}, {"filename": "/edge_defs/sprites/SPSHD0.png", "start": 43346195, "end": 43347396}, {"filename": "/edge_defs/sprites/SPSHE0.png", "start": 43347396, "end": 43348676}, {"filename": "/edge_defs/sprites/SPSHF0.png", "start": 43348676, "end": 43350027}, {"filename": "/edge_defs/sprites/SPSHG0.png", "start": 43350027, "end": 43351434}, {"filename": "/edge_defs/sprites/SPSHH0.png", "start": 43351434, "end": 43352786}, {"filename": "/edge_defs/sprites/SPSHI0.png", "start": 43352786, "end": 43354097}, {"filename": "/edge_defs/sprites/SPSHJ0.png", "start": 43354097, "end": 43355365}, {"filename": "/edge_defs/sprites/SPSHK0.png", "start": 43355365, "end": 43356602}, {"filename": "/edge_defs/sprites/TSTPA0.png", "start": 43356602, "end": 43357727}, {"filename": "/edge_defs/sprites/TSTPB0.lmp", "start": 43357727, "end": 43358069}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA1.png", "start": 43358069, "end": 43359349}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA2.png", "start": 43359349, "end": 43360902}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA3.png", "start": 43360902, "end": 43362533}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA4.png", "start": 43362533, "end": 43364066}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA5.png", "start": 43364066, "end": 43365252}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA6.png", "start": 43365252, "end": 43366768}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA7.png", "start": 43366768, "end": 43368361}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDA8.png", "start": 43368361, "end": 43369879}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB1.png", "start": 43369879, "end": 43371109}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB2.png", "start": 43371109, "end": 43372629}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB3.png", "start": 43372629, "end": 43374236}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB4.png", "start": 43374236, "end": 43375769}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB5.png", "start": 43375769, "end": 43376979}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB6.png", "start": 43376979, "end": 43378477}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB7.png", "start": 43378477, "end": 43380069}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDB8.png", "start": 43380069, "end": 43381583}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC1.png", "start": 43381583, "end": 43382880}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC2.png", "start": 43382880, "end": 43384386}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC3.png", "start": 43384386, "end": 43385957}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC4.png", "start": 43385957, "end": 43387488}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC5.png", "start": 43387488, "end": 43388825}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC6.png", "start": 43388825, "end": 43390345}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC7.png", "start": 43390345, "end": 43391881}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDC8.png", "start": 43391881, "end": 43393370}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD1.png", "start": 43393370, "end": 43394681}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD2.png", "start": 43394681, "end": 43396199}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD3.png", "start": 43396199, "end": 43397787}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD4.png", "start": 43397787, "end": 43399312}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD5.png", "start": 43399312, "end": 43400638}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD6.png", "start": 43400638, "end": 43402180}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD7.png", "start": 43402180, "end": 43403753}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDD8.png", "start": 43403753, "end": 43405256}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE1.png", "start": 43405256, "end": 43406618}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE2.png", "start": 43406618, "end": 43408135}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE3.png", "start": 43408135, "end": 43409683}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE4.png", "start": 43409683, "end": 43411281}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE5.png", "start": 43411281, "end": 43412719}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE6.png", "start": 43412719, "end": 43414269}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE7.png", "start": 43414269, "end": 43415823}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDE8.png", "start": 43415823, "end": 43417382}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF1.png", "start": 43417382, "end": 43418779}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF2.png", "start": 43418779, "end": 43420350}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF3.png", "start": 43420350, "end": 43421952}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF4.png", "start": 43421952, "end": 43423518}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF5.png", "start": 43423518, "end": 43424921}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF6.png", "start": 43424921, "end": 43426438}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF7.png", "start": 43426438, "end": 43428034}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDF8.png", "start": 43428034, "end": 43429642}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG1.png", "start": 43429642, "end": 43431031}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG2.png", "start": 43431031, "end": 43432619}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG3.png", "start": 43432619, "end": 43434263}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG4.png", "start": 43434263, "end": 43435783}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG5.png", "start": 43435783, "end": 43437133}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG6.png", "start": 43437133, "end": 43438654}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG7.png", "start": 43438654, "end": 43440276}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDG8.png", "start": 43440276, "end": 43441846}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH1.png", "start": 43441846, "end": 43443156}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH2.png", "start": 43443156, "end": 43444687}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH3.png", "start": 43444687, "end": 43446279}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH4.png", "start": 43446279, "end": 43447762}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH5.png", "start": 43447762, "end": 43449056}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH6.png", "start": 43449056, "end": 43450523}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH7.png", "start": 43450523, "end": 43452101}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDH8.png", "start": 43452101, "end": 43453670}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDI0.png", "start": 43453670, "end": 43455360}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDJ0.png", "start": 43455360, "end": 43457142}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDK0.png", "start": 43457142, "end": 43458888}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDL0.png", "start": 43458888, "end": 43460608}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDM0.png", "start": 43460608, "end": 43462335}, {"filename": "/edge_defs/sprites/mbf_dog/MBFDN0.png", "start": 43462335, "end": 43464074}, {"filename": "/edge_defs/textures/FUZZMAP8.png", "start": 43464074, "end": 43478874}, {"filename": "/edge_defs/textures/PORTAL7A.jpg", "start": 43478874, "end": 43500992}, {"filename": "/edge_defs/textures/PORTAL7B.jpg", "start": 43500992, "end": 43519345}, {"filename": "/edge_defs/textures/PORTAL7C.jpg", "start": 43519345, "end": 43534836}, {"filename": "/edge_defs/textures/PORTAL7D.jpg", "start": 43534836, "end": 43550130}, {"filename": "/edge_defs/textures/PORTAL7E.jpg", "start": 43550130, "end": 43564997}, {"filename": "/edge_defs/textures/PORTAL7F.jpg", "start": 43564997, "end": 43581998}, {"filename": "/edge_defs/textures/PORTAL7G.jpg", "start": 43581998, "end": 43602706}, {"filename": "/edge_defs/ttf/ECFONT01.ttf", "start": 43602706, "end": 43640186}, {"filename": "/edge_defs/ttf/ECFONT02.ttf", "start": 43640186, "end": 43828678}, {"filename": "/edge_defs/ttf/ECFONT03.ttf", "start": 43828678, "end": 43893766}, {"filename": "/edge_defs/version.txt", "start": 43893766, "end": 43893770}, {"filename": "/freedoom2.wad", "start": 43893770, "end": 72681518}, {"filename": "/overlays/.gitignore", "start": 72681518, "end": 72681518}, {"filename": "/overlays/Grill-1x.png", "start": 72681518, "end": 72688854}, {"filename": "/overlays/Grill-2x.png", "start": 72688854, "end": 72696243}, {"filename": "/overlays/Lines-1x.png", "start": 72696243, "end": 72696407}, {"filename": "/overlays/Lines-2x.png", "start": 72696407, "end": 72696581}, {"filename": "/overlays/Vertical-1x.png", "start": 72696581, "end": 72703884}, {"filename": "/overlays/Vertical-2x.png", "start": 72703884, "end": 72711219}, {"filename": "/soundfont/16-Bit Game Station.sf3", "start": 72711219, "end": 74063911}, {"filename": "/soundfont/ChipFreak.sf3", "start": 74063911, "end": 74127585}, {"filename": "/soundfont/ProtoSquare!.sf3", "start": 74127585, "end": 74264511}], "remote_package_size": 51538521, "package_uuid": "sha256-358563932e71d32ecde6de7d83c34b1a18851b4d0f86265efaf9bcfdaa14e040"});

  })();
// end include: /home/dasho/Desktop/EDGE-classic/web/site/edge-classic-data.js


var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var readAsync, readBinary;

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  try {
    scriptDirectory = new URL('.', _scriptName).href; // includes trailing slash
  } catch {
    // Must be a `blob:` or `data:` URL (e.g. `blob:http://site.com/etc/etc`), we cannot
    // infer anything from them.
  }

  {
// include: web_or_worker_shell_read.js
readAsync = async (url) => {
    var response = await fetch(url, { credentials: 'same-origin' });
    if (response.ok) {
      return response.arrayBuffer();
    }
    throw new Error(response.status + ' : ' + response.url);
  };
// end include: web_or_worker_shell_read.js
  }
} else
{
}

var out = console.log.bind(console);
var err = console.error.bind(console);

// end include: shell.js

// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
// don't define it at all in release modes.  This matches the behaviour of
// MINIMAL_RUNTIME.
// TODO(sbc): Make this the default even without STRICT enabled.
/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    // This build was created without ASSERTIONS defined.  `assert()` should not
    // ever be called in this configuration but in case there are callers in
    // the wild leave this simple abort() implementation here for now.
    abort(text);
  }
}

// Memory management

var HEAP,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/* BigInt64Array type is not correctly defined in closure
/** not-@type {!BigInt64Array} */
  HEAP64,
/* BigUint64Array type is not correctly defined in closure
/** not-t@type {!BigUint64Array} */
  HEAPU64,
/** @type {!Float64Array} */
  HEAPF64;

var runtimeInitialized = false;

/**
 * Indicates whether filename is delivered via file protocol (as opposed to http/https)
 * @noinline
 */
var isFileURI = (filename) => filename.startsWith('file://');

// include: runtime_shared.js
// include: runtime_stack_check.js
// end include: runtime_stack_check.js
// include: runtime_exceptions.js
// end include: runtime_exceptions.js
// include: runtime_debug.js
// end include: runtime_debug.js
// include: memoryprofiler.js
// end include: memoryprofiler.js


function updateMemoryViews() {
  var b = wasmMemory.buffer;
  HEAP8 = new Int8Array(b);
  HEAP16 = new Int16Array(b);
  HEAPU8 = new Uint8Array(b);
  HEAPU16 = new Uint16Array(b);
  HEAP32 = new Int32Array(b);
  HEAPU32 = new Uint32Array(b);
  HEAPF32 = new Float32Array(b);
  HEAPF64 = new Float64Array(b);
  HEAP64 = new BigInt64Array(b);
  HEAPU64 = new BigUint64Array(b);
}

// end include: runtime_shared.js
function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  // Begin ATPRERUNS hooks
  callRuntimeCallbacks(onPreRuns);
  // End ATPRERUNS hooks
}

function initRuntime() {
  runtimeInitialized = true;

  // Begin ATINITS hooks
  if (!Module['noFSInit'] && !FS.initialized) FS.init();
TTY.init();
  // End ATINITS hooks

  wasmExports['__wasm_call_ctors']();

  // Begin ATPOSTCTORS hooks
  FS.ignorePermissions = false;
  // End ATPOSTCTORS hooks
}

function preMain() {
  // No ATMAINS hooks
}

function postRun() {
   // PThreads reuse the runtime from the main thread.

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  // Begin ATPOSTRUNS hooks
  callRuntimeCallbacks(onPostRuns);
  // End ATPOSTRUNS hooks
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  Module['monitorRunDependencies']?.(runDependencies);

}

function removeRunDependency(id) {
  runDependencies--;

  Module['monitorRunDependencies']?.(runDependencies);

  if (runDependencies == 0) {
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  Module['onAbort']?.(what);

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;

  what += '. Build with -sASSERTIONS for more info.';

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // definition for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

var wasmBinaryFile;

function findWasmBinary() {
    return locateFile('edge-classic.wasm');
}

function getBinarySync(file) {
  if (file == wasmBinaryFile && wasmBinary) {
    return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
    return readBinary(file);
  }
  throw 'both async and sync fetching of the wasm failed';
}

async function getWasmBinary(binaryFile) {
  // If we don't have the binary yet, load it asynchronously using readAsync.
  if (!wasmBinary) {
    // Fetch the binary using readAsync
    try {
      var response = await readAsync(binaryFile);
      return new Uint8Array(response);
    } catch {
      // Fall back to getBinarySync below;
    }
  }

  // Otherwise, getBinarySync should be able to get it synchronously
  return getBinarySync(binaryFile);
}

async function instantiateArrayBuffer(binaryFile, imports) {
  try {
    var binary = await getWasmBinary(binaryFile);
    var instance = await WebAssembly.instantiate(binary, imports);
    return instance;
  } catch (reason) {
    err(`failed to asynchronously prepare wasm: ${reason}`);

    abort(reason);
  }
}

async function instantiateAsync(binary, binaryFile, imports) {
  if (!binary && typeof WebAssembly.instantiateStreaming == 'function'
     ) {
    try {
      var response = fetch(binaryFile, { credentials: 'same-origin' });
      var instantiationResult = await WebAssembly.instantiateStreaming(response, imports);
      return instantiationResult;
    } catch (reason) {
      // We expect the most common failure cause to be a bad MIME type for the binary,
      // in which case falling back to ArrayBuffer instantiation should work.
      err(`wasm streaming compile failed: ${reason}`);
      err('falling back to ArrayBuffer instantiation');
      // fall back of instantiateArrayBuffer below
    };
  }
  return instantiateArrayBuffer(binaryFile, imports);
}

function getWasmImports() {
  // prepare imports
  return {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports,
  }
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
async function createWasm() {
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    wasmExports = instance.exports;

    wasmExports = Asyncify.instrumentWasmExports(wasmExports);

    

    wasmMemory = wasmExports['memory'];
    
    updateMemoryViews();

    wasmTable = wasmExports['__indirect_function_table'];
    

    removeRunDependency('wasm-instantiate');
    return wasmExports;
  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above PTHREADS-enabled path.
    return receiveInstance(result['instance']);
  }

  var info = getWasmImports();

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module['instantiateWasm']) {
    return new Promise((resolve, reject) => {
        Module['instantiateWasm'](info, (mod, inst) => {
          resolve(receiveInstance(mod, inst));
        });
    });
  }

  wasmBinaryFile ??= findWasmBinary();
  try {
    var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
    var exports = receiveInstantiationResult(result);
    return exports;
  } catch (e) {
    // If instantiation fails, reject the module ready promise.
    readyPromiseReject(e);
    return Promise.reject(e);
  }
}

// end include: preamble.js

// Begin JS library code


  class ExitStatus {
      name = 'ExitStatus';
      constructor(status) {
        this.message = `Program terminated with exit(${status})`;
        this.status = status;
      }
    }

  var callRuntimeCallbacks = (callbacks) => {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    };
  var onPostRuns = [];
  var addOnPostRun = (cb) => onPostRuns.push(cb);

  var onPreRuns = [];
  var addOnPreRun = (cb) => onPreRuns.push(cb);


  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': return HEAP8[ptr];
      case 'i8': return HEAP8[ptr];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP64[((ptr)>>3)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      case '*': return HEAPU32[((ptr)>>2)];
      default: abort(`invalid type for getValue: ${type}`);
    }
  }

  var noExitRuntime = true;

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': HEAP8[ptr] = value; break;
      case 'i8': HEAP8[ptr] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': HEAP64[((ptr)>>3)] = BigInt(value); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      case '*': HEAPU32[((ptr)>>2)] = value; break;
      default: abort(`invalid type for setValue: ${type}`);
    }
  }

  var stackRestore = (val) => __emscripten_stack_restore(val);

  var stackSave = () => _emscripten_stack_get_current();

  var PATH = {
  isAbs:(path) => path.charAt(0) === '/',
  splitPath:(filename) => {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },
  normalizeArray:(parts, allowAboveRoot) => {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },
  normalize:(path) => {
        var isAbsolute = PATH.isAbs(path),
            trailingSlash = path.slice(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },
  dirname:(path) => {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.slice(0, -1);
        }
        return root + dir;
      },
  basename:(path) => path && path.match(/([^\/]+|\/)\/*$/)[1],
  join:(...paths) => PATH.normalize(paths.join('/')),
  join2:(l, r) => PATH.normalize(l + '/' + r),
  };
  
  var initRandomFill = () => {
  
      return (view) => crypto.getRandomValues(view);
    };
  var randomFill = (view) => {
      // Lazily init on the first invocation.
      (randomFill = initRandomFill())(view);
    };
  
  
  
  var PATH_FS = {
  resolve:(...args) => {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? args[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path != 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = PATH.isAbs(path);
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },
  relative:(from, to) => {
        from = PATH_FS.resolve(from).slice(1);
        to = PATH_FS.resolve(to).slice(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      },
  };
  
  
  var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;
  
    /**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number=} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */
  var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.  Also, use the length info to avoid running tiny
      // strings through TextDecoder, since .subarray() allocates garbage.
      // (As a tiny code save trick, compare endPtr against endIdx using a negation,
      // so that undefined/NaN means Infinity)
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = '';
      // If building with TextDecoder, we have already computed the string length
      // above, so test loop end condition against that
      while (idx < endPtr) {
        // For UTF8 byte structure, see:
        // http://en.wikipedia.org/wiki/UTF-8#Description
        // https://www.ietf.org/rfc/rfc2279.txt
        // https://tools.ietf.org/html/rfc3629
        var u0 = heapOrArray[idx++];
        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 0xF0) == 0xE0) {
          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
        }
  
        if (u0 < 0x10000) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        }
      }
      return str;
    };
  
  var FS_stdin_getChar_buffer = [];
  
  var lengthBytesUTF8 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var c = str.charCodeAt(i); // possibly a lead surrogate
        if (c <= 0x7F) {
          len++;
        } else if (c <= 0x7FF) {
          len += 2;
        } else if (c >= 0xD800 && c <= 0xDFFF) {
          len += 4; ++i;
        } else {
          len += 3;
        }
      }
      return len;
    };
  
  var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
      // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
      // undefined and false each don't write out any bytes.
      if (!(maxBytesToWrite > 0))
        return 0;
  
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
        // and https://www.ietf.org/rfc/rfc2279.txt
        // and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) {
          var u1 = str.charCodeAt(++i);
          u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
        }
        if (u <= 0x7F) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 0x7FF) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 0xC0 | (u >> 6);
          heap[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 0xE0 | (u >> 12);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        } else {
          if (outIdx + 3 >= endIdx) break;
          heap[outIdx++] = 0xF0 | (u >> 18);
          heap[outIdx++] = 0x80 | ((u >> 12) & 63);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        }
      }
      // Null-terminate the pointer to the buffer.
      heap[outIdx] = 0;
      return outIdx - startIdx;
    };
  /** @type {function(string, boolean=, number=)} */
  var intArrayFromString = (stringy, dontAddNull, length) => {
      var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
      var u8array = new Array(len);
      var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
      if (dontAddNull) u8array.length = numBytesWritten;
      return u8array;
    };
  var FS_stdin_getChar = () => {
      if (!FS_stdin_getChar_buffer.length) {
        var result = null;
        if (typeof window != 'undefined' &&
          typeof window.prompt == 'function') {
          // Browser.
          result = window.prompt('Input: ');  // returns null on cancel
          if (result !== null) {
            result += '\n';
          }
        } else
        {}
        if (!result) {
          return null;
        }
        FS_stdin_getChar_buffer = intArrayFromString(result, true);
      }
      return FS_stdin_getChar_buffer.shift();
    };
  var TTY = {
  ttys:[],
  init() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process.stdin.setEncoding('utf8');
        // }
      },
  shutdown() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process.stdin.pause();
        // }
      },
  register(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },
  stream_ops:{
  open(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },
  close(stream) {
          // flush any pending line data
          stream.tty.ops.fsync(stream.tty);
        },
  fsync(stream) {
          stream.tty.ops.fsync(stream.tty);
        },
  read(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.atime = Date.now();
          }
          return bytesRead;
        },
  write(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.mtime = stream.node.ctime = Date.now();
          }
          return i;
        },
  },
  default_tty_ops:{
  get_char(tty) {
          return FS_stdin_getChar();
        },
  put_char(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },
  fsync(tty) {
          if (tty.output?.length > 0) {
            out(UTF8ArrayToString(tty.output));
            tty.output = [];
          }
        },
  ioctl_tcgets(tty) {
          // typical setting
          return {
            c_iflag: 25856,
            c_oflag: 5,
            c_cflag: 191,
            c_lflag: 35387,
            c_cc: [
              0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a, 0x00,
              0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            ]
          };
        },
  ioctl_tcsets(tty, optional_actions, data) {
          // currently just ignore
          return 0;
        },
  ioctl_tiocgwinsz(tty) {
          return [24, 80];
        },
  },
  default_tty1_ops:{
  put_char(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },
  fsync(tty) {
          if (tty.output?.length > 0) {
            err(UTF8ArrayToString(tty.output));
            tty.output = [];
          }
        },
  },
  };
  
  
  var mmapAlloc = (size) => {
      abort();
    };
  var MEMFS = {
  ops_table:null,
  mount(mount) {
        return MEMFS.createNode(null, '/', 16895, 0);
      },
  createNode(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        MEMFS.ops_table ||= {
          dir: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              lookup: MEMFS.node_ops.lookup,
              mknod: MEMFS.node_ops.mknod,
              rename: MEMFS.node_ops.rename,
              unlink: MEMFS.node_ops.unlink,
              rmdir: MEMFS.node_ops.rmdir,
              readdir: MEMFS.node_ops.readdir,
              symlink: MEMFS.node_ops.symlink
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek
            }
          },
          file: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek,
              read: MEMFS.stream_ops.read,
              write: MEMFS.stream_ops.write,
              mmap: MEMFS.stream_ops.mmap,
              msync: MEMFS.stream_ops.msync
            }
          },
          link: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              readlink: MEMFS.node_ops.readlink
            },
            stream: {}
          },
          chrdev: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: FS.chrdev_stream_ops
          }
        };
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.atime = node.mtime = node.ctime = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.atime = parent.mtime = parent.ctime = node.atime;
        }
        return node;
      },
  getFileDataAsTypedArray(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },
  expandFileStorage(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },
  resizeFileStorage(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },
  node_ops:{
  getattr(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.atime);
          attr.mtime = new Date(node.mtime);
          attr.ctime = new Date(node.ctime);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },
  setattr(node, attr) {
          for (const key of ["mode", "atime", "mtime", "ctime"]) {
            if (attr[key] != null) {
              node[key] = attr[key];
            }
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },
  lookup(parent, name) {
          throw MEMFS.doesNotExistError;
        },
  mknod(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },
  rename(old_node, new_dir, new_name) {
          var new_node;
          try {
            new_node = FS.lookupNode(new_dir, new_name);
          } catch (e) {}
          if (new_node) {
            if (FS.isDir(old_node.mode)) {
              // if we're overwriting a directory at new_name, make sure it's empty.
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
            FS.hashRemoveNode(new_node);
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          new_dir.contents[new_name] = old_node;
          old_node.name = new_name;
          new_dir.ctime = new_dir.mtime = old_node.parent.ctime = old_node.parent.mtime = Date.now();
        },
  unlink(parent, name) {
          delete parent.contents[name];
          parent.ctime = parent.mtime = Date.now();
        },
  rmdir(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.ctime = parent.mtime = Date.now();
        },
  readdir(node) {
          return ['.', '..', ...Object.keys(node.contents)];
        },
  symlink(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0o777 | 40960, 0);
          node.link = oldpath;
          return node;
        },
  readlink(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        },
  },
  stream_ops:{
  read(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },
  write(stream, buffer, offset, length, position, canOwn) {
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.mtime = node.ctime = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },
  llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
  mmap(stream, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the
            // buffer we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            if (contents) {
              // Try to avoid unnecessary slices.
              if (position > 0 || position + length < contents.length) {
                if (contents.subarray) {
                  contents = contents.subarray(position, position + length);
                } else {
                  contents = Array.prototype.slice.call(contents, position, position + length);
                }
              }
              HEAP8.set(contents, ptr);
            }
          }
          return { ptr, allocated };
        },
  msync(stream, buffer, offset, length, mmapFlags) {
          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        },
  },
  };
  
  var asyncLoad = async (url) => {
      var arrayBuffer = await readAsync(url);
      return new Uint8Array(arrayBuffer);
    };
  asyncLoad.isAsync = true;
  
  
  var FS_createDataFile = (...args) => FS.createDataFile(...args);
  
  var preloadPlugins = [];
  var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {
      // Ensure plugins are ready.
      if (typeof Browser != 'undefined') Browser.init();
  
      var handled = false;
      preloadPlugins.forEach((plugin) => {
        if (handled) return;
        if (plugin['canHandle'](fullname)) {
          plugin['handle'](byteArray, fullname, finish, onerror);
          handled = true;
        }
      });
      return handled;
    };
  var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
      // TODO we should allow people to just pass in a complete filename instead
      // of parent and name being that we just join them anyways
      var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
      var dep = getUniqueRunDependency(`cp ${fullname}`); // might have several active requests for the same fullname
      function processData(byteArray) {
        function finish(byteArray) {
          preFinish?.();
          if (!dontCreateFile) {
            FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
          }
          onload?.();
          removeRunDependency(dep);
        }
        if (FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {
          onerror?.();
          removeRunDependency(dep);
        })) {
          return;
        }
        finish(byteArray);
      }
      addRunDependency(dep);
      if (typeof url == 'string') {
        asyncLoad(url).then(processData, onerror);
      } else {
        processData(url);
      }
    };
  
  var FS_modeStringToFlags = (str) => {
      var flagModes = {
        'r': 0,
        'r+': 2,
        'w': 512 | 64 | 1,
        'w+': 512 | 64 | 2,
        'a': 1024 | 64 | 1,
        'a+': 1024 | 64 | 2,
      };
      var flags = flagModes[str];
      if (typeof flags == 'undefined') {
        throw new Error(`Unknown file open mode: ${str}`);
      }
      return flags;
    };
  
  var FS_getMode = (canRead, canWrite) => {
      var mode = 0;
      if (canRead) mode |= 292 | 73;
      if (canWrite) mode |= 146;
      return mode;
    };
  
  
  
  
  
  
  var IDBFS = {
  dbs:{
  },
  indexedDB:() => {
        if (typeof indexedDB != 'undefined') return indexedDB;
        var ret = null;
        if (typeof window == 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        return ret;
      },
  DB_VERSION:21,
  DB_STORE_NAME:"FILE_DATA",
  queuePersist:(mount) => {
        function onPersistComplete() {
          if (mount.idbPersistState === 'again') startPersist(); // If a new sync request has appeared in between, kick off a new sync
          else mount.idbPersistState = 0; // Otherwise reset sync state back to idle to wait for a new sync later
        }
        function startPersist() {
          mount.idbPersistState = 'idb'; // Mark that we are currently running a sync operation
          IDBFS.syncfs(mount, /*populate:*/false, onPersistComplete);
        }
  
        if (!mount.idbPersistState) {
          // Programs typically write/copy/move multiple files in the in-memory
          // filesystem within a single app frame, so when a filesystem sync
          // command is triggered, do not start it immediately, but only after
          // the current frame is finished. This way all the modified files
          // inside the main loop tick will be batched up to the same sync.
          mount.idbPersistState = setTimeout(startPersist, 0);
        } else if (mount.idbPersistState === 'idb') {
          // There is an active IndexedDB sync operation in-flight, but we now
          // have accumulated more files to sync. We should therefore queue up
          // a new sync after the current one finishes so that all writes
          // will be properly persisted.
          mount.idbPersistState = 'again';
        }
      },
  mount:(mount) => {
        // reuse core MEMFS functionality
        var mnt = MEMFS.mount(mount);
        // If the automatic IDBFS persistence option has been selected, then automatically persist
        // all modifications to the filesystem as they occur.
        if (mount?.opts?.autoPersist) {
          mnt.idbPersistState = 0; // IndexedDB sync starts in idle state
          var memfs_node_ops = mnt.node_ops;
          mnt.node_ops = {...mnt.node_ops}; // Clone node_ops to inject write tracking
          mnt.node_ops.mknod = (parent, name, mode, dev) => {
            var node = memfs_node_ops.mknod(parent, name, mode, dev);
            // Propagate injected node_ops to the newly created child node
            node.node_ops = mnt.node_ops;
            // Remember for each IDBFS node which IDBFS mount point they came from so we know which mount to persist on modification.
            node.idbfs_mount = mnt.mount;
            // Remember original MEMFS stream_ops for this node
            node.memfs_stream_ops = node.stream_ops;
            // Clone stream_ops to inject write tracking
            node.stream_ops = {...node.stream_ops};
  
            // Track all file writes
            node.stream_ops.write = (stream, buffer, offset, length, position, canOwn) => {
              // This file has been modified, we must persist IndexedDB when this file closes
              stream.node.isModified = true;
              return node.memfs_stream_ops.write(stream, buffer, offset, length, position, canOwn);
            };
  
            // Persist IndexedDB on file close
            node.stream_ops.close = (stream) => {
              var n = stream.node;
              if (n.isModified) {
                IDBFS.queuePersist(n.idbfs_mount);
                n.isModified = false;
              }
              if (n.memfs_stream_ops.close) return n.memfs_stream_ops.close(stream);
            };
  
            return node;
          };
          // Also kick off persisting the filesystem on other operations that modify the filesystem.
          mnt.node_ops.mkdir   = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.mkdir(...args));
          mnt.node_ops.rmdir   = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.rmdir(...args));
          mnt.node_ops.symlink = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.symlink(...args));
          mnt.node_ops.unlink  = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.unlink(...args));
          mnt.node_ops.rename  = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.rename(...args));
        }
        return mnt;
      },
  syncfs:(mount, populate, callback) => {
        IDBFS.getLocalSet(mount, (err, local) => {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, (err, remote) => {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },
  quit:() => {
        Object.values(IDBFS.dbs).forEach((value) => value.close());
        IDBFS.dbs = {};
      },
  getDB:(name, callback) => {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = (e) => {
          var db = /** @type {IDBDatabase} */ (e.target.result);
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = () => {
          db = /** @type {IDBDatabase} */ (req.result);
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = (e) => {
          callback(e.target.error);
          e.preventDefault();
        };
      },
  getLocalSet:(mount, callback) => {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return (p) => PATH.join2(root, p);
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push(...FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { 'timestamp': stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },
  getRemoteSet:(mount, callback) => {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, (err, db) => {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = (e) => {
              callback(e.target.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = (event) => {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db, entries });
              }
  
              entries[cursor.primaryKey] = { 'timestamp': cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },
  loadLocalEntry:(path, callback) => {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { 'timestamp': stat.mtime, 'mode': stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { 'timestamp': stat.mtime, 'mode': stat.mode, 'contents': node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },
  storeLocalEntry:(path, entry, callback) => {
        try {
          if (FS.isDir(entry['mode'])) {
            FS.mkdirTree(path, entry['mode']);
          } else if (FS.isFile(entry['mode'])) {
            FS.writeFile(path, entry['contents'], { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry['mode']);
          FS.utime(path, entry['timestamp'], entry['timestamp']);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },
  removeLocalEntry:(path, callback) => {
        try {
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },
  loadRemoteEntry:(store, path, callback) => {
        var req = store.get(path);
        req.onsuccess = (event) => callback(null, event.target.result);
        req.onerror = (e) => {
          callback(e.target.error);
          e.preventDefault();
        };
      },
  storeRemoteEntry:(store, path, entry, callback) => {
        try {
          var req = store.put(entry, path);
        } catch (e) {
          callback(e);
          return;
        }
        req.onsuccess = (event) => callback();
        req.onerror = (e) => {
          callback(e.target.error);
          e.preventDefault();
        };
      },
  removeRemoteEntry:(store, path, callback) => {
        var req = store.delete(path);
        req.onsuccess = (event) => callback();
        req.onerror = (e) => {
          callback(e.target.error);
          e.preventDefault();
        };
      },
  reconcile:(src, dst, callback) => {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach((key) => {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e['timestamp'].getTime() != e2['timestamp'].getTime()) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach((key) => {
          if (!src.entries[key]) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err && !errored) {
            errored = true;
            return callback(err);
          }
        };
  
        // transaction may abort if (for example) there is a QuotaExceededError
        transaction.onerror = transaction.onabort = (e) => {
          done(e.target.error);
          e.preventDefault();
        };
  
        transaction.oncomplete = (e) => {
          if (!errored) {
            callback(null);
          }
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach((path) => {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, (err, entry) => {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, (err, entry) => {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach((path) => {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      },
  };
  
  
  var LZ4 = {
  DIR_MODE:16895,
  FILE_MODE:33279,
  CHUNK_SIZE:-1,
  codec:null,
  init() {
        if (LZ4.codec) return;
        LZ4.codec = (() => {
          /*
  MiniLZ4: Minimal LZ4 block decoding and encoding.
  
  based off of node-lz4, https://github.com/pierrec/node-lz4
  
  ====
  Copyright (c) 2012 Pierre Curto
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  ====
  
  changes have the same license
  */
  
  var MiniLZ4 = (function() {
  
  var exports = {};
  
  /**
   * Decode a block. Assumptions: input contains all sequences of a 
   * chunk, output is large enough to receive the decoded data.
   * If the output buffer is too small, an error will be thrown.
   * If the returned value is negative, an error occured at the returned offset.
   *
   * @param {ArrayBufferView} input input data
   * @param {ArrayBufferView} output output data
   * @param {number=} sIdx
   * @param {number=} eIdx
   * @return {number} number of decoded bytes
   * @private
   */
  exports.uncompress = function (input, output, sIdx, eIdx) {
  	sIdx = sIdx || 0
  	eIdx = eIdx || (input.length - sIdx)
  	// Process each sequence in the incoming data
  	for (var i = sIdx, n = eIdx, j = 0; i < n;) {
  		var token = input[i++]
  
  		// Literals
  		var literals_length = (token >> 4)
  		if (literals_length > 0) {
  			// length of literals
  			var l = literals_length + 240
  			while (l === 255) {
  				l = input[i++]
  				literals_length += l
  			}
  
  			// Copy the literals
  			var end = i + literals_length
  			while (i < end) output[j++] = input[i++]
  
  			// End of buffer?
  			if (i === n) return j
  		}
  
  		// Match copy
  		// 2 bytes offset (little endian)
  		var offset = input[i++] | (input[i++] << 8)
  
  		// XXX 0 is an invalid offset value
  		if (offset === 0) return j
  		if (offset > j) return -(i-2)
  
  		// length of match copy
  		var match_length = (token & 0xf)
  		var l = match_length + 240
  		while (l === 255) {
  			l = input[i++]
  			match_length += l
  		}
  
  		// Copy the match
  		var pos = j - offset // position of the match copy in the current output
  		var end = j + match_length + 4 // minmatch = 4
  		while (j < end) output[j++] = output[pos++]
  	}
  
  	return j
  }
  
  var
  	maxInputSize	= 0x7E000000
  ,	minMatch		= 4
  // uint32() optimization
  ,	hashLog			= 16
  ,	hashShift		= (minMatch * 8) - hashLog
  ,	hashSize		= 1 << hashLog
  
  ,	copyLength		= 8
  ,	lastLiterals	= 5
  ,	mfLimit			= copyLength + minMatch
  ,	skipStrength	= 6
  
  ,	mlBits  		= 4
  ,	mlMask  		= (1 << mlBits) - 1
  ,	runBits 		= 8 - mlBits
  ,	runMask 		= (1 << runBits) - 1
  
  ,	hasher 			= /* XXX uint32( */ 2654435761 /* ) */
  
  assert(hashShift === 16);
  var hashTable = new Int16Array(1<<16);
  var empty = new Int16Array(hashTable.length);
  
  // CompressBound returns the maximum length of a lz4 block, given it's uncompressed length
  exports.compressBound = function (isize) {
  	return isize > maxInputSize
  		? 0
  		: (isize + (isize/255) + 16) | 0
  }
  
  /** @param {number=} sIdx
  	@param {number=} eIdx */
  exports.compress = function (src, dst, sIdx, eIdx) {
  	hashTable.set(empty);
  	return compressBlock(src, dst, 0, sIdx || 0, eIdx || dst.length)
  }
  
  function compressBlock (src, dst, pos, sIdx, eIdx) {
  	// XXX var Hash = uint32() // Reusable unsigned 32 bits integer
  	var dpos = sIdx
  	var dlen = eIdx - sIdx
  	var anchor = 0
  
  	if (src.length >= maxInputSize) throw new Error("input too large")
  
  	// Minimum of input bytes for compression (LZ4 specs)
  	if (src.length > mfLimit) {
  		var n = exports.compressBound(src.length)
  		if ( dlen < n ) throw Error("output too small: " + dlen + " < " + n)
  
  		var 
  			step  = 1
  		,	findMatchAttempts = (1 << skipStrength) + 3
  		// Keep last few bytes incompressible (LZ4 specs):
  		// last 5 bytes must be literals
  		,	srcLength = src.length - mfLimit
  
  		while (pos + minMatch < srcLength) {
  			// Find a match
  			// min match of 4 bytes aka sequence
  			var sequenceLowBits = src[pos+1]<<8 | src[pos]
  			var sequenceHighBits = src[pos+3]<<8 | src[pos+2]
  			// compute hash for the current sequence
  			var hash = Math.imul(sequenceLowBits | (sequenceHighBits << 16), hasher) >>> hashShift;
  			/* XXX Hash.fromBits(sequenceLowBits, sequenceHighBits)
  							.multiply(hasher)
  							.shiftr(hashShift)
  							.toNumber() */
  			// get the position of the sequence matching the hash
  			// NB. since 2 different sequences may have the same hash
  			// it is double-checked below
  			// do -1 to distinguish between initialized and uninitialized values
  			var ref = hashTable[hash] - 1
  			// save position of current sequence in hash table
  			hashTable[hash] = pos + 1
  
  			// first reference or within 64k limit or current sequence !== hashed one: no match
  			if ( ref < 0 ||
  				((pos - ref) >>> 16) > 0 ||
  				(
  					((src[ref+3]<<8 | src[ref+2]) != sequenceHighBits) ||
  					((src[ref+1]<<8 | src[ref]) != sequenceLowBits )
  				)
  			) {
  				// increase step if nothing found within limit
  				step = findMatchAttempts++ >> skipStrength
  				pos += step
  				continue
  			}
  
  			findMatchAttempts = (1 << skipStrength) + 3
  
  			// got a match
  			var literals_length = pos - anchor
  			var offset = pos - ref
  
  			// minMatch already verified
  			pos += minMatch
  			ref += minMatch
  
  			// move to the end of the match (>=minMatch)
  			var match_length = pos
  			while (pos < srcLength && src[pos] == src[ref]) {
  				pos++
  				ref++
  			}
  
  			// match length
  			match_length = pos - match_length
  
  			// token
  			var token = match_length < mlMask ? match_length : mlMask
  
  			// encode literals length
  			if (literals_length >= runMask) {
  				// add match length to the token
  				dst[dpos++] = (runMask << mlBits) + token
  				for (var len = literals_length - runMask; len > 254; len -= 255) {
  					dst[dpos++] = 255
  				}
  				dst[dpos++] = len
  			} else {
  				// add match length to the token
  				dst[dpos++] = (literals_length << mlBits) + token
  			}
  
  			// write literals
  			for (var i = 0; i < literals_length; i++) {
  				dst[dpos++] = src[anchor+i]
  			}
  
  			// encode offset
  			dst[dpos++] = offset
  			dst[dpos++] = (offset >> 8)
  
  			// encode match length
  			if (match_length >= mlMask) {
  				match_length -= mlMask
  				while (match_length >= 255) {
  					match_length -= 255
  					dst[dpos++] = 255
  				}
  
  				dst[dpos++] = match_length
  			}
  
  			anchor = pos
  		}
  	}
  
  	// cannot compress input
  	if (anchor == 0) return 0
  
  	// Write last literals
  	// encode literals length
  	literals_length = src.length - anchor
  	if (literals_length >= runMask) {
  		// add match length to the token
  		dst[dpos++] = (runMask << mlBits)
  		for (var ln = literals_length - runMask; ln > 254; ln -= 255) {
  			dst[dpos++] = 255
  		}
  		dst[dpos++] = ln
  	} else {
  		// add match length to the token
  		dst[dpos++] = (literals_length << mlBits)
  	}
  
  	// write literals
  	pos = anchor
  	while (pos < src.length) {
  		dst[dpos++] = src[pos++]
  	}
  
  	return dpos
  }
  
  exports.CHUNK_SIZE = 2048; // musl libc does readaheads of 1024 bytes, so a multiple of that is a good idea
  
  exports.compressPackage = function(data, verify) {
    if (verify) {
      var temp = new Uint8Array(exports.CHUNK_SIZE);
    }
    // compress the data in chunks
    assert(data instanceof ArrayBuffer);
    data = new Uint8Array(data);
    console.log('compressing package of size ' + data.length);
    var compressedChunks = [];
    var successes = [];
    var offset = 0;
    var total = 0;
    while (offset < data.length) {
      var chunk = data.subarray(offset, offset + exports.CHUNK_SIZE);
      //console.log('compress a chunk ' + [offset, total, data.length]);
      offset += exports.CHUNK_SIZE;
      var bound = exports.compressBound(chunk.length);
      var compressed = new Uint8Array(bound);
      var compressedSize = exports.compress(chunk, compressed);
      if (compressedSize > 0) {
        assert(compressedSize <= bound);
        compressed = compressed.subarray(0, compressedSize);
        compressedChunks.push(compressed);
        total += compressedSize;
        successes.push(1);
        if (verify) {
          var back = exports.uncompress(compressed, temp);
          assert(back === chunk.length, [back, chunk.length]);
          for (var i = 0; i < chunk.length; i++) {
            assert(chunk[i] === temp[i]);
          }
        }
      } else {
        assert(compressedSize === 0);
        // failure to compress :(
        compressedChunks.push(chunk);
        total += chunk.length; // last chunk may not be the full exports.CHUNK_SIZE size
        successes.push(0);
      }
    }
    data = null; // XXX null out pack['data'] too?
    var compressedData = {
      'data': new Uint8Array(total + exports.CHUNK_SIZE*2), // store all the compressed data, plus room for two cached decompressed chunk, in one fast array
      'cachedOffset': total,
      'cachedIndexes': [-1, -1], // cache last two blocks, so that reading 1,2,3 + preloading another block won't trigger decompress thrashing
      'cachedChunks': [null, null],
      'offsets': [], // chunk# => start in compressed data
      'sizes': [],
      'successes': successes, // 1 if chunk is compressed
    };
    offset = 0;
    for (var i = 0; i < compressedChunks.length; i++) {
      compressedData['data'].set(compressedChunks[i], offset);
      compressedData['offsets'][i] = offset;
      compressedData['sizes'][i] = compressedChunks[i].length
      offset += compressedChunks[i].length;
    }
    console.log('compressed package into ' + [compressedData['data'].length]);
    assert(offset === total);
    return compressedData;
  };
  
  assert(exports.CHUNK_SIZE < (1 << 15)); // we use 16-bit ints as the type of the hash table, chunk size must be smaller
  
  return exports;
  
  })();
  
  if (typeof module != 'undefined') {
    module.exports = MiniLZ4;
  }
  ;
          return MiniLZ4;
        })();
        LZ4.CHUNK_SIZE = LZ4.codec.CHUNK_SIZE;
      },
  loadPackage(pack, preloadPlugin) {
        LZ4.init();
        var compressedData = pack['compressedData'] || LZ4.codec.compressPackage(pack['data']);
        assert(compressedData['cachedIndexes'].length === compressedData['cachedChunks'].length);
        for (var i = 0; i < compressedData['cachedIndexes'].length; i++) {
          compressedData['cachedIndexes'][i] = -1;
          compressedData['cachedChunks'][i] = compressedData['data'].subarray(compressedData['cachedOffset'] + i*LZ4.CHUNK_SIZE,
                                                                        compressedData['cachedOffset'] + (i+1)*LZ4.CHUNK_SIZE);
          assert(compressedData['cachedChunks'][i].length === LZ4.CHUNK_SIZE);
        }
        pack['metadata'].files.forEach((file) => {
          var dir = PATH.dirname(file.filename);
          var name = PATH.basename(file.filename);
          FS.createPath('', dir, true, true);
          var parent = FS.analyzePath(dir).object;
          LZ4.createNode(parent, name, LZ4.FILE_MODE, 0, {
            compressedData,
            start: file.start,
            end: file.end,
          });
        });
        // Preload files if necessary. This code is largely similar to
        // createPreloadedFile in library_fs.js. However, a main difference here
        // is that we only decompress the file if it can be preloaded.
        // Abstracting out the common parts seems to be more effort than it is
        // worth.
        if (preloadPlugin) {
          Browser.init();
          pack['metadata'].files.forEach((file) => {
            var handled = false;
            var fullname = file.filename;
            preloadPlugins.forEach((plugin) => {
              if (handled) return;
              if (plugin['canHandle'](fullname)) {
                var dep = getUniqueRunDependency('fp ' + fullname);
                addRunDependency(dep);
                var finish = () => removeRunDependency(dep);
                var byteArray = FS.readFile(fullname);
                plugin['handle'](byteArray, fullname, finish, finish);
                handled = true;
              }
            });
          });
        }
      },
  createNode(parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = LZ4.node_ops;
        node.stream_ops = LZ4.stream_ops;
        this.atime = this.mtime = this.ctime = (mtime || new Date).getTime();
        assert(LZ4.FILE_MODE !== LZ4.DIR_MODE);
        if (mode === LZ4.FILE_MODE) {
          node.size = contents.end - contents.start;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },
  node_ops:{
  getattr(node) {
          return {
            dev: 1,
            ino: node.id,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: 0,
            size: node.size,
            atime: new Date(node.atime),
            mtime: new Date(node.mtime),
            ctime: new Date(node.ctime),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },
  setattr(node, attr) {
          for (const key of ['mode', 'atime', 'mtime', 'ctime']) {
            if (attr[key]) {
              node[key] = attr[key];
            }
          }
        },
  lookup(parent, name) {
          throw new FS.ErrnoError(44);
        },
  mknod(parent, name, mode, dev) {
          throw new FS.ErrnoError(63);
        },
  rename(oldNode, newDir, newName) {
          throw new FS.ErrnoError(63);
        },
  unlink(parent, name) {
          throw new FS.ErrnoError(63);
        },
  rmdir(parent, name) {
          throw new FS.ErrnoError(63);
        },
  readdir(node) {
          throw new FS.ErrnoError(63);
        },
  symlink(parent, newName, oldPath) {
          throw new FS.ErrnoError(63);
        },
  },
  stream_ops:{
  read(stream, buffer, offset, length, position) {
          //out('LZ4 read ' + [offset, length, position]);
          length = Math.min(length, stream.node.size - position);
          if (length <= 0) return 0;
          var contents = stream.node.contents;
          var compressedData = contents.compressedData;
          var written = 0;
          while (written < length) {
            var start = contents.start + position + written; // start index in uncompressed data
            var desired = length - written;
            //out('current read: ' + ['start', start, 'desired', desired]);
            var chunkIndex = Math.floor(start / LZ4.CHUNK_SIZE);
            var compressedStart = compressedData['offsets'][chunkIndex];
            var compressedSize = compressedData['sizes'][chunkIndex];
            var currChunk;
            if (compressedData['successes'][chunkIndex]) {
              var found = compressedData['cachedIndexes'].indexOf(chunkIndex);
              if (found >= 0) {
                currChunk = compressedData['cachedChunks'][found];
              } else {
                // decompress the chunk
                compressedData['cachedIndexes'].pop();
                compressedData['cachedIndexes'].unshift(chunkIndex);
                currChunk = compressedData['cachedChunks'].pop();
                compressedData['cachedChunks'].unshift(currChunk);
                if (compressedData['debug']) {
                  out('decompressing chunk ' + chunkIndex);
                  Module['decompressedChunks'] = (Module['decompressedChunks'] || 0) + 1;
                }
                var compressed = compressedData['data'].subarray(compressedStart, compressedStart + compressedSize);
                //var t = Date.now();
                var originalSize = LZ4.codec.uncompress(compressed, currChunk);
                //out('decompress time: ' + (Date.now() - t));
                if (chunkIndex < compressedData['successes'].length-1) assert(originalSize === LZ4.CHUNK_SIZE); // all but the last chunk must be full-size
              }
            } else {
              // uncompressed
              currChunk = compressedData['data'].subarray(compressedStart, compressedStart + LZ4.CHUNK_SIZE);
            }
            var startInChunk = start % LZ4.CHUNK_SIZE;
            var endInChunk = Math.min(startInChunk + desired, LZ4.CHUNK_SIZE);
            buffer.set(currChunk.subarray(startInChunk, endInChunk), offset + written);
            var currWritten = endInChunk - startInChunk;
            written += currWritten;
          }
          return written;
        },
  write(stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(29);
        },
  llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
  },
  };
  var FS = {
  root:null,
  mounts:[],
  devices:{
  },
  streams:[],
  nextInode:1,
  nameTable:null,
  currentPath:"/",
  initialized:false,
  ignorePermissions:true,
  filesystems:null,
  syncFSRequests:0,
  readFiles:{
  },
  ErrnoError:class {
        name = 'ErrnoError';
        // We set the `name` property to be able to identify `FS.ErrnoError`
        // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.
        // - when using PROXYFS, an error can come from an underlying FS
        // as different FS objects have their own FS.ErrnoError each,
        // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.
        // we'll use the reliable test `err.name == "ErrnoError"` instead
        constructor(errno) {
          this.errno = errno;
        }
      },
  FSStream:class {
        shared = {};
        get object() {
          return this.node;
        }
        set object(val) {
          this.node = val;
        }
        get isRead() {
          return (this.flags & 2097155) !== 1;
        }
        get isWrite() {
          return (this.flags & 2097155) !== 0;
        }
        get isAppend() {
          return (this.flags & 1024);
        }
        get flags() {
          return this.shared.flags;
        }
        set flags(val) {
          this.shared.flags = val;
        }
        get position() {
          return this.shared.position;
        }
        set position(val) {
          this.shared.position = val;
        }
      },
  FSNode:class {
        node_ops = {};
        stream_ops = {};
        readMode = 292 | 73;
        writeMode = 146;
        mounted = null;
        constructor(parent, name, mode, rdev) {
          if (!parent) {
            parent = this;  // root node sets parent to itself
          }
          this.parent = parent;
          this.mount = parent.mount;
          this.id = FS.nextInode++;
          this.name = name;
          this.mode = mode;
          this.rdev = rdev;
          this.atime = this.mtime = this.ctime = Date.now();
        }
        get read() {
          return (this.mode & this.readMode) === this.readMode;
        }
        set read(val) {
          val ? this.mode |= this.readMode : this.mode &= ~this.readMode;
        }
        get write() {
          return (this.mode & this.writeMode) === this.writeMode;
        }
        set write(val) {
          val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;
        }
        get isFolder() {
          return FS.isDir(this.mode);
        }
        get isDevice() {
          return FS.isChrdev(this.mode);
        }
      },
  lookupPath(path, opts = {}) {
        if (!path) {
          throw new FS.ErrnoError(44);
        }
        opts.follow_mount ??= true
  
        if (!PATH.isAbs(path)) {
          path = FS.cwd() + '/' + path;
        }
  
        // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
        linkloop: for (var nlinks = 0; nlinks < 40; nlinks++) {
          // split the absolute path
          var parts = path.split('/').filter((p) => !!p);
  
          // start at the root
          var current = FS.root;
          var current_path = '/';
  
          for (var i = 0; i < parts.length; i++) {
            var islast = (i === parts.length-1);
            if (islast && opts.parent) {
              // stop resolving
              break;
            }
  
            if (parts[i] === '.') {
              continue;
            }
  
            if (parts[i] === '..') {
              current_path = PATH.dirname(current_path);
              if (FS.isRoot(current)) {
                path = current_path + '/' + parts.slice(i + 1).join('/');
                continue linkloop;
              } else {
                current = current.parent;
              }
              continue;
            }
  
            current_path = PATH.join2(current_path, parts[i]);
            try {
              current = FS.lookupNode(current, parts[i]);
            } catch (e) {
              // if noent_okay is true, suppress a ENOENT in the last component
              // and return an object with an undefined node. This is needed for
              // resolving symlinks in the path when creating a file.
              if ((e?.errno === 44) && islast && opts.noent_okay) {
                return { path: current_path };
              }
              throw e;
            }
  
            // jump to the mount's root node if this is a mountpoint
            if (FS.isMountpoint(current) && (!islast || opts.follow_mount)) {
              current = current.mounted.root;
            }
  
            // by default, lookupPath will not follow a symlink if it is the final path component.
            // setting opts.follow = true will override this behavior.
            if (FS.isLink(current.mode) && (!islast || opts.follow)) {
              if (!current.node_ops.readlink) {
                throw new FS.ErrnoError(52);
              }
              var link = current.node_ops.readlink(current);
              if (!PATH.isAbs(link)) {
                link = PATH.dirname(current_path) + '/' + link;
              }
              path = link + '/' + parts.slice(i + 1).join('/');
              continue linkloop;
            }
          }
          return { path: current_path, node: current };
        }
        throw new FS.ErrnoError(32);
      },
  getPath(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? `${mount}/${path}` : mount + path;
          }
          path = path ? `${node.name}/${path}` : node.name;
          node = node.parent;
        }
      },
  hashName(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },
  hashAddNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },
  hashRemoveNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },
  lookupNode(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },
  createNode(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },
  destroyNode(node) {
        FS.hashRemoveNode(node);
      },
  isRoot(node) {
        return node === node.parent;
      },
  isMountpoint(node) {
        return !!node.mounted;
      },
  isFile(mode) {
        return (mode & 61440) === 32768;
      },
  isDir(mode) {
        return (mode & 61440) === 16384;
      },
  isLink(mode) {
        return (mode & 61440) === 40960;
      },
  isChrdev(mode) {
        return (mode & 61440) === 8192;
      },
  isBlkdev(mode) {
        return (mode & 61440) === 24576;
      },
  isFIFO(mode) {
        return (mode & 61440) === 4096;
      },
  isSocket(mode) {
        return (mode & 49152) === 49152;
      },
  flagsToPermissionString(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },
  nodePermissions(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },
  mayLookup(dir) {
        if (!FS.isDir(dir.mode)) return 54;
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },
  mayCreate(dir, name) {
        if (!FS.isDir(dir.mode)) {
          return 54;
        }
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },
  mayDelete(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },
  mayOpen(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' // opening for write
              || (flags & (512 | 64))) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },
  checkOpExists(op, err) {
        if (!op) {
          throw new FS.ErrnoError(err);
        }
        return op;
      },
  MAX_OPEN_FDS:4096,
  nextfd() {
        for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },
  getStreamChecked(fd) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        return stream;
      },
  getStream:(fd) => FS.streams[fd],
  createStream(stream, fd = -1) {
  
        // clone it, so we can return an instance of FSStream
        stream = Object.assign(new FS.FSStream(), stream);
        if (fd == -1) {
          fd = FS.nextfd();
        }
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },
  closeStream(fd) {
        FS.streams[fd] = null;
      },
  dupStream(origStream, fd = -1) {
        var stream = FS.createStream(origStream, fd);
        stream.stream_ops?.dup?.(stream);
        return stream;
      },
  doSetAttr(stream, node, attr) {
        var setattr = stream?.stream_ops.setattr;
        var arg = setattr ? stream : node;
        setattr ??= node.node_ops.setattr;
        FS.checkOpExists(setattr, 63)
        setattr(arg, attr);
      },
  chrdev_stream_ops:{
  open(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          stream.stream_ops.open?.(stream);
        },
  llseek() {
          throw new FS.ErrnoError(70);
        },
  },
  major:(dev) => ((dev) >> 8),
  minor:(dev) => ((dev) & 0xff),
  makedev:(ma, mi) => ((ma) << 8 | (mi)),
  registerDevice(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },
  getDevice:(dev) => FS.devices[dev],
  getMounts(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push(...m.mounts);
        }
  
        return mounts;
      },
  syncfs(populate, callback) {
        if (typeof populate == 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach((mount) => {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },
  mount(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type,
          opts,
          mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },
  unmount(mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach((hash) => {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
      },
  lookup(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },
  mknod(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name) {
          throw new FS.ErrnoError(28);
        }
        if (name === '.' || name === '..') {
          throw new FS.ErrnoError(20);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },
  statfs(path) {
        return FS.statfsNode(FS.lookupPath(path, {follow: true}).node);
      },
  statfsStream(stream) {
        // We keep a separate statfsStream function because noderawfs overrides
        // it. In noderawfs, stream.node is sometimes null. Instead, we need to
        // look at stream.path.
        return FS.statfsNode(stream.node);
      },
  statfsNode(node) {
        // NOTE: None of the defaults here are true. We're just returning safe and
        //       sane values. Currently nodefs and rawfs replace these defaults,
        //       other file systems leave them alone.
        var rtn = {
          bsize: 4096,
          frsize: 4096,
          blocks: 1e6,
          bfree: 5e5,
          bavail: 5e5,
          files: FS.nextInode,
          ffree: FS.nextInode - 1,
          fsid: 42,
          flags: 2,
          namelen: 255,
        };
  
        if (node.node_ops.statfs) {
          Object.assign(rtn, node.node_ops.statfs(node.mount.opts.root));
        }
        return rtn;
      },
  create(path, mode = 0o666) {
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },
  mkdir(path, mode = 0o777) {
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },
  mkdirTree(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var dir of dirs) {
          if (!dir) continue;
          if (d || PATH.isAbs(path)) d += '/';
          d += dir;
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },
  mkdev(path, mode, dev) {
        if (typeof dev == 'undefined') {
          dev = mode;
          mode = 0o666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },
  symlink(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },
  rename(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existent directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
          // update old node (we do this here to avoid each backend
          // needing to)
          old_node.parent = new_dir;
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },
  rmdir(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },
  readdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        var readdir = FS.checkOpExists(node.node_ops.readdir, 54);
        return readdir(node);
      },
  unlink(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },
  readlink(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return link.node_ops.readlink(link);
      },
  stat(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        var getattr = FS.checkOpExists(node.node_ops.getattr, 63);
        return getattr(node);
      },
  fstat(fd) {
        var stream = FS.getStreamChecked(fd);
        var node = stream.node;
        var getattr = stream.stream_ops.getattr;
        var arg = getattr ? stream : node;
        getattr ??= node.node_ops.getattr;
        FS.checkOpExists(getattr, 63)
        return getattr(arg);
      },
  lstat(path) {
        return FS.stat(path, true);
      },
  doChmod(stream, node, mode, dontFollow) {
        FS.doSetAttr(stream, node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          ctime: Date.now(),
          dontFollow
        });
      },
  chmod(path, mode, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        FS.doChmod(null, node, mode, dontFollow);
      },
  lchmod(path, mode) {
        FS.chmod(path, mode, true);
      },
  fchmod(fd, mode) {
        var stream = FS.getStreamChecked(fd);
        FS.doChmod(stream, stream.node, mode, false);
      },
  doChown(stream, node, dontFollow) {
        FS.doSetAttr(stream, node, {
          timestamp: Date.now(),
          dontFollow
          // we ignore the uid / gid for now
        });
      },
  chown(path, uid, gid, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        FS.doChown(null, node, dontFollow);
      },
  lchown(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },
  fchown(fd, uid, gid) {
        var stream = FS.getStreamChecked(fd);
        FS.doChown(stream, stream.node, false);
      },
  doTruncate(stream, node, len) {
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.doSetAttr(stream, node, {
          size: len,
          timestamp: Date.now()
        });
      },
  truncate(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        FS.doTruncate(null, node, len);
      },
  ftruncate(fd, len) {
        var stream = FS.getStreamChecked(fd);
        if (len < 0 || (stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.doTruncate(stream, stream.node, len);
      },
  utime(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
        setattr(node, {
          atime: atime,
          mtime: mtime
        });
      },
  open(path, flags, mode = 0o666) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags == 'string' ? FS_modeStringToFlags(flags) : flags;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        var isDirPath;
        if (typeof path == 'object') {
          node = path;
        } else {
          isDirPath = path.endsWith("/");
          // noent_okay makes it so that if the final component of the path
          // doesn't exist, lookupPath returns `node: undefined`. `path` will be
          // updated to point to the target of all symlinks.
          var lookup = FS.lookupPath(path, {
            follow: !(flags & 131072),
            noent_okay: true
          });
          node = lookup.node;
          path = lookup.path;
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else if (isDirPath) {
            throw new FS.ErrnoError(31);
          } else {
            // node doesn't exist, try to create it
            // Ignore the permission bits here to ensure we can `open` this new
            // file below. We use chmod below the apply the permissions once the
            // file is open.
            node = FS.mknod(path, mode | 0o777, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512) && !created) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        });
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (created) {
          FS.chmod(node, mode & 0o777);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },
  close(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },
  isClosed(stream) {
        return stream.fd === null;
      },
  llseek(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },
  read(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },
  write(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },
  mmap(stream, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        if (!length) {
          throw new FS.ErrnoError(28);
        }
        return stream.stream_ops.mmap(stream, length, position, prot, flags);
      },
  msync(stream, buffer, offset, length, mmapFlags) {
        if (!stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },
  ioctl(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },
  readFile(path, opts = {}) {
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error(`Invalid encoding type "${opts.encoding}"`);
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },
  writeFile(path, data, opts = {}) {
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data == 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },
  cwd:() => FS.currentPath,
  chdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },
  createDefaultDirectories() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },
  createDefaultDevices() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: () => 0,
          write: (stream, buffer, offset, length, pos) => length,
          llseek: () => 0,
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        // use a buffer to avoid overhead of individual crypto calls per byte
        var randomBuffer = new Uint8Array(1024), randomLeft = 0;
        var randomByte = () => {
          if (randomLeft === 0) {
            randomFill(randomBuffer);
            randomLeft = randomBuffer.byteLength;
          }
          return randomBuffer[--randomLeft];
        };
        FS.createDevice('/dev', 'random', randomByte);
        FS.createDevice('/dev', 'urandom', randomByte);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },
  createSpecialDirectories() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount() {
            var node = FS.createNode(proc_self, 'fd', 16895, 73);
            node.stream_ops = {
              llseek: MEMFS.stream_ops.llseek,
            };
            node.node_ops = {
              lookup(parent, name) {
                var fd = +name;
                var stream = FS.getStreamChecked(fd);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: () => stream.path },
                  id: fd + 1,
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              },
              readdir() {
                return Array.from(FS.streams.entries())
                  .filter(([k, v]) => v)
                  .map(([k, v]) => k.toString());
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },
  createStandardStreams(input, output, error) {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (input) {
          FS.createDevice('/dev', 'stdin', input);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (output) {
          FS.createDevice('/dev', 'stdout', null, output);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (error) {
          FS.createDevice('/dev', 'stderr', null, error);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
      },
  staticInit() {
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
        };
      },
  init(input, output, error) {
        FS.initialized = true;
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input ??= Module['stdin'];
        output ??= Module['stdout'];
        error ??= Module['stderr'];
  
        FS.createStandardStreams(input, output, error);
      },
  quit() {
        FS.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        // close all of our streams
        for (var stream of FS.streams) {
          if (stream) {
            FS.close(stream);
          }
        }
      },
  findObject(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (!ret.exists) {
          return null;
        }
        return ret.object;
      },
  analyzePath(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },
  createPath(parent, path, canRead, canWrite) {
        parent = typeof parent == 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            if (e.errno != 20) throw e;
          }
          parent = current;
        }
        return current;
      },
  createFile(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(canRead, canWrite);
        return FS.create(path, mode);
      },
  createDataFile(parent, name, data, canRead, canWrite, canOwn) {
        var path = name;
        if (parent) {
          parent = typeof parent == 'string' ? parent : FS.getPath(parent);
          path = name ? PATH.join2(parent, name) : parent;
        }
        var mode = FS_getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data == 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
      },
  createDevice(parent, name, input, output) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(!!input, !!output);
        FS.createDevice.major ??= 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open(stream) {
            stream.seekable = false;
          },
          close(stream) {
            // flush any pending line data
            if (output?.buffer?.length) {
              output(10);
            }
          },
          read(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.atime = Date.now();
            }
            return bytesRead;
          },
          write(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.mtime = stream.node.ctime = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },
  forceLoadFile(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest != 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else { // Command-line.
          try {
            obj.contents = readBinary(obj.url);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        }
      },
  createLazyFile(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array).
        // Actual getting is abstracted away for eventual reuse.
        class LazyUint8Array {
          lengthKnown = false;
          chunks = []; // Loaded chunks. Index is the chunk number
          get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = (idx / this.chunkSize)|0;
            return this.getter(chunkNum)[chunkOffset];
          }
          setDataGetter(getter) {
            this.getter = getter;
          }
          cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (from, to) => {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
              }
              return intArrayFromString(xhr.responseText || '', true);
            };
            var lazyArray = this;
            lazyArray.setDataGetter((chunkNum) => {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');
              return lazyArray.chunks[chunkNum];
            });
  
            if (usesGzip || !datalength) {
              // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
              chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
              datalength = this.getter(0).length;
              chunkSize = datalength;
              out("LazyFiles on gzip forces download of the whole file when length is accessed");
            }
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
          }
          get length() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._length;
          }
          get chunkSize() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._chunkSize;
          }
        }
  
        if (typeof XMLHttpRequest != 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((key) => {
          var fn = node.stream_ops[key];
          stream_ops[key] = (...args) => {
            FS.forceLoadFile(node);
            return fn(...args);
          };
        });
        function writeChunks(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        }
        // use a custom read function
        stream_ops.read = (stream, buffer, offset, length, position) => {
          FS.forceLoadFile(node);
          return writeChunks(stream, buffer, offset, length, position)
        };
        // use a custom mmap function
        stream_ops.mmap = (stream, length, position, prot, flags) => {
          FS.forceLoadFile(node);
          var ptr = mmapAlloc(length);
          if (!ptr) {
            throw new FS.ErrnoError(48);
          }
          writeChunks(stream, HEAP8, ptr, length, position);
          return { ptr, allocated: true };
        };
        node.stream_ops = stream_ops;
        return node;
      },
  };
  
  
    /**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index (i.e. maxBytesToRead will not
     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
     *   JS JIT optimizations off, so it is worth to consider consistently using one
     * @return {string}
     */
  var UTF8ToString = (ptr, maxBytesToRead) => {
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
    };
  var SYSCALLS = {
  DEFAULT_POLLMASK:5,
  calculateAt(dirfd, path, allowEmpty) {
        if (PATH.isAbs(path)) {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = SYSCALLS.getStreamFromFD(dirfd);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return dir + '/' + path;
      },
  writeStat(buf, stat) {
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = stat.mode;
        HEAPU32[(((buf)+(8))>>2)] = stat.nlink;
        HEAP32[(((buf)+(12))>>2)] = stat.uid;
        HEAP32[(((buf)+(16))>>2)] = stat.gid;
        HEAP32[(((buf)+(20))>>2)] = stat.rdev;
        HEAP64[(((buf)+(24))>>3)] = BigInt(stat.size);
        HEAP32[(((buf)+(32))>>2)] = 4096;
        HEAP32[(((buf)+(36))>>2)] = stat.blocks;
        var atime = stat.atime.getTime();
        var mtime = stat.mtime.getTime();
        var ctime = stat.ctime.getTime();
        HEAP64[(((buf)+(40))>>3)] = BigInt(Math.floor(atime / 1000));
        HEAPU32[(((buf)+(48))>>2)] = (atime % 1000) * 1000 * 1000;
        HEAP64[(((buf)+(56))>>3)] = BigInt(Math.floor(mtime / 1000));
        HEAPU32[(((buf)+(64))>>2)] = (mtime % 1000) * 1000 * 1000;
        HEAP64[(((buf)+(72))>>3)] = BigInt(Math.floor(ctime / 1000));
        HEAPU32[(((buf)+(80))>>2)] = (ctime % 1000) * 1000 * 1000;
        HEAP64[(((buf)+(88))>>3)] = BigInt(stat.ino);
        return 0;
      },
  writeStatFs(buf, stats) {
        HEAP32[(((buf)+(4))>>2)] = stats.bsize;
        HEAP32[(((buf)+(40))>>2)] = stats.bsize;
        HEAP32[(((buf)+(8))>>2)] = stats.blocks;
        HEAP32[(((buf)+(12))>>2)] = stats.bfree;
        HEAP32[(((buf)+(16))>>2)] = stats.bavail;
        HEAP32[(((buf)+(20))>>2)] = stats.files;
        HEAP32[(((buf)+(24))>>2)] = stats.ffree;
        HEAP32[(((buf)+(28))>>2)] = stats.fsid;
        HEAP32[(((buf)+(44))>>2)] = stats.flags;  // ST_NOSUID
        HEAP32[(((buf)+(36))>>2)] = stats.namelen;
      },
  doMsync(addr, stream, len, flags, offset) {
        if (!FS.isFile(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (flags & 2) {
          // MAP_PRIVATE calls need not to be synced back to underlying fs
          return 0;
        }
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },
  getStreamFromFD(fd) {
        var stream = FS.getStreamChecked(fd);
        return stream;
      },
  varargs:undefined,
  getStr(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },
  };
  function ___syscall_dup3(fd, newfd, flags) {
  try {
  
      var old = SYSCALLS.getStreamFromFD(fd);
      if (old.fd === newfd) return -28;
      // Check newfd is within range of valid open file descriptors.
      if (newfd < 0 || newfd >= FS.MAX_OPEN_FDS) return -8;
      var existing = FS.getStream(newfd);
      if (existing) FS.close(existing);
      return FS.dupStream(old, newfd).fd;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_faccessat(dirfd, path, amode, flags) {
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      if (amode & ~7) {
        // need a valid mode
        return -28;
      }
      var lookup = FS.lookupPath(path, { follow: true });
      var node = lookup.node;
      if (!node) {
        return -44;
      }
      var perms = '';
      if (amode & 4) perms += 'r';
      if (amode & 2) perms += 'w';
      if (amode & 1) perms += 'x';
      if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
        return -2;
      }
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  /** @suppress {duplicate } */
  var syscallGetVarargI = () => {
      // the `+` prepended here is necessary to convince the JSCompiler that varargs is indeed a number.
      var ret = HEAP32[((+SYSCALLS.varargs)>>2)];
      SYSCALLS.varargs += 4;
      return ret;
    };
  var syscallGetVarargP = syscallGetVarargI;
  
  
  function ___syscall_fcntl64(fd, cmd, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = syscallGetVarargI();
          if (arg < 0) {
            return -28;
          }
          while (FS.streams[arg]) {
            arg++;
          }
          var newStream;
          newStream = FS.dupStream(stream, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = syscallGetVarargI();
          stream.flags |= arg;
          return 0;
        }
        case 12: {
          var arg = syscallGetVarargP();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)] = 2;
          return 0;
        }
        case 13:
        case 14:
          // Pretend that the locking is successful. These are process-level locks,
          // and Emscripten programs are a single process. If we supported linking a
          // filesystem between programs, we'd need to do more here.
          // See https://github.com/emscripten-core/emscripten/issues/23697
          return 0;
      }
      return -28;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_fstat64(fd, buf) {
  try {
  
      return SYSCALLS.writeStat(buf, FS.fstat(fd));
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    };
  
  function ___syscall_getdents64(fd, dirp, count) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd)
      stream.getdents ||= FS.readdir(stream.path);
  
      var struct_size = 280;
      var pos = 0;
      var off = FS.llseek(stream, 0, 1);
  
      var startIdx = Math.floor(off / struct_size);
      var endIdx = Math.min(stream.getdents.length, startIdx + Math.floor(count/struct_size))
      for (var idx = startIdx; idx < endIdx; idx++) {
        var id;
        var type;
        var name = stream.getdents[idx];
        if (name === '.') {
          id = stream.node.id;
          type = 4; // DT_DIR
        }
        else if (name === '..') {
          var lookup = FS.lookupPath(stream.path, { parent: true });
          id = lookup.node.id;
          type = 4; // DT_DIR
        }
        else {
          var child;
          try {
            child = FS.lookupNode(stream.node, name);
          } catch (e) {
            // If the entry is not a directory, file, or symlink, nodefs
            // lookupNode will raise EINVAL. Skip these and continue.
            if (e?.errno === 28) {
              continue;
            }
            throw e;
          }
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP64[((dirp + pos)>>3)] = BigInt(id);
        HEAP64[(((dirp + pos)+(8))>>3)] = BigInt((idx + 1) * struct_size);
        HEAP16[(((dirp + pos)+(16))>>1)] = 280;
        HEAP8[(dirp + pos)+(18)] = type;
        stringToUTF8(name, dirp + pos + 19, 256);
        pos += struct_size;
      }
      FS.llseek(stream, idx * struct_size, 0);
      return pos;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  
  function ___syscall_ioctl(fd, op, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21505: {
          if (!stream.tty) return -59;
          if (stream.tty.ops.ioctl_tcgets) {
            var termios = stream.tty.ops.ioctl_tcgets(stream);
            var argp = syscallGetVarargP();
            HEAP32[((argp)>>2)] = termios.c_iflag || 0;
            HEAP32[(((argp)+(4))>>2)] = termios.c_oflag || 0;
            HEAP32[(((argp)+(8))>>2)] = termios.c_cflag || 0;
            HEAP32[(((argp)+(12))>>2)] = termios.c_lflag || 0;
            for (var i = 0; i < 32; i++) {
              HEAP8[(argp + i)+(17)] = termios.c_cc[i] || 0;
            }
            return 0;
          }
          return 0;
        }
        case 21510:
        case 21511:
        case 21512: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          if (stream.tty.ops.ioctl_tcsets) {
            var argp = syscallGetVarargP();
            var c_iflag = HEAP32[((argp)>>2)];
            var c_oflag = HEAP32[(((argp)+(4))>>2)];
            var c_cflag = HEAP32[(((argp)+(8))>>2)];
            var c_lflag = HEAP32[(((argp)+(12))>>2)];
            var c_cc = []
            for (var i = 0; i < 32; i++) {
              c_cc.push(HEAP8[(argp + i)+(17)]);
            }
            return stream.tty.ops.ioctl_tcsets(stream.tty, op, { c_iflag, c_oflag, c_cflag, c_lflag, c_cc });
          }
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = syscallGetVarargP();
          HEAP32[((argp)>>2)] = 0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = syscallGetVarargP();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          if (stream.tty.ops.ioctl_tiocgwinsz) {
            var winsize = stream.tty.ops.ioctl_tiocgwinsz(stream.tty);
            var argp = syscallGetVarargP();
            HEAP16[((argp)>>1)] = winsize[0];
            HEAP16[(((argp)+(2))>>1)] = winsize[1];
          }
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        case 21515: {
          if (!stream.tty) return -59;
          return 0;
        }
        default: return -28; // not supported
      }
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_lstat64(path, buf) {
  try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.writeStat(buf, FS.lstat(path));
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_mkdirat(dirfd, path, mode) {
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      FS.mkdir(path, mode, 0);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_newfstatat(dirfd, path, buf, flags) {
  try {
  
      path = SYSCALLS.getStr(path);
      var nofollow = flags & 256;
      var allowEmpty = flags & 4096;
      flags = flags & (~6400);
      path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);
      return SYSCALLS.writeStat(buf, nofollow ? FS.lstat(path) : FS.stat(path));
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  
  function ___syscall_openat(dirfd, path, flags, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      var mode = varargs ? syscallGetVarargI() : 0;
      return FS.open(path, flags, mode).fd;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  
  
  function ___syscall_readlinkat(dirfd, path, buf, bufsize) {
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      if (bufsize <= 0) return -28;
      var ret = FS.readlink(path);
  
      var len = Math.min(bufsize, lengthBytesUTF8(ret));
      var endChar = HEAP8[buf+len];
      stringToUTF8(ret, buf, bufsize+1);
      // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
      // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
      HEAP8[buf+len] = endChar;
      return len;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_renameat(olddirfd, oldpath, newdirfd, newpath) {
  try {
  
      oldpath = SYSCALLS.getStr(oldpath);
      newpath = SYSCALLS.getStr(newpath);
      oldpath = SYSCALLS.calculateAt(olddirfd, oldpath);
      newpath = SYSCALLS.calculateAt(newdirfd, newpath);
      FS.rename(oldpath, newpath);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_rmdir(path) {
  try {
  
      path = SYSCALLS.getStr(path);
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_stat64(path, buf) {
  try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.writeStat(buf, FS.stat(path));
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_unlinkat(dirfd, path, flags) {
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      if (flags === 0) {
        FS.unlink(path);
      } else if (flags === 512) {
        FS.rmdir(path);
      } else {
        abort('Invalid flags passed to unlinkat');
      }
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  var __abort_js = () =>
      abort('');

  var __emscripten_system = (command) => {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      if (!command) return 0; // no shell available
      return -52;
    };

  var __emscripten_throw_longjmp = () => {
      throw Infinity;
    };

  var INT53_MAX = 9007199254740992;
  
  var INT53_MIN = -9007199254740992;
  var bigintToI53Checked = (num) => (num < INT53_MIN || num > INT53_MAX) ? NaN : Number(num);
  function __gmtime_js(time, tmPtr) {
    time = bigintToI53Checked(time);
  
  
      var date = new Date(time * 1000);
      HEAP32[((tmPtr)>>2)] = date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)] = date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)] = date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)] = date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)] = date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)] = date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)] = date.getUTCDay();
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)] = yday;
    ;
  }

  var isLeapYear = (year) => year%4 === 0 && (year%100 !== 0 || year%400 === 0);
  
  var MONTH_DAYS_LEAP_CUMULATIVE = [0,31,60,91,121,152,182,213,244,274,305,335];
  
  var MONTH_DAYS_REGULAR_CUMULATIVE = [0,31,59,90,120,151,181,212,243,273,304,334];
  var ydayFromDate = (date) => {
      var leap = isLeapYear(date.getFullYear());
      var monthDaysCumulative = (leap ? MONTH_DAYS_LEAP_CUMULATIVE : MONTH_DAYS_REGULAR_CUMULATIVE);
      var yday = monthDaysCumulative[date.getMonth()] + date.getDate() - 1; // -1 since it's days since Jan 1
  
      return yday;
    };
  
  function __localtime_js(time, tmPtr) {
    time = bigintToI53Checked(time);
  
  
      var date = new Date(time*1000);
      HEAP32[((tmPtr)>>2)] = date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)] = date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)] = date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)] = date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)] = date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)] = date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)] = date.getDay();
  
      var yday = ydayFromDate(date)|0;
      HEAP32[(((tmPtr)+(28))>>2)] = yday;
      HEAP32[(((tmPtr)+(36))>>2)] = -(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)] = dst;
    ;
  }

  
  var __mktime_js = function(tmPtr) {
  
  var ret = (() => { 
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        // Attention: some regions don't have DST at all.
        HEAP32[(((tmPtr)+(32))>>2)] = Number(summerOffset != winterOffset && dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)] = date.getDay();
      var yday = ydayFromDate(date)|0;
      HEAP32[(((tmPtr)+(28))>>2)] = yday;
      // To match expected behavior, update fields from date
      HEAP32[((tmPtr)>>2)] = date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)] = date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)] = date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)] = date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)] = date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)] = date.getYear();
  
      var timeMs = date.getTime();
      if (isNaN(timeMs)) {
        return -1;
      }
      // Return time in microseconds
      return timeMs / 1000;
     })();
  return BigInt(ret);
  };

  var __tzset_js = (timezone, daylight, std_name, dst_name) => {
      // TODO: Use (malleable) environment variables instead of system settings.
      var currentYear = new Date().getFullYear();
      var winter = new Date(currentYear, 0, 1);
      var summer = new Date(currentYear, 6, 1);
      var winterOffset = winter.getTimezoneOffset();
      var summerOffset = summer.getTimezoneOffset();
  
      // Local standard timezone offset. Local standard time is not adjusted for
      // daylight savings.  This code uses the fact that getTimezoneOffset returns
      // a greater value during Standard Time versus Daylight Saving Time (DST).
      // Thus it determines the expected output during Standard Time, and it
      // compares whether the output of the given date the same (Standard) or less
      // (DST).
      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by stdTimezoneOffset.
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAPU32[((timezone)>>2)] = stdTimezoneOffset * 60;
  
      HEAP32[((daylight)>>2)] = Number(winterOffset != summerOffset);
  
      var extractZone = (timezoneOffset) => {
        // Why inverse sign?
        // Read here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
        var sign = timezoneOffset >= 0 ? "-" : "+";
  
        var absOffset = Math.abs(timezoneOffset)
        var hours = String(Math.floor(absOffset / 60)).padStart(2, "0");
        var minutes = String(absOffset % 60).padStart(2, "0");
  
        return `UTC${sign}${hours}${minutes}`;
      }
  
      var winterName = extractZone(winterOffset);
      var summerName = extractZone(summerOffset);
      if (summerOffset < winterOffset) {
        // Northern hemisphere
        stringToUTF8(winterName, std_name, 17);
        stringToUTF8(summerName, dst_name, 17);
      } else {
        stringToUTF8(winterName, dst_name, 17);
        stringToUTF8(summerName, std_name, 17);
      }
    };

  var _emscripten_get_now = () => performance.now();
  
  var _emscripten_date_now = () => Date.now();
  
  var nowIsMonotonic = 1;
  
  var checkWasiClock = (clock_id) => clock_id >= 0 && clock_id <= 3;
  
  function _clock_time_get(clk_id, ignored_precision, ptime) {
    ignored_precision = bigintToI53Checked(ignored_precision);
  
  
      if (!checkWasiClock(clk_id)) {
        return 28;
      }
      var now;
      // all wasi clocks but realtime are monotonic
      if (clk_id === 0) {
        now = _emscripten_date_now();
      } else if (nowIsMonotonic) {
        now = _emscripten_get_now();
      } else {
        return 52;
      }
      // "now" is in ms, and wasi times are in ns.
      var nsec = Math.round(now * 1000 * 1000);
      HEAP64[((ptime)>>3)] = BigInt(nsec);
      return 0;
    ;
  }

  var handleException = (e) => {
      // Certain exception types we do not treat as errors since they are used for
      // internal control flow.
      // 1. ExitStatus, which is thrown by exit()
      // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
      //    that wish to return to JS event loop.
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      quit_(1, e);
    };
  
  
  var runtimeKeepaliveCounter = 0;
  var keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0;
  var _proc_exit = (code) => {
      EXITSTATUS = code;
      if (!keepRuntimeAlive()) {
        Module['onExit']?.(code);
        ABORT = true;
      }
      quit_(code, new ExitStatus(code));
    };
  /** @suppress {duplicate } */
  /** @param {boolean|number=} implicit */
  var exitJS = (status, implicit) => {
      EXITSTATUS = status;
  
      _proc_exit(status);
    };
  var _exit = exitJS;
  
  
  var maybeExit = () => {
      if (!keepRuntimeAlive()) {
        try {
          _exit(EXITSTATUS);
        } catch (e) {
          handleException(e);
        }
      }
    };
  var callUserCallback = (func) => {
      if (ABORT) {
        return;
      }
      try {
        func();
        maybeExit();
      } catch (e) {
        handleException(e);
      }
    };
  
  /** @param {number=} timeout */
  var safeSetTimeout = (func, timeout) => {
      
      return setTimeout(() => {
        
        callUserCallback(func);
      }, timeout);
    };
  
  var warnOnce = (text) => {
      warnOnce.shown ||= {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        err(text);
      }
    };
  
  
  var Browser = {
  useWebGL:false,
  isFullscreen:false,
  pointerLock:false,
  moduleContextCreatedCallbacks:[],
  workers:[],
  preloadedImages:{
  },
  preloadedAudios:{
  },
  getCanvas:() => Module['canvas'],
  init() {
        if (Browser.initted) return;
        Browser.initted = true;
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module['noImageDecoding'] && /\.(jpg|jpeg|png|bmp|webp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
          if (b.size !== byteArray.length) { // Safari bug #118630
            // Safari's Blob can only take an ArrayBuffer
            b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
          }
          var url = URL.createObjectURL(b);
          var img = new Image();
          img.onload = () => {
            var canvas = /** @type {!HTMLCanvasElement} */ (document.createElement('canvas'));
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Browser.preloadedImages[name] = canvas;
            URL.revokeObjectURL(url);
            onload?.(byteArray);
          };
          img.onerror = (event) => {
            err(`Image ${url} could not be decoded`);
            onerror?.();
          };
          img.src = url;
        };
        preloadPlugins.push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module['noAudioDecoding'] && name.slice(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Browser.preloadedAudios[name] = audio;
            onload?.(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Browser.preloadedAudios[name] = new Audio(); // empty shim
            onerror?.();
          }
          var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
          var url = URL.createObjectURL(b); // XXX we never revoke this!
          var audio = new Audio();
          audio.addEventListener('canplaythrough', () => finish(audio), false); // use addEventListener due to chromium bug 124926
          audio.onerror = function audio_onerror(event) {
            if (done) return;
            err(`warning: browser could not fully decode audio ${name}, trying slower base64 approach`);
            function encode64(data) {
              var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
              var PAD = '=';
              var ret = '';
              var leftchar = 0;
              var leftbits = 0;
              for (var i = 0; i < data.length; i++) {
                leftchar = (leftchar << 8) | data[i];
                leftbits += 8;
                while (leftbits >= 6) {
                  var curr = (leftchar >> (leftbits-6)) & 0x3f;
                  leftbits -= 6;
                  ret += BASE[curr];
                }
              }
              if (leftbits == 2) {
                ret += BASE[(leftchar&3) << 4];
                ret += PAD + PAD;
              } else if (leftbits == 4) {
                ret += BASE[(leftchar&0xf) << 2];
                ret += PAD;
              }
              return ret;
            }
            audio.src = 'data:audio/x-' + name.slice(-3) + ';base64,' + encode64(byteArray);
            finish(audio); // we don't wait for confirmation this worked - but it's worth trying
          };
          audio.src = url;
          // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
          safeSetTimeout(() => {
            finish(audio); // try to use it even though it is not necessarily ready to play
          }, 10000);
        };
        preloadPlugins.push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          var canvas = Browser.getCanvas();
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        var canvas = Browser.getCanvas();
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      (() => {});
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   (() => {}); // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", (ev) => {
              if (!Browser.pointerLock && Browser.getCanvas().requestPointerLock) {
                Browser.getCanvas().requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },
  createContext(/** @type {HTMLCanvasElement} */ canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module['ctx'] && canvas == Browser.getCanvas()) return Module['ctx']; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 2,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL != 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          Module['ctx'] = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Browser.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach((callback) => callback());
          Browser.init();
        }
        return ctx;
      },
  fullscreenHandlersInstalled:false,
  lockPointer:undefined,
  resizeCanvas:undefined,
  requestFullscreen(lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer == 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas == 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Browser.getCanvas();
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          Module['onFullScreen']?.(Browser.isFullscreen);
          Module['onFullscreen']?.(Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? () => canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? () => canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) : null);
  
        canvasContainer.requestFullscreen();
      },
  exitFullscreen() {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (() => {});
        CFS.apply(document, []);
        return true;
      },
  safeSetTimeout(func, timeout) {
        // Legacy function, this is used by the SDL2 port so we need to keep it
        // around at least until that is updated.
        // See https://github.com/libsdl-org/SDL/pull/6304
        return safeSetTimeout(func, timeout);
      },
  getMimetype(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.slice(name.lastIndexOf('.')+1)];
      },
  getUserMedia(func) {
        window.getUserMedia ||= navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        window.getUserMedia(func);
      },
  getMovementX(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },
  getMovementY(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },
  getMouseWheelDelta(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch (event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },
  mouseX:0,
  mouseY:0,
  mouseMovementX:0,
  mouseMovementY:0,
  touches:{
  },
  lastTouches:{
  },
  calculateMouseCoords(pageX, pageY) {
        // Calculate the movement based on the changes
        // in the coordinates.
        var canvas = Browser.getCanvas();
        var rect = canvas.getBoundingClientRect();
  
        // Neither .scrollX or .pageXOffset are defined in a spec, but
        // we prefer .scrollX because it is currently in a spec draft.
        // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
        var scrollX = ((typeof window.scrollX != 'undefined') ? window.scrollX : window.pageXOffset);
        var scrollY = ((typeof window.scrollY != 'undefined') ? window.scrollY : window.pageYOffset);
        var adjustedX = pageX - (scrollX + rect.left);
        var adjustedY = pageY - (scrollY + rect.top);
  
        // the canvas might be CSS-scaled compared to its backbuffer;
        // SDL-using content will want mouse coordinates in terms
        // of backbuffer units.
        adjustedX = adjustedX * (canvas.width / rect.width);
        adjustedY = adjustedY * (canvas.height / rect.height);
  
        return { x: adjustedX, y: adjustedY };
      },
  setMouseCoords(pageX, pageY) {
        const {x, y} = Browser.calculateMouseCoords(pageX, pageY);
        Browser.mouseMovementX = x - Browser.mouseX;
        Browser.mouseMovementY = y - Browser.mouseY;
        Browser.mouseX = x;
        Browser.mouseY = y;
      },
  calculateMouseEvent(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // add the mouse delta to the current absolute mouse position
          Browser.mouseX += Browser.mouseMovementX;
          Browser.mouseY += Browser.mouseMovementY;
        } else {
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var coords = Browser.calculateMouseCoords(touch.pageX, touch.pageY);
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              last ||= coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          Browser.setMouseCoords(event.pageX, event.pageY);
        }
      },
  resizeListeners:[],
  updateResizeListeners() {
        var canvas = Browser.getCanvas();
        Browser.resizeListeners.forEach((listener) => listener(canvas.width, canvas.height));
      },
  setCanvasSize(width, height, noUpdates) {
        var canvas = Browser.getCanvas();
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },
  windowedWidth:0,
  windowedHeight:0,
  setFullscreenCanvasSize() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)] = flags;
        }
        Browser.updateCanvasDimensions(Browser.getCanvas());
        Browser.updateResizeListeners();
      },
  setWindowedCanvasSize() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)] = flags;
        }
        Browser.updateCanvasDimensions(Browser.getCanvas());
        Browser.updateResizeListeners();
      },
  updateCanvasDimensions(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },
  };
  
  var EGL = {
  errorCode:12288,
  defaultDisplayInitialized:false,
  currentContext:0,
  currentReadSurface:0,
  currentDrawSurface:0,
  contextAttributes:{
  alpha:false,
  depth:false,
  stencil:false,
  antialias:false,
  },
  stringCache:{
  },
  setErrorCode(code) {
        EGL.errorCode = code;
      },
  chooseConfig(display, attribList, config, config_size, numConfigs) {
        if (display != 62000) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
  
        if (attribList) {
          // read attribList if it is non-null
          for (;;) {
            var param = HEAP32[((attribList)>>2)];
            if (param == 0x3021 /*EGL_ALPHA_SIZE*/) {
              var alphaSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.alpha = (alphaSize > 0);
            } else if (param == 0x3025 /*EGL_DEPTH_SIZE*/) {
              var depthSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.depth = (depthSize > 0);
            } else if (param == 0x3026 /*EGL_STENCIL_SIZE*/) {
              var stencilSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.stencil = (stencilSize > 0);
            } else if (param == 0x3031 /*EGL_SAMPLES*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples > 0);
            } else if (param == 0x3032 /*EGL_SAMPLE_BUFFERS*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples == 1);
            } else if (param == 0x3100 /*EGL_CONTEXT_PRIORITY_LEVEL_IMG*/) {
              var requestedPriority = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.lowLatency = (requestedPriority != 0x3103 /*EGL_CONTEXT_PRIORITY_LOW_IMG*/);
            } else if (param == 0x3038 /*EGL_NONE*/) {
                break;
            }
            attribList += 8;
          }
        }
  
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)] = 1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAPU32[((config)>>2)] = 62002;
        }
  
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      },
  };
  var _eglBindAPI = (api) => {
      if (api == 0x30A0 /* EGL_OPENGL_ES_API */) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }
      // if (api == 0x30A1 /* EGL_OPENVG_API */ || api == 0x30A2 /* EGL_OPENGL_API */) {
      EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
      return 0;
    };

  var _eglChooseConfig = (display, attrib_list, configs, config_size, numConfigs) =>
      EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs);

  var GLctx;
  
  var webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance = (ctx) =>
      // Closure is expected to be allowed to minify the '.dibvbi' property, so not accessing it quoted.
      !!(ctx.dibvbi = ctx.getExtension('WEBGL_draw_instanced_base_vertex_base_instance'));
  
  var webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance = (ctx) => {
      // Closure is expected to be allowed to minify the '.mdibvbi' property, so not accessing it quoted.
      return !!(ctx.mdibvbi = ctx.getExtension('WEBGL_multi_draw_instanced_base_vertex_base_instance'));
    };
  
  var webgl_enable_EXT_polygon_offset_clamp = (ctx) =>
      !!(ctx.extPolygonOffsetClamp = ctx.getExtension('EXT_polygon_offset_clamp'));
  
  var webgl_enable_EXT_clip_control = (ctx) =>
      !!(ctx.extClipControl = ctx.getExtension('EXT_clip_control'));
  
  var webgl_enable_WEBGL_polygon_mode = (ctx) =>
      !!(ctx.webglPolygonMode = ctx.getExtension('WEBGL_polygon_mode'));
  
  var webgl_enable_WEBGL_multi_draw = (ctx) =>
      // Closure is expected to be allowed to minify the '.multiDrawWebgl' property, so not accessing it quoted.
      !!(ctx.multiDrawWebgl = ctx.getExtension('WEBGL_multi_draw'));
  
  var getEmscriptenSupportedExtensions = (ctx) => {
      // Restrict the list of advertised extensions to those that we actually
      // support.
      var supportedExtensions = [
        // WebGL 2 extensions
        'EXT_color_buffer_float',
        'EXT_conservative_depth',
        'EXT_disjoint_timer_query_webgl2',
        'EXT_texture_norm16',
        'NV_shader_noperspective_interpolation',
        'WEBGL_clip_cull_distance',
        // WebGL 1 and WebGL 2 extensions
        'EXT_clip_control',
        'EXT_color_buffer_half_float',
        'EXT_depth_clamp',
        'EXT_float_blend',
        'EXT_polygon_offset_clamp',
        'EXT_texture_compression_bptc',
        'EXT_texture_compression_rgtc',
        'EXT_texture_filter_anisotropic',
        'KHR_parallel_shader_compile',
        'OES_texture_float_linear',
        'WEBGL_blend_func_extended',
        'WEBGL_compressed_texture_astc',
        'WEBGL_compressed_texture_etc',
        'WEBGL_compressed_texture_etc1',
        'WEBGL_compressed_texture_s3tc',
        'WEBGL_compressed_texture_s3tc_srgb',
        'WEBGL_debug_renderer_info',
        'WEBGL_debug_shaders',
        'WEBGL_lose_context',
        'WEBGL_multi_draw',
        'WEBGL_polygon_mode'
      ];
      // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
      return (ctx.getSupportedExtensions() || []).filter(ext => supportedExtensions.includes(ext));
    };
  
  
  var GL = {
  counter:1,
  buffers:[],
  programs:[],
  framebuffers:[],
  renderbuffers:[],
  textures:[],
  shaders:[],
  vaos:[],
  contexts:[],
  offscreenCanvases:{
  },
  queries:[],
  samplers:[],
  transformFeedbacks:[],
  syncs:[],
  stringCache:{
  },
  stringiCache:{
  },
  unpackAlignment:4,
  unpackRowLength:0,
  recordError:(errorCode) => {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },
  getNewId:(table) => {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },
  genObject:(n, buffers, createFunction, objectTable
        ) => {
        for (var i = 0; i < n; i++) {
          var buffer = GLctx[createFunction]();
          var id = buffer && GL.getNewId(objectTable);
          if (buffer) {
            buffer.name = id;
            objectTable[id] = buffer;
          } else {
            GL.recordError(0x502 /* GL_INVALID_OPERATION */);
          }
          HEAP32[(((buffers)+(i*4))>>2)] = id;
        }
      },
  getSource:(shader, count, string, length) => {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAPU32[(((length)+(i*4))>>2)] : undefined;
          source += UTF8ToString(HEAPU32[(((string)+(i*4))>>2)], len);
        }
        return source;
      },
  createContext:(/** @type {HTMLCanvasElement} */ canvas, webGLContextAttributes) => {
  
        // BUG: Workaround Safari WebGL issue: After successfully acquiring WebGL
        // context on a canvas, calling .getContext() will always return that
        // context independent of which 'webgl' or 'webgl2'
        // context version was passed. See:
        //   https://bugs.webkit.org/show_bug.cgi?id=222758
        // and:
        //   https://github.com/emscripten-core/emscripten/issues/13295.
        // TODO: Once the bug is fixed and shipped in Safari, adjust the Safari
        // version field in above check.
        if (!canvas.getContextSafariWebGL2Fixed) {
          canvas.getContextSafariWebGL2Fixed = canvas.getContext;
          /** @type {function(this:HTMLCanvasElement, string, (Object|null)=): (Object|null)} */
          function fixedGetContext(ver, attrs) {
            var gl = canvas.getContextSafariWebGL2Fixed(ver, attrs);
            return ((ver == 'webgl') == (gl instanceof WebGLRenderingContext)) ? gl : null;
          }
          canvas.getContext = fixedGetContext;
        }
  
        var ctx = canvas.getContext("webgl2", webGLContextAttributes);
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
        return handle;
      },
  registerContext:(ctx, webGLContextAttributes) => {
        // without pthreads a context is just an integer ID
        var handle = GL.getNewId(GL.contexts);
  
        var context = {
          handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
        // Store the created context object so that we can access the context
        // given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault == 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
        return handle;
      },
  makeContextCurrent:(contextHandle) => {
  
        // Active Emscripten GL layer context object.
        GL.currentContext = GL.contexts[contextHandle];
        // Active WebGL context object.
        Module['ctx'] = GLctx = GL.currentContext?.GLctx;
        return !(contextHandle && !GLctx);
      },
  getContext:(contextHandle) => {
        return GL.contexts[contextHandle];
      },
  deleteContext:(contextHandle) => {
        if (GL.currentContext === GL.contexts[contextHandle]) {
          GL.currentContext = null;
        }
        if (typeof JSEvents == 'object') {
          // Release all JS event handlers on the DOM element that the GL context is
          // associated with since the context is now deleted.
          JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
        }
        // Make sure the canvas object no longer refers to the context object so
        // there are no GC surprises.
        if (GL.contexts[contextHandle]?.GLctx.canvas) {
          GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
        }
        GL.contexts[contextHandle] = null;
      },
  initExtensions:(context) => {
        // If this function is called without a specific context object, init the
        // extensions of the currently active context.
        context ||= GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, ction GL interop
        // layer itself will need to know if they exist.
  
        // Extensions that are available in both WebGL 1 and WebGL 2
        webgl_enable_WEBGL_multi_draw(GLctx);
        webgl_enable_EXT_polygon_offset_clamp(GLctx);
        webgl_enable_EXT_clip_control(GLctx);
        webgl_enable_WEBGL_polygon_mode(GLctx);
        // Extensions that are available from WebGL >= 2 (no-op if called on a WebGL 1 context active)
        webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance(GLctx);
        webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance(GLctx);
  
        // On WebGL 2, EXT_disjoint_timer_query is replaced with an alternative
        // that's based on core APIs, and exposes only the queryCounterEXT()
        // entrypoint.
        if (context.version >= 2) {
          GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query_webgl2");
        }
  
        // However, Firefox exposes the WebGL 1 version on WebGL 2 as well and
        // thus we look for the WebGL 1 version again if the WebGL 2 version
        // isn't present. https://bugzilla.mozilla.org/show_bug.cgi?id=1328882
        if (context.version < 2 || !GLctx.disjointTimerQueryExt)
        {
          GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
        }
  
        getEmscriptenSupportedExtensions(GLctx).forEach((ext) => {
          // WEBGL_lose_context, WEBGL_debug_renderer_info and WEBGL_debug_shaders
          // are not enabled by default.
          if (!ext.includes('lose_context') && !ext.includes('debug')) {
            // Call .getExtension() to enable that extension permanently.
            GLctx.getExtension(ext);
          }
        });
      },
  };
  
  var _eglCreateContext = (display, config, hmm, contextAttribs) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
  
      // EGL 1.4 spec says default EGL_CONTEXT_CLIENT_VERSION is GLES1, but this is not supported by Emscripten.
      // So user must pass EGL_CONTEXT_CLIENT_VERSION == 2 to initialize EGL.
      var glesContextVersion = 1;
      for (;;) {
        var param = HEAP32[((contextAttribs)>>2)];
        if (param == 0x3098 /*EGL_CONTEXT_CLIENT_VERSION*/) {
          glesContextVersion = HEAP32[(((contextAttribs)+(4))>>2)];
        } else if (param == 0x3038 /*EGL_NONE*/) {
          break;
        } else {
          /* EGL1.4 specifies only EGL_CONTEXT_CLIENT_VERSION as supported attribute */
          EGL.setErrorCode(0x3004 /*EGL_BAD_ATTRIBUTE*/);
          return 0;
        }
        contextAttribs += 8;
      }
      if (glesContextVersion < 2 || glesContextVersion > 3) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0; /* EGL_NO_CONTEXT */
      }
  
      EGL.contextAttributes.majorVersion = glesContextVersion - 1; // WebGL 1 is GLES 2, WebGL2 is GLES3
      EGL.contextAttributes.minorVersion = 0;
  
      EGL.context = GL.createContext(Browser.getCanvas(), EGL.contextAttributes);
  
      if (EGL.context != 0) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
  
        // Run callbacks so that GL emulation works
        GL.makeContextCurrent(EGL.context);
        Browser.useWebGL = true;
        Browser.moduleContextCreatedCallbacks.forEach((callback) => callback());
  
        // Note: This function only creates a context, but it shall not make it active.
        GL.makeContextCurrent(null);
        return 62004;
      } else {
        EGL.setErrorCode(0x3009 /* EGL_BAD_MATCH */); // By the EGL 1.4 spec, an implementation that does not support GLES2 (WebGL in this case), this error code is set.
        return 0; /* EGL_NO_CONTEXT */
      }
    };

  var _eglCreateWindowSurface = (display, config, win, attrib_list) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      // TODO: Examine attrib_list! Parameters that can be present there are:
      // - EGL_RENDER_BUFFER (must be EGL_BACK_BUFFER)
      // - EGL_VG_COLORSPACE (can't be set)
      // - EGL_VG_ALPHA_FORMAT (can't be set)
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 62006; /* Magic ID for Emscripten 'default surface' */
    };

  
  var _eglDestroyContext = (display, context) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (context != 62004) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
  
      GL.deleteContext(EGL.context);
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      if (EGL.currentContext == context) {
        EGL.currentContext = 0;
      }
      return 1 /* EGL_TRUE */;
    };

  var _eglDestroySurface = (display, surface) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (surface != 62006 /* Magic ID for the only EGLSurface supported by Emscripten */) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 1;
      }
      if (EGL.currentReadSurface == surface) {
        EGL.currentReadSurface = 0;
      }
      if (EGL.currentDrawSurface == surface) {
        EGL.currentDrawSurface = 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1; /* Magic ID for Emscripten 'default surface' */
    };

  var _eglGetConfigAttrib = (display, config, attribute, value) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      if (!value) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      switch (attribute) {
      case 0x3020: // EGL_BUFFER_SIZE
        HEAP32[((value)>>2)] = EGL.contextAttributes.alpha ? 32 : 24;
        return 1;
      case 0x3021: // EGL_ALPHA_SIZE
        HEAP32[((value)>>2)] = EGL.contextAttributes.alpha ? 8 : 0;
        return 1;
      case 0x3022: // EGL_BLUE_SIZE
        HEAP32[((value)>>2)] = 8;
        return 1;
      case 0x3023: // EGL_GREEN_SIZE
        HEAP32[((value)>>2)] = 8;
        return 1;
      case 0x3024: // EGL_RED_SIZE
        HEAP32[((value)>>2)] = 8;
        return 1;
      case 0x3025: // EGL_DEPTH_SIZE
        HEAP32[((value)>>2)] = EGL.contextAttributes.depth ? 24 : 0;
        return 1;
      case 0x3026: // EGL_STENCIL_SIZE
        HEAP32[((value)>>2)] = EGL.contextAttributes.stencil ? 8 : 0;
        return 1;
      case 0x3027: // EGL_CONFIG_CAVEAT
        // We can return here one of EGL_NONE (0x3038), EGL_SLOW_CONFIG (0x3050) or EGL_NON_CONFORMANT_CONFIG (0x3051).
        HEAP32[((value)>>2)] = 0x3038;
        return 1;
      case 0x3028: // EGL_CONFIG_ID
        HEAP32[((value)>>2)] = 62002;
        return 1;
      case 0x3029: // EGL_LEVEL
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x302A: // EGL_MAX_PBUFFER_HEIGHT
        HEAP32[((value)>>2)] = 4096;
        return 1;
      case 0x302B: // EGL_MAX_PBUFFER_PIXELS
        HEAP32[((value)>>2)] = 16777216;
        return 1;
      case 0x302C: // EGL_MAX_PBUFFER_WIDTH
        HEAP32[((value)>>2)] = 4096;
        return 1;
      case 0x302D: // EGL_NATIVE_RENDERABLE
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x302E: // EGL_NATIVE_VISUAL_ID
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x302F: // EGL_NATIVE_VISUAL_TYPE
        HEAP32[((value)>>2)] = 0x3038;
        return 1;
      case 0x3031: // EGL_SAMPLES
        HEAP32[((value)>>2)] = EGL.contextAttributes.antialias ? 4 : 0;
        return 1;
      case 0x3032: // EGL_SAMPLE_BUFFERS
        HEAP32[((value)>>2)] = EGL.contextAttributes.antialias ? 1 : 0;
        return 1;
      case 0x3033: // EGL_SURFACE_TYPE
        HEAP32[((value)>>2)] = 0x4;
        return 1;
      case 0x3034: // EGL_TRANSPARENT_TYPE
        // If this returns EGL_TRANSPARENT_RGB (0x3052), transparency is used through color-keying. No such thing applies to Emscripten canvas.
        HEAP32[((value)>>2)] = 0x3038;
        return 1;
      case 0x3035: // EGL_TRANSPARENT_BLUE_VALUE
      case 0x3036: // EGL_TRANSPARENT_GREEN_VALUE
      case 0x3037: // EGL_TRANSPARENT_RED_VALUE
        // "If EGL_TRANSPARENT_TYPE is EGL_NONE, then the values for EGL_TRANSPARENT_RED_VALUE, EGL_TRANSPARENT_GREEN_VALUE, and EGL_TRANSPARENT_BLUE_VALUE are undefined."
        HEAP32[((value)>>2)] = -1;
        return 1;
      case 0x3039: // EGL_BIND_TO_TEXTURE_RGB
      case 0x303A: // EGL_BIND_TO_TEXTURE_RGBA
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x303B: // EGL_MIN_SWAP_INTERVAL
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x303C: // EGL_MAX_SWAP_INTERVAL
        HEAP32[((value)>>2)] = 1;
        return 1;
      case 0x303D: // EGL_LUMINANCE_SIZE
      case 0x303E: // EGL_ALPHA_MASK_SIZE
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x303F: // EGL_COLOR_BUFFER_TYPE
        // EGL has two types of buffers: EGL_RGB_BUFFER and EGL_LUMINANCE_BUFFER.
        HEAP32[((value)>>2)] = 0x308E;
        return 1;
      case 0x3040: // EGL_RENDERABLE_TYPE
        // A bit combination of EGL_OPENGL_ES_BIT,EGL_OPENVG_BIT,EGL_OPENGL_ES2_BIT and EGL_OPENGL_BIT.
        HEAP32[((value)>>2)] = 0x4;
        return 1;
      case 0x3042: // EGL_CONFORMANT
        // "EGL_CONFORMANT is a mask indicating if a client API context created with respect to the corresponding EGLConfig will pass the required conformance tests for that API."
        HEAP32[((value)>>2)] = 0;
        return 1;
      default:
        EGL.setErrorCode(0x3004 /* EGL_BAD_ATTRIBUTE */);
        return 0;
      }
    };

  var _eglGetDisplay = (nativeDisplayType) => {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      // Emscripten EGL implementation "emulates" X11, and eglGetDisplay is
      // expected to accept/receive a pointer to an X11 Display object (or
      // EGL_DEFAULT_DISPLAY).
      if (nativeDisplayType != 0 /* EGL_DEFAULT_DISPLAY */ && nativeDisplayType != 1 /* see library_xlib.js */) {
        return 0; // EGL_NO_DISPLAY
      }
      return 62000;
    };

  var _eglGetError = () => EGL.errorCode;

  var _eglInitialize = (display, majorVersion, minorVersion) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (majorVersion) {
        HEAP32[((majorVersion)>>2)] = 1; // Advertise EGL Major version: '1'
      }
      if (minorVersion) {
        HEAP32[((minorVersion)>>2)] = 4; // Advertise EGL Minor version: '4'
      }
      EGL.defaultDisplayInitialized = true;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };

  
  var _eglMakeCurrent = (display, draw, read, context) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0 /* EGL_FALSE */;
      }
      //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy.
      if (context != 0 && context != 62004) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
      if ((read != 0 && read != 62006) || (draw != 0 && draw != 62006 /* Magic ID for Emscripten 'default surface' */)) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 0;
      }
  
      GL.makeContextCurrent(context ? EGL.context : null);
  
      EGL.currentContext = context;
      EGL.currentDrawSurface = draw;
      EGL.currentReadSurface = read;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1 /* EGL_TRUE */;
    };

  
  
  var stringToNewUTF8 = (str) => {
      var size = lengthBytesUTF8(str) + 1;
      var ret = _malloc(size);
      if (ret) stringToUTF8(str, ret, size);
      return ret;
    };
  
  var _eglQueryString = (display, name) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy.
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      if (EGL.stringCache[name]) return EGL.stringCache[name];
      var ret;
      switch (name) {
        case 0x3053 /* EGL_VENDOR */: ret = stringToNewUTF8("Emscripten"); break;
        case 0x3054 /* EGL_VERSION */: ret = stringToNewUTF8("1.4 Emscripten EGL"); break;
        case 0x3055 /* EGL_EXTENSIONS */:  ret = stringToNewUTF8(""); break; // Currently not supporting any EGL extensions.
        case 0x308D /* EGL_CLIENT_APIS */: ret = stringToNewUTF8("OpenGL_ES"); break;
        default:
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
      }
      EGL.stringCache[name] = ret;
      return ret;
    };

  
  var _eglSwapBuffers = (dpy, surface) => {
  
      if (!EGL.defaultDisplayInitialized) {
        EGL.setErrorCode(0x3001 /* EGL_NOT_INITIALIZED */);
      } else if (!GLctx) {
        EGL.setErrorCode(0x3002 /* EGL_BAD_ACCESS */);
      } else if (GLctx.isContextLost()) {
        EGL.setErrorCode(0x300E /* EGL_CONTEXT_LOST */);
      } else {
        // According to documentation this does an implicit flush.
        // Due to discussion at https://github.com/emscripten-core/emscripten/pull/1871
        // the flush was removed since this _may_ result in slowing code down.
        //_glFlush();
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1 /* EGL_TRUE */;
      }
      return 0 /* EGL_FALSE */;
    };

  
  
  
  
    /**
     * @param {number=} arg
     * @param {boolean=} noSetTiming
     */
  var setMainLoop = (iterFunc, fps, simulateInfiniteLoop, arg, noSetTiming) => {
      MainLoop.func = iterFunc;
      MainLoop.arg = arg;
  
      var thisMainLoopId = MainLoop.currentlyRunningMainloop;
      function checkIsRunning() {
        if (thisMainLoopId < MainLoop.currentlyRunningMainloop) {
          
          maybeExit();
          return false;
        }
        return true;
      }
  
      // We create the loop runner here but it is not actually running until
      // _emscripten_set_main_loop_timing is called (which might happen a
      // later time).  This member signifies that the current runner has not
      // yet been started so that we can call runtimeKeepalivePush when it
      // gets it timing set for the first time.
      MainLoop.running = false;
      MainLoop.runner = function MainLoop_runner() {
        if (ABORT) return;
        if (MainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = MainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (MainLoop.remainingBlockers) {
            var remaining = MainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              MainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              MainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          MainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (!checkIsRunning()) return;
  
          setTimeout(MainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (!checkIsRunning()) return;
  
        // Implement very basic swap interval control
        MainLoop.currentFrameNumber = MainLoop.currentFrameNumber + 1 | 0;
        if (MainLoop.timingMode == 1 && MainLoop.timingValue > 1 && MainLoop.currentFrameNumber % MainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          MainLoop.scheduler();
          return;
        } else if (MainLoop.timingMode == 0) {
          MainLoop.tickStartTime = _emscripten_get_now();
        }
  
        MainLoop.runIter(iterFunc);
  
        // catch pauses from the main loop itself
        if (!checkIsRunning()) return;
  
        MainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps > 0) {
          _emscripten_set_main_loop_timing(0, 1000.0 / fps);
        } else {
          // Do rAF by rendering each frame (no decimating)
          _emscripten_set_main_loop_timing(1, 1);
        }
  
        MainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'unwind';
      }
    };
  
  
  var MainLoop = {
  running:false,
  scheduler:null,
  method:"",
  currentlyRunningMainloop:0,
  func:null,
  arg:0,
  timingMode:0,
  timingValue:0,
  currentFrameNumber:0,
  queue:[],
  preMainLoop:[],
  postMainLoop:[],
  pause() {
        MainLoop.scheduler = null;
        // Incrementing this signals the previous main loop that it's now become old, and it must return.
        MainLoop.currentlyRunningMainloop++;
      },
  resume() {
        MainLoop.currentlyRunningMainloop++;
        var timingMode = MainLoop.timingMode;
        var timingValue = MainLoop.timingValue;
        var func = MainLoop.func;
        MainLoop.func = null;
        // do not set timing and call scheduler, we will do it on the next lines
        setMainLoop(func, 0, false, MainLoop.arg, true);
        _emscripten_set_main_loop_timing(timingMode, timingValue);
        MainLoop.scheduler();
      },
  updateStatus() {
        if (Module['setStatus']) {
          var message = Module['statusMessage'] || 'Please wait...';
          var remaining = MainLoop.remainingBlockers ?? 0;
          var expected = MainLoop.expectedBlockers ?? 0;
          if (remaining) {
            if (remaining < expected) {
              Module['setStatus'](`{message} ({expected - remaining}/{expected})`);
            } else {
              Module['setStatus'](message);
            }
          } else {
            Module['setStatus']('');
          }
        }
      },
  init() {
        Module['preMainLoop'] && MainLoop.preMainLoop.push(Module['preMainLoop']);
        Module['postMainLoop'] && MainLoop.postMainLoop.push(Module['postMainLoop']);
      },
  runIter(func) {
        if (ABORT) return;
        for (var pre of MainLoop.preMainLoop) {
          if (pre() === false) {
            return; // |return false| skips a frame
          }
        }
        callUserCallback(func);
        for (var post of MainLoop.postMainLoop) {
          post();
        }
      },
  nextRAF:0,
  fakeRequestAnimationFrame(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (MainLoop.nextRAF === 0) {
          MainLoop.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= MainLoop.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            MainLoop.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(MainLoop.nextRAF - now, 0);
        setTimeout(func, delay);
      },
  requestAnimationFrame(func) {
        if (typeof requestAnimationFrame == 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = MainLoop.fakeRequestAnimationFrame;
        RAF(func);
      },
  };
  var _emscripten_set_main_loop_timing = (mode, value) => {
      MainLoop.timingMode = mode;
      MainLoop.timingValue = value;
  
      if (!MainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (!MainLoop.running) {
        
        MainLoop.running = true;
      }
      if (mode == 0) {
        MainLoop.scheduler = function MainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, MainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(MainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        MainLoop.method = 'timeout';
      } else if (mode == 1) {
        MainLoop.scheduler = function MainLoop_scheduler_rAF() {
          MainLoop.requestAnimationFrame(MainLoop.runner);
        };
        MainLoop.method = 'rAF';
      } else if (mode == 2) {
        if (typeof MainLoop.setImmediate == 'undefined') {
          if (typeof setImmediate == 'undefined') {
            // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
            var setImmediates = [];
            var emscriptenMainLoopMessageId = 'setimmediate';
            /** @param {Event} event */
            var MainLoop_setImmediate_messageHandler = (event) => {
              // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
              // so check for both cases.
              if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
                event.stopPropagation();
                setImmediates.shift()();
              }
            };
            addEventListener("message", MainLoop_setImmediate_messageHandler, true);
            MainLoop.setImmediate = /** @type{function(function(): ?, ...?): number} */((func) => {
              setImmediates.push(func);
              if (ENVIRONMENT_IS_WORKER) {
                Module['setImmediates'] ??= [];
                Module['setImmediates'].push(func);
                postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
              } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
            });
          } else {
            MainLoop.setImmediate = setImmediate;
          }
        }
        MainLoop.scheduler = function MainLoop_scheduler_setImmediate() {
          MainLoop.setImmediate(MainLoop.runner);
        };
        MainLoop.method = 'immediate';
      }
      return 0;
    };
  
  var _eglSwapInterval = (display, interval) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (interval == 0) _emscripten_set_main_loop_timing(0, 0);
      else _emscripten_set_main_loop_timing(1, interval);
  
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };

  var _eglTerminate = (display) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      EGL.currentContext = 0;
      EGL.currentReadSurface = 0;
      EGL.currentDrawSurface = 0;
      EGL.defaultDisplayInitialized = false;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };

  
  /** @suppress {duplicate } */
  var _eglWaitClient = () => {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };
  var _eglWaitGL = _eglWaitClient;

  var _eglWaitNative = (nativeEngineId) => {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };

  var readEmAsmArgsArray = [];
  var readEmAsmArgs = (sigPtr, buf) => {
      readEmAsmArgsArray.length = 0;
      var ch;
      // Most arguments are i32s, so shift the buffer pointer so it is a plain
      // index into HEAP32.
      while (ch = HEAPU8[sigPtr++]) {
        // Floats are always passed as doubles, so all types except for 'i'
        // are 8 bytes and require alignment.
        var wide = (ch != 105);
        wide &= (ch != 112);
        buf += wide && (buf % 8) ? 4 : 0;
        readEmAsmArgsArray.push(
          // Special case for pointers under wasm64 or CAN_ADDRESS_2GB mode.
          ch == 112 ? HEAPU32[((buf)>>2)] :
          ch == 106 ? HEAP64[((buf)>>3)] :
          ch == 105 ?
            HEAP32[((buf)>>2)] :
            HEAPF64[((buf)>>3)]
        );
        buf += wide ? 8 : 4;
      }
      return readEmAsmArgsArray;
    };
  var runEmAsmFunction = (code, sigPtr, argbuf) => {
      var args = readEmAsmArgs(sigPtr, argbuf);
      return ASM_CONSTS[code](...args);
    };
  var _emscripten_asm_const_int = (code, sigPtr, argbuf) => {
      return runEmAsmFunction(code, sigPtr, argbuf);
    };

  var runMainThreadEmAsm = (emAsmAddr, sigPtr, argbuf, sync) => {
      var args = readEmAsmArgs(sigPtr, argbuf);
      return ASM_CONSTS[emAsmAddr](...args);
    };
  var _emscripten_asm_const_int_sync_on_main_thread = (emAsmAddr, sigPtr, argbuf) => runMainThreadEmAsm(emAsmAddr, sigPtr, argbuf, 1);

  var _emscripten_asm_const_ptr_sync_on_main_thread = (emAsmAddr, sigPtr, argbuf) => runMainThreadEmAsm(emAsmAddr, sigPtr, argbuf, 1);


  var onExits = [];
  var addOnExit = (cb) => onExits.push(cb);
  var JSEvents = {
  memcpy(target, src, size) {
        HEAP8.set(HEAP8.subarray(src, src + size), target);
      },
  removeAllEventListeners() {
        while (JSEvents.eventHandlers.length) {
          JSEvents._removeHandler(JSEvents.eventHandlers.length - 1);
        }
        JSEvents.deferredCalls = [];
      },
  inEventHandler:0,
  deferredCalls:[],
  deferCall(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for (var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for (var call of JSEvents.deferredCalls) {
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction,
          precedence,
          argsList
        });
  
        JSEvents.deferredCalls.sort((x,y) => x.precedence < y.precedence);
      },
  removeDeferredCalls(targetFunction) {
        JSEvents.deferredCalls = JSEvents.deferredCalls.filter((call) => call.targetFunction != targetFunction);
      },
  canPerformEventHandlerRequests() {
        if (navigator.userActivation) {
          // Verify against transient activation status from UserActivation API
          // whether it is possible to perform a request here without needing to defer. See
          // https://developer.mozilla.org/en-US/docs/Web/Security/User_activation#transient_activation
          // and https://caniuse.com/mdn-api_useractivation
          // At the time of writing, Firefox does not support this API: https://bugzilla.mozilla.org/show_bug.cgi?id=1791079
          return navigator.userActivation.isActive;
        }
  
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },
  runDeferredCalls() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        var deferredCalls = JSEvents.deferredCalls;
        JSEvents.deferredCalls = [];
        for (var call of deferredCalls) {
          call.targetFunction(...call.argsList);
        }
      },
  eventHandlers:[],
  removeAllHandlersOnTarget:(target, eventTypeString) => {
        for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target &&
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },
  _removeHandler(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },
  registerOrRemoveHandler(eventHandler) {
        if (!eventHandler.target) {
          return -4;
        }
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = function(event) {
            // Increment nesting count for the event handler.
            ++JSEvents.inEventHandler;
            JSEvents.currentEventHandler = eventHandler;
            // Process any old deferred calls the user has placed.
            JSEvents.runDeferredCalls();
            // Process the actual event, calls back to user C code handler.
            eventHandler.handlerFunc(event);
            // Process any new deferred calls that were placed right now from this event handler.
            JSEvents.runDeferredCalls();
            // Out of event handler - restore nesting count.
            --JSEvents.inEventHandler;
          };
  
          eventHandler.target.addEventListener(eventHandler.eventTypeString,
                                               eventHandler.eventListenerFunc,
                                               eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
        } else {
          for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
        return 0;
      },
  getNodeNameForTarget(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return target?.nodeName || '';
      },
  fullscreenEnabled() {
        return document.fullscreenEnabled
        // Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitFullscreenEnabled.
        // TODO: If Safari at some point ships with unprefixed version, update the version check above.
        || document.webkitFullscreenEnabled
         ;
      },
  };
  
  var hideEverythingExceptGivenElement = (onlyVisibleElement) => {
      var child = onlyVisibleElement;
      var parent = child.parentNode;
      var hiddenElements = [];
      while (child != document.body) {
        var children = parent.children;
        for (var currChild of children) {
          if (currChild != child) {
            hiddenElements.push({ node: currChild, displayState: currChild.style.display });
            currChild.style.display = 'none';
          }
        }
        child = parent;
        parent = parent.parentNode;
      }
      return hiddenElements;
    };
  
  var restoreOldWindowedStyle = null;
  
  var restoreHiddenElements = (hiddenElements) => {
      for (var elem of hiddenElements) {
        elem.node.style.display = elem.displayState;
      }
    };
  
  var currentFullscreenStrategy = {
  };
  
  var setLetterbox = (element, topBottom, leftRight) => {
      // Cannot use margin to specify letterboxes in FF or Chrome, since those ignore margins in fullscreen mode.
      element.style.paddingLeft = element.style.paddingRight = leftRight + 'px';
      element.style.paddingTop = element.style.paddingBottom = topBottom + 'px';
    };
  
  
  var maybeCStringToJsString = (cString) => {
      // "cString > 2" checks if the input is a number, and isn't of the special
      // values we accept here, EMSCRIPTEN_EVENT_TARGET_* (which map to 0, 1, 2).
      // In other words, if cString > 2 then it's a pointer to a valid place in
      // memory, and points to a C string.
      return cString > 2 ? UTF8ToString(cString) : cString;
    };
  
  /** @type {Object} */
  var specialHTMLTargets = [0, document, window];
  /** @suppress {duplicate } */
  var findEventTarget = (target) => {
      target = maybeCStringToJsString(target);
      var domElement = specialHTMLTargets[target] || document.querySelector(target);
      return domElement;
    };
  var findCanvasEventTarget = findEventTarget;
  var _emscripten_get_canvas_element_size = (target, width, height) => {
      var canvas = findCanvasEventTarget(target);
      if (!canvas) return -4;
      HEAP32[((width)>>2)] = canvas.width;
      HEAP32[((height)>>2)] = canvas.height;
    };
  
  
  
  
  
  var stackAlloc = (sz) => __emscripten_stack_alloc(sz);
  var stringToUTF8OnStack = (str) => {
      var size = lengthBytesUTF8(str) + 1;
      var ret = stackAlloc(size);
      stringToUTF8(str, ret, size);
      return ret;
    };
  var getCanvasElementSize = (target) => {
      var sp = stackSave();
      var w = stackAlloc(8);
      var h = w + 4;
  
      var targetInt = stringToUTF8OnStack(target.id);
      var ret = _emscripten_get_canvas_element_size(targetInt, w, h);
      var size = [HEAP32[((w)>>2)], HEAP32[((h)>>2)]];
      stackRestore(sp);
      return size;
    };
  
  var _emscripten_set_canvas_element_size = (target, width, height) => {
      var canvas = findCanvasEventTarget(target);
      if (!canvas) return -4;
      canvas.width = width;
      canvas.height = height;
      return 0;
    };
  
  
  
  var setCanvasElementSize = (target, width, height) => {
      if (!target.controlTransferredOffscreen) {
        target.width = width;
        target.height = height;
      } else {
        // This function is being called from high-level JavaScript code instead of asm.js/Wasm,
        // and it needs to synchronously proxy over to another thread, so marshal the string onto the heap to do the call.
        var sp = stackSave();
        var targetInt = stringToUTF8OnStack(target.id);
        _emscripten_set_canvas_element_size(targetInt, width, height);
        stackRestore(sp);
      }
    };
  
  /** @suppress {checkTypes} */
  var jstoi_q = (str) => parseInt(str);
  var softFullscreenResizeWebGLRenderTarget = () => {
      var dpr = devicePixelRatio;
      var inHiDPIFullscreenMode = currentFullscreenStrategy.canvasResolutionScaleMode == 2;
      var inAspectRatioFixedFullscreenMode = currentFullscreenStrategy.scaleMode == 2;
      var inPixelPerfectFullscreenMode = currentFullscreenStrategy.canvasResolutionScaleMode != 0;
      var inCenteredWithoutScalingFullscreenMode = currentFullscreenStrategy.scaleMode == 3;
      var screenWidth = inHiDPIFullscreenMode ? Math.round(innerWidth*dpr) : innerWidth;
      var screenHeight = inHiDPIFullscreenMode ? Math.round(innerHeight*dpr) : innerHeight;
      var w = screenWidth;
      var h = screenHeight;
      var canvas = currentFullscreenStrategy.target;
      var canvasSize = getCanvasElementSize(canvas);
      var x = canvasSize[0];
      var y = canvasSize[1];
      var topMargin;
  
      if (inAspectRatioFixedFullscreenMode) {
        if (w*y < x*h) h = (w * y / x) | 0;
        else if (w*y > x*h) w = (h * x / y) | 0;
        topMargin = ((screenHeight - h) / 2) | 0;
      }
  
      if (inPixelPerfectFullscreenMode) {
        setCanvasElementSize(canvas, w, h);
        if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, w, h);
      }
  
      // Back to CSS pixels.
      if (inHiDPIFullscreenMode) {
        topMargin /= dpr;
        w /= dpr;
        h /= dpr;
        // Round to nearest 4 digits of precision.
        w = Math.round(w*1e4)/1e4;
        h = Math.round(h*1e4)/1e4;
        topMargin = Math.round(topMargin*1e4)/1e4;
      }
  
      if (inCenteredWithoutScalingFullscreenMode) {
        var t = (innerHeight - jstoi_q(canvas.style.height)) / 2;
        var b = (innerWidth - jstoi_q(canvas.style.width)) / 2;
        setLetterbox(canvas, t, b);
      } else {
        canvas.style.width = w + 'px';
        canvas.style.height = h + 'px';
        var b = (innerWidth - w) / 2;
        setLetterbox(canvas, topMargin, b);
      }
  
      if (!inCenteredWithoutScalingFullscreenMode && currentFullscreenStrategy.canvasResizedCallback) {
        ((a1, a2, a3) => dynCall_iiii(currentFullscreenStrategy.canvasResizedCallback, a1, a2, a3))(37, 0, currentFullscreenStrategy.canvasResizedCallbackUserData);
      }
    };
  
  
  
  var registerRestoreOldStyle = (canvas) => {
      var canvasSize = getCanvasElementSize(canvas);
      var oldWidth = canvasSize[0];
      var oldHeight = canvasSize[1];
      var oldCssWidth = canvas.style.width;
      var oldCssHeight = canvas.style.height;
      var oldBackgroundColor = canvas.style.backgroundColor; // Chrome reads color from here.
      var oldDocumentBackgroundColor = document.body.style.backgroundColor; // IE11 reads color from here.
      // Firefox always has black background color.
      var oldPaddingLeft = canvas.style.paddingLeft; // Chrome, FF, Safari
      var oldPaddingRight = canvas.style.paddingRight;
      var oldPaddingTop = canvas.style.paddingTop;
      var oldPaddingBottom = canvas.style.paddingBottom;
      var oldMarginLeft = canvas.style.marginLeft; // IE11
      var oldMarginRight = canvas.style.marginRight;
      var oldMarginTop = canvas.style.marginTop;
      var oldMarginBottom = canvas.style.marginBottom;
      var oldDocumentBodyMargin = document.body.style.margin;
      var oldDocumentOverflow = document.documentElement.style.overflow; // Chrome, Firefox
      var oldDocumentScroll = document.body.scroll; // IE
      var oldImageRendering = canvas.style.imageRendering;
  
      function restoreOldStyle() {
        var fullscreenElement = document.fullscreenElement
          || document.webkitFullscreenElement
          ;
        if (!fullscreenElement) {
          document.removeEventListener('fullscreenchange', restoreOldStyle);
  
          // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
          // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
          document.removeEventListener('webkitfullscreenchange', restoreOldStyle);
  
          setCanvasElementSize(canvas, oldWidth, oldHeight);
  
          canvas.style.width = oldCssWidth;
          canvas.style.height = oldCssHeight;
          canvas.style.backgroundColor = oldBackgroundColor; // Chrome
          // IE11 hack: assigning 'undefined' or an empty string to document.body.style.backgroundColor has no effect, so first assign back the default color
          // before setting the undefined value. Setting undefined value is also important, or otherwise we would later treat that as something that the user
          // had explicitly set so subsequent fullscreen transitions would not set background color properly.
          if (!oldDocumentBackgroundColor) document.body.style.backgroundColor = 'white';
          document.body.style.backgroundColor = oldDocumentBackgroundColor; // IE11
          canvas.style.paddingLeft = oldPaddingLeft; // Chrome, FF, Safari
          canvas.style.paddingRight = oldPaddingRight;
          canvas.style.paddingTop = oldPaddingTop;
          canvas.style.paddingBottom = oldPaddingBottom;
          canvas.style.marginLeft = oldMarginLeft; // IE11
          canvas.style.marginRight = oldMarginRight;
          canvas.style.marginTop = oldMarginTop;
          canvas.style.marginBottom = oldMarginBottom;
          document.body.style.margin = oldDocumentBodyMargin;
          document.documentElement.style.overflow = oldDocumentOverflow; // Chrome, Firefox
          document.body.scroll = oldDocumentScroll; // IE
          canvas.style.imageRendering = oldImageRendering;
          if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
  
          if (currentFullscreenStrategy.canvasResizedCallback) {
            ((a1, a2, a3) => dynCall_iiii(currentFullscreenStrategy.canvasResizedCallback, a1, a2, a3))(37, 0, currentFullscreenStrategy.canvasResizedCallbackUserData);
          }
        }
      }
      document.addEventListener('fullscreenchange', restoreOldStyle);
      // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
      // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
      document.addEventListener('webkitfullscreenchange', restoreOldStyle);
      return restoreOldStyle;
    };
  
  
  
  
  var getBoundingClientRect = (e) => specialHTMLTargets.indexOf(e) < 0 ? e.getBoundingClientRect() : {'left':0,'top':0};
  var JSEvents_resizeCanvasForFullscreen = (target, strategy) => {
      var restoreOldStyle = registerRestoreOldStyle(target);
      var cssWidth = strategy.softFullscreen ? innerWidth : screen.width;
      var cssHeight = strategy.softFullscreen ? innerHeight : screen.height;
      var rect = getBoundingClientRect(target);
      var windowedCssWidth = rect.width;
      var windowedCssHeight = rect.height;
      var canvasSize = getCanvasElementSize(target);
      var windowedRttWidth = canvasSize[0];
      var windowedRttHeight = canvasSize[1];
  
      if (strategy.scaleMode == 3) {
        setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
        cssWidth = windowedCssWidth;
        cssHeight = windowedCssHeight;
      } else if (strategy.scaleMode == 2) {
        if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
          var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
          setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
          cssHeight = desiredCssHeight;
        } else {
          var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
          setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
          cssWidth = desiredCssWidth;
        }
      }
  
      // If we are adding padding, must choose a background color or otherwise Chrome will give the
      // padding a default white color. Do it only if user has not customized their own background color.
      target.style.backgroundColor ||= 'black';
      // IE11 does the same, but requires the color to be set in the document body.
      document.body.style.backgroundColor ||= 'black'; // IE11
      // Firefox always shows black letterboxes independent of style color.
  
      target.style.width = cssWidth + 'px';
      target.style.height = cssHeight + 'px';
  
      if (strategy.filteringMode == 1) {
        target.style.imageRendering = 'optimizeSpeed';
        target.style.imageRendering = '-moz-crisp-edges';
        target.style.imageRendering = '-o-crisp-edges';
        target.style.imageRendering = '-webkit-optimize-contrast';
        target.style.imageRendering = 'optimize-contrast';
        target.style.imageRendering = 'crisp-edges';
        target.style.imageRendering = 'pixelated';
      }
  
      var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? devicePixelRatio : 1;
      if (strategy.canvasResolutionScaleMode != 0) {
        var newWidth = (cssWidth * dpiScale)|0;
        var newHeight = (cssHeight * dpiScale)|0;
        setCanvasElementSize(target, newWidth, newHeight);
        if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, newWidth, newHeight);
      }
      return restoreOldStyle;
    };
  
  var _emscripten_enter_soft_fullscreen = (target, fullscreenStrategy) => {
      target = findEventTarget(target);
      if (!target) return -4;
  
      var strategy = {
          scaleMode: HEAP32[((fullscreenStrategy)>>2)],
          canvasResolutionScaleMode: HEAP32[(((fullscreenStrategy)+(4))>>2)],
          filteringMode: HEAP32[(((fullscreenStrategy)+(8))>>2)],
          canvasResizedCallback: HEAP32[(((fullscreenStrategy)+(12))>>2)],
          canvasResizedCallbackUserData: HEAP32[(((fullscreenStrategy)+(16))>>2)],
          target,
          softFullscreen: true
      };
  
      var restoreOldStyle = JSEvents_resizeCanvasForFullscreen(target, strategy);
  
      document.documentElement.style.overflow = 'hidden';  // Firefox, Chrome
      document.body.scroll = "no"; // IE11
      document.body.style.margin = '0px'; // Override default document margin area on all browsers.
  
      var hiddenElements = hideEverythingExceptGivenElement(target);
  
      function restoreWindowedState() {
        restoreOldStyle();
        restoreHiddenElements(hiddenElements);
        removeEventListener('resize', softFullscreenResizeWebGLRenderTarget);
        if (strategy.canvasResizedCallback) {
          ((a1, a2, a3) => dynCall_iiii(strategy.canvasResizedCallback, a1, a2, a3))(37, 0, strategy.canvasResizedCallbackUserData);
        }
        currentFullscreenStrategy = 0;
      }
      restoreOldWindowedStyle = restoreWindowedState;
      currentFullscreenStrategy = strategy;
      addEventListener('resize', softFullscreenResizeWebGLRenderTarget);
  
      // Inform the caller that the canvas size has changed.
      if (strategy.canvasResizedCallback) {
        ((a1, a2, a3) => dynCall_iiii(strategy.canvasResizedCallback, a1, a2, a3))(37, 0, strategy.canvasResizedCallbackUserData);
      }
  
      return 0;
    };

  var _emscripten_err = (str) => err(UTF8ToString(str));

  
  
  
  var JSEvents_requestFullscreen = (target, strategy) => {
      // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
      if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
        JSEvents_resizeCanvasForFullscreen(target, strategy);
      }
  
      if (target.requestFullscreen) {
        target.requestFullscreen();
      } else if (target.webkitRequestFullscreen) {
        target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
      } else {
        return JSEvents.fullscreenEnabled() ? -3 : -1;
      }
  
      currentFullscreenStrategy = strategy;
  
      if (strategy.canvasResizedCallback) {
        ((a1, a2, a3) => dynCall_iiii(strategy.canvasResizedCallback, a1, a2, a3))(37, 0, strategy.canvasResizedCallbackUserData);
      }
  
      return 0;
    };
  var _emscripten_exit_fullscreen = () => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents_requestFullscreen);
  
      var d = specialHTMLTargets[1];
      if (d.exitFullscreen) {
        d.fullscreenElement && d.exitFullscreen();
      } else if (d.webkitExitFullscreen) {
        d.webkitFullscreenElement && d.webkitExitFullscreen();
      } else {
        return -1;
      }
  
      return 0;
    };

  
  var requestPointerLock = (target) => {
      if (target.requestPointerLock) {
        target.requestPointerLock();
      } else {
        // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
        // or if the whole browser just doesn't support the feature.
        if (document.body.requestPointerLock
          ) {
          return -3;
        }
        return -1;
      }
      return 0;
    };
  var _emscripten_exit_pointerlock = () => {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else {
        return -1;
      }
      return 0;
    };

  var _emscripten_exit_soft_fullscreen = () => {
      restoreOldWindowedStyle?.();
      restoreOldWindowedStyle = null;
  
      return 0;
    };

  var _emscripten_get_device_pixel_ratio = () => {
      return devicePixelRatio;
    };

  
  var _emscripten_get_element_css_size = (target, width, height) => {
      target = findEventTarget(target);
      if (!target) return -4;
  
      var rect = getBoundingClientRect(target);
      HEAPF64[((width)>>3)] = rect.width;
      HEAPF64[((height)>>3)] = rect.height;
  
      return 0;
    };

  
  var fillGamepadEventData = (eventStruct, e) => {
      HEAPF64[((eventStruct)>>3)] = e.timestamp;
      for (var i = 0; i < e.axes.length; ++i) {
        HEAPF64[(((eventStruct+i*8)+(16))>>3)] = e.axes[i];
      }
      for (var i = 0; i < e.buttons.length; ++i) {
        if (typeof e.buttons[i] == 'object') {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)] = e.buttons[i].value;
        } else {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)] = e.buttons[i];
        }
      }
      for (var i = 0; i < e.buttons.length; ++i) {
        if (typeof e.buttons[i] == 'object') {
          HEAP8[(eventStruct+i)+(1040)] = e.buttons[i].pressed;
        } else {
          // Assigning a boolean to HEAP32, that's ok, but Closure would like to warn about it:
          /** @suppress {checkTypes} */
          HEAP8[(eventStruct+i)+(1040)] = e.buttons[i] == 1;
        }
      }
      HEAP8[(eventStruct)+(1104)] = e.connected;
      HEAP32[(((eventStruct)+(1108))>>2)] = e.index;
      HEAP32[(((eventStruct)+(8))>>2)] = e.axes.length;
      HEAP32[(((eventStruct)+(12))>>2)] = e.buttons.length;
      stringToUTF8(e.id, eventStruct + 1112, 64);
      stringToUTF8(e.mapping, eventStruct + 1176, 64);
    };
  var _emscripten_get_gamepad_status = (index, gamepadState) => {
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    };


  var _emscripten_get_num_gamepads = () => {
      // N.B. Do not call emscripten_get_num_gamepads() unless having first called emscripten_sample_gamepad_data(), and that has returned EMSCRIPTEN_RESULT_SUCCESS.
      // Otherwise the following line will throw an exception.
      return JSEvents.lastGamepadState.length;
    };

  var _emscripten_get_screen_size = (width, height) => {
      HEAP32[((width)>>2)] = screen.width;
      HEAP32[((height)>>2)] = screen.height;
    };

  /** @suppress {duplicate } */
  var _glActiveTexture = (x0) => GLctx.activeTexture(x0);
  var _emscripten_glActiveTexture = _glActiveTexture;

  /** @suppress {duplicate } */
  var _glAttachShader = (program, shader) => {
      GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
    };
  var _emscripten_glAttachShader = _glAttachShader;

  /** @suppress {duplicate } */
  var _glBeginQuery = (target, id) => {
      GLctx.beginQuery(target, GL.queries[id]);
    };
  var _emscripten_glBeginQuery = _glBeginQuery;

  /** @suppress {duplicate } */
  var _glBeginQueryEXT = (target, id) => {
      GLctx.disjointTimerQueryExt['beginQueryEXT'](target, GL.queries[id]);
    };
  var _emscripten_glBeginQueryEXT = _glBeginQueryEXT;

  /** @suppress {duplicate } */
  var _glBeginTransformFeedback = (x0) => GLctx.beginTransformFeedback(x0);
  var _emscripten_glBeginTransformFeedback = _glBeginTransformFeedback;

  
  /** @suppress {duplicate } */
  var _glBindAttribLocation = (program, index, name) => {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    };
  var _emscripten_glBindAttribLocation = _glBindAttribLocation;

  /** @suppress {duplicate } */
  var _glBindBuffer = (target, buffer) => {
  
      if (target == 0x88EB /*GL_PIXEL_PACK_BUFFER*/) {
        // In WebGL 2 glReadPixels entry point, we need to use a different WebGL 2
        // API function call when a buffer is bound to
        // GL_PIXEL_PACK_BUFFER_BINDING point, so must keep track whether that
        // binding point is non-null to know what is the proper API function to
        // call.
        GLctx.currentPixelPackBufferBinding = buffer;
      } else if (target == 0x88EC /*GL_PIXEL_UNPACK_BUFFER*/) {
        // In WebGL 2 gl(Compressed)Tex(Sub)Image[23]D entry points, we need to
        // use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_UNPACK_BUFFER_BINDING point, so must keep track whether that
        // binding point is non-null to know what is the proper API function to
        // call.
        GLctx.currentPixelUnpackBufferBinding = buffer;
      }
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    };
  var _emscripten_glBindBuffer = _glBindBuffer;

  /** @suppress {duplicate } */
  var _glBindBufferBase = (target, index, buffer) => {
      GLctx.bindBufferBase(target, index, GL.buffers[buffer]);
    };
  var _emscripten_glBindBufferBase = _glBindBufferBase;

  /** @suppress {duplicate } */
  var _glBindBufferRange = (target, index, buffer, offset, ptrsize) => {
      GLctx.bindBufferRange(target, index, GL.buffers[buffer], offset, ptrsize);
    };
  var _emscripten_glBindBufferRange = _glBindBufferRange;

  /** @suppress {duplicate } */
  var _glBindFramebuffer = (target, framebuffer) => {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    };
  var _emscripten_glBindFramebuffer = _glBindFramebuffer;

  /** @suppress {duplicate } */
  var _glBindRenderbuffer = (target, renderbuffer) => {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    };
  var _emscripten_glBindRenderbuffer = _glBindRenderbuffer;

  /** @suppress {duplicate } */
  var _glBindSampler = (unit, sampler) => {
      GLctx.bindSampler(unit, GL.samplers[sampler]);
    };
  var _emscripten_glBindSampler = _glBindSampler;

  /** @suppress {duplicate } */
  var _glBindTexture = (target, texture) => {
      GLctx.bindTexture(target, GL.textures[texture]);
    };
  var _emscripten_glBindTexture = _glBindTexture;

  /** @suppress {duplicate } */
  var _glBindTransformFeedback = (target, id) => {
      GLctx.bindTransformFeedback(target, GL.transformFeedbacks[id]);
    };
  var _emscripten_glBindTransformFeedback = _glBindTransformFeedback;

  /** @suppress {duplicate } */
  var _glBindVertexArray = (vao) => {
      GLctx.bindVertexArray(GL.vaos[vao]);
    };
  var _emscripten_glBindVertexArray = _glBindVertexArray;

  
  /** @suppress {duplicate } */
  var _glBindVertexArrayOES = _glBindVertexArray;
  var _emscripten_glBindVertexArrayOES = _glBindVertexArrayOES;

  /** @suppress {duplicate } */
  var _glBlendColor = (x0, x1, x2, x3) => GLctx.blendColor(x0, x1, x2, x3);
  var _emscripten_glBlendColor = _glBlendColor;

  /** @suppress {duplicate } */
  var _glBlendEquation = (x0) => GLctx.blendEquation(x0);
  var _emscripten_glBlendEquation = _glBlendEquation;

  /** @suppress {duplicate } */
  var _glBlendEquationSeparate = (x0, x1) => GLctx.blendEquationSeparate(x0, x1);
  var _emscripten_glBlendEquationSeparate = _glBlendEquationSeparate;

  /** @suppress {duplicate } */
  var _glBlendFunc = (x0, x1) => GLctx.blendFunc(x0, x1);
  var _emscripten_glBlendFunc = _glBlendFunc;

  /** @suppress {duplicate } */
  var _glBlendFuncSeparate = (x0, x1, x2, x3) => GLctx.blendFuncSeparate(x0, x1, x2, x3);
  var _emscripten_glBlendFuncSeparate = _glBlendFuncSeparate;

  /** @suppress {duplicate } */
  var _glBlitFramebuffer = (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) => GLctx.blitFramebuffer(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
  var _emscripten_glBlitFramebuffer = _glBlitFramebuffer;

  /** @suppress {duplicate } */
  var _glBufferData = (target, size, data, usage) => {
  
      if (true) {
        // If size is zero, WebGL would interpret uploading the whole input
        // arraybuffer (starting from given offset), which would not make sense in
        // WebAssembly, so avoid uploading if size is zero. However we must still
        // call bufferData to establish a backing storage of zero bytes.
        if (data && size) {
          GLctx.bufferData(target, HEAPU8, usage, data, size);
        } else {
          GLctx.bufferData(target, size, usage);
        }
        return;
      }
    };
  var _emscripten_glBufferData = _glBufferData;

  /** @suppress {duplicate } */
  var _glBufferSubData = (target, offset, size, data) => {
      if (true) {
        size && GLctx.bufferSubData(target, offset, HEAPU8, data, size);
        return;
      }
    };
  var _emscripten_glBufferSubData = _glBufferSubData;

  /** @suppress {duplicate } */
  var _glCheckFramebufferStatus = (x0) => GLctx.checkFramebufferStatus(x0);
  var _emscripten_glCheckFramebufferStatus = _glCheckFramebufferStatus;

  /** @suppress {duplicate } */
  var _glClear = (x0) => GLctx.clear(x0);
  var _emscripten_glClear = _glClear;

  /** @suppress {duplicate } */
  var _glClearBufferfi = (x0, x1, x2, x3) => GLctx.clearBufferfi(x0, x1, x2, x3);
  var _emscripten_glClearBufferfi = _glClearBufferfi;

  /** @suppress {duplicate } */
  var _glClearBufferfv = (buffer, drawbuffer, value) => {
  
      GLctx.clearBufferfv(buffer, drawbuffer, HEAPF32, ((value)>>2));
    };
  var _emscripten_glClearBufferfv = _glClearBufferfv;

  /** @suppress {duplicate } */
  var _glClearBufferiv = (buffer, drawbuffer, value) => {
  
      GLctx.clearBufferiv(buffer, drawbuffer, HEAP32, ((value)>>2));
    };
  var _emscripten_glClearBufferiv = _glClearBufferiv;

  /** @suppress {duplicate } */
  var _glClearBufferuiv = (buffer, drawbuffer, value) => {
  
      GLctx.clearBufferuiv(buffer, drawbuffer, HEAPU32, ((value)>>2));
    };
  var _emscripten_glClearBufferuiv = _glClearBufferuiv;

  /** @suppress {duplicate } */
  var _glClearColor = (x0, x1, x2, x3) => GLctx.clearColor(x0, x1, x2, x3);
  var _emscripten_glClearColor = _glClearColor;

  /** @suppress {duplicate } */
  var _glClearDepthf = (x0) => GLctx.clearDepth(x0);
  var _emscripten_glClearDepthf = _glClearDepthf;

  /** @suppress {duplicate } */
  var _glClearStencil = (x0) => GLctx.clearStencil(x0);
  var _emscripten_glClearStencil = _glClearStencil;

  /** @suppress {duplicate } */
  var _glClientWaitSync = (sync, flags, timeout) => {
      // WebGL2 vs GLES3 differences: in GLES3, the timeout parameter is a uint64, where 0xFFFFFFFFFFFFFFFFULL means GL_TIMEOUT_IGNORED.
      // In JS, there's no 64-bit value types, so instead timeout is taken to be signed, and GL_TIMEOUT_IGNORED is given value -1.
      // Inherently the value accepted in the timeout is lossy, and can't take in arbitrary u64 bit pattern (but most likely doesn't matter)
      // See https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.15
      timeout = Number(timeout);
      return GLctx.clientWaitSync(GL.syncs[sync], flags, timeout);
    };
  var _emscripten_glClientWaitSync = _glClientWaitSync;

  /** @suppress {duplicate } */
  var _glClipControlEXT = (origin, depth) => {
      GLctx.extClipControl['clipControlEXT'](origin, depth);
    };
  var _emscripten_glClipControlEXT = _glClipControlEXT;

  /** @suppress {duplicate } */
  var _glColorMask = (red, green, blue, alpha) => {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    };
  var _emscripten_glColorMask = _glColorMask;

  /** @suppress {duplicate } */
  var _glCompileShader = (shader) => {
      GLctx.compileShader(GL.shaders[shader]);
    };
  var _emscripten_glCompileShader = _glCompileShader;

  /** @suppress {duplicate } */
  var _glCompressedTexImage2D = (target, level, internalFormat, width, height, border, imageSize, data) => {
      // `data` may be null here, which means "allocate uniniitalized space but
      // don't upload" in GLES parlance, but `compressedTexImage2D` requires the
      // final data parameter, so we simply pass a heap view starting at zero
      // effectively uploading whatever happens to be near address zero.  See
      // https://github.com/emscripten-core/emscripten/issues/19300.
      if (true) {
        if (GLctx.currentPixelUnpackBufferBinding || !imageSize) {
          GLctx.compressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data);
          return;
        }
        GLctx.compressedTexImage2D(target, level, internalFormat, width, height, border, HEAPU8, data, imageSize);
        return;
      }
    };
  var _emscripten_glCompressedTexImage2D = _glCompressedTexImage2D;

  /** @suppress {duplicate } */
  var _glCompressedTexImage3D = (target, level, internalFormat, width, height, depth, border, imageSize, data) => {
      if (GLctx.currentPixelUnpackBufferBinding) {
        GLctx.compressedTexImage3D(target, level, internalFormat, width, height, depth, border, imageSize, data);
      } else {
        GLctx.compressedTexImage3D(target, level, internalFormat, width, height, depth, border, HEAPU8, data, imageSize);
      }
    };
  var _emscripten_glCompressedTexImage3D = _glCompressedTexImage3D;

  /** @suppress {duplicate } */
  var _glCompressedTexSubImage2D = (target, level, xoffset, yoffset, width, height, format, imageSize, data) => {
      if (true) {
        if (GLctx.currentPixelUnpackBufferBinding || !imageSize) {
          GLctx.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
          return;
        }
        GLctx.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, HEAPU8, data, imageSize);
        return;
      }
    };
  var _emscripten_glCompressedTexSubImage2D = _glCompressedTexSubImage2D;

  /** @suppress {duplicate } */
  var _glCompressedTexSubImage3D = (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) => {
      if (GLctx.currentPixelUnpackBufferBinding) {
        GLctx.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
      } else {
        GLctx.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, HEAPU8, data, imageSize);
      }
    };
  var _emscripten_glCompressedTexSubImage3D = _glCompressedTexSubImage3D;

  /** @suppress {duplicate } */
  var _glCopyBufferSubData = (x0, x1, x2, x3, x4) => GLctx.copyBufferSubData(x0, x1, x2, x3, x4);
  var _emscripten_glCopyBufferSubData = _glCopyBufferSubData;

  /** @suppress {duplicate } */
  var _glCopyTexImage2D = (x0, x1, x2, x3, x4, x5, x6, x7) => GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
  var _emscripten_glCopyTexImage2D = _glCopyTexImage2D;

  /** @suppress {duplicate } */
  var _glCopyTexSubImage2D = (x0, x1, x2, x3, x4, x5, x6, x7) => GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
  var _emscripten_glCopyTexSubImage2D = _glCopyTexSubImage2D;

  /** @suppress {duplicate } */
  var _glCopyTexSubImage3D = (x0, x1, x2, x3, x4, x5, x6, x7, x8) => GLctx.copyTexSubImage3D(x0, x1, x2, x3, x4, x5, x6, x7, x8);
  var _emscripten_glCopyTexSubImage3D = _glCopyTexSubImage3D;

  /** @suppress {duplicate } */
  var _glCreateProgram = () => {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      // Store additional information needed for each shader program:
      program.name = id;
      // Lazy cache results of
      // glGetProgramiv(GL_ACTIVE_UNIFORM_MAX_LENGTH/GL_ACTIVE_ATTRIBUTE_MAX_LENGTH/GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH)
      program.maxUniformLength = program.maxAttributeLength = program.maxUniformBlockNameLength = 0;
      program.uniformIdCounter = 1;
      GL.programs[id] = program;
      return id;
    };
  var _emscripten_glCreateProgram = _glCreateProgram;

  /** @suppress {duplicate } */
  var _glCreateShader = (shaderType) => {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
  
      return id;
    };
  var _emscripten_glCreateShader = _glCreateShader;

  /** @suppress {duplicate } */
  var _glCullFace = (x0) => GLctx.cullFace(x0);
  var _emscripten_glCullFace = _glCullFace;

  /** @suppress {duplicate } */
  var _glDeleteBuffers = (n, buffers) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GLctx.currentPixelPackBufferBinding) GLctx.currentPixelPackBufferBinding = 0;
        if (id == GLctx.currentPixelUnpackBufferBinding) GLctx.currentPixelUnpackBufferBinding = 0;
      }
    };
  var _emscripten_glDeleteBuffers = _glDeleteBuffers;

  /** @suppress {duplicate } */
  var _glDeleteFramebuffers = (n, framebuffers) => {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    };
  var _emscripten_glDeleteFramebuffers = _glDeleteFramebuffers;

  /** @suppress {duplicate } */
  var _glDeleteProgram = (id) => {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) {
        // glDeleteProgram actually signals an error when deleting a nonexisting
        // object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
    };
  var _emscripten_glDeleteProgram = _glDeleteProgram;

  /** @suppress {duplicate } */
  var _glDeleteQueries = (n, ids) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.queries[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.deleteQuery(query);
        GL.queries[id] = null;
      }
    };
  var _emscripten_glDeleteQueries = _glDeleteQueries;

  /** @suppress {duplicate } */
  var _glDeleteQueriesEXT = (n, ids) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.queries[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.disjointTimerQueryExt['deleteQueryEXT'](query);
        GL.queries[id] = null;
      }
    };
  var _emscripten_glDeleteQueriesEXT = _glDeleteQueriesEXT;

  /** @suppress {duplicate } */
  var _glDeleteRenderbuffers = (n, renderbuffers) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    };
  var _emscripten_glDeleteRenderbuffers = _glDeleteRenderbuffers;

  /** @suppress {duplicate } */
  var _glDeleteSamplers = (n, samplers) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((samplers)+(i*4))>>2)];
        var sampler = GL.samplers[id];
        if (!sampler) continue;
        GLctx.deleteSampler(sampler);
        sampler.name = 0;
        GL.samplers[id] = null;
      }
    };
  var _emscripten_glDeleteSamplers = _glDeleteSamplers;

  /** @suppress {duplicate } */
  var _glDeleteShader = (id) => {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) {
        // glDeleteShader actually signals an error when deleting a nonexisting
        // object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    };
  var _emscripten_glDeleteShader = _glDeleteShader;

  /** @suppress {duplicate } */
  var _glDeleteSync = (id) => {
      if (!id) return;
      var sync = GL.syncs[id];
      if (!sync) { // glDeleteSync signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteSync(sync);
      sync.name = 0;
      GL.syncs[id] = null;
    };
  var _emscripten_glDeleteSync = _glDeleteSync;

  /** @suppress {duplicate } */
  var _glDeleteTextures = (n, textures) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        // GL spec: "glDeleteTextures silently ignores 0s and names that do not
        // correspond to existing textures".
        if (!texture) continue;
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    };
  var _emscripten_glDeleteTextures = _glDeleteTextures;

  /** @suppress {duplicate } */
  var _glDeleteTransformFeedbacks = (n, ids) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var transformFeedback = GL.transformFeedbacks[id];
        if (!transformFeedback) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.deleteTransformFeedback(transformFeedback);
        transformFeedback.name = 0;
        GL.transformFeedbacks[id] = null;
      }
    };
  var _emscripten_glDeleteTransformFeedbacks = _glDeleteTransformFeedbacks;

  /** @suppress {duplicate } */
  var _glDeleteVertexArrays = (n, vaos) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx.deleteVertexArray(GL.vaos[id]);
        GL.vaos[id] = null;
      }
    };
  var _emscripten_glDeleteVertexArrays = _glDeleteVertexArrays;

  
  /** @suppress {duplicate } */
  var _glDeleteVertexArraysOES = _glDeleteVertexArrays;
  var _emscripten_glDeleteVertexArraysOES = _glDeleteVertexArraysOES;

  /** @suppress {duplicate } */
  var _glDepthFunc = (x0) => GLctx.depthFunc(x0);
  var _emscripten_glDepthFunc = _glDepthFunc;

  /** @suppress {duplicate } */
  var _glDepthMask = (flag) => {
      GLctx.depthMask(!!flag);
    };
  var _emscripten_glDepthMask = _glDepthMask;

  /** @suppress {duplicate } */
  var _glDepthRangef = (x0, x1) => GLctx.depthRange(x0, x1);
  var _emscripten_glDepthRangef = _glDepthRangef;

  /** @suppress {duplicate } */
  var _glDetachShader = (program, shader) => {
      GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
    };
  var _emscripten_glDetachShader = _glDetachShader;

  /** @suppress {duplicate } */
  var _glDisable = (x0) => GLctx.disable(x0);
  var _emscripten_glDisable = _glDisable;

  /** @suppress {duplicate } */
  var _glDisableVertexAttribArray = (index) => {
      GLctx.disableVertexAttribArray(index);
    };
  var _emscripten_glDisableVertexAttribArray = _glDisableVertexAttribArray;

  /** @suppress {duplicate } */
  var _glDrawArrays = (mode, first, count) => {
  
      GLctx.drawArrays(mode, first, count);
  
    };
  var _emscripten_glDrawArrays = _glDrawArrays;

  /** @suppress {duplicate } */
  var _glDrawArraysInstanced = (mode, first, count, primcount) => {
      GLctx.drawArraysInstanced(mode, first, count, primcount);
    };
  var _emscripten_glDrawArraysInstanced = _glDrawArraysInstanced;

  
  /** @suppress {duplicate } */
  var _glDrawArraysInstancedANGLE = _glDrawArraysInstanced;
  var _emscripten_glDrawArraysInstancedANGLE = _glDrawArraysInstancedANGLE;

  
  /** @suppress {duplicate } */
  var _glDrawArraysInstancedARB = _glDrawArraysInstanced;
  var _emscripten_glDrawArraysInstancedARB = _glDrawArraysInstancedARB;

  
  /** @suppress {duplicate } */
  var _glDrawArraysInstancedEXT = _glDrawArraysInstanced;
  var _emscripten_glDrawArraysInstancedEXT = _glDrawArraysInstancedEXT;

  
  /** @suppress {duplicate } */
  var _glDrawArraysInstancedNV = _glDrawArraysInstanced;
  var _emscripten_glDrawArraysInstancedNV = _glDrawArraysInstancedNV;

  var tempFixedLengthArray = [];
  
  /** @suppress {duplicate } */
  var _glDrawBuffers = (n, bufs) => {
  
      var bufArray = tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx.drawBuffers(bufArray);
    };
  var _emscripten_glDrawBuffers = _glDrawBuffers;

  
  /** @suppress {duplicate } */
  var _glDrawBuffersEXT = _glDrawBuffers;
  var _emscripten_glDrawBuffersEXT = _glDrawBuffersEXT;

  
  /** @suppress {duplicate } */
  var _glDrawBuffersWEBGL = _glDrawBuffers;
  var _emscripten_glDrawBuffersWEBGL = _glDrawBuffersWEBGL;

  /** @suppress {duplicate } */
  var _glDrawElements = (mode, count, type, indices) => {
  
      GLctx.drawElements(mode, count, type, indices);
  
    };
  var _emscripten_glDrawElements = _glDrawElements;

  /** @suppress {duplicate } */
  var _glDrawElementsInstanced = (mode, count, type, indices, primcount) => {
      GLctx.drawElementsInstanced(mode, count, type, indices, primcount);
    };
  var _emscripten_glDrawElementsInstanced = _glDrawElementsInstanced;

  
  /** @suppress {duplicate } */
  var _glDrawElementsInstancedANGLE = _glDrawElementsInstanced;
  var _emscripten_glDrawElementsInstancedANGLE = _glDrawElementsInstancedANGLE;

  
  /** @suppress {duplicate } */
  var _glDrawElementsInstancedARB = _glDrawElementsInstanced;
  var _emscripten_glDrawElementsInstancedARB = _glDrawElementsInstancedARB;

  
  /** @suppress {duplicate } */
  var _glDrawElementsInstancedEXT = _glDrawElementsInstanced;
  var _emscripten_glDrawElementsInstancedEXT = _glDrawElementsInstancedEXT;

  
  /** @suppress {duplicate } */
  var _glDrawElementsInstancedNV = _glDrawElementsInstanced;
  var _emscripten_glDrawElementsInstancedNV = _glDrawElementsInstancedNV;

  /** @suppress {duplicate } */
  var _glDrawRangeElements = (mode, start, end, count, type, indices) => {
      // TODO: This should be a trivial pass-though function registered at the bottom of this page as
      // glFuncs[6][1] += ' drawRangeElements';
      // but due to https://bugzilla.mozilla.org/show_bug.cgi?id=1202427,
      // we work around by ignoring the range.
      _glDrawElements(mode, count, type, indices);
    };
  var _emscripten_glDrawRangeElements = _glDrawRangeElements;

  /** @suppress {duplicate } */
  var _glEnable = (x0) => GLctx.enable(x0);
  var _emscripten_glEnable = _glEnable;

  /** @suppress {duplicate } */
  var _glEnableVertexAttribArray = (index) => {
      GLctx.enableVertexAttribArray(index);
    };
  var _emscripten_glEnableVertexAttribArray = _glEnableVertexAttribArray;

  /** @suppress {duplicate } */
  var _glEndQuery = (x0) => GLctx.endQuery(x0);
  var _emscripten_glEndQuery = _glEndQuery;

  /** @suppress {duplicate } */
  var _glEndQueryEXT = (target) => {
      GLctx.disjointTimerQueryExt['endQueryEXT'](target);
    };
  var _emscripten_glEndQueryEXT = _glEndQueryEXT;

  /** @suppress {duplicate } */
  var _glEndTransformFeedback = () => GLctx.endTransformFeedback();
  var _emscripten_glEndTransformFeedback = _glEndTransformFeedback;

  /** @suppress {duplicate } */
  var _glFenceSync = (condition, flags) => {
      var sync = GLctx.fenceSync(condition, flags);
      if (sync) {
        var id = GL.getNewId(GL.syncs);
        sync.name = id;
        GL.syncs[id] = sync;
        return id;
      }
      return 0; // Failed to create a sync object
    };
  var _emscripten_glFenceSync = _glFenceSync;

  /** @suppress {duplicate } */
  var _glFinish = () => GLctx.finish();
  var _emscripten_glFinish = _glFinish;

  /** @suppress {duplicate } */
  var _glFlush = () => GLctx.flush();
  var _emscripten_glFlush = _glFlush;

  /** @suppress {duplicate } */
  var _glFramebufferRenderbuffer = (target, attachment, renderbuffertarget, renderbuffer) => {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    };
  var _emscripten_glFramebufferRenderbuffer = _glFramebufferRenderbuffer;

  /** @suppress {duplicate } */
  var _glFramebufferTexture2D = (target, attachment, textarget, texture, level) => {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    };
  var _emscripten_glFramebufferTexture2D = _glFramebufferTexture2D;

  /** @suppress {duplicate } */
  var _glFramebufferTextureLayer = (target, attachment, texture, level, layer) => {
      GLctx.framebufferTextureLayer(target, attachment, GL.textures[texture], level, layer);
    };
  var _emscripten_glFramebufferTextureLayer = _glFramebufferTextureLayer;

  /** @suppress {duplicate } */
  var _glFrontFace = (x0) => GLctx.frontFace(x0);
  var _emscripten_glFrontFace = _glFrontFace;

  /** @suppress {duplicate } */
  var _glGenBuffers = (n, buffers) => {
      GL.genObject(n, buffers, 'createBuffer', GL.buffers
        );
    };
  var _emscripten_glGenBuffers = _glGenBuffers;

  /** @suppress {duplicate } */
  var _glGenFramebuffers = (n, ids) => {
      GL.genObject(n, ids, 'createFramebuffer', GL.framebuffers
        );
    };
  var _emscripten_glGenFramebuffers = _glGenFramebuffers;

  /** @suppress {duplicate } */
  var _glGenQueries = (n, ids) => {
      GL.genObject(n, ids, 'createQuery', GL.queries
        );
    };
  var _emscripten_glGenQueries = _glGenQueries;

  /** @suppress {duplicate } */
  var _glGenQueriesEXT = (n, ids) => {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt['createQueryEXT']();
        if (!query) {
          GL.recordError(0x502 /* GL_INVALID_OPERATION */);
          while (i < n) HEAP32[(((ids)+(i++*4))>>2)] = 0;
          return;
        }
        var id = GL.getNewId(GL.queries);
        query.name = id;
        GL.queries[id] = query;
        HEAP32[(((ids)+(i*4))>>2)] = id;
      }
    };
  var _emscripten_glGenQueriesEXT = _glGenQueriesEXT;

  /** @suppress {duplicate } */
  var _glGenRenderbuffers = (n, renderbuffers) => {
      GL.genObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    };
  var _emscripten_glGenRenderbuffers = _glGenRenderbuffers;

  /** @suppress {duplicate } */
  var _glGenSamplers = (n, samplers) => {
      GL.genObject(n, samplers, 'createSampler', GL.samplers
        );
    };
  var _emscripten_glGenSamplers = _glGenSamplers;

  /** @suppress {duplicate } */
  var _glGenTextures = (n, textures) => {
      GL.genObject(n, textures, 'createTexture', GL.textures
        );
    };
  var _emscripten_glGenTextures = _glGenTextures;

  /** @suppress {duplicate } */
  var _glGenTransformFeedbacks = (n, ids) => {
      GL.genObject(n, ids, 'createTransformFeedback', GL.transformFeedbacks
        );
    };
  var _emscripten_glGenTransformFeedbacks = _glGenTransformFeedbacks;

  /** @suppress {duplicate } */
  var _glGenVertexArrays = (n, arrays) => {
      GL.genObject(n, arrays, 'createVertexArray', GL.vaos
        );
    };
  var _emscripten_glGenVertexArrays = _glGenVertexArrays;

  
  /** @suppress {duplicate } */
  var _glGenVertexArraysOES = _glGenVertexArrays;
  var _emscripten_glGenVertexArraysOES = _glGenVertexArraysOES;

  /** @suppress {duplicate } */
  var _glGenerateMipmap = (x0) => GLctx.generateMipmap(x0);
  var _emscripten_glGenerateMipmap = _glGenerateMipmap;

  
  var __glGetActiveAttribOrUniform = (funcName, program, index, bufSize, length, size, type, name) => {
      program = GL.programs[program];
      var info = GLctx[funcName](program, index);
      if (info) {
        // If an error occurs, nothing will be written to length, size and type and name.
        var numBytesWrittenExclNull = name && stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
        if (size) HEAP32[((size)>>2)] = info.size;
        if (type) HEAP32[((type)>>2)] = info.type;
      }
    };
  
  /** @suppress {duplicate } */
  var _glGetActiveAttrib = (program, index, bufSize, length, size, type, name) =>
      __glGetActiveAttribOrUniform('getActiveAttrib', program, index, bufSize, length, size, type, name);
  var _emscripten_glGetActiveAttrib = _glGetActiveAttrib;

  
  /** @suppress {duplicate } */
  var _glGetActiveUniform = (program, index, bufSize, length, size, type, name) =>
      __glGetActiveAttribOrUniform('getActiveUniform', program, index, bufSize, length, size, type, name);
  var _emscripten_glGetActiveUniform = _glGetActiveUniform;

  /** @suppress {duplicate } */
  var _glGetActiveUniformBlockName = (program, uniformBlockIndex, bufSize, length, uniformBlockName) => {
      program = GL.programs[program];
  
      var result = GLctx.getActiveUniformBlockName(program, uniformBlockIndex);
      if (!result) return; // If an error occurs, nothing will be written to uniformBlockName or length.
      if (uniformBlockName && bufSize > 0) {
        var numBytesWrittenExclNull = stringToUTF8(result, uniformBlockName, bufSize);
        if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)] = 0;
      }
    };
  var _emscripten_glGetActiveUniformBlockName = _glGetActiveUniformBlockName;

  /** @suppress {duplicate } */
  var _glGetActiveUniformBlockiv = (program, uniformBlockIndex, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
  
      if (pname == 0x8A41 /* GL_UNIFORM_BLOCK_NAME_LENGTH */) {
        var name = GLctx.getActiveUniformBlockName(program, uniformBlockIndex);
        HEAP32[((params)>>2)] = name.length+1;
        return;
      }
  
      var result = GLctx.getActiveUniformBlockParameter(program, uniformBlockIndex, pname);
      if (result === null) return; // If an error occurs, nothing should be written to params.
      if (pname == 0x8A43 /*GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES*/) {
        for (var i = 0; i < result.length; i++) {
          HEAP32[(((params)+(i*4))>>2)] = result[i];
        }
      } else {
        HEAP32[((params)>>2)] = result;
      }
    };
  var _emscripten_glGetActiveUniformBlockiv = _glGetActiveUniformBlockiv;

  /** @suppress {duplicate } */
  var _glGetActiveUniformsiv = (program, uniformCount, uniformIndices, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (uniformCount > 0 && uniformIndices == 0) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
      var ids = [];
      for (var i = 0; i < uniformCount; i++) {
        ids.push(HEAP32[(((uniformIndices)+(i*4))>>2)]);
      }
  
      var result = GLctx.getActiveUniforms(program, ids, pname);
      if (!result) return; // GL spec: If an error is generated, nothing is written out to params.
  
      var len = result.length;
      for (var i = 0; i < len; i++) {
        HEAP32[(((params)+(i*4))>>2)] = result[i];
      }
    };
  var _emscripten_glGetActiveUniformsiv = _glGetActiveUniformsiv;

  /** @suppress {duplicate } */
  var _glGetAttachedShaders = (program, maxCount, count, shaders) => {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)] = len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)] = id;
      }
    };
  var _emscripten_glGetAttachedShaders = _glGetAttachedShaders;

  
  /** @suppress {duplicate } */
  var _glGetAttribLocation = (program, name) =>
      GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
  var _emscripten_glGetAttribLocation = _glGetAttribLocation;

  var writeI53ToI64 = (ptr, num) => {
      HEAPU32[((ptr)>>2)] = num;
      var lower = HEAPU32[((ptr)>>2)];
      HEAPU32[(((ptr)+(4))>>2)] = (num - lower)/4294967296;
    };
  
  
  var webglGetExtensions = () => {
      var exts = getEmscriptenSupportedExtensions(GLctx);
      exts = exts.concat(exts.map((e) => "GL_" + e));
      return exts;
    };
  
  var emscriptenWebGLGet = (name_, p, type) => {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null
      // pointer should be treated.  Testing on desktop core GL 3, the application
      // crashes on glGetIntegerv to a null pointer, but better to report an error
      // instead of doing anything random.
      if (!p) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch (name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type != 0 && type != 1) {
            GL.recordError(0x500); // GL_INVALID_ENUM
          }
          // Do not write anything to the out pointer, since no binary formats are
          // supported.
          return;
        case 0x87FE: // GL_NUM_PROGRAM_BINARY_FORMATS
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete
          // since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be
          // queried for length), so implement it ourselves to allow C++ GLES2
          // code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
  
        case 0x821D: // GL_NUM_EXTENSIONS
          if (GL.currentContext.version < 2) {
            // Calling GLES3/WebGL2 function with a GLES2/WebGL1 context
            GL.recordError(0x502 /* GL_INVALID_OPERATION */);
            return;
          }
          ret = webglGetExtensions().length;
          break;
        case 0x821B: // GL_MAJOR_VERSION
        case 0x821C: // GL_MINOR_VERSION
          if (GL.currentContext.version < 2) {
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          }
          ret = name_ == 0x821B ? 3 : 0; // return version 3.0
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof result) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound -
              // perhaps nothing is bound), but otherwise can mean an invalid
              // name_, which we need to report as an error
              switch (name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING or DRAW_FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8F36: // COPY_READ_BUFFER_BINDING or COPY_READ_BUFFER
                case 0x8F37: // COPY_WRITE_BUFFER_BINDING or COPY_WRITE_BUFFER
                case 0x88ED: // PIXEL_PACK_BUFFER_BINDING
                case 0x88EF: // PIXEL_UNPACK_BUFFER_BINDING
                case 0x8CAA: // READ_FRAMEBUFFER_BINDING
                case 0x8919: // SAMPLER_BINDING
                case 0x8C1D: // TEXTURE_BINDING_2D_ARRAY
                case 0x806A: // TEXTURE_BINDING_3D
                case 0x8E25: // TRANSFORM_FEEDBACK_BINDING
                case 0x8C8F: // TRANSFORM_FEEDBACK_BUFFER_BINDING
                case 0x8A28: // UNIFORM_BUFFER_BINDING
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0: HEAP32[(((p)+(i*4))>>2)] = result[i]; break;
                  case 2: HEAPF32[(((p)+(i*4))>>2)] = result[i]; break;
                  case 4: HEAP8[(p)+(i)] = result[i] ? 1 : 0; break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x500); // GL_INVALID_ENUM
                err(`GL_INVALID_ENUM in glGet${type}v: Unknown object returned from WebGL getParameter(${name_})! (error: ${e})`);
                return;
              }
            }
            break;
          default:
            GL.recordError(0x500); // GL_INVALID_ENUM
            err(`GL_INVALID_ENUM in glGet${type}v: Native code calling glGet${type}v(${name_}) and it returns ${result} of type ${typeof(result)}!`);
            return;
        }
      }
  
      switch (type) {
        case 1: writeI53ToI64(p, ret); break;
        case 0: HEAP32[((p)>>2)] = ret; break;
        case 2:   HEAPF32[((p)>>2)] = ret; break;
        case 4: HEAP8[p] = ret ? 1 : 0; break;
      }
    };
  
  /** @suppress {duplicate } */
  var _glGetBooleanv = (name_, p) => emscriptenWebGLGet(name_, p, 4);
  var _emscripten_glGetBooleanv = _glGetBooleanv;

  /** @suppress {duplicate } */
  var _glGetBufferParameteri64v = (target, value, data) => {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      writeI53ToI64(data, GLctx.getBufferParameter(target, value));
    };
  var _emscripten_glGetBufferParameteri64v = _glGetBufferParameteri64v;

  /** @suppress {duplicate } */
  var _glGetBufferParameteriv = (target, value, data) => {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null
        // pointer. Since calling this function does not make sense if data ==
        // null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)] = GLctx.getBufferParameter(target, value);
    };
  var _emscripten_glGetBufferParameteriv = _glGetBufferParameteriv;

  /** @suppress {duplicate } */
  var _glGetError = () => {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    };
  var _emscripten_glGetError = _glGetError;

  
  /** @suppress {duplicate } */
  var _glGetFloatv = (name_, p) => emscriptenWebGLGet(name_, p, 2);
  var _emscripten_glGetFloatv = _glGetFloatv;

  /** @suppress {duplicate } */
  var _glGetFragDataLocation = (program, name) => {
      return GLctx.getFragDataLocation(GL.programs[program], UTF8ToString(name));
    };
  var _emscripten_glGetFragDataLocation = _glGetFragDataLocation;

  /** @suppress {duplicate } */
  var _glGetFramebufferAttachmentParameteriv = (target, attachment, pname, params) => {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)] = result;
    };
  var _emscripten_glGetFramebufferAttachmentParameteriv = _glGetFramebufferAttachmentParameteriv;

  var emscriptenWebGLGetIndexed = (target, index, data, type) => {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var result = GLctx.getIndexedParameter(target, index);
      var ret;
      switch (typeof result) {
        case 'boolean':
          ret = result ? 1 : 0;
          break;
        case 'number':
          ret = result;
          break;
        case 'object':
          if (result === null) {
            switch (target) {
              case 0x8C8F: // TRANSFORM_FEEDBACK_BUFFER_BINDING
              case 0x8A28: // UNIFORM_BUFFER_BINDING
                ret = 0;
                break;
              default: {
                GL.recordError(0x500); // GL_INVALID_ENUM
                return;
              }
            }
          } else if (result instanceof WebGLBuffer) {
            ret = result.name | 0;
          } else {
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          }
          break;
        default:
          GL.recordError(0x500); // GL_INVALID_ENUM
          return;
      }
  
      switch (type) {
        case 1: writeI53ToI64(data, ret); break;
        case 0: HEAP32[((data)>>2)] = ret; break;
        case 2: HEAPF32[((data)>>2)] = ret; break;
        case 4: HEAP8[data] = ret ? 1 : 0; break;
        default: throw 'internal emscriptenWebGLGetIndexed() error, bad type: ' + type;
      }
    };
  /** @suppress {duplicate } */
  var _glGetInteger64i_v = (target, index, data) =>
      emscriptenWebGLGetIndexed(target, index, data, 1);
  var _emscripten_glGetInteger64i_v = _glGetInteger64i_v;

  /** @suppress {duplicate } */
  var _glGetInteger64v = (name_, p) => {
      emscriptenWebGLGet(name_, p, 1);
    };
  var _emscripten_glGetInteger64v = _glGetInteger64v;

  /** @suppress {duplicate } */
  var _glGetIntegeri_v = (target, index, data) =>
      emscriptenWebGLGetIndexed(target, index, data, 0);
  var _emscripten_glGetIntegeri_v = _glGetIntegeri_v;

  
  /** @suppress {duplicate } */
  var _glGetIntegerv = (name_, p) => emscriptenWebGLGet(name_, p, 0);
  var _emscripten_glGetIntegerv = _glGetIntegerv;

  /** @suppress {duplicate } */
  var _glGetInternalformativ = (target, internalformat, pname, bufSize, params) => {
      if (bufSize < 0) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (!params) {
        // GLES3 specification does not specify how to behave if values is a null pointer. Since calling this function does not make sense
        // if values == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = GLctx.getInternalformatParameter(target, internalformat, pname);
      if (ret === null) return;
      for (var i = 0; i < ret.length && i < bufSize; ++i) {
        HEAP32[(((params)+(i*4))>>2)] = ret[i];
      }
    };
  var _emscripten_glGetInternalformativ = _glGetInternalformativ;

  /** @suppress {duplicate } */
  var _glGetProgramBinary = (program, bufSize, length, binaryFormat, binary) => {
      GL.recordError(0x502/*GL_INVALID_OPERATION*/);
    };
  var _emscripten_glGetProgramBinary = _glGetProgramBinary;

  /** @suppress {duplicate } */
  var _glGetProgramInfoLog = (program, maxLength, length, infoLog) => {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    };
  var _emscripten_glGetProgramInfoLog = _glGetProgramInfoLog;

  /** @suppress {duplicate } */
  var _glGetProgramiv = (program, pname, p) => {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null
        // pointer. Since calling this function does not make sense if p == null,
        // issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      program = GL.programs[program];
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(program);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)] = log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        if (!program.maxUniformLength) {
          var numActiveUniforms = GLctx.getProgramParameter(program, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
          for (var i = 0; i < numActiveUniforms; ++i) {
            program.maxUniformLength = Math.max(program.maxUniformLength, GLctx.getActiveUniform(program, i).name.length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (!program.maxAttributeLength) {
          var numActiveAttributes = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          for (var i = 0; i < numActiveAttributes; ++i) {
            program.maxAttributeLength = Math.max(program.maxAttributeLength, GLctx.getActiveAttrib(program, i).name.length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (!program.maxUniformBlockNameLength) {
          var numActiveUniformBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          for (var i = 0; i < numActiveUniformBlocks; ++i) {
            program.maxUniformBlockNameLength = Math.max(program.maxUniformBlockNameLength, GLctx.getActiveUniformBlockName(program, i).length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)] = GLctx.getProgramParameter(program, pname);
      }
    };
  var _emscripten_glGetProgramiv = _glGetProgramiv;

  
  /** @suppress {duplicate } */
  var _glGetQueryObjecti64vEXT = (id, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.queries[id];
      var param;
      if (GL.currentContext.version < 2)
      {
        param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      }
      else {
        param = GLctx.getQueryParameter(query, pname);
      }
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      writeI53ToI64(params, ret);
    };
  var _emscripten_glGetQueryObjecti64vEXT = _glGetQueryObjecti64vEXT;

  /** @suppress {duplicate } */
  var _glGetQueryObjectivEXT = (id, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.queries[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)] = ret;
    };
  var _emscripten_glGetQueryObjectivEXT = _glGetQueryObjectivEXT;

  
  /** @suppress {duplicate } */
  var _glGetQueryObjectui64vEXT = _glGetQueryObjecti64vEXT;
  var _emscripten_glGetQueryObjectui64vEXT = _glGetQueryObjectui64vEXT;

  /** @suppress {duplicate } */
  var _glGetQueryObjectuiv = (id, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.queries[id];
      var param = GLctx.getQueryParameter(query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)] = ret;
    };
  var _emscripten_glGetQueryObjectuiv = _glGetQueryObjectuiv;

  
  /** @suppress {duplicate } */
  var _glGetQueryObjectuivEXT = _glGetQueryObjectivEXT;
  var _emscripten_glGetQueryObjectuivEXT = _glGetQueryObjectuivEXT;

  /** @suppress {duplicate } */
  var _glGetQueryiv = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.getQuery(target, pname);
    };
  var _emscripten_glGetQueryiv = _glGetQueryiv;

  /** @suppress {duplicate } */
  var _glGetQueryivEXT = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.disjointTimerQueryExt['getQueryEXT'](target, pname);
    };
  var _emscripten_glGetQueryivEXT = _glGetQueryivEXT;

  /** @suppress {duplicate } */
  var _glGetRenderbufferParameteriv = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.getRenderbufferParameter(target, pname);
    };
  var _emscripten_glGetRenderbufferParameteriv = _glGetRenderbufferParameteriv;

  /** @suppress {duplicate } */
  var _glGetSamplerParameterfv = (sampler, pname, params) => {
      if (!params) {
        // GLES3 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)] = GLctx.getSamplerParameter(GL.samplers[sampler], pname);
    };
  var _emscripten_glGetSamplerParameterfv = _glGetSamplerParameterfv;

  /** @suppress {duplicate } */
  var _glGetSamplerParameteriv = (sampler, pname, params) => {
      if (!params) {
        // GLES3 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.getSamplerParameter(GL.samplers[sampler], pname);
    };
  var _emscripten_glGetSamplerParameteriv = _glGetSamplerParameteriv;

  
  /** @suppress {duplicate } */
  var _glGetShaderInfoLog = (shader, maxLength, length, infoLog) => {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    };
  var _emscripten_glGetShaderInfoLog = _glGetShaderInfoLog;

  /** @suppress {duplicate } */
  var _glGetShaderPrecisionFormat = (shaderType, precisionType, range, precision) => {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)] = result.rangeMin;
      HEAP32[(((range)+(4))>>2)] = result.rangeMax;
      HEAP32[((precision)>>2)] = result.precision;
    };
  var _emscripten_glGetShaderPrecisionFormat = _glGetShaderPrecisionFormat;

  /** @suppress {duplicate } */
  var _glGetShaderSource = (shader, bufSize, length, source) => {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      var numBytesWrittenExclNull = (bufSize > 0 && source) ? stringToUTF8(result, source, bufSize) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    };
  var _emscripten_glGetShaderSource = _glGetShaderSource;

  /** @suppress {duplicate } */
  var _glGetShaderiv = (shader, pname, p) => {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null
        // pointer. Since calling this function does not make sense if p == null,
        // issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        // The GLES2 specification says that if the shader has an empty info log,
        // a value of 0 is returned. Otherwise the log has a null char appended.
        // (An empty string is falsey, so we can just check that instead of
        // looking at log.length.)
        var logLength = log ? log.length + 1 : 0;
        HEAP32[((p)>>2)] = logLength;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        // source may be a null, or the empty string, both of which are falsey
        // values that we report a 0 length for.
        var sourceLength = source ? source.length + 1 : 0;
        HEAP32[((p)>>2)] = sourceLength;
      } else {
        HEAP32[((p)>>2)] = GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    };
  var _emscripten_glGetShaderiv = _glGetShaderiv;

  
  
  /** @suppress {duplicate } */
  var _glGetString = (name_) => {
      var ret = GL.stringCache[name_];
      if (!ret) {
        switch (name_) {
          case 0x1F03 /* GL_EXTENSIONS */:
            ret = stringToNewUTF8(webglGetExtensions().join(' '));
            break;
          case 0x1F00 /* GL_VENDOR */:
          case 0x1F01 /* GL_RENDERER */:
          case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
          case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
            var s = GLctx.getParameter(name_);
            if (!s) {
              GL.recordError(0x500/*GL_INVALID_ENUM*/);
            }
            ret = s ? stringToNewUTF8(s) : 0;
            break;
  
          case 0x1F02 /* GL_VERSION */:
            var webGLVersion = GLctx.getParameter(0x1F02 /*GL_VERSION*/);
            // return GLES version string corresponding to the version of the WebGL context
            var glVersion = `OpenGL ES 2.0 (${webGLVersion})`;
            if (true) glVersion = `OpenGL ES 3.0 (${webGLVersion})`;
            ret = stringToNewUTF8(glVersion);
            break;
          case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
            var glslVersion = GLctx.getParameter(0x8B8C /*GL_SHADING_LANGUAGE_VERSION*/);
            // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
            var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
            var ver_num = glslVersion.match(ver_re);
            if (ver_num !== null) {
              if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
              glslVersion = `OpenGL ES GLSL ES ${ver_num[1]} (${glslVersion})`;
            }
            ret = stringToNewUTF8(glslVersion);
            break;
          default:
            GL.recordError(0x500/*GL_INVALID_ENUM*/);
            // fall through
        }
        GL.stringCache[name_] = ret;
      }
      return ret;
    };
  var _emscripten_glGetString = _glGetString;

  
  /** @suppress {duplicate } */
  var _glGetStringi = (name, index) => {
      if (GL.currentContext.version < 2) {
        GL.recordError(0x502 /* GL_INVALID_OPERATION */); // Calling GLES3/WebGL2 function with a GLES2/WebGL1 context
        return 0;
      }
      var stringiCache = GL.stringiCache[name];
      if (stringiCache) {
        if (index < 0 || index >= stringiCache.length) {
          GL.recordError(0x501/*GL_INVALID_VALUE*/);
          return 0;
        }
        return stringiCache[index];
      }
      switch (name) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = webglGetExtensions().map(stringToNewUTF8);
          stringiCache = GL.stringiCache[name] = exts;
          if (index < 0 || index >= stringiCache.length) {
            GL.recordError(0x501/*GL_INVALID_VALUE*/);
            return 0;
          }
          return stringiCache[index];
        default:
          GL.recordError(0x500/*GL_INVALID_ENUM*/);
          return 0;
      }
    };
  var _emscripten_glGetStringi = _glGetStringi;

  /** @suppress {duplicate } */
  var _glGetSynciv = (sync, pname, bufSize, length, values) => {
      if (bufSize < 0) {
        // GLES3 specification does not specify how to behave if bufSize < 0, however in the spec wording for glGetInternalformativ, it does say that GL_INVALID_VALUE should be raised,
        // so raise GL_INVALID_VALUE here as well.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (!values) {
        // GLES3 specification does not specify how to behave if values is a null pointer. Since calling this function does not make sense
        // if values == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = GLctx.getSyncParameter(GL.syncs[sync], pname);
      if (ret !== null) {
        HEAP32[((values)>>2)] = ret;
        if (length) HEAP32[((length)>>2)] = 1; // Report a single value outputted.
      }
    };
  var _emscripten_glGetSynciv = _glGetSynciv;

  /** @suppress {duplicate } */
  var _glGetTexParameterfv = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null
        // pointer. Since calling this function does not make sense if p == null,
        // issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)] = GLctx.getTexParameter(target, pname);
    };
  var _emscripten_glGetTexParameterfv = _glGetTexParameterfv;

  /** @suppress {duplicate } */
  var _glGetTexParameteriv = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null
        // pointer. Since calling this function does not make sense if p == null,
        // issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.getTexParameter(target, pname);
    };
  var _emscripten_glGetTexParameteriv = _glGetTexParameteriv;

  /** @suppress {duplicate } */
  var _glGetTransformFeedbackVarying = (program, index, bufSize, length, size, type, name) => {
      program = GL.programs[program];
      var info = GLctx.getTransformFeedbackVarying(program, index);
      if (!info) return; // If an error occurred, the return parameters length, size, type and name will be unmodified.
  
      if (name && bufSize > 0) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)] = 0;
      }
  
      if (size) HEAP32[((size)>>2)] = info.size;
      if (type) HEAP32[((type)>>2)] = info.type;
    };
  var _emscripten_glGetTransformFeedbackVarying = _glGetTransformFeedbackVarying;

  /** @suppress {duplicate } */
  var _glGetUniformBlockIndex = (program, uniformBlockName) => {
      return GLctx.getUniformBlockIndex(GL.programs[program], UTF8ToString(uniformBlockName));
    };
  var _emscripten_glGetUniformBlockIndex = _glGetUniformBlockIndex;

  /** @suppress {duplicate } */
  var _glGetUniformIndices = (program, uniformCount, uniformNames, uniformIndices) => {
      if (!uniformIndices) {
        // GLES2 specification does not specify how to behave if uniformIndices is a null pointer. Since calling this function does not make sense
        // if uniformIndices == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (uniformCount > 0 && (uniformNames == 0 || uniformIndices == 0)) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
      var names = [];
      for (var i = 0; i < uniformCount; i++)
        names.push(UTF8ToString(HEAP32[(((uniformNames)+(i*4))>>2)]));
  
      var result = GLctx.getUniformIndices(program, names);
      if (!result) return; // GL spec: If an error is generated, nothing is written out to uniformIndices.
  
      var len = result.length;
      for (var i = 0; i < len; i++) {
        HEAP32[(((uniformIndices)+(i*4))>>2)] = result[i];
      }
    };
  var _emscripten_glGetUniformIndices = _glGetUniformIndices;

  
  /** @noinline */
  var webglGetLeftBracePos = (name) => name.slice(-1) == ']' && name.lastIndexOf('[');
  
  var webglPrepareUniformLocationsBeforeFirstUse = (program) => {
      var uniformLocsById = program.uniformLocsById, // Maps GLuint -> WebGLUniformLocation
        uniformSizeAndIdsByName = program.uniformSizeAndIdsByName, // Maps name -> [uniform array length, GLuint]
        i, j;
  
      // On the first time invocation of glGetUniformLocation on this shader program:
      // initialize cache data structures and discover which uniforms are arrays.
      if (!uniformLocsById) {
        // maps GLint integer locations to WebGLUniformLocations
        program.uniformLocsById = uniformLocsById = {};
        // maps integer locations back to uniform name strings, so that we can lazily fetch uniform array locations
        program.uniformArrayNamesById = {};
  
        var numActiveUniforms = GLctx.getProgramParameter(program, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (i = 0; i < numActiveUniforms; ++i) {
          var u = GLctx.getActiveUniform(program, i);
          var nm = u.name;
          var sz = u.size;
          var lb = webglGetLeftBracePos(nm);
          var arrayName = lb > 0 ? nm.slice(0, lb) : nm;
  
          // Assign a new location.
          var id = program.uniformIdCounter;
          program.uniformIdCounter += sz;
          // Eagerly get the location of the uniformArray[0] base element.
          // The remaining indices >0 will be left for lazy evaluation to
          // improve performance. Those may never be needed to fetch, if the
          // application fills arrays always in full starting from the first
          // element of the array.
          uniformSizeAndIdsByName[arrayName] = [sz, id];
  
          // Store placeholder integers in place that highlight that these
          // >0 index locations are array indices pending population.
          for (j = 0; j < sz; ++j) {
            uniformLocsById[id] = j;
            program.uniformArrayNamesById[id++] = arrayName;
          }
        }
      }
    };
  
  
  
  /** @suppress {duplicate } */
  var _glGetUniformLocation = (program, name) => {
  
      name = UTF8ToString(name);
  
      if (program = GL.programs[program]) {
        webglPrepareUniformLocationsBeforeFirstUse(program);
        var uniformLocsById = program.uniformLocsById; // Maps GLuint -> WebGLUniformLocation
        var arrayIndex = 0;
        var uniformBaseName = name;
  
        // Invariant: when populating integer IDs for uniform locations, we must
        // maintain the precondition that arrays reside in contiguous addresses,
        // i.e. for a 'vec4 colors[10];', colors[4] must be at location
        // colors[0]+4.  However, user might call glGetUniformLocation(program,
        // "colors") for an array, so we cannot discover based on the user input
        // arguments whether the uniform we are dealing with is an array. The only
        // way to discover which uniforms are arrays is to enumerate over all the
        // active uniforms in the program.
        var leftBrace = webglGetLeftBracePos(name);
  
        // If user passed an array accessor "[index]", parse the array index off the accessor.
        if (leftBrace > 0) {
          arrayIndex = jstoi_q(name.slice(leftBrace + 1)) >>> 0; // "index]", coerce parseInt(']') with >>>0 to treat "foo[]" as "foo[0]" and foo[-1] as unsigned out-of-bounds.
          uniformBaseName = name.slice(0, leftBrace);
        }
  
        // Have we cached the location of this uniform before?
        // A pair [array length, GLint of the uniform location]
        var sizeAndId = program.uniformSizeAndIdsByName[uniformBaseName];
  
        // If an uniform with this name exists, and if its index is within the
        // array limits (if it's even an array), query the WebGLlocation, or
        // return an existing cached location.
        if (sizeAndId && arrayIndex < sizeAndId[0]) {
          arrayIndex += sizeAndId[1]; // Add the base location of the uniform to the array index offset.
          if ((uniformLocsById[arrayIndex] = uniformLocsById[arrayIndex] || GLctx.getUniformLocation(program, name))) {
            return arrayIndex;
          }
        }
      }
      else {
        // N.b. we are currently unable to distinguish between GL program IDs that
        // never existed vs GL program IDs that have been deleted, so report
        // GL_INVALID_VALUE in both cases.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
      }
      return -1;
    };
  var _emscripten_glGetUniformLocation = _glGetUniformLocation;

  var webglGetUniformLocation = (location) => {
      var p = GLctx.currentProgram;
  
      if (p) {
        var webglLoc = p.uniformLocsById[location];
        // p.uniformLocsById[location] stores either an integer, or a
        // WebGLUniformLocation.
        // If an integer, we have not yet bound the location, so do it now. The
        // integer value specifies the array index we should bind to.
        if (typeof webglLoc == 'number') {
          p.uniformLocsById[location] = webglLoc = GLctx.getUniformLocation(p, p.uniformArrayNamesById[location] + (webglLoc > 0 ? `[${webglLoc}]` : ''));
        }
        // Else an already cached WebGLUniformLocation, return it.
        return webglLoc;
      } else {
        GL.recordError(0x502/*GL_INVALID_OPERATION*/);
      }
    };
  
  
  /** @suppress{checkTypes} */
  var emscriptenWebGLGetUniform = (program, location, params, type) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null
        // pointer. Since calling this function does not make sense if params ==
        // null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
      webglPrepareUniformLocationsBeforeFirstUse(program);
      var data = GLctx.getUniform(program, webglGetUniformLocation(location));
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)] = data; break;
          case 2: HEAPF32[((params)>>2)] = data; break;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)] = data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)] = data[i]; break;
          }
        }
      }
    };
  
  /** @suppress {duplicate } */
  var _glGetUniformfv = (program, location, params) => {
      emscriptenWebGLGetUniform(program, location, params, 2);
    };
  var _emscripten_glGetUniformfv = _glGetUniformfv;

  
  /** @suppress {duplicate } */
  var _glGetUniformiv = (program, location, params) => {
      emscriptenWebGLGetUniform(program, location, params, 0);
    };
  var _emscripten_glGetUniformiv = _glGetUniformiv;

  /** @suppress {duplicate } */
  var _glGetUniformuiv = (program, location, params) =>
      emscriptenWebGLGetUniform(program, location, params, 0);
  var _emscripten_glGetUniformuiv = _glGetUniformuiv;

  /** @suppress{checkTypes} */
  var emscriptenWebGLGetVertexAttrib = (index, pname, params, type) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null
        // pointer. Since calling this function does not make sense if params ==
        // null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)] = data && data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)] = data; break;
          case 2: HEAPF32[((params)>>2)] = data; break;
          case 5: HEAP32[((params)>>2)] = Math.fround(data); break;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)] = data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)] = data[i]; break;
            case 5: HEAP32[(((params)+(i*4))>>2)] = Math.fround(data[i]); break;
          }
        }
      }
    };
  /** @suppress {duplicate } */
  var _glGetVertexAttribIiv = (index, pname, params) => {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttribI4iv(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 0);
    };
  var _emscripten_glGetVertexAttribIiv = _glGetVertexAttribIiv;

  
  /** @suppress {duplicate } */
  var _glGetVertexAttribIuiv = _glGetVertexAttribIiv;
  var _emscripten_glGetVertexAttribIuiv = _glGetVertexAttribIuiv;

  /** @suppress {duplicate } */
  var _glGetVertexAttribPointerv = (index, pname, pointer) => {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null
        // pointer. Since calling this function does not make sense if pointer ==
        // null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)] = GLctx.getVertexAttribOffset(index, pname);
    };
  var _emscripten_glGetVertexAttribPointerv = _glGetVertexAttribPointerv;

  
  /** @suppress {duplicate } */
  var _glGetVertexAttribfv = (index, pname, params) => {
      // N.B. This function may only be called if the vertex attribute was
      // specified using the function glVertexAttrib*f(), otherwise the results
      // are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
    };
  var _emscripten_glGetVertexAttribfv = _glGetVertexAttribfv;

  
  /** @suppress {duplicate } */
  var _glGetVertexAttribiv = (index, pname, params) => {
      // N.B. This function may only be called if the vertex attribute was
      // specified using the function glVertexAttrib*f(), otherwise the results
      // are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
    };
  var _emscripten_glGetVertexAttribiv = _glGetVertexAttribiv;

  /** @suppress {duplicate } */
  var _glHint = (x0, x1) => GLctx.hint(x0, x1);
  var _emscripten_glHint = _glHint;

  /** @suppress {duplicate } */
  var _glInvalidateFramebuffer = (target, numAttachments, attachments) => {
      var list = tempFixedLengthArray[numAttachments];
      for (var i = 0; i < numAttachments; i++) {
        list[i] = HEAP32[(((attachments)+(i*4))>>2)];
      }
  
      GLctx.invalidateFramebuffer(target, list);
    };
  var _emscripten_glInvalidateFramebuffer = _glInvalidateFramebuffer;

  /** @suppress {duplicate } */
  var _glInvalidateSubFramebuffer = (target, numAttachments, attachments, x, y, width, height) => {
      var list = tempFixedLengthArray[numAttachments];
      for (var i = 0; i < numAttachments; i++) {
        list[i] = HEAP32[(((attachments)+(i*4))>>2)];
      }
  
      GLctx.invalidateSubFramebuffer(target, list, x, y, width, height);
    };
  var _emscripten_glInvalidateSubFramebuffer = _glInvalidateSubFramebuffer;

  /** @suppress {duplicate } */
  var _glIsBuffer = (buffer) => {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    };
  var _emscripten_glIsBuffer = _glIsBuffer;

  /** @suppress {duplicate } */
  var _glIsEnabled = (x0) => GLctx.isEnabled(x0);
  var _emscripten_glIsEnabled = _glIsEnabled;

  /** @suppress {duplicate } */
  var _glIsFramebuffer = (framebuffer) => {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    };
  var _emscripten_glIsFramebuffer = _glIsFramebuffer;

  /** @suppress {duplicate } */
  var _glIsProgram = (program) => {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    };
  var _emscripten_glIsProgram = _glIsProgram;

  /** @suppress {duplicate } */
  var _glIsQuery = (id) => {
      var query = GL.queries[id];
      if (!query) return 0;
      return GLctx.isQuery(query);
    };
  var _emscripten_glIsQuery = _glIsQuery;

  /** @suppress {duplicate } */
  var _glIsQueryEXT = (id) => {
      var query = GL.queries[id];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt['isQueryEXT'](query);
    };
  var _emscripten_glIsQueryEXT = _glIsQueryEXT;

  /** @suppress {duplicate } */
  var _glIsRenderbuffer = (renderbuffer) => {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    };
  var _emscripten_glIsRenderbuffer = _glIsRenderbuffer;

  /** @suppress {duplicate } */
  var _glIsSampler = (id) => {
      var sampler = GL.samplers[id];
      if (!sampler) return 0;
      return GLctx.isSampler(sampler);
    };
  var _emscripten_glIsSampler = _glIsSampler;

  /** @suppress {duplicate } */
  var _glIsShader = (shader) => {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    };
  var _emscripten_glIsShader = _glIsShader;

  /** @suppress {duplicate } */
  var _glIsSync = (sync) => GLctx.isSync(GL.syncs[sync]);
  var _emscripten_glIsSync = _glIsSync;

  /** @suppress {duplicate } */
  var _glIsTexture = (id) => {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    };
  var _emscripten_glIsTexture = _glIsTexture;

  /** @suppress {duplicate } */
  var _glIsTransformFeedback = (id) => GLctx.isTransformFeedback(GL.transformFeedbacks[id]);
  var _emscripten_glIsTransformFeedback = _glIsTransformFeedback;

  /** @suppress {duplicate } */
  var _glIsVertexArray = (array) => {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx.isVertexArray(vao);
    };
  var _emscripten_glIsVertexArray = _glIsVertexArray;

  
  /** @suppress {duplicate } */
  var _glIsVertexArrayOES = _glIsVertexArray;
  var _emscripten_glIsVertexArrayOES = _glIsVertexArrayOES;

  /** @suppress {duplicate } */
  var _glLineWidth = (x0) => GLctx.lineWidth(x0);
  var _emscripten_glLineWidth = _glLineWidth;

  /** @suppress {duplicate } */
  var _glLinkProgram = (program) => {
      program = GL.programs[program];
      GLctx.linkProgram(program);
      // Invalidate earlier computed uniform->ID mappings, those have now become stale
      program.uniformLocsById = 0; // Mark as null-like so that glGetUniformLocation() knows to populate this again.
      program.uniformSizeAndIdsByName = {};
  
    };
  var _emscripten_glLinkProgram = _glLinkProgram;

  /** @suppress {duplicate } */
  var _glPauseTransformFeedback = () => GLctx.pauseTransformFeedback();
  var _emscripten_glPauseTransformFeedback = _glPauseTransformFeedback;

  /** @suppress {duplicate } */
  var _glPixelStorei = (pname, param) => {
      if (pname == 3317) {
        GL.unpackAlignment = param;
      } else if (pname == 3314) {
        GL.unpackRowLength = param;
      }
      GLctx.pixelStorei(pname, param);
    };
  var _emscripten_glPixelStorei = _glPixelStorei;

  /** @suppress {duplicate } */
  var _glPolygonModeWEBGL = (face, mode) => {
      GLctx.webglPolygonMode['polygonModeWEBGL'](face, mode);
    };
  var _emscripten_glPolygonModeWEBGL = _glPolygonModeWEBGL;

  /** @suppress {duplicate } */
  var _glPolygonOffset = (x0, x1) => GLctx.polygonOffset(x0, x1);
  var _emscripten_glPolygonOffset = _glPolygonOffset;

  /** @suppress {duplicate } */
  var _glPolygonOffsetClampEXT = (factor, units, clamp) => {
      GLctx.extPolygonOffsetClamp['polygonOffsetClampEXT'](factor, units, clamp);
    };
  var _emscripten_glPolygonOffsetClampEXT = _glPolygonOffsetClampEXT;

  /** @suppress {duplicate } */
  var _glProgramBinary = (program, binaryFormat, binary, length) => {
      GL.recordError(0x500/*GL_INVALID_ENUM*/);
    };
  var _emscripten_glProgramBinary = _glProgramBinary;

  /** @suppress {duplicate } */
  var _glProgramParameteri = (program, pname, value) => {
      GL.recordError(0x500/*GL_INVALID_ENUM*/);
    };
  var _emscripten_glProgramParameteri = _glProgramParameteri;

  /** @suppress {duplicate } */
  var _glQueryCounterEXT = (id, target) => {
      GLctx.disjointTimerQueryExt['queryCounterEXT'](GL.queries[id], target);
    };
  var _emscripten_glQueryCounterEXT = _glQueryCounterEXT;

  /** @suppress {duplicate } */
  var _glReadBuffer = (x0) => GLctx.readBuffer(x0);
  var _emscripten_glReadBuffer = _glReadBuffer;

  var heapObjectForWebGLType = (type) => {
      // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
      // smaller values for the heap, for shorter generated code size.
      // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
      // (since most types are HEAPU16)
      type -= 0x1400;
      if (type == 0) return HEAP8;
  
      if (type == 1) return HEAPU8;
  
      if (type == 2) return HEAP16;
  
      if (type == 4) return HEAP32;
  
      if (type == 6) return HEAPF32;
  
      if (type == 5
        || type == 28922
        || type == 28520
        || type == 30779
        || type == 30782
        )
        return HEAPU32;
  
      return HEAPU16;
    };
  
  var toTypedArrayIndex = (pointer, heap) =>
      pointer >>> (31 - Math.clz32(heap.BYTES_PER_ELEMENT));
  
  /** @suppress {duplicate } */
  var _glReadPixels = (x, y, width, height, format, type, pixels) => {
      if (true) {
        if (GLctx.currentPixelPackBufferBinding) {
          GLctx.readPixels(x, y, width, height, format, type, pixels);
          return;
        }
        var heap = heapObjectForWebGLType(type);
        var target = toTypedArrayIndex(pixels, heap);
        GLctx.readPixels(x, y, width, height, format, type, heap, target);
        return;
      }
    };
  var _emscripten_glReadPixels = _glReadPixels;

  /** @suppress {duplicate } */
  var _glReleaseShaderCompiler = () => {
      // NOP (as allowed by GLES 2.0 spec)
    };
  var _emscripten_glReleaseShaderCompiler = _glReleaseShaderCompiler;

  /** @suppress {duplicate } */
  var _glRenderbufferStorage = (x0, x1, x2, x3) => GLctx.renderbufferStorage(x0, x1, x2, x3);
  var _emscripten_glRenderbufferStorage = _glRenderbufferStorage;

  /** @suppress {duplicate } */
  var _glRenderbufferStorageMultisample = (x0, x1, x2, x3, x4) => GLctx.renderbufferStorageMultisample(x0, x1, x2, x3, x4);
  var _emscripten_glRenderbufferStorageMultisample = _glRenderbufferStorageMultisample;

  /** @suppress {duplicate } */
  var _glResumeTransformFeedback = () => GLctx.resumeTransformFeedback();
  var _emscripten_glResumeTransformFeedback = _glResumeTransformFeedback;

  /** @suppress {duplicate } */
  var _glSampleCoverage = (value, invert) => {
      GLctx.sampleCoverage(value, !!invert);
    };
  var _emscripten_glSampleCoverage = _glSampleCoverage;

  /** @suppress {duplicate } */
  var _glSamplerParameterf = (sampler, pname, param) => {
      GLctx.samplerParameterf(GL.samplers[sampler], pname, param);
    };
  var _emscripten_glSamplerParameterf = _glSamplerParameterf;

  /** @suppress {duplicate } */
  var _glSamplerParameterfv = (sampler, pname, params) => {
      var param = HEAPF32[((params)>>2)];
      GLctx.samplerParameterf(GL.samplers[sampler], pname, param);
    };
  var _emscripten_glSamplerParameterfv = _glSamplerParameterfv;

  /** @suppress {duplicate } */
  var _glSamplerParameteri = (sampler, pname, param) => {
      GLctx.samplerParameteri(GL.samplers[sampler], pname, param);
    };
  var _emscripten_glSamplerParameteri = _glSamplerParameteri;

  /** @suppress {duplicate } */
  var _glSamplerParameteriv = (sampler, pname, params) => {
      var param = HEAP32[((params)>>2)];
      GLctx.samplerParameteri(GL.samplers[sampler], pname, param);
    };
  var _emscripten_glSamplerParameteriv = _glSamplerParameteriv;

  /** @suppress {duplicate } */
  var _glScissor = (x0, x1, x2, x3) => GLctx.scissor(x0, x1, x2, x3);
  var _emscripten_glScissor = _glScissor;

  /** @suppress {duplicate } */
  var _glShaderBinary = (count, shaders, binaryformat, binary, length) => {
      GL.recordError(0x500/*GL_INVALID_ENUM*/);
    };
  var _emscripten_glShaderBinary = _glShaderBinary;

  /** @suppress {duplicate } */
  var _glShaderSource = (shader, count, string, length) => {
      var source = GL.getSource(shader, count, string, length);
  
      GLctx.shaderSource(GL.shaders[shader], source);
    };
  var _emscripten_glShaderSource = _glShaderSource;

  /** @suppress {duplicate } */
  var _glStencilFunc = (x0, x1, x2) => GLctx.stencilFunc(x0, x1, x2);
  var _emscripten_glStencilFunc = _glStencilFunc;

  /** @suppress {duplicate } */
  var _glStencilFuncSeparate = (x0, x1, x2, x3) => GLctx.stencilFuncSeparate(x0, x1, x2, x3);
  var _emscripten_glStencilFuncSeparate = _glStencilFuncSeparate;

  /** @suppress {duplicate } */
  var _glStencilMask = (x0) => GLctx.stencilMask(x0);
  var _emscripten_glStencilMask = _glStencilMask;

  /** @suppress {duplicate } */
  var _glStencilMaskSeparate = (x0, x1) => GLctx.stencilMaskSeparate(x0, x1);
  var _emscripten_glStencilMaskSeparate = _glStencilMaskSeparate;

  /** @suppress {duplicate } */
  var _glStencilOp = (x0, x1, x2) => GLctx.stencilOp(x0, x1, x2);
  var _emscripten_glStencilOp = _glStencilOp;

  /** @suppress {duplicate } */
  var _glStencilOpSeparate = (x0, x1, x2, x3) => GLctx.stencilOpSeparate(x0, x1, x2, x3);
  var _emscripten_glStencilOpSeparate = _glStencilOpSeparate;

  var computeUnpackAlignedImageSize = (width, height, sizePerPixel) => {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = (GL.unpackRowLength || width) * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, GL.unpackAlignment);
      return height * alignedRowSize;
    };
  
  var colorChannelsInGlTextureFormat = (format) => {
      // Micro-optimizations for size: map format to size by subtracting smallest
      // enum value (0x1902) from all values first.  Also omit the most common
      // size value (1) from the list, which is assumed by formats not on the
      // list.
      var colorChannels = {
        // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
        // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
        5: 3,
        6: 4,
        // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
        8: 2,
        29502: 3,
        29504: 4,
        // 0x1903 /* GL_RED */ - 0x1902: 1,
        26917: 2,
        26918: 2,
        // 0x8D94 /* GL_RED_INTEGER */ - 0x1902: 1,
        29846: 3,
        29847: 4
      };
      return colorChannels[format - 0x1902]||1;
    };
  
  
  
  var emscriptenWebGLGetTexPixelData = (type, format, width, height, pixels, internalFormat) => {
      var heap = heapObjectForWebGLType(type);
      var sizePerPixel = colorChannelsInGlTextureFormat(format) * heap.BYTES_PER_ELEMENT;
      var bytes = computeUnpackAlignedImageSize(width, height, sizePerPixel);
      return heap.subarray(toTypedArrayIndex(pixels, heap), toTypedArrayIndex(pixels + bytes, heap));
    };
  
  
  
  /** @suppress {duplicate } */
  var _glTexImage2D = (target, level, internalFormat, width, height, border, format, type, pixels) => {
      if (true) {
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
          return;
        }
        if (pixels) {
          var heap = heapObjectForWebGLType(type);
          var index = toTypedArrayIndex(pixels, heap);
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, heap, index);
          return;
        }
      }
      var pixelData = pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null;
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    };
  var _emscripten_glTexImage2D = _glTexImage2D;

  
  /** @suppress {duplicate } */
  var _glTexImage3D = (target, level, internalFormat, width, height, depth, border, format, type, pixels) => {
      if (GLctx.currentPixelUnpackBufferBinding) {
        GLctx.texImage3D(target, level, internalFormat, width, height, depth, border, format, type, pixels);
      } else if (pixels) {
        var heap = heapObjectForWebGLType(type);
        GLctx.texImage3D(target, level, internalFormat, width, height, depth, border, format, type, heap, toTypedArrayIndex(pixels, heap));
      } else {
        GLctx.texImage3D(target, level, internalFormat, width, height, depth, border, format, type, null);
      }
    };
  var _emscripten_glTexImage3D = _glTexImage3D;

  /** @suppress {duplicate } */
  var _glTexParameterf = (x0, x1, x2) => GLctx.texParameterf(x0, x1, x2);
  var _emscripten_glTexParameterf = _glTexParameterf;

  /** @suppress {duplicate } */
  var _glTexParameterfv = (target, pname, params) => {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    };
  var _emscripten_glTexParameterfv = _glTexParameterfv;

  /** @suppress {duplicate } */
  var _glTexParameteri = (x0, x1, x2) => GLctx.texParameteri(x0, x1, x2);
  var _emscripten_glTexParameteri = _glTexParameteri;

  /** @suppress {duplicate } */
  var _glTexParameteriv = (target, pname, params) => {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    };
  var _emscripten_glTexParameteriv = _glTexParameteriv;

  /** @suppress {duplicate } */
  var _glTexStorage2D = (x0, x1, x2, x3, x4) => GLctx.texStorage2D(x0, x1, x2, x3, x4);
  var _emscripten_glTexStorage2D = _glTexStorage2D;

  /** @suppress {duplicate } */
  var _glTexStorage3D = (x0, x1, x2, x3, x4, x5) => GLctx.texStorage3D(x0, x1, x2, x3, x4, x5);
  var _emscripten_glTexStorage3D = _glTexStorage3D;

  
  
  
  /** @suppress {duplicate } */
  var _glTexSubImage2D = (target, level, xoffset, yoffset, width, height, format, type, pixels) => {
      if (true) {
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
          return;
        }
        if (pixels) {
          var heap = heapObjectForWebGLType(type);
          GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, heap, toTypedArrayIndex(pixels, heap));
          return;
        }
      }
      var pixelData = pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0) : null;
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    };
  var _emscripten_glTexSubImage2D = _glTexSubImage2D;

  
  /** @suppress {duplicate } */
  var _glTexSubImage3D = (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) => {
      if (GLctx.currentPixelUnpackBufferBinding) {
        GLctx.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
      } else if (pixels) {
        var heap = heapObjectForWebGLType(type);
        GLctx.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, heap, toTypedArrayIndex(pixels, heap));
      } else {
        GLctx.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, null);
      }
    };
  var _emscripten_glTexSubImage3D = _glTexSubImage3D;

  /** @suppress {duplicate } */
  var _glTransformFeedbackVaryings = (program, count, varyings, bufferMode) => {
      program = GL.programs[program];
      var vars = [];
      for (var i = 0; i < count; i++)
        vars.push(UTF8ToString(HEAP32[(((varyings)+(i*4))>>2)]));
  
      GLctx.transformFeedbackVaryings(program, vars, bufferMode);
    };
  var _emscripten_glTransformFeedbackVaryings = _glTransformFeedbackVaryings;

  
  /** @suppress {duplicate } */
  var _glUniform1f = (location, v0) => {
      GLctx.uniform1f(webglGetUniformLocation(location), v0);
    };
  var _emscripten_glUniform1f = _glUniform1f;

  
  /** @suppress {duplicate } */
  var _glUniform1fv = (location, count, value) => {
  
      count && GLctx.uniform1fv(webglGetUniformLocation(location), HEAPF32, ((value)>>2), count);
    };
  var _emscripten_glUniform1fv = _glUniform1fv;

  
  /** @suppress {duplicate } */
  var _glUniform1i = (location, v0) => {
      GLctx.uniform1i(webglGetUniformLocation(location), v0);
    };
  var _emscripten_glUniform1i = _glUniform1i;

  
  /** @suppress {duplicate } */
  var _glUniform1iv = (location, count, value) => {
  
      count && GLctx.uniform1iv(webglGetUniformLocation(location), HEAP32, ((value)>>2), count);
    };
  var _emscripten_glUniform1iv = _glUniform1iv;

  /** @suppress {duplicate } */
  var _glUniform1ui = (location, v0) => {
      GLctx.uniform1ui(webglGetUniformLocation(location), v0);
    };
  var _emscripten_glUniform1ui = _glUniform1ui;

  /** @suppress {duplicate } */
  var _glUniform1uiv = (location, count, value) => {
      count && GLctx.uniform1uiv(webglGetUniformLocation(location), HEAPU32, ((value)>>2), count);
    };
  var _emscripten_glUniform1uiv = _glUniform1uiv;

  
  /** @suppress {duplicate } */
  var _glUniform2f = (location, v0, v1) => {
      GLctx.uniform2f(webglGetUniformLocation(location), v0, v1);
    };
  var _emscripten_glUniform2f = _glUniform2f;

  
  /** @suppress {duplicate } */
  var _glUniform2fv = (location, count, value) => {
  
      count && GLctx.uniform2fv(webglGetUniformLocation(location), HEAPF32, ((value)>>2), count*2);
    };
  var _emscripten_glUniform2fv = _glUniform2fv;

  
  /** @suppress {duplicate } */
  var _glUniform2i = (location, v0, v1) => {
      GLctx.uniform2i(webglGetUniformLocation(location), v0, v1);
    };
  var _emscripten_glUniform2i = _glUniform2i;

  
  /** @suppress {duplicate } */
  var _glUniform2iv = (location, count, value) => {
  
      count && GLctx.uniform2iv(webglGetUniformLocation(location), HEAP32, ((value)>>2), count*2);
    };
  var _emscripten_glUniform2iv = _glUniform2iv;

  /** @suppress {duplicate } */
  var _glUniform2ui = (location, v0, v1) => {
      GLctx.uniform2ui(webglGetUniformLocation(location), v0, v1);
    };
  var _emscripten_glUniform2ui = _glUniform2ui;

  /** @suppress {duplicate } */
  var _glUniform2uiv = (location, count, value) => {
      count && GLctx.uniform2uiv(webglGetUniformLocation(location), HEAPU32, ((value)>>2), count*2);
    };
  var _emscripten_glUniform2uiv = _glUniform2uiv;

  
  /** @suppress {duplicate } */
  var _glUniform3f = (location, v0, v1, v2) => {
      GLctx.uniform3f(webglGetUniformLocation(location), v0, v1, v2);
    };
  var _emscripten_glUniform3f = _glUniform3f;

  
  /** @suppress {duplicate } */
  var _glUniform3fv = (location, count, value) => {
  
      count && GLctx.uniform3fv(webglGetUniformLocation(location), HEAPF32, ((value)>>2), count*3);
    };
  var _emscripten_glUniform3fv = _glUniform3fv;

  
  /** @suppress {duplicate } */
  var _glUniform3i = (location, v0, v1, v2) => {
      GLctx.uniform3i(webglGetUniformLocation(location), v0, v1, v2);
    };
  var _emscripten_glUniform3i = _glUniform3i;

  
  /** @suppress {duplicate } */
  var _glUniform3iv = (location, count, value) => {
  
      count && GLctx.uniform3iv(webglGetUniformLocation(location), HEAP32, ((value)>>2), count*3);
    };
  var _emscripten_glUniform3iv = _glUniform3iv;

  /** @suppress {duplicate } */
  var _glUniform3ui = (location, v0, v1, v2) => {
      GLctx.uniform3ui(webglGetUniformLocation(location), v0, v1, v2);
    };
  var _emscripten_glUniform3ui = _glUniform3ui;

  /** @suppress {duplicate } */
  var _glUniform3uiv = (location, count, value) => {
      count && GLctx.uniform3uiv(webglGetUniformLocation(location), HEAPU32, ((value)>>2), count*3);
    };
  var _emscripten_glUniform3uiv = _glUniform3uiv;

  
  /** @suppress {duplicate } */
  var _glUniform4f = (location, v0, v1, v2, v3) => {
      GLctx.uniform4f(webglGetUniformLocation(location), v0, v1, v2, v3);
    };
  var _emscripten_glUniform4f = _glUniform4f;

  
  /** @suppress {duplicate } */
  var _glUniform4fv = (location, count, value) => {
  
      count && GLctx.uniform4fv(webglGetUniformLocation(location), HEAPF32, ((value)>>2), count*4);
    };
  var _emscripten_glUniform4fv = _glUniform4fv;

  
  /** @suppress {duplicate } */
  var _glUniform4i = (location, v0, v1, v2, v3) => {
      GLctx.uniform4i(webglGetUniformLocation(location), v0, v1, v2, v3);
    };
  var _emscripten_glUniform4i = _glUniform4i;

  
  /** @suppress {duplicate } */
  var _glUniform4iv = (location, count, value) => {
  
      count && GLctx.uniform4iv(webglGetUniformLocation(location), HEAP32, ((value)>>2), count*4);
    };
  var _emscripten_glUniform4iv = _glUniform4iv;

  /** @suppress {duplicate } */
  var _glUniform4ui = (location, v0, v1, v2, v3) => {
      GLctx.uniform4ui(webglGetUniformLocation(location), v0, v1, v2, v3);
    };
  var _emscripten_glUniform4ui = _glUniform4ui;

  /** @suppress {duplicate } */
  var _glUniform4uiv = (location, count, value) => {
      count && GLctx.uniform4uiv(webglGetUniformLocation(location), HEAPU32, ((value)>>2), count*4);
    };
  var _emscripten_glUniform4uiv = _glUniform4uiv;

  /** @suppress {duplicate } */
  var _glUniformBlockBinding = (program, uniformBlockIndex, uniformBlockBinding) => {
      program = GL.programs[program];
  
      GLctx.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
    };
  var _emscripten_glUniformBlockBinding = _glUniformBlockBinding;

  
  /** @suppress {duplicate } */
  var _glUniformMatrix2fv = (location, count, transpose, value) => {
  
      count && GLctx.uniformMatrix2fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*4);
    };
  var _emscripten_glUniformMatrix2fv = _glUniformMatrix2fv;

  /** @suppress {duplicate } */
  var _glUniformMatrix2x3fv = (location, count, transpose, value) => {
      count && GLctx.uniformMatrix2x3fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*6);
    };
  var _emscripten_glUniformMatrix2x3fv = _glUniformMatrix2x3fv;

  /** @suppress {duplicate } */
  var _glUniformMatrix2x4fv = (location, count, transpose, value) => {
      count && GLctx.uniformMatrix2x4fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*8);
    };
  var _emscripten_glUniformMatrix2x4fv = _glUniformMatrix2x4fv;

  
  /** @suppress {duplicate } */
  var _glUniformMatrix3fv = (location, count, transpose, value) => {
  
      count && GLctx.uniformMatrix3fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*9);
    };
  var _emscripten_glUniformMatrix3fv = _glUniformMatrix3fv;

  /** @suppress {duplicate } */
  var _glUniformMatrix3x2fv = (location, count, transpose, value) => {
      count && GLctx.uniformMatrix3x2fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*6);
    };
  var _emscripten_glUniformMatrix3x2fv = _glUniformMatrix3x2fv;

  /** @suppress {duplicate } */
  var _glUniformMatrix3x4fv = (location, count, transpose, value) => {
      count && GLctx.uniformMatrix3x4fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*12);
    };
  var _emscripten_glUniformMatrix3x4fv = _glUniformMatrix3x4fv;

  
  /** @suppress {duplicate } */
  var _glUniformMatrix4fv = (location, count, transpose, value) => {
  
      count && GLctx.uniformMatrix4fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*16);
    };
  var _emscripten_glUniformMatrix4fv = _glUniformMatrix4fv;

  /** @suppress {duplicate } */
  var _glUniformMatrix4x2fv = (location, count, transpose, value) => {
      count && GLctx.uniformMatrix4x2fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*8);
    };
  var _emscripten_glUniformMatrix4x2fv = _glUniformMatrix4x2fv;

  /** @suppress {duplicate } */
  var _glUniformMatrix4x3fv = (location, count, transpose, value) => {
      count && GLctx.uniformMatrix4x3fv(webglGetUniformLocation(location), !!transpose, HEAPF32, ((value)>>2), count*12);
    };
  var _emscripten_glUniformMatrix4x3fv = _glUniformMatrix4x3fv;

  /** @suppress {duplicate } */
  var _glUseProgram = (program) => {
      program = GL.programs[program];
      GLctx.useProgram(program);
      // Record the currently active program so that we can access the uniform
      // mapping table of that program.
      GLctx.currentProgram = program;
    };
  var _emscripten_glUseProgram = _glUseProgram;

  /** @suppress {duplicate } */
  var _glValidateProgram = (program) => {
      GLctx.validateProgram(GL.programs[program]);
    };
  var _emscripten_glValidateProgram = _glValidateProgram;

  /** @suppress {duplicate } */
  var _glVertexAttrib1f = (x0, x1) => GLctx.vertexAttrib1f(x0, x1);
  var _emscripten_glVertexAttrib1f = _glVertexAttrib1f;

  /** @suppress {duplicate } */
  var _glVertexAttrib1fv = (index, v) => {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    };
  var _emscripten_glVertexAttrib1fv = _glVertexAttrib1fv;

  /** @suppress {duplicate } */
  var _glVertexAttrib2f = (x0, x1, x2) => GLctx.vertexAttrib2f(x0, x1, x2);
  var _emscripten_glVertexAttrib2f = _glVertexAttrib2f;

  /** @suppress {duplicate } */
  var _glVertexAttrib2fv = (index, v) => {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    };
  var _emscripten_glVertexAttrib2fv = _glVertexAttrib2fv;

  /** @suppress {duplicate } */
  var _glVertexAttrib3f = (x0, x1, x2, x3) => GLctx.vertexAttrib3f(x0, x1, x2, x3);
  var _emscripten_glVertexAttrib3f = _glVertexAttrib3f;

  /** @suppress {duplicate } */
  var _glVertexAttrib3fv = (index, v) => {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    };
  var _emscripten_glVertexAttrib3fv = _glVertexAttrib3fv;

  /** @suppress {duplicate } */
  var _glVertexAttrib4f = (x0, x1, x2, x3, x4) => GLctx.vertexAttrib4f(x0, x1, x2, x3, x4);
  var _emscripten_glVertexAttrib4f = _glVertexAttrib4f;

  /** @suppress {duplicate } */
  var _glVertexAttrib4fv = (index, v) => {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    };
  var _emscripten_glVertexAttrib4fv = _glVertexAttrib4fv;

  /** @suppress {duplicate } */
  var _glVertexAttribDivisor = (index, divisor) => {
      GLctx.vertexAttribDivisor(index, divisor);
    };
  var _emscripten_glVertexAttribDivisor = _glVertexAttribDivisor;

  
  /** @suppress {duplicate } */
  var _glVertexAttribDivisorANGLE = _glVertexAttribDivisor;
  var _emscripten_glVertexAttribDivisorANGLE = _glVertexAttribDivisorANGLE;

  
  /** @suppress {duplicate } */
  var _glVertexAttribDivisorARB = _glVertexAttribDivisor;
  var _emscripten_glVertexAttribDivisorARB = _glVertexAttribDivisorARB;

  
  /** @suppress {duplicate } */
  var _glVertexAttribDivisorEXT = _glVertexAttribDivisor;
  var _emscripten_glVertexAttribDivisorEXT = _glVertexAttribDivisorEXT;

  
  /** @suppress {duplicate } */
  var _glVertexAttribDivisorNV = _glVertexAttribDivisor;
  var _emscripten_glVertexAttribDivisorNV = _glVertexAttribDivisorNV;

  /** @suppress {duplicate } */
  var _glVertexAttribI4i = (x0, x1, x2, x3, x4) => GLctx.vertexAttribI4i(x0, x1, x2, x3, x4);
  var _emscripten_glVertexAttribI4i = _glVertexAttribI4i;

  /** @suppress {duplicate } */
  var _glVertexAttribI4iv = (index, v) => {
      GLctx.vertexAttribI4i(index, HEAP32[v>>2], HEAP32[v+4>>2], HEAP32[v+8>>2], HEAP32[v+12>>2]);
    };
  var _emscripten_glVertexAttribI4iv = _glVertexAttribI4iv;

  /** @suppress {duplicate } */
  var _glVertexAttribI4ui = (x0, x1, x2, x3, x4) => GLctx.vertexAttribI4ui(x0, x1, x2, x3, x4);
  var _emscripten_glVertexAttribI4ui = _glVertexAttribI4ui;

  /** @suppress {duplicate } */
  var _glVertexAttribI4uiv = (index, v) => {
      GLctx.vertexAttribI4ui(index, HEAPU32[v>>2], HEAPU32[v+4>>2], HEAPU32[v+8>>2], HEAPU32[v+12>>2]);
    };
  var _emscripten_glVertexAttribI4uiv = _glVertexAttribI4uiv;

  /** @suppress {duplicate } */
  var _glVertexAttribIPointer = (index, size, type, stride, ptr) => {
      GLctx.vertexAttribIPointer(index, size, type, stride, ptr);
    };
  var _emscripten_glVertexAttribIPointer = _glVertexAttribIPointer;

  /** @suppress {duplicate } */
  var _glVertexAttribPointer = (index, size, type, normalized, stride, ptr) => {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    };
  var _emscripten_glVertexAttribPointer = _glVertexAttribPointer;

  /** @suppress {duplicate } */
  var _glViewport = (x0, x1, x2, x3) => GLctx.viewport(x0, x1, x2, x3);
  var _emscripten_glViewport = _glViewport;

  /** @suppress {duplicate } */
  var _glWaitSync = (sync, flags, timeout) => {
      // See WebGL2 vs GLES3 difference on GL_TIMEOUT_IGNORED above (https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.15)
      timeout = Number(timeout);
      GLctx.waitSync(GL.syncs[sync], flags, timeout);
    };
  var _emscripten_glWaitSync = _glWaitSync;

  var _emscripten_has_asyncify = () => 1;

  
  
  var doRequestFullscreen = (target, strategy) => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = findEventTarget(target);
      if (!target) return -4;
  
      if (!target.requestFullscreen
        && !target.webkitRequestFullscreen
        ) {
        return -3;
      }
  
      // Queue this function call if we're not currently in an event handler and
      // the user saw it appropriate to do so.
      if (!JSEvents.canPerformEventHandlerRequests()) {
        if (strategy.deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents_requestFullscreen, 1 /* priority over pointer lock */, [target, strategy]);
          return 1;
        }
        return -2;
      }
  
      return JSEvents_requestFullscreen(target, strategy);
    };
  var _emscripten_request_fullscreen_strategy = (target, deferUntilInEventHandler, fullscreenStrategy) => {
      var strategy = {
        scaleMode: HEAP32[((fullscreenStrategy)>>2)],
        canvasResolutionScaleMode: HEAP32[(((fullscreenStrategy)+(4))>>2)],
        filteringMode: HEAP32[(((fullscreenStrategy)+(8))>>2)],
        deferUntilInEventHandler,
        canvasResizedCallback: HEAP32[(((fullscreenStrategy)+(12))>>2)],
        canvasResizedCallbackUserData: HEAP32[(((fullscreenStrategy)+(16))>>2)]
      };
  
      return doRequestFullscreen(target, strategy);
    };

  
  
  var _emscripten_request_pointerlock = (target, deferUntilInEventHandler) => {
      target = findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock
        ) {
        return -1;
      }
  
      // Queue this function call if we're not currently in an event handler and
      // the user saw it appropriate to do so.
      if (!JSEvents.canPerformEventHandlerRequests()) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        }
        return -2;
      }
  
      return requestPointerLock(target);
    };

  var getHeapMax = () =>
      // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate
      // full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side
      // for any code that deals with heap sizes, which would require special
      // casing all heap size related code to treat 0 specially.
      2147483648;
  
  var alignMemory = (size, alignment) => {
      return Math.ceil(size / alignment) * alignment;
    };
  
  var growMemory = (size) => {
      var b = wasmMemory.buffer;
      var pages = ((size - b.byteLength + 65535) / 65536) | 0;
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow(pages); // .grow() takes a delta compared to the previous size
        updateMemoryViews();
        return 1 /*success*/;
      } catch(e) {
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    };
  var _emscripten_resize_heap = (requestedSize) => {
      var oldSize = HEAPU8.length;
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      requestedSize >>>= 0;
      // With multithreaded builds, races can happen (another thread might increase the size
      // in between), so return a failure, and let the caller retry.
  
      // Memory resize rules:
      // 1.  Always increase heap size to at least the requested size, rounded up
      //     to next page multiple.
      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap
      //     geometrically: increase the heap size according to
      //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most
      //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap
      //     linearly: increase the heap size by at least
      //     MEMORY_GROWTH_LINEAR_STEP bytes.
      // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by
      //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 4.  If we were unable to allocate as much memory, it may be due to
      //     over-eager decision to excessively reserve due to (3) above.
      //     Hence if an allocation fails, cut down on the amount of excess
      //     growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit is set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      var maxHeapSize = getHeapMax();
      if (requestedSize > maxHeapSize) {
        return false;
      }
  
      // Loop through potential heap size increases. If we attempt a too eager
      // reservation that fails, cut down on the attempted size and reserve a
      // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignMemory(Math.max(requestedSize, overGrownHeapSize), 65536));
  
        var replacement = growMemory(newSize);
        if (replacement) {
  
          return true;
        }
      }
      return false;
    };

  /** @suppress {checkTypes} */
  var _emscripten_sample_gamepad_data = () => {
      try {
        if (navigator.getGamepads) return (JSEvents.lastGamepadState = navigator.getGamepads())
          ? 0 : -1;
      } catch(e) {
        navigator.getGamepads = null; // Disable getGamepads() so that it won't be attempted to be used again.
      }
      return -1;
    };

  
  
  var registerBeforeUnloadEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) => {
      var beforeUnloadEventHandlerFunc = (e = event) => {
        // Note: This is always called on the main browser thread, since it needs synchronously return a value!
        var confirmationMessage = ((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, 0, userData);
  
        if (confirmationMessage) {
          confirmationMessage = UTF8ToString(confirmationMessage);
        }
        if (confirmationMessage) {
          e.preventDefault();
          e.returnValue = confirmationMessage;
          return confirmationMessage;
        }
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString,
        callbackfunc,
        handlerFunc: beforeUnloadEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_beforeunload_callback_on_thread = (userData, callbackfunc, targetThread) => {
      if (typeof onbeforeunload == 'undefined') return -1;
      // beforeunload callback can only be registered on the main browser thread, because the page will go away immediately after returning from the handler,
      // and there is no time to start proxying it anywhere.
      if (targetThread !== 1) return -5;
      return registerBeforeUnloadEventCallback(2, userData, true, callbackfunc, 28, "beforeunload");
    };

  
  
  
  var registerFocusEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.focusEvent ||= _malloc(256);
  
      var focusEventHandlerFunc = (e = event) => {
        var nodeName = JSEvents.getNodeNameForTarget(e.target);
        var id = e.target.id ? e.target.id : '';
  
        var focusEvent = JSEvents.focusEvent;
        stringToUTF8(nodeName, focusEvent + 0, 128);
        stringToUTF8(id, focusEvent + 128, 128);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, focusEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString,
        callbackfunc,
        handlerFunc: focusEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_blur_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerFocusEventCallback(target, userData, useCapture, callbackfunc, 12, "blur", targetThread);


  var _emscripten_set_element_css_size = (target, width, height) => {
      target = findEventTarget(target);
      if (!target) return -4;
  
      target.style.width = width + "px";
      target.style.height = height + "px";
  
      return 0;
    };

  var _emscripten_set_focus_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerFocusEventCallback(target, userData, useCapture, callbackfunc, 13, "focus", targetThread);

  
  
  
  var fillFullscreenChangeEventData = (eventStruct) => {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
      var isFullscreen = !!fullscreenElement;
      // Assigning a boolean to HEAP32 with expected type coercion.
      /** @suppress{checkTypes} */
      HEAP8[eventStruct] = isFullscreen;
      HEAP8[(eventStruct)+(1)] = JSEvents.fullscreenEnabled();
      // If transitioning to fullscreen, report info about the element that is now fullscreen.
      // If transitioning to windowed mode, report info about the element that just was fullscreen.
      var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
      var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
      var id = reportedElement?.id || '';
      stringToUTF8(nodeName, eventStruct + 2, 128);
      stringToUTF8(id, eventStruct + 130, 128);
      HEAP32[(((eventStruct)+(260))>>2)] = reportedElement ? reportedElement.clientWidth : 0;
      HEAP32[(((eventStruct)+(264))>>2)] = reportedElement ? reportedElement.clientHeight : 0;
      HEAP32[(((eventStruct)+(268))>>2)] = screen.width;
      HEAP32[(((eventStruct)+(272))>>2)] = screen.height;
      if (isFullscreen) {
        JSEvents.previousFullscreenElement = fullscreenElement;
      }
    };
  
  var registerFullscreenChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.fullscreenChangeEvent ||= _malloc(276);
  
      var fullscreenChangeEventhandlerFunc = (e = event) => {
        var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
  
        fillFullscreenChangeEventData(fullscreenChangeEvent);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        eventTypeString,
        callbackfunc,
        handlerFunc: fullscreenChangeEventhandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  var _emscripten_set_fullscreenchange_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = findEventTarget(target);
      if (!target) return -4;
  
      // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
      // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
      registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
  
      return registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
    };

  
  
  
  var registerGamepadEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.gamepadEvent ||= _malloc(1240);
  
      var gamepadEventHandlerFunc = (e = event) => {
        var gamepadEvent = JSEvents.gamepadEvent;
        fillGamepadEventData(gamepadEvent, e["gamepad"]);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, gamepadEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString,
        callbackfunc,
        handlerFunc: gamepadEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  var _emscripten_set_gamepadconnected_callback_on_thread = (userData, useCapture, callbackfunc, targetThread) => {
      if (_emscripten_sample_gamepad_data()) return -1;
      return registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
    };

  
  var _emscripten_set_gamepaddisconnected_callback_on_thread = (userData, useCapture, callbackfunc, targetThread) => {
      if (_emscripten_sample_gamepad_data()) return -1;
      return registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
    };

  
  
  
  var registerKeyEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.keyEvent ||= _malloc(160);
  
      var keyEventHandlerFunc = (e) => {
  
        var keyEventData = JSEvents.keyEvent;
        HEAPF64[((keyEventData)>>3)] = e.timeStamp;
  
        var idx = ((keyEventData)>>2);
  
        HEAP32[idx + 2] = e.location;
        HEAP8[keyEventData + 12] = e.ctrlKey;
        HEAP8[keyEventData + 13] = e.shiftKey;
        HEAP8[keyEventData + 14] = e.altKey;
        HEAP8[keyEventData + 15] = e.metaKey;
        HEAP8[keyEventData + 16] = e.repeat;
        HEAP32[idx + 5] = e.charCode;
        HEAP32[idx + 6] = e.keyCode;
        HEAP32[idx + 7] = e.which;
        stringToUTF8(e.key || '', keyEventData + 32, 32);
        stringToUTF8(e.code || '', keyEventData + 64, 32);
        stringToUTF8(e.char || '', keyEventData + 96, 32);
        stringToUTF8(e.locale || '', keyEventData + 128, 32);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, keyEventData, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString,
        callbackfunc,
        handlerFunc: keyEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_keydown_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown", targetThread);

  var _emscripten_set_keypress_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);

  var _emscripten_set_keyup_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup", targetThread);

  var _emscripten_set_main_loop = (func, fps, simulateInfiniteLoop) => {
      var iterFunc = (() => dynCall_v(func));
      setMainLoop(iterFunc, fps, simulateInfiniteLoop);
    };

  
  var fillMouseEventData = (eventStruct, e, target) => {
      HEAPF64[((eventStruct)>>3)] = e.timeStamp;
      var idx = ((eventStruct)>>2);
      HEAP32[idx + 2] = e.screenX;
      HEAP32[idx + 3] = e.screenY;
      HEAP32[idx + 4] = e.clientX;
      HEAP32[idx + 5] = e.clientY;
      HEAP8[eventStruct + 24] = e.ctrlKey;
      HEAP8[eventStruct + 25] = e.shiftKey;
      HEAP8[eventStruct + 26] = e.altKey;
      HEAP8[eventStruct + 27] = e.metaKey;
      HEAP16[idx*2 + 14] = e.button;
      HEAP16[idx*2 + 15] = e.buttons;
  
      HEAP32[idx + 8] = e["movementX"]
        ;
  
      HEAP32[idx + 9] = e["movementY"]
        ;
  
      // Note: rect contains doubles (truncated to placate SAFE_HEAP, which is the same behaviour when writing to HEAP32 anyway)
      var rect = getBoundingClientRect(target);
      HEAP32[idx + 10] = e.clientX - (rect.left | 0);
      HEAP32[idx + 11] = e.clientY - (rect.top  | 0);
    };
  
  
  var registerMouseEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.mouseEvent ||= _malloc(64);
      target = findEventTarget(target);
  
      var mouseEventHandlerFunc = (e = event) => {
        // TODO: Make this access thread safe, or this could update live while app is reading it.
        fillMouseEventData(JSEvents.mouseEvent, e, target);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
        eventTypeString,
        callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_mousedown_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown", targetThread);

  var _emscripten_set_mouseenter_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter", targetThread);

  var _emscripten_set_mouseleave_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave", targetThread);

  var _emscripten_set_mousemove_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove", targetThread);

  var _emscripten_set_mouseup_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup", targetThread);

  
  
  var fillPointerlockChangeEventData = (eventStruct) => {
      var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
      var isPointerlocked = !!pointerLockElement;
      // Assigning a boolean to HEAP32 with expected type coercion.
      /** @suppress{checkTypes} */
      HEAP8[eventStruct] = isPointerlocked;
      var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
      var id = pointerLockElement?.id || '';
      stringToUTF8(nodeName, eventStruct + 1, 128);
      stringToUTF8(id, eventStruct + 129, 128);
    };
  
  var registerPointerlockChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.pointerlockChangeEvent ||= _malloc(257);
  
      var pointerlockChangeEventHandlerFunc = (e = event) => {
        var pointerlockChangeEvent = JSEvents.pointerlockChangeEvent;
        fillPointerlockChangeEventData(pointerlockChangeEvent);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, pointerlockChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        eventTypeString,
        callbackfunc,
        handlerFunc: pointerlockChangeEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  /** @suppress {missingProperties} */
  var _emscripten_set_pointerlockchange_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) => {
      // TODO: Currently not supported in pthreads or in --proxy-to-worker mode. (In pthreads mode, document object is not defined)
      if (!document || !document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
  
      target = findEventTarget(target);
      if (!target) return -4;
      registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mozpointerlockchange", targetThread);
      registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "webkitpointerlockchange", targetThread);
      registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mspointerlockchange", targetThread);
      return registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "pointerlockchange", targetThread);
    };

  
  
  var registerUiEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.uiEvent ||= _malloc(36);
  
      target = findEventTarget(target);
  
      var uiEventHandlerFunc = (e = event) => {
        if (e.target != target) {
          // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
          // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
          // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
          // causing a new scroll, etc..
          return;
        }
        var b = document.body; // Take document.body to a variable, Closure compiler does not outline access to it on its own.
        if (!b) {
          // During a page unload 'body' can be null, with "Cannot read property 'clientWidth' of null" being thrown
          return;
        }
        var uiEvent = JSEvents.uiEvent;
        HEAP32[((uiEvent)>>2)] = 0; // always zero for resize and scroll
        HEAP32[(((uiEvent)+(4))>>2)] = b.clientWidth;
        HEAP32[(((uiEvent)+(8))>>2)] = b.clientHeight;
        HEAP32[(((uiEvent)+(12))>>2)] = innerWidth;
        HEAP32[(((uiEvent)+(16))>>2)] = innerHeight;
        HEAP32[(((uiEvent)+(20))>>2)] = outerWidth;
        HEAP32[(((uiEvent)+(24))>>2)] = outerHeight;
        HEAP32[(((uiEvent)+(28))>>2)] = pageXOffset | 0; // scroll offsets are float
        HEAP32[(((uiEvent)+(32))>>2)] = pageYOffset | 0;
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, uiEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        eventTypeString,
        callbackfunc,
        handlerFunc: uiEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_resize_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize", targetThread);

  
  
  
  var registerTouchEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.touchEvent ||= _malloc(1552);
  
      target = findEventTarget(target);
  
      var touchEventHandlerFunc = (e) => {
        var t, touches = {}, et = e.touches;
        // To ease marshalling different kinds of touches that browser reports (all touches are listed in e.touches,
        // only changed touches in e.changedTouches, and touches on target at a.targetTouches), mark a boolean in
        // each Touch object so that we can later loop only once over all touches we see to marshall over to Wasm.
  
        for (let t of et) {
          // Browser might recycle the generated Touch objects between each frame (Firefox on Android), so reset any
          // changed/target states we may have set from previous frame.
          t.isChanged = t.onTarget = 0;
          touches[t.identifier] = t;
        }
        // Mark which touches are part of the changedTouches list.
        for (let t of e.changedTouches) {
          t.isChanged = 1;
          touches[t.identifier] = t;
        }
        // Mark which touches are part of the targetTouches list.
        for (let t of e.targetTouches) {
          touches[t.identifier].onTarget = 1;
        }
  
        var touchEvent = JSEvents.touchEvent;
        HEAPF64[((touchEvent)>>3)] = e.timeStamp;
        HEAP8[touchEvent + 12] = e.ctrlKey;
        HEAP8[touchEvent + 13] = e.shiftKey;
        HEAP8[touchEvent + 14] = e.altKey;
        HEAP8[touchEvent + 15] = e.metaKey;
        var idx = touchEvent + 16;
        var targetRect = getBoundingClientRect(target);
        var numTouches = 0;
        for (let t of Object.values(touches)) {
          var idx32 = ((idx)>>2); // Pre-shift the ptr to index to HEAP32 to save code size
          HEAP32[idx32 + 0] = t.identifier;
          HEAP32[idx32 + 1] = t.screenX;
          HEAP32[idx32 + 2] = t.screenY;
          HEAP32[idx32 + 3] = t.clientX;
          HEAP32[idx32 + 4] = t.clientY;
          HEAP32[idx32 + 5] = t.pageX;
          HEAP32[idx32 + 6] = t.pageY;
          HEAP8[idx + 28] = t.isChanged;
          HEAP8[idx + 29] = t.onTarget;
          HEAP32[idx32 + 8] = t.clientX - (targetRect.left | 0);
          HEAP32[idx32 + 9] = t.clientY - (targetRect.top  | 0);
  
          idx += 48;
  
          if (++numTouches > 31) {
            break;
          }
        }
        HEAP32[(((touchEvent)+(8))>>2)] = numTouches;
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, touchEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
        eventTypeString,
        callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_touchcancel_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);

  var _emscripten_set_touchend_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);

  var _emscripten_set_touchmove_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);

  var _emscripten_set_touchstart_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);

  
  var fillVisibilityChangeEventData = (eventStruct) => {
      var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
      var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
      // Assigning a boolean to HEAP32 with expected type coercion.
      /** @suppress{checkTypes} */
      HEAP8[eventStruct] = document.hidden;
      HEAP32[(((eventStruct)+(4))>>2)] = visibilityState;
    };
  
  var registerVisibilityChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.visibilityChangeEvent ||= _malloc(8);
  
      var visibilityChangeEventHandlerFunc = (e = event) => {
        var visibilityChangeEvent = JSEvents.visibilityChangeEvent;
  
        fillVisibilityChangeEventData(visibilityChangeEvent);
  
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, visibilityChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        eventTypeString,
        callbackfunc,
        handlerFunc: visibilityChangeEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  var _emscripten_set_visibilitychange_callback_on_thread = (userData, useCapture, callbackfunc, targetThread) => {
      return registerVisibilityChangeEventCallback(specialHTMLTargets[1], userData, useCapture, callbackfunc, 21, "visibilitychange", targetThread);
    };

  
  
  var registerWheelEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      JSEvents.wheelEvent ||= _malloc(96);
  
      // The DOM Level 3 events spec event 'wheel'
      var wheelHandlerFunc = (e = event) => {
        var wheelEvent = JSEvents.wheelEvent;
        fillMouseEventData(wheelEvent, e, target);
        HEAPF64[(((wheelEvent)+(64))>>3)] = e["deltaX"];
        HEAPF64[(((wheelEvent)+(72))>>3)] = e["deltaY"];
        HEAPF64[(((wheelEvent)+(80))>>3)] = e["deltaZ"];
        HEAP32[(((wheelEvent)+(88))>>2)] = e["deltaMode"];
        if (((a1, a2, a3) => dynCall_iiii(callbackfunc, a1, a2, a3))(eventTypeId, wheelEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        allowsDeferredCalls: true,
        eventTypeString,
        callbackfunc,
        handlerFunc: wheelHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  var _emscripten_set_wheel_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) => {
      target = findEventTarget(target);
      if (!target) return -4;
      if (typeof target.onwheel != 'undefined') {
        return registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel", targetThread);
      } else {
        return -1;
      }
    };

  
  var _emscripten_set_window_title = (title) => document.title = UTF8ToString(title);

  var _emscripten_sleep = (ms) => {
      // emscripten_sleep() does not return a value, but we still need a |return|
      // here for stack switching support (ASYNCIFY=2). In that mode this function
      // returns a Promise instead of nothing, and that Promise is what tells the
      // wasm VM to pause the stack.
      return Asyncify.handleSleep((wakeUp) => safeSetTimeout(wakeUp, ms));
    };
  _emscripten_sleep.isAsync = true;

  var ENV = {
  };
  
  var getExecutableName = () => thisProgram || './this.program';
  var getEnvStrings = () => {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator == 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          // x is a key in ENV; if ENV[x] is undefined, that means it was
          // explicitly set to be so. We allow user code to do that to
          // force variables with default values to remain unset.
          if (ENV[x] === undefined) delete env[x];
          else env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(`${x}=${env[x]}`);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    };
  
  var _environ_get = (__environ, environ_buf) => {
      var bufSize = 0;
      var envp = 0;
      for (var string of getEnvStrings()) {
        var ptr = environ_buf + bufSize;
        HEAPU32[(((__environ)+(envp))>>2)] = ptr;
        bufSize += stringToUTF8(string, ptr, Infinity) + 1;
        envp += 4;
      }
      return 0;
    };

  
  var _environ_sizes_get = (penviron_count, penviron_buf_size) => {
      var strings = getEnvStrings();
      HEAPU32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      for (var string of strings) {
        bufSize += lengthBytesUTF8(string) + 1;
      }
      HEAPU32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    };


  function _fd_close(fd) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  var doReadv = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.read(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) break; // nothing more to read
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_read(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doReadv(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  
  function _fd_seek(fd, offset, whence, newOffset) {
    offset = bigintToI53Checked(offset);
  
  
  try {
  
      if (isNaN(offset)) return 61;
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.llseek(stream, offset, whence);
      HEAP64[((newOffset)>>3)] = BigInt(stream.position);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  ;
  }

  /** @param {number=} offset */
  var doWritev = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.write(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) {
          // No more space to write.
          break;
        }
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_write(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doWritev(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }
































































































  function _random_get(buffer, size) {
  try {
  
      randomFill(HEAPU8.subarray(buffer, buffer + size));
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }




  var listenOnce = (object, event, func) =>
      object.addEventListener(event, func, { 'once': true });
  /** @param {Object=} elements */
  var autoResumeAudioContext = (ctx, elements) => {
      if (!elements) {
        elements = [document, document.getElementById('canvas')];
      }
      ['keydown', 'mousedown', 'touchstart'].forEach((event) => {
        elements.forEach((element) => {
          if (element) {
            listenOnce(element, event, () => {
              if (ctx.state === 'suspended') ctx.resume();
            });
          }
        });
      });
    };

  var dynCallLegacy = (sig, ptr, args) => {
      sig = sig.replace(/p/g, 'i')
      var f = Module['dynCall_' + sig];
      return f(ptr, ...args);
    };
  var dynCall = (sig, ptr, args = [], promising = false) => {
      var rtn = dynCallLegacy(sig, ptr, args);
      return rtn;
    };




  var ptrToString = (ptr) => {
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      ptr >>>= 0;
      return '0x' + ptr.toString(16).padStart(8, '0');
    };

  var wasmTableMirror = [];
  
  /** @type {WebAssembly.Table} */
  var wasmTable;
  var getWasmTableEntry = (funcPtr) => {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        /** @suppress {checkTypes} */
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      return func;
    };


  var runAndAbortIfError = (func) => {
      try {
        return func();
      } catch (e) {
        abort(e);
      }
    };
  
  
  var sigToWasmTypes = (sig) => {
      var typeNames = {
        'i': 'i32',
        'j': 'i64',
        'f': 'f32',
        'd': 'f64',
        'e': 'externref',
        'p': 'i32',
      };
      var type = {
        parameters: [],
        results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
      };
      for (var i = 1; i < sig.length; ++i) {
        type.parameters.push(typeNames[sig[i]]);
      }
      return type;
    };
  
  var runtimeKeepalivePush = () => {
      runtimeKeepaliveCounter += 1;
    };
  
  var runtimeKeepalivePop = () => {
      runtimeKeepaliveCounter -= 1;
    };
  
  
  var Asyncify = {
  instrumentWasmImports(imports) {
        var importPattern = /^(invoke_.*|__asyncjs__.*)$/;
  
        for (let [x, original] of Object.entries(imports)) {
          if (typeof original == 'function') {
            let isAsyncifyImport = original.isAsync || importPattern.test(x);
          }
        }
      },
  instrumentWasmExports(exports) {
        var ret = {};
        for (let [x, original] of Object.entries(exports)) {
          if (typeof original == 'function') {
            ret[x] = (...args) => {
              Asyncify.exportCallStack.push(x);
              try {
                return original(...args);
              } finally {
                if (!ABORT) {
                  var y = Asyncify.exportCallStack.pop();
                  Asyncify.maybeStopUnwind();
                }
              }
            };
          } else {
            ret[x] = original;
          }
        }
        return ret;
      },
  State:{
  Normal:0,
  Unwinding:1,
  Rewinding:2,
  Disabled:3,
  },
  state:0,
  StackSize:4096,
  currData:null,
  handleSleepReturnValue:0,
  exportCallStack:[],
  callStackNameToId:{
  },
  callStackIdToName:{
  },
  callStackId:0,
  asyncPromiseHandlers:null,
  sleepCallbacks:[],
  getCallStackId(funcName) {
        var id = Asyncify.callStackNameToId[funcName];
        if (id === undefined) {
          id = Asyncify.callStackId++;
          Asyncify.callStackNameToId[funcName] = id;
          Asyncify.callStackIdToName[id] = funcName;
        }
        return id;
      },
  maybeStopUnwind() {
        if (Asyncify.currData &&
            Asyncify.state === Asyncify.State.Unwinding &&
            Asyncify.exportCallStack.length === 0) {
          // We just finished unwinding.
          // Be sure to set the state before calling any other functions to avoid
          // possible infinite recursion here (For example in debug pthread builds
          // the dbg() function itself can call back into WebAssembly to get the
          // current pthread_self() pointer).
          Asyncify.state = Asyncify.State.Normal;
          
          // Keep the runtime alive so that a re-wind can be done later.
          runAndAbortIfError(_asyncify_stop_unwind);
          if (typeof Fibers != 'undefined') {
            Fibers.trampoline();
          }
        }
      },
  whenDone() {
        return new Promise((resolve, reject) => {
          Asyncify.asyncPromiseHandlers = { resolve, reject };
        });
      },
  allocateData() {
        // An asyncify data structure has three fields:
        //  0  current stack pos
        //  4  max stack pos
        //  8  id of function at bottom of the call stack (callStackIdToName[id] == name of js function)
        //
        // The Asyncify ABI only interprets the first two fields, the rest is for the runtime.
        // We also embed a stack in the same memory region here, right next to the structure.
        // This struct is also defined as asyncify_data_t in emscripten/fiber.h
        var ptr = _malloc(12 + Asyncify.StackSize);
        Asyncify.setDataHeader(ptr, ptr + 12, Asyncify.StackSize);
        Asyncify.setDataRewindFunc(ptr);
        return ptr;
      },
  setDataHeader(ptr, stack, stackSize) {
        HEAPU32[((ptr)>>2)] = stack;
        HEAPU32[(((ptr)+(4))>>2)] = stack + stackSize;
      },
  setDataRewindFunc(ptr) {
        var bottomOfCallStack = Asyncify.exportCallStack[0];
        var rewindId = Asyncify.getCallStackId(bottomOfCallStack);
        HEAP32[(((ptr)+(8))>>2)] = rewindId;
      },
  getDataRewindFuncName(ptr) {
        var id = HEAP32[(((ptr)+(8))>>2)];
        var name = Asyncify.callStackIdToName[id];
        return name;
      },
  getDataRewindFunc(name) {
        var func = wasmExports[name];
        return func;
      },
  doRewind(ptr) {
        var name = Asyncify.getDataRewindFuncName(ptr);
        var func = Asyncify.getDataRewindFunc(name);
        // Once we have rewound and the stack we no longer need to artificially
        // keep the runtime alive.
        
        return func();
      },
  handleSleep(startAsync) {
        if (ABORT) return;
        if (Asyncify.state === Asyncify.State.Normal) {
          // Prepare to sleep. Call startAsync, and see what happens:
          // if the code decided to call our callback synchronously,
          // then no async operation was in fact begun, and we don't
          // need to do anything.
          var reachedCallback = false;
          var reachedAfterCallback = false;
          startAsync((handleSleepReturnValue = 0) => {
            if (ABORT) return;
            Asyncify.handleSleepReturnValue = handleSleepReturnValue;
            reachedCallback = true;
            if (!reachedAfterCallback) {
              // We are happening synchronously, so no need for async.
              return;
            }
            Asyncify.state = Asyncify.State.Rewinding;
            runAndAbortIfError(() => _asyncify_start_rewind(Asyncify.currData));
            if (typeof MainLoop != 'undefined' && MainLoop.func) {
              MainLoop.resume();
            }
            var asyncWasmReturnValue, isError = false;
            try {
              asyncWasmReturnValue = Asyncify.doRewind(Asyncify.currData);
            } catch (err) {
              asyncWasmReturnValue = err;
              isError = true;
            }
            // Track whether the return value was handled by any promise handlers.
            var handled = false;
            if (!Asyncify.currData) {
              // All asynchronous execution has finished.
              // `asyncWasmReturnValue` now contains the final
              // return value of the exported async WASM function.
              //
              // Note: `asyncWasmReturnValue` is distinct from
              // `Asyncify.handleSleepReturnValue`.
              // `Asyncify.handleSleepReturnValue` contains the return
              // value of the last C function to have executed
              // `Asyncify.handleSleep()`, where as `asyncWasmReturnValue`
              // contains the return value of the exported WASM function
              // that may have called C functions that
              // call `Asyncify.handleSleep()`.
              var asyncPromiseHandlers = Asyncify.asyncPromiseHandlers;
              if (asyncPromiseHandlers) {
                Asyncify.asyncPromiseHandlers = null;
                (isError ? asyncPromiseHandlers.reject : asyncPromiseHandlers.resolve)(asyncWasmReturnValue);
                handled = true;
              }
            }
            if (isError && !handled) {
              // If there was an error and it was not handled by now, we have no choice but to
              // rethrow that error into the global scope where it can be caught only by
              // `onerror` or `onunhandledpromiserejection`.
              throw asyncWasmReturnValue;
            }
          });
          reachedAfterCallback = true;
          if (!reachedCallback) {
            // A true async operation was begun; start a sleep.
            Asyncify.state = Asyncify.State.Unwinding;
            // TODO: reuse, don't alloc/free every sleep
            Asyncify.currData = Asyncify.allocateData();
            if (typeof MainLoop != 'undefined' && MainLoop.func) {
              MainLoop.pause();
            }
            runAndAbortIfError(() => _asyncify_start_unwind(Asyncify.currData));
          }
        } else if (Asyncify.state === Asyncify.State.Rewinding) {
          // Stop a resume.
          Asyncify.state = Asyncify.State.Normal;
          runAndAbortIfError(_asyncify_stop_rewind);
          _free(Asyncify.currData);
          Asyncify.currData = null;
          // Call all sleep callbacks now that the sleep-resume is all done.
          Asyncify.sleepCallbacks.forEach(callUserCallback);
        } else {
          abort(`invalid state: ${Asyncify.state}`);
        }
        return Asyncify.handleSleepReturnValue;
      },
  handleAsync(startAsync) {
        return Asyncify.handleSleep((wakeUp) => {
          // TODO: add error handling as a second param when handleSleep implements it.
          startAsync().then(wakeUp);
        });
      },
  };


  var FS_createPath = (...args) => FS.createPath(...args);



  var FS_unlink = (...args) => FS.unlink(...args);

  var FS_createLazyFile = (...args) => FS.createLazyFile(...args);

  var FS_createDevice = (...args) => FS.createDevice(...args);

  FS.createPreloadedFile = FS_createPreloadedFile;
  FS.staticInit();;

      // This error may happen quite a bit. To avoid overhead we reuse it (and
      // suffer a lack of stack info).
      MEMFS.doesNotExistError = new FS.ErrnoError(44);
      /** @suppress {checkTypes} */
      MEMFS.doesNotExistError.stack = '<generic error, no stack>';
      ;

      // exports
      Module['requestFullscreen'] = Browser.requestFullscreen;
      Module['setCanvasSize'] = Browser.setCanvasSize;
      Module['getUserMedia'] = Browser.getUserMedia;
      Module['createContext'] = Browser.createContext;
    ;

      Module['requestAnimationFrame'] = MainLoop.requestAnimationFrame;
      Module['pauseMainLoop'] = MainLoop.pause;
      Module['resumeMainLoop'] = MainLoop.resume;
      MainLoop.init();;
for (let i = 0; i < 32; ++i) tempFixedLengthArray.push(new Array(i));;
// End JS library code

// include: postlibrary.js
// This file is included after the automatically-generated JS library code
// but before the wasm module is created.

{

  // Begin ATMODULES hooks
  if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];
if (Module['preloadPlugins']) preloadPlugins = Module['preloadPlugins'];
if (Module['print']) out = Module['print'];
if (Module['printErr']) err = Module['printErr'];
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
  // End ATMODULES hooks

  if (Module['arguments']) arguments_ = Module['arguments'];
  if (Module['thisProgram']) thisProgram = Module['thisProgram'];

}

// Begin runtime exports
  Module['addRunDependency'] = addRunDependency;
  Module['removeRunDependency'] = removeRunDependency;
  Module['FS_createPreloadedFile'] = FS_createPreloadedFile;
  Module['FS_unlink'] = FS_unlink;
  Module['FS_createPath'] = FS_createPath;
  Module['FS_createDevice'] = FS_createDevice;
  Module['FS_createDataFile'] = FS_createDataFile;
  Module['FS_createLazyFile'] = FS_createLazyFile;
  Module['LZ4'] = LZ4;
  // End runtime exports
  // Begin JS library exports
  // End JS library exports

// end include: postlibrary.js

var ASM_CONSTS = {
  561248: () => { if (Module.edgePostInit) { Module.edgePostInit(); } },  
 561304: ($0, $1) => { const args = []; for (let i = 0; i < $0; i++) { args.push(UTF8ToString(HEAP32[($1 >> 2) + i])); } console.log(`Edge command line : $ { args }`); const homeIndex = args.indexOf("-home"); if (homeIndex === -1 || homeIndex >= args.length || args[homeIndex + 1].startsWith("-")) { throw "No home command line option specified" } const homeDir = args[homeIndex + 1]; if (!FS.analyzePath(homeDir).exists) { FS.mkdirTree(homeDir); } FS.mount(IDBFS, {}, homeDir); FS.syncfs( true, function(err) { if (err) { console.error(`Error mounting home dir $ { err }`); return; } Module._WebMain($0, $1); }); },  
 561899: () => { if (Module.onFullscreen) { Module.onFullscreen(); } },  
 561955: ($0) => { if (Module.edgePreSyncFS) { Module.edgePreSyncFS(); } FS.syncfs( $0, function(err) { if (Module.edgePostSyncFS) { Module.edgePostSyncFS(); } }); },  
 562104: ($0, $1, $2, $3, $4) => { if (typeof window === 'undefined' || (window.AudioContext || window.webkitAudioContext) === undefined) { return 0; } if (typeof(window.miniaudio) === 'undefined') { window.miniaudio = { referenceCount: 0 }; window.miniaudio.device_type = {}; window.miniaudio.device_type.playback = $0; window.miniaudio.device_type.capture = $1; window.miniaudio.device_type.duplex = $2; window.miniaudio.device_state = {}; window.miniaudio.device_state.stopped = $3; window.miniaudio.device_state.started = $4; let miniaudio = window.miniaudio; miniaudio.devices = []; miniaudio.track_device = function(device) { for (var iDevice = 0; iDevice < miniaudio.devices.length; ++iDevice) { if (miniaudio.devices[iDevice] == null) { miniaudio.devices[iDevice] = device; return iDevice; } } miniaudio.devices.push(device); return miniaudio.devices.length - 1; }; miniaudio.untrack_device_by_index = function(deviceIndex) { miniaudio.devices[deviceIndex] = null; while (miniaudio.devices.length > 0) { if (miniaudio.devices[miniaudio.devices.length-1] == null) { miniaudio.devices.pop(); } else { break; } } }; miniaudio.untrack_device = function(device) { for (var iDevice = 0; iDevice < miniaudio.devices.length; ++iDevice) { if (miniaudio.devices[iDevice] == device) { return miniaudio.untrack_device_by_index(iDevice); } } }; miniaudio.get_device_by_index = function(deviceIndex) { return miniaudio.devices[deviceIndex]; }; miniaudio.unlock_event_types = (function(){ return ['touchend', 'click']; })(); miniaudio.unlock = function() { for(var i = 0; i < miniaudio.devices.length; ++i) { var device = miniaudio.devices[i]; if (device != null && device.webaudio != null && device.state === miniaudio.device_state.started) { device.webaudio.resume().then(() => { _ma_device__on_notification_unlocked(device.pDevice); }, (error) => {console.error("Failed to resume audiocontext", error); }); } } miniaudio.unlock_event_types.map(function(event_type) { document.removeEventListener(event_type, miniaudio.unlock, true); }); }; miniaudio.unlock_event_types.map(function(event_type) { document.addEventListener(event_type, miniaudio.unlock, true); }); } window.miniaudio.referenceCount += 1; return 1; },  
 564282: () => { if (typeof(window.miniaudio) !== 'undefined') { miniaudio.unlock_event_types.map(function(event_type) { document.removeEventListener(event_type, miniaudio.unlock, true); }); window.miniaudio.referenceCount -= 1; if (window.miniaudio.referenceCount === 0) { delete window.miniaudio; } } },  
 564572: () => { return (navigator.mediaDevices !== undefined && navigator.mediaDevices.getUserMedia !== undefined); },  
 564676: () => { try { var temp = new (window.AudioContext || window.webkitAudioContext)(); var sampleRate = temp.sampleRate; temp.close(); return sampleRate; } catch(e) { return 0; } },  
 564847: ($0, $1, $2, $3, $4, $5) => { var deviceType = $0; var channels = $1; var sampleRate = $2; var bufferSize = $3; var pIntermediaryBuffer = $4; var pDevice = $5; if (typeof(window.miniaudio) === 'undefined') { return -1; } var device = {}; var audioContextOptions = {}; if (deviceType == window.miniaudio.device_type.playback && sampleRate != 0) { audioContextOptions.sampleRate = sampleRate; } device.webaudio = new (window.AudioContext || window.webkitAudioContext)(audioContextOptions); device.webaudio.suspend(); device.state = window.miniaudio.device_state.stopped; var channelCountIn = 0; var channelCountOut = channels; if (deviceType != window.miniaudio.device_type.playback) { channelCountIn = channels; } device.scriptNode = device.webaudio.createScriptProcessor(bufferSize, channelCountIn, channelCountOut); device.scriptNode.onaudioprocess = function(e) { if (device.intermediaryBufferView == null || device.intermediaryBufferView.length == 0) { device.intermediaryBufferView = new Float32Array(HEAPF32.buffer, pIntermediaryBuffer, bufferSize * channels); } if (deviceType == window.miniaudio.device_type.capture || deviceType == window.miniaudio.device_type.duplex) { for (var iChannel = 0; iChannel < channels; iChannel += 1) { var inputBuffer = e.inputBuffer.getChannelData(iChannel); var intermediaryBuffer = device.intermediaryBufferView; for (var iFrame = 0; iFrame < bufferSize; iFrame += 1) { intermediaryBuffer[iFrame*channels + iChannel] = inputBuffer[iFrame]; } } _ma_device_process_pcm_frames_capture__webaudio(pDevice, bufferSize, pIntermediaryBuffer); } if (deviceType == window.miniaudio.device_type.playback || deviceType == window.miniaudio.device_type.duplex) { _ma_device_process_pcm_frames_playback__webaudio(pDevice, bufferSize, pIntermediaryBuffer); for (var iChannel = 0; iChannel < e.outputBuffer.numberOfChannels; ++iChannel) { var outputBuffer = e.outputBuffer.getChannelData(iChannel); var intermediaryBuffer = device.intermediaryBufferView; for (var iFrame = 0; iFrame < bufferSize; iFrame += 1) { outputBuffer[iFrame] = intermediaryBuffer[iFrame*channels + iChannel]; } } } else { for (var iChannel = 0; iChannel < e.outputBuffer.numberOfChannels; ++iChannel) { e.outputBuffer.getChannelData(iChannel).fill(0.0); } } }; if (deviceType == window.miniaudio.device_type.capture || deviceType == window.miniaudio.device_type.duplex) { navigator.mediaDevices.getUserMedia({audio:true, video:false}) .then(function(stream) { device.streamNode = device.webaudio.createMediaStreamSource(stream); device.streamNode.connect(device.scriptNode); device.scriptNode.connect(device.webaudio.destination); }) .catch(function(error) { console.log("Failed to get user media: " + error); }); } if (deviceType == window.miniaudio.device_type.playback) { device.scriptNode.connect(device.webaudio.destination); } device.pDevice = pDevice; return window.miniaudio.track_device(device); },  
 567724: ($0) => { return window.miniaudio.get_device_by_index($0).webaudio.sampleRate; },  
 567797: ($0) => { var device = window.miniaudio.get_device_by_index($0); if (device.scriptNode !== undefined) { device.scriptNode.onaudioprocess = function(e) {}; device.scriptNode.disconnect(); device.scriptNode = undefined; } if (device.streamNode !== undefined) { device.streamNode.disconnect(); device.streamNode = undefined; } device.webaudio.close(); device.webaudio = undefined; device.pDevice = undefined; },  
 568197: ($0) => { window.miniaudio.untrack_device_by_index($0); },  
 568247: ($0) => { var device = window.miniaudio.get_device_by_index($0); device.webaudio.resume(); device.state = window.miniaudio.device_state.started; },  
 568386: ($0) => { var device = window.miniaudio.get_device_by_index($0); device.webaudio.suspend(); device.state = window.miniaudio.device_state.stopped; },  
 568526: ($0) => { var str = UTF8ToString($0) + '\n\n' + 'Abort/Retry/Ignore/AlwaysIgnore? [ariA] :'; var reply = window.prompt(str, "i"); if (reply === null) { reply = "i"; } return allocate(intArrayFromString(reply), 'i8', ALLOC_NORMAL); },  
 568751: () => { if (typeof(AudioContext) !== 'undefined') { return true; } else if (typeof(webkitAudioContext) !== 'undefined') { return true; } return false; },  
 568898: () => { if ((typeof(navigator.mediaDevices) !== 'undefined') && (typeof(navigator.mediaDevices.getUserMedia) !== 'undefined')) { return true; } else if (typeof(navigator.webkitGetUserMedia) !== 'undefined') { return true; } return false; },  
 569132: ($0) => { if(typeof(Module['SDL2']) === 'undefined') { Module['SDL2'] = {}; } var SDL2 = Module['SDL2']; if (!$0) { SDL2.audio = {}; } else { SDL2.capture = {}; } if (!SDL2.audioContext) { if (typeof(AudioContext) !== 'undefined') { SDL2.audioContext = new AudioContext(); } else if (typeof(webkitAudioContext) !== 'undefined') { SDL2.audioContext = new webkitAudioContext(); } if (SDL2.audioContext) { if ((typeof navigator.userActivation) === 'undefined') { autoResumeAudioContext(SDL2.audioContext); } } } return SDL2.audioContext === undefined ? -1 : 0; },  
 569684: () => { var SDL2 = Module['SDL2']; return SDL2.audioContext.sampleRate; },  
 569752: ($0, $1, $2, $3) => { var SDL2 = Module['SDL2']; var have_microphone = function(stream) { if (SDL2.capture.silenceTimer !== undefined) { clearInterval(SDL2.capture.silenceTimer); SDL2.capture.silenceTimer = undefined; SDL2.capture.silenceBuffer = undefined } SDL2.capture.mediaStreamNode = SDL2.audioContext.createMediaStreamSource(stream); SDL2.capture.scriptProcessorNode = SDL2.audioContext.createScriptProcessor($1, $0, 1); SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) { if ((SDL2 === undefined) || (SDL2.capture === undefined)) { return; } audioProcessingEvent.outputBuffer.getChannelData(0).fill(0.0); SDL2.capture.currentCaptureBuffer = audioProcessingEvent.inputBuffer; dynCall('vi', $2, [$3]); }; SDL2.capture.mediaStreamNode.connect(SDL2.capture.scriptProcessorNode); SDL2.capture.scriptProcessorNode.connect(SDL2.audioContext.destination); SDL2.capture.stream = stream; }; var no_microphone = function(error) { }; SDL2.capture.silenceBuffer = SDL2.audioContext.createBuffer($0, $1, SDL2.audioContext.sampleRate); SDL2.capture.silenceBuffer.getChannelData(0).fill(0.0); var silence_callback = function() { SDL2.capture.currentCaptureBuffer = SDL2.capture.silenceBuffer; dynCall('vi', $2, [$3]); }; SDL2.capture.silenceTimer = setInterval(silence_callback, ($1 / SDL2.audioContext.sampleRate) * 1000); if ((navigator.mediaDevices !== undefined) && (navigator.mediaDevices.getUserMedia !== undefined)) { navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(have_microphone).catch(no_microphone); } else if (navigator.webkitGetUserMedia !== undefined) { navigator.webkitGetUserMedia({ audio: true, video: false }, have_microphone, no_microphone); } },  
 571445: ($0, $1, $2, $3) => { var SDL2 = Module['SDL2']; SDL2.audio.scriptProcessorNode = SDL2.audioContext['createScriptProcessor']($1, 0, $0); SDL2.audio.scriptProcessorNode['onaudioprocess'] = function (e) { if ((SDL2 === undefined) || (SDL2.audio === undefined)) { return; } if (SDL2.audio.silenceTimer !== undefined) { clearInterval(SDL2.audio.silenceTimer); SDL2.audio.silenceTimer = undefined; SDL2.audio.silenceBuffer = undefined; } SDL2.audio.currentOutputBuffer = e['outputBuffer']; dynCall('vi', $2, [$3]); }; SDL2.audio.scriptProcessorNode['connect'](SDL2.audioContext['destination']); if (SDL2.audioContext.state === 'suspended') { SDL2.audio.silenceBuffer = SDL2.audioContext.createBuffer($0, $1, SDL2.audioContext.sampleRate); SDL2.audio.silenceBuffer.getChannelData(0).fill(0.0); var silence_callback = function() { if ((typeof navigator.userActivation) !== 'undefined') { if (navigator.userActivation.hasBeenActive) { SDL2.audioContext.resume(); } } SDL2.audio.currentOutputBuffer = SDL2.audio.silenceBuffer; dynCall('vi', $2, [$3]); SDL2.audio.currentOutputBuffer = undefined; }; SDL2.audio.silenceTimer = setInterval(silence_callback, ($1 / SDL2.audioContext.sampleRate) * 1000); } },  
 572620: ($0, $1) => { var SDL2 = Module['SDL2']; var numChannels = SDL2.capture.currentCaptureBuffer.numberOfChannels; for (var c = 0; c < numChannels; ++c) { var channelData = SDL2.capture.currentCaptureBuffer.getChannelData(c); if (channelData.length != $1) { throw 'Web Audio capture buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + $1 + ' samples!'; } if (numChannels == 1) { for (var j = 0; j < $1; ++j) { setValue($0 + (j * 4), channelData[j], 'float'); } } else { for (var j = 0; j < $1; ++j) { setValue($0 + (((j * numChannels) + c) * 4), channelData[j], 'float'); } } } },  
 573225: ($0, $1) => { var SDL2 = Module['SDL2']; var buf = $0 >>> 2; var numChannels = SDL2.audio.currentOutputBuffer['numberOfChannels']; for (var c = 0; c < numChannels; ++c) { var channelData = SDL2.audio.currentOutputBuffer['getChannelData'](c); if (channelData.length != $1) { throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + $1 + ' samples!'; } for (var j = 0; j < $1; ++j) { channelData[j] = HEAPF32[buf + (j*numChannels + c)]; } } },  
 573714: ($0) => { var SDL2 = Module['SDL2']; if ($0) { if (SDL2.capture.silenceTimer !== undefined) { clearInterval(SDL2.capture.silenceTimer); } if (SDL2.capture.stream !== undefined) { var tracks = SDL2.capture.stream.getAudioTracks(); for (var i = 0; i < tracks.length; i++) { SDL2.capture.stream.removeTrack(tracks[i]); } } if (SDL2.capture.scriptProcessorNode !== undefined) { SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) {}; SDL2.capture.scriptProcessorNode.disconnect(); } if (SDL2.capture.mediaStreamNode !== undefined) { SDL2.capture.mediaStreamNode.disconnect(); } SDL2.capture = undefined; } else { if (SDL2.audio.scriptProcessorNode != undefined) { SDL2.audio.scriptProcessorNode.disconnect(); } if (SDL2.audio.silenceTimer !== undefined) { clearInterval(SDL2.audio.silenceTimer); } SDL2.audio = undefined; } if ((SDL2.audioContext !== undefined) && (SDL2.audio === undefined) && (SDL2.capture === undefined)) { SDL2.audioContext.close(); SDL2.audioContext = undefined; } },  
 574720: ($0, $1, $2) => { var w = $0; var h = $1; var pixels = $2; if (!Module['SDL2']) Module['SDL2'] = {}; var SDL2 = Module['SDL2']; if (SDL2.ctxCanvas !== Module['canvas']) { SDL2.ctx = Module['createContext'](Module['canvas'], false, true); SDL2.ctxCanvas = Module['canvas']; } if (SDL2.w !== w || SDL2.h !== h || SDL2.imageCtx !== SDL2.ctx) { SDL2.image = SDL2.ctx.createImageData(w, h); SDL2.w = w; SDL2.h = h; SDL2.imageCtx = SDL2.ctx; } var data = SDL2.image.data; var src = pixels / 4; var dst = 0; var num; if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) { num = data.length; while (dst < num) { var val = HEAP32[src]; data[dst ] = val & 0xff; data[dst+1] = (val >> 8) & 0xff; data[dst+2] = (val >> 16) & 0xff; data[dst+3] = 0xff; src++; dst += 4; } } else { if (SDL2.data32Data !== data) { SDL2.data32 = new Int32Array(data.buffer); SDL2.data8 = new Uint8Array(data.buffer); SDL2.data32Data = data; } var data32 = SDL2.data32; num = data32.length; data32.set(HEAP32.subarray(src, src + num)); var data8 = SDL2.data8; var i = 3; var j = i + 4*num; if (num % 8 == 0) { while (i < j) { data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; } } else { while (i < j) { data8[i] = 0xff; i = i + 4 | 0; } } } SDL2.ctx.putImageData(SDL2.image, 0, 0); },  
 576188: ($0, $1, $2, $3, $4) => { var w = $0; var h = $1; var hot_x = $2; var hot_y = $3; var pixels = $4; var canvas = document.createElement("canvas"); canvas.width = w; canvas.height = h; var ctx = canvas.getContext("2d"); var image = ctx.createImageData(w, h); var data = image.data; var src = pixels / 4; var dst = 0; var num; if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) { num = data.length; while (dst < num) { var val = HEAP32[src]; data[dst ] = val & 0xff; data[dst+1] = (val >> 8) & 0xff; data[dst+2] = (val >> 16) & 0xff; data[dst+3] = (val >> 24) & 0xff; src++; dst += 4; } } else { var data32 = new Int32Array(data.buffer); num = data32.length; data32.set(HEAP32.subarray(src, src + num)); } ctx.putImageData(image, 0, 0); var url = hot_x === 0 && hot_y === 0 ? "url(" + canvas.toDataURL() + "), auto" : "url(" + canvas.toDataURL() + ") " + hot_x + " " + hot_y + ", auto"; var urlBuf = _malloc(url.length + 1); stringToUTF8(url, urlBuf, url.length + 1); return urlBuf; },  
 577176: ($0) => { if (Module['canvas']) { Module['canvas'].style['cursor'] = UTF8ToString($0); } },  
 577259: () => { if (Module['canvas']) { Module['canvas'].style['cursor'] = 'none'; } },  
 577328: () => { return window.innerWidth; },  
 577358: () => { return window.innerHeight; },  
 577389: ($0, $1) => { alert(UTF8ToString($0) + "\n\n" + UTF8ToString($1)); }
};
function slog_js_log(level,c_str) { const str = UTF8ToString(c_str); switch (level) { case 0: console.error(str); break; case 1: console.error(str); break; case 2: console.warn(str); break; default: console.info(str); break; } }
var wasmImports = {
  /** @export */
  __syscall_dup3: ___syscall_dup3,
  /** @export */
  __syscall_faccessat: ___syscall_faccessat,
  /** @export */
  __syscall_fcntl64: ___syscall_fcntl64,
  /** @export */
  __syscall_fstat64: ___syscall_fstat64,
  /** @export */
  __syscall_getdents64: ___syscall_getdents64,
  /** @export */
  __syscall_ioctl: ___syscall_ioctl,
  /** @export */
  __syscall_lstat64: ___syscall_lstat64,
  /** @export */
  __syscall_mkdirat: ___syscall_mkdirat,
  /** @export */
  __syscall_newfstatat: ___syscall_newfstatat,
  /** @export */
  __syscall_openat: ___syscall_openat,
  /** @export */
  __syscall_readlinkat: ___syscall_readlinkat,
  /** @export */
  __syscall_renameat: ___syscall_renameat,
  /** @export */
  __syscall_rmdir: ___syscall_rmdir,
  /** @export */
  __syscall_stat64: ___syscall_stat64,
  /** @export */
  __syscall_unlinkat: ___syscall_unlinkat,
  /** @export */
  _abort_js: __abort_js,
  /** @export */
  _emscripten_system: __emscripten_system,
  /** @export */
  _emscripten_throw_longjmp: __emscripten_throw_longjmp,
  /** @export */
  _gmtime_js: __gmtime_js,
  /** @export */
  _localtime_js: __localtime_js,
  /** @export */
  _mktime_js: __mktime_js,
  /** @export */
  _tzset_js: __tzset_js,
  /** @export */
  clock_time_get: _clock_time_get,
  /** @export */
  eglBindAPI: _eglBindAPI,
  /** @export */
  eglChooseConfig: _eglChooseConfig,
  /** @export */
  eglCreateContext: _eglCreateContext,
  /** @export */
  eglCreateWindowSurface: _eglCreateWindowSurface,
  /** @export */
  eglDestroyContext: _eglDestroyContext,
  /** @export */
  eglDestroySurface: _eglDestroySurface,
  /** @export */
  eglGetConfigAttrib: _eglGetConfigAttrib,
  /** @export */
  eglGetDisplay: _eglGetDisplay,
  /** @export */
  eglGetError: _eglGetError,
  /** @export */
  eglInitialize: _eglInitialize,
  /** @export */
  eglMakeCurrent: _eglMakeCurrent,
  /** @export */
  eglQueryString: _eglQueryString,
  /** @export */
  eglSwapBuffers: _eglSwapBuffers,
  /** @export */
  eglSwapInterval: _eglSwapInterval,
  /** @export */
  eglTerminate: _eglTerminate,
  /** @export */
  eglWaitGL: _eglWaitGL,
  /** @export */
  eglWaitNative: _eglWaitNative,
  /** @export */
  emscripten_asm_const_int: _emscripten_asm_const_int,
  /** @export */
  emscripten_asm_const_int_sync_on_main_thread: _emscripten_asm_const_int_sync_on_main_thread,
  /** @export */
  emscripten_asm_const_ptr_sync_on_main_thread: _emscripten_asm_const_ptr_sync_on_main_thread,
  /** @export */
  emscripten_date_now: _emscripten_date_now,
  /** @export */
  emscripten_enter_soft_fullscreen: _emscripten_enter_soft_fullscreen,
  /** @export */
  emscripten_err: _emscripten_err,
  /** @export */
  emscripten_exit_fullscreen: _emscripten_exit_fullscreen,
  /** @export */
  emscripten_exit_pointerlock: _emscripten_exit_pointerlock,
  /** @export */
  emscripten_exit_soft_fullscreen: _emscripten_exit_soft_fullscreen,
  /** @export */
  emscripten_get_device_pixel_ratio: _emscripten_get_device_pixel_ratio,
  /** @export */
  emscripten_get_element_css_size: _emscripten_get_element_css_size,
  /** @export */
  emscripten_get_gamepad_status: _emscripten_get_gamepad_status,
  /** @export */
  emscripten_get_now: _emscripten_get_now,
  /** @export */
  emscripten_get_num_gamepads: _emscripten_get_num_gamepads,
  /** @export */
  emscripten_get_screen_size: _emscripten_get_screen_size,
  /** @export */
  emscripten_glActiveTexture: _emscripten_glActiveTexture,
  /** @export */
  emscripten_glAttachShader: _emscripten_glAttachShader,
  /** @export */
  emscripten_glBeginQuery: _emscripten_glBeginQuery,
  /** @export */
  emscripten_glBeginQueryEXT: _emscripten_glBeginQueryEXT,
  /** @export */
  emscripten_glBeginTransformFeedback: _emscripten_glBeginTransformFeedback,
  /** @export */
  emscripten_glBindAttribLocation: _emscripten_glBindAttribLocation,
  /** @export */
  emscripten_glBindBuffer: _emscripten_glBindBuffer,
  /** @export */
  emscripten_glBindBufferBase: _emscripten_glBindBufferBase,
  /** @export */
  emscripten_glBindBufferRange: _emscripten_glBindBufferRange,
  /** @export */
  emscripten_glBindFramebuffer: _emscripten_glBindFramebuffer,
  /** @export */
  emscripten_glBindRenderbuffer: _emscripten_glBindRenderbuffer,
  /** @export */
  emscripten_glBindSampler: _emscripten_glBindSampler,
  /** @export */
  emscripten_glBindTexture: _emscripten_glBindTexture,
  /** @export */
  emscripten_glBindTransformFeedback: _emscripten_glBindTransformFeedback,
  /** @export */
  emscripten_glBindVertexArray: _emscripten_glBindVertexArray,
  /** @export */
  emscripten_glBindVertexArrayOES: _emscripten_glBindVertexArrayOES,
  /** @export */
  emscripten_glBlendColor: _emscripten_glBlendColor,
  /** @export */
  emscripten_glBlendEquation: _emscripten_glBlendEquation,
  /** @export */
  emscripten_glBlendEquationSeparate: _emscripten_glBlendEquationSeparate,
  /** @export */
  emscripten_glBlendFunc: _emscripten_glBlendFunc,
  /** @export */
  emscripten_glBlendFuncSeparate: _emscripten_glBlendFuncSeparate,
  /** @export */
  emscripten_glBlitFramebuffer: _emscripten_glBlitFramebuffer,
  /** @export */
  emscripten_glBufferData: _emscripten_glBufferData,
  /** @export */
  emscripten_glBufferSubData: _emscripten_glBufferSubData,
  /** @export */
  emscripten_glCheckFramebufferStatus: _emscripten_glCheckFramebufferStatus,
  /** @export */
  emscripten_glClear: _emscripten_glClear,
  /** @export */
  emscripten_glClearBufferfi: _emscripten_glClearBufferfi,
  /** @export */
  emscripten_glClearBufferfv: _emscripten_glClearBufferfv,
  /** @export */
  emscripten_glClearBufferiv: _emscripten_glClearBufferiv,
  /** @export */
  emscripten_glClearBufferuiv: _emscripten_glClearBufferuiv,
  /** @export */
  emscripten_glClearColor: _emscripten_glClearColor,
  /** @export */
  emscripten_glClearDepthf: _emscripten_glClearDepthf,
  /** @export */
  emscripten_glClearStencil: _emscripten_glClearStencil,
  /** @export */
  emscripten_glClientWaitSync: _emscripten_glClientWaitSync,
  /** @export */
  emscripten_glClipControlEXT: _emscripten_glClipControlEXT,
  /** @export */
  emscripten_glColorMask: _emscripten_glColorMask,
  /** @export */
  emscripten_glCompileShader: _emscripten_glCompileShader,
  /** @export */
  emscripten_glCompressedTexImage2D: _emscripten_glCompressedTexImage2D,
  /** @export */
  emscripten_glCompressedTexImage3D: _emscripten_glCompressedTexImage3D,
  /** @export */
  emscripten_glCompressedTexSubImage2D: _emscripten_glCompressedTexSubImage2D,
  /** @export */
  emscripten_glCompressedTexSubImage3D: _emscripten_glCompressedTexSubImage3D,
  /** @export */
  emscripten_glCopyBufferSubData: _emscripten_glCopyBufferSubData,
  /** @export */
  emscripten_glCopyTexImage2D: _emscripten_glCopyTexImage2D,
  /** @export */
  emscripten_glCopyTexSubImage2D: _emscripten_glCopyTexSubImage2D,
  /** @export */
  emscripten_glCopyTexSubImage3D: _emscripten_glCopyTexSubImage3D,
  /** @export */
  emscripten_glCreateProgram: _emscripten_glCreateProgram,
  /** @export */
  emscripten_glCreateShader: _emscripten_glCreateShader,
  /** @export */
  emscripten_glCullFace: _emscripten_glCullFace,
  /** @export */
  emscripten_glDeleteBuffers: _emscripten_glDeleteBuffers,
  /** @export */
  emscripten_glDeleteFramebuffers: _emscripten_glDeleteFramebuffers,
  /** @export */
  emscripten_glDeleteProgram: _emscripten_glDeleteProgram,
  /** @export */
  emscripten_glDeleteQueries: _emscripten_glDeleteQueries,
  /** @export */
  emscripten_glDeleteQueriesEXT: _emscripten_glDeleteQueriesEXT,
  /** @export */
  emscripten_glDeleteRenderbuffers: _emscripten_glDeleteRenderbuffers,
  /** @export */
  emscripten_glDeleteSamplers: _emscripten_glDeleteSamplers,
  /** @export */
  emscripten_glDeleteShader: _emscripten_glDeleteShader,
  /** @export */
  emscripten_glDeleteSync: _emscripten_glDeleteSync,
  /** @export */
  emscripten_glDeleteTextures: _emscripten_glDeleteTextures,
  /** @export */
  emscripten_glDeleteTransformFeedbacks: _emscripten_glDeleteTransformFeedbacks,
  /** @export */
  emscripten_glDeleteVertexArrays: _emscripten_glDeleteVertexArrays,
  /** @export */
  emscripten_glDeleteVertexArraysOES: _emscripten_glDeleteVertexArraysOES,
  /** @export */
  emscripten_glDepthFunc: _emscripten_glDepthFunc,
  /** @export */
  emscripten_glDepthMask: _emscripten_glDepthMask,
  /** @export */
  emscripten_glDepthRangef: _emscripten_glDepthRangef,
  /** @export */
  emscripten_glDetachShader: _emscripten_glDetachShader,
  /** @export */
  emscripten_glDisable: _emscripten_glDisable,
  /** @export */
  emscripten_glDisableVertexAttribArray: _emscripten_glDisableVertexAttribArray,
  /** @export */
  emscripten_glDrawArrays: _emscripten_glDrawArrays,
  /** @export */
  emscripten_glDrawArraysInstanced: _emscripten_glDrawArraysInstanced,
  /** @export */
  emscripten_glDrawArraysInstancedANGLE: _emscripten_glDrawArraysInstancedANGLE,
  /** @export */
  emscripten_glDrawArraysInstancedARB: _emscripten_glDrawArraysInstancedARB,
  /** @export */
  emscripten_glDrawArraysInstancedEXT: _emscripten_glDrawArraysInstancedEXT,
  /** @export */
  emscripten_glDrawArraysInstancedNV: _emscripten_glDrawArraysInstancedNV,
  /** @export */
  emscripten_glDrawBuffers: _emscripten_glDrawBuffers,
  /** @export */
  emscripten_glDrawBuffersEXT: _emscripten_glDrawBuffersEXT,
  /** @export */
  emscripten_glDrawBuffersWEBGL: _emscripten_glDrawBuffersWEBGL,
  /** @export */
  emscripten_glDrawElements: _emscripten_glDrawElements,
  /** @export */
  emscripten_glDrawElementsInstanced: _emscripten_glDrawElementsInstanced,
  /** @export */
  emscripten_glDrawElementsInstancedANGLE: _emscripten_glDrawElementsInstancedANGLE,
  /** @export */
  emscripten_glDrawElementsInstancedARB: _emscripten_glDrawElementsInstancedARB,
  /** @export */
  emscripten_glDrawElementsInstancedEXT: _emscripten_glDrawElementsInstancedEXT,
  /** @export */
  emscripten_glDrawElementsInstancedNV: _emscripten_glDrawElementsInstancedNV,
  /** @export */
  emscripten_glDrawRangeElements: _emscripten_glDrawRangeElements,
  /** @export */
  emscripten_glEnable: _emscripten_glEnable,
  /** @export */
  emscripten_glEnableVertexAttribArray: _emscripten_glEnableVertexAttribArray,
  /** @export */
  emscripten_glEndQuery: _emscripten_glEndQuery,
  /** @export */
  emscripten_glEndQueryEXT: _emscripten_glEndQueryEXT,
  /** @export */
  emscripten_glEndTransformFeedback: _emscripten_glEndTransformFeedback,
  /** @export */
  emscripten_glFenceSync: _emscripten_glFenceSync,
  /** @export */
  emscripten_glFinish: _emscripten_glFinish,
  /** @export */
  emscripten_glFlush: _emscripten_glFlush,
  /** @export */
  emscripten_glFramebufferRenderbuffer: _emscripten_glFramebufferRenderbuffer,
  /** @export */
  emscripten_glFramebufferTexture2D: _emscripten_glFramebufferTexture2D,
  /** @export */
  emscripten_glFramebufferTextureLayer: _emscripten_glFramebufferTextureLayer,
  /** @export */
  emscripten_glFrontFace: _emscripten_glFrontFace,
  /** @export */
  emscripten_glGenBuffers: _emscripten_glGenBuffers,
  /** @export */
  emscripten_glGenFramebuffers: _emscripten_glGenFramebuffers,
  /** @export */
  emscripten_glGenQueries: _emscripten_glGenQueries,
  /** @export */
  emscripten_glGenQueriesEXT: _emscripten_glGenQueriesEXT,
  /** @export */
  emscripten_glGenRenderbuffers: _emscripten_glGenRenderbuffers,
  /** @export */
  emscripten_glGenSamplers: _emscripten_glGenSamplers,
  /** @export */
  emscripten_glGenTextures: _emscripten_glGenTextures,
  /** @export */
  emscripten_glGenTransformFeedbacks: _emscripten_glGenTransformFeedbacks,
  /** @export */
  emscripten_glGenVertexArrays: _emscripten_glGenVertexArrays,
  /** @export */
  emscripten_glGenVertexArraysOES: _emscripten_glGenVertexArraysOES,
  /** @export */
  emscripten_glGenerateMipmap: _emscripten_glGenerateMipmap,
  /** @export */
  emscripten_glGetActiveAttrib: _emscripten_glGetActiveAttrib,
  /** @export */
  emscripten_glGetActiveUniform: _emscripten_glGetActiveUniform,
  /** @export */
  emscripten_glGetActiveUniformBlockName: _emscripten_glGetActiveUniformBlockName,
  /** @export */
  emscripten_glGetActiveUniformBlockiv: _emscripten_glGetActiveUniformBlockiv,
  /** @export */
  emscripten_glGetActiveUniformsiv: _emscripten_glGetActiveUniformsiv,
  /** @export */
  emscripten_glGetAttachedShaders: _emscripten_glGetAttachedShaders,
  /** @export */
  emscripten_glGetAttribLocation: _emscripten_glGetAttribLocation,
  /** @export */
  emscripten_glGetBooleanv: _emscripten_glGetBooleanv,
  /** @export */
  emscripten_glGetBufferParameteri64v: _emscripten_glGetBufferParameteri64v,
  /** @export */
  emscripten_glGetBufferParameteriv: _emscripten_glGetBufferParameteriv,
  /** @export */
  emscripten_glGetError: _emscripten_glGetError,
  /** @export */
  emscripten_glGetFloatv: _emscripten_glGetFloatv,
  /** @export */
  emscripten_glGetFragDataLocation: _emscripten_glGetFragDataLocation,
  /** @export */
  emscripten_glGetFramebufferAttachmentParameteriv: _emscripten_glGetFramebufferAttachmentParameteriv,
  /** @export */
  emscripten_glGetInteger64i_v: _emscripten_glGetInteger64i_v,
  /** @export */
  emscripten_glGetInteger64v: _emscripten_glGetInteger64v,
  /** @export */
  emscripten_glGetIntegeri_v: _emscripten_glGetIntegeri_v,
  /** @export */
  emscripten_glGetIntegerv: _emscripten_glGetIntegerv,
  /** @export */
  emscripten_glGetInternalformativ: _emscripten_glGetInternalformativ,
  /** @export */
  emscripten_glGetProgramBinary: _emscripten_glGetProgramBinary,
  /** @export */
  emscripten_glGetProgramInfoLog: _emscripten_glGetProgramInfoLog,
  /** @export */
  emscripten_glGetProgramiv: _emscripten_glGetProgramiv,
  /** @export */
  emscripten_glGetQueryObjecti64vEXT: _emscripten_glGetQueryObjecti64vEXT,
  /** @export */
  emscripten_glGetQueryObjectivEXT: _emscripten_glGetQueryObjectivEXT,
  /** @export */
  emscripten_glGetQueryObjectui64vEXT: _emscripten_glGetQueryObjectui64vEXT,
  /** @export */
  emscripten_glGetQueryObjectuiv: _emscripten_glGetQueryObjectuiv,
  /** @export */
  emscripten_glGetQueryObjectuivEXT: _emscripten_glGetQueryObjectuivEXT,
  /** @export */
  emscripten_glGetQueryiv: _emscripten_glGetQueryiv,
  /** @export */
  emscripten_glGetQueryivEXT: _emscripten_glGetQueryivEXT,
  /** @export */
  emscripten_glGetRenderbufferParameteriv: _emscripten_glGetRenderbufferParameteriv,
  /** @export */
  emscripten_glGetSamplerParameterfv: _emscripten_glGetSamplerParameterfv,
  /** @export */
  emscripten_glGetSamplerParameteriv: _emscripten_glGetSamplerParameteriv,
  /** @export */
  emscripten_glGetShaderInfoLog: _emscripten_glGetShaderInfoLog,
  /** @export */
  emscripten_glGetShaderPrecisionFormat: _emscripten_glGetShaderPrecisionFormat,
  /** @export */
  emscripten_glGetShaderSource: _emscripten_glGetShaderSource,
  /** @export */
  emscripten_glGetShaderiv: _emscripten_glGetShaderiv,
  /** @export */
  emscripten_glGetString: _emscripten_glGetString,
  /** @export */
  emscripten_glGetStringi: _emscripten_glGetStringi,
  /** @export */
  emscripten_glGetSynciv: _emscripten_glGetSynciv,
  /** @export */
  emscripten_glGetTexParameterfv: _emscripten_glGetTexParameterfv,
  /** @export */
  emscripten_glGetTexParameteriv: _emscripten_glGetTexParameteriv,
  /** @export */
  emscripten_glGetTransformFeedbackVarying: _emscripten_glGetTransformFeedbackVarying,
  /** @export */
  emscripten_glGetUniformBlockIndex: _emscripten_glGetUniformBlockIndex,
  /** @export */
  emscripten_glGetUniformIndices: _emscripten_glGetUniformIndices,
  /** @export */
  emscripten_glGetUniformLocation: _emscripten_glGetUniformLocation,
  /** @export */
  emscripten_glGetUniformfv: _emscripten_glGetUniformfv,
  /** @export */
  emscripten_glGetUniformiv: _emscripten_glGetUniformiv,
  /** @export */
  emscripten_glGetUniformuiv: _emscripten_glGetUniformuiv,
  /** @export */
  emscripten_glGetVertexAttribIiv: _emscripten_glGetVertexAttribIiv,
  /** @export */
  emscripten_glGetVertexAttribIuiv: _emscripten_glGetVertexAttribIuiv,
  /** @export */
  emscripten_glGetVertexAttribPointerv: _emscripten_glGetVertexAttribPointerv,
  /** @export */
  emscripten_glGetVertexAttribfv: _emscripten_glGetVertexAttribfv,
  /** @export */
  emscripten_glGetVertexAttribiv: _emscripten_glGetVertexAttribiv,
  /** @export */
  emscripten_glHint: _emscripten_glHint,
  /** @export */
  emscripten_glInvalidateFramebuffer: _emscripten_glInvalidateFramebuffer,
  /** @export */
  emscripten_glInvalidateSubFramebuffer: _emscripten_glInvalidateSubFramebuffer,
  /** @export */
  emscripten_glIsBuffer: _emscripten_glIsBuffer,
  /** @export */
  emscripten_glIsEnabled: _emscripten_glIsEnabled,
  /** @export */
  emscripten_glIsFramebuffer: _emscripten_glIsFramebuffer,
  /** @export */
  emscripten_glIsProgram: _emscripten_glIsProgram,
  /** @export */
  emscripten_glIsQuery: _emscripten_glIsQuery,
  /** @export */
  emscripten_glIsQueryEXT: _emscripten_glIsQueryEXT,
  /** @export */
  emscripten_glIsRenderbuffer: _emscripten_glIsRenderbuffer,
  /** @export */
  emscripten_glIsSampler: _emscripten_glIsSampler,
  /** @export */
  emscripten_glIsShader: _emscripten_glIsShader,
  /** @export */
  emscripten_glIsSync: _emscripten_glIsSync,
  /** @export */
  emscripten_glIsTexture: _emscripten_glIsTexture,
  /** @export */
  emscripten_glIsTransformFeedback: _emscripten_glIsTransformFeedback,
  /** @export */
  emscripten_glIsVertexArray: _emscripten_glIsVertexArray,
  /** @export */
  emscripten_glIsVertexArrayOES: _emscripten_glIsVertexArrayOES,
  /** @export */
  emscripten_glLineWidth: _emscripten_glLineWidth,
  /** @export */
  emscripten_glLinkProgram: _emscripten_glLinkProgram,
  /** @export */
  emscripten_glPauseTransformFeedback: _emscripten_glPauseTransformFeedback,
  /** @export */
  emscripten_glPixelStorei: _emscripten_glPixelStorei,
  /** @export */
  emscripten_glPolygonModeWEBGL: _emscripten_glPolygonModeWEBGL,
  /** @export */
  emscripten_glPolygonOffset: _emscripten_glPolygonOffset,
  /** @export */
  emscripten_glPolygonOffsetClampEXT: _emscripten_glPolygonOffsetClampEXT,
  /** @export */
  emscripten_glProgramBinary: _emscripten_glProgramBinary,
  /** @export */
  emscripten_glProgramParameteri: _emscripten_glProgramParameteri,
  /** @export */
  emscripten_glQueryCounterEXT: _emscripten_glQueryCounterEXT,
  /** @export */
  emscripten_glReadBuffer: _emscripten_glReadBuffer,
  /** @export */
  emscripten_glReadPixels: _emscripten_glReadPixels,
  /** @export */
  emscripten_glReleaseShaderCompiler: _emscripten_glReleaseShaderCompiler,
  /** @export */
  emscripten_glRenderbufferStorage: _emscripten_glRenderbufferStorage,
  /** @export */
  emscripten_glRenderbufferStorageMultisample: _emscripten_glRenderbufferStorageMultisample,
  /** @export */
  emscripten_glResumeTransformFeedback: _emscripten_glResumeTransformFeedback,
  /** @export */
  emscripten_glSampleCoverage: _emscripten_glSampleCoverage,
  /** @export */
  emscripten_glSamplerParameterf: _emscripten_glSamplerParameterf,
  /** @export */
  emscripten_glSamplerParameterfv: _emscripten_glSamplerParameterfv,
  /** @export */
  emscripten_glSamplerParameteri: _emscripten_glSamplerParameteri,
  /** @export */
  emscripten_glSamplerParameteriv: _emscripten_glSamplerParameteriv,
  /** @export */
  emscripten_glScissor: _emscripten_glScissor,
  /** @export */
  emscripten_glShaderBinary: _emscripten_glShaderBinary,
  /** @export */
  emscripten_glShaderSource: _emscripten_glShaderSource,
  /** @export */
  emscripten_glStencilFunc: _emscripten_glStencilFunc,
  /** @export */
  emscripten_glStencilFuncSeparate: _emscripten_glStencilFuncSeparate,
  /** @export */
  emscripten_glStencilMask: _emscripten_glStencilMask,
  /** @export */
  emscripten_glStencilMaskSeparate: _emscripten_glStencilMaskSeparate,
  /** @export */
  emscripten_glStencilOp: _emscripten_glStencilOp,
  /** @export */
  emscripten_glStencilOpSeparate: _emscripten_glStencilOpSeparate,
  /** @export */
  emscripten_glTexImage2D: _emscripten_glTexImage2D,
  /** @export */
  emscripten_glTexImage3D: _emscripten_glTexImage3D,
  /** @export */
  emscripten_glTexParameterf: _emscripten_glTexParameterf,
  /** @export */
  emscripten_glTexParameterfv: _emscripten_glTexParameterfv,
  /** @export */
  emscripten_glTexParameteri: _emscripten_glTexParameteri,
  /** @export */
  emscripten_glTexParameteriv: _emscripten_glTexParameteriv,
  /** @export */
  emscripten_glTexStorage2D: _emscripten_glTexStorage2D,
  /** @export */
  emscripten_glTexStorage3D: _emscripten_glTexStorage3D,
  /** @export */
  emscripten_glTexSubImage2D: _emscripten_glTexSubImage2D,
  /** @export */
  emscripten_glTexSubImage3D: _emscripten_glTexSubImage3D,
  /** @export */
  emscripten_glTransformFeedbackVaryings: _emscripten_glTransformFeedbackVaryings,
  /** @export */
  emscripten_glUniform1f: _emscripten_glUniform1f,
  /** @export */
  emscripten_glUniform1fv: _emscripten_glUniform1fv,
  /** @export */
  emscripten_glUniform1i: _emscripten_glUniform1i,
  /** @export */
  emscripten_glUniform1iv: _emscripten_glUniform1iv,
  /** @export */
  emscripten_glUniform1ui: _emscripten_glUniform1ui,
  /** @export */
  emscripten_glUniform1uiv: _emscripten_glUniform1uiv,
  /** @export */
  emscripten_glUniform2f: _emscripten_glUniform2f,
  /** @export */
  emscripten_glUniform2fv: _emscripten_glUniform2fv,
  /** @export */
  emscripten_glUniform2i: _emscripten_glUniform2i,
  /** @export */
  emscripten_glUniform2iv: _emscripten_glUniform2iv,
  /** @export */
  emscripten_glUniform2ui: _emscripten_glUniform2ui,
  /** @export */
  emscripten_glUniform2uiv: _emscripten_glUniform2uiv,
  /** @export */
  emscripten_glUniform3f: _emscripten_glUniform3f,
  /** @export */
  emscripten_glUniform3fv: _emscripten_glUniform3fv,
  /** @export */
  emscripten_glUniform3i: _emscripten_glUniform3i,
  /** @export */
  emscripten_glUniform3iv: _emscripten_glUniform3iv,
  /** @export */
  emscripten_glUniform3ui: _emscripten_glUniform3ui,
  /** @export */
  emscripten_glUniform3uiv: _emscripten_glUniform3uiv,
  /** @export */
  emscripten_glUniform4f: _emscripten_glUniform4f,
  /** @export */
  emscripten_glUniform4fv: _emscripten_glUniform4fv,
  /** @export */
  emscripten_glUniform4i: _emscripten_glUniform4i,
  /** @export */
  emscripten_glUniform4iv: _emscripten_glUniform4iv,
  /** @export */
  emscripten_glUniform4ui: _emscripten_glUniform4ui,
  /** @export */
  emscripten_glUniform4uiv: _emscripten_glUniform4uiv,
  /** @export */
  emscripten_glUniformBlockBinding: _emscripten_glUniformBlockBinding,
  /** @export */
  emscripten_glUniformMatrix2fv: _emscripten_glUniformMatrix2fv,
  /** @export */
  emscripten_glUniformMatrix2x3fv: _emscripten_glUniformMatrix2x3fv,
  /** @export */
  emscripten_glUniformMatrix2x4fv: _emscripten_glUniformMatrix2x4fv,
  /** @export */
  emscripten_glUniformMatrix3fv: _emscripten_glUniformMatrix3fv,
  /** @export */
  emscripten_glUniformMatrix3x2fv: _emscripten_glUniformMatrix3x2fv,
  /** @export */
  emscripten_glUniformMatrix3x4fv: _emscripten_glUniformMatrix3x4fv,
  /** @export */
  emscripten_glUniformMatrix4fv: _emscripten_glUniformMatrix4fv,
  /** @export */
  emscripten_glUniformMatrix4x2fv: _emscripten_glUniformMatrix4x2fv,
  /** @export */
  emscripten_glUniformMatrix4x3fv: _emscripten_glUniformMatrix4x3fv,
  /** @export */
  emscripten_glUseProgram: _emscripten_glUseProgram,
  /** @export */
  emscripten_glValidateProgram: _emscripten_glValidateProgram,
  /** @export */
  emscripten_glVertexAttrib1f: _emscripten_glVertexAttrib1f,
  /** @export */
  emscripten_glVertexAttrib1fv: _emscripten_glVertexAttrib1fv,
  /** @export */
  emscripten_glVertexAttrib2f: _emscripten_glVertexAttrib2f,
  /** @export */
  emscripten_glVertexAttrib2fv: _emscripten_glVertexAttrib2fv,
  /** @export */
  emscripten_glVertexAttrib3f: _emscripten_glVertexAttrib3f,
  /** @export */
  emscripten_glVertexAttrib3fv: _emscripten_glVertexAttrib3fv,
  /** @export */
  emscripten_glVertexAttrib4f: _emscripten_glVertexAttrib4f,
  /** @export */
  emscripten_glVertexAttrib4fv: _emscripten_glVertexAttrib4fv,
  /** @export */
  emscripten_glVertexAttribDivisor: _emscripten_glVertexAttribDivisor,
  /** @export */
  emscripten_glVertexAttribDivisorANGLE: _emscripten_glVertexAttribDivisorANGLE,
  /** @export */
  emscripten_glVertexAttribDivisorARB: _emscripten_glVertexAttribDivisorARB,
  /** @export */
  emscripten_glVertexAttribDivisorEXT: _emscripten_glVertexAttribDivisorEXT,
  /** @export */
  emscripten_glVertexAttribDivisorNV: _emscripten_glVertexAttribDivisorNV,
  /** @export */
  emscripten_glVertexAttribI4i: _emscripten_glVertexAttribI4i,
  /** @export */
  emscripten_glVertexAttribI4iv: _emscripten_glVertexAttribI4iv,
  /** @export */
  emscripten_glVertexAttribI4ui: _emscripten_glVertexAttribI4ui,
  /** @export */
  emscripten_glVertexAttribI4uiv: _emscripten_glVertexAttribI4uiv,
  /** @export */
  emscripten_glVertexAttribIPointer: _emscripten_glVertexAttribIPointer,
  /** @export */
  emscripten_glVertexAttribPointer: _emscripten_glVertexAttribPointer,
  /** @export */
  emscripten_glViewport: _emscripten_glViewport,
  /** @export */
  emscripten_glWaitSync: _emscripten_glWaitSync,
  /** @export */
  emscripten_has_asyncify: _emscripten_has_asyncify,
  /** @export */
  emscripten_request_fullscreen_strategy: _emscripten_request_fullscreen_strategy,
  /** @export */
  emscripten_request_pointerlock: _emscripten_request_pointerlock,
  /** @export */
  emscripten_resize_heap: _emscripten_resize_heap,
  /** @export */
  emscripten_sample_gamepad_data: _emscripten_sample_gamepad_data,
  /** @export */
  emscripten_set_beforeunload_callback_on_thread: _emscripten_set_beforeunload_callback_on_thread,
  /** @export */
  emscripten_set_blur_callback_on_thread: _emscripten_set_blur_callback_on_thread,
  /** @export */
  emscripten_set_canvas_element_size: _emscripten_set_canvas_element_size,
  /** @export */
  emscripten_set_element_css_size: _emscripten_set_element_css_size,
  /** @export */
  emscripten_set_focus_callback_on_thread: _emscripten_set_focus_callback_on_thread,
  /** @export */
  emscripten_set_fullscreenchange_callback_on_thread: _emscripten_set_fullscreenchange_callback_on_thread,
  /** @export */
  emscripten_set_gamepadconnected_callback_on_thread: _emscripten_set_gamepadconnected_callback_on_thread,
  /** @export */
  emscripten_set_gamepaddisconnected_callback_on_thread: _emscripten_set_gamepaddisconnected_callback_on_thread,
  /** @export */
  emscripten_set_keydown_callback_on_thread: _emscripten_set_keydown_callback_on_thread,
  /** @export */
  emscripten_set_keypress_callback_on_thread: _emscripten_set_keypress_callback_on_thread,
  /** @export */
  emscripten_set_keyup_callback_on_thread: _emscripten_set_keyup_callback_on_thread,
  /** @export */
  emscripten_set_main_loop: _emscripten_set_main_loop,
  /** @export */
  emscripten_set_mousedown_callback_on_thread: _emscripten_set_mousedown_callback_on_thread,
  /** @export */
  emscripten_set_mouseenter_callback_on_thread: _emscripten_set_mouseenter_callback_on_thread,
  /** @export */
  emscripten_set_mouseleave_callback_on_thread: _emscripten_set_mouseleave_callback_on_thread,
  /** @export */
  emscripten_set_mousemove_callback_on_thread: _emscripten_set_mousemove_callback_on_thread,
  /** @export */
  emscripten_set_mouseup_callback_on_thread: _emscripten_set_mouseup_callback_on_thread,
  /** @export */
  emscripten_set_pointerlockchange_callback_on_thread: _emscripten_set_pointerlockchange_callback_on_thread,
  /** @export */
  emscripten_set_resize_callback_on_thread: _emscripten_set_resize_callback_on_thread,
  /** @export */
  emscripten_set_touchcancel_callback_on_thread: _emscripten_set_touchcancel_callback_on_thread,
  /** @export */
  emscripten_set_touchend_callback_on_thread: _emscripten_set_touchend_callback_on_thread,
  /** @export */
  emscripten_set_touchmove_callback_on_thread: _emscripten_set_touchmove_callback_on_thread,
  /** @export */
  emscripten_set_touchstart_callback_on_thread: _emscripten_set_touchstart_callback_on_thread,
  /** @export */
  emscripten_set_visibilitychange_callback_on_thread: _emscripten_set_visibilitychange_callback_on_thread,
  /** @export */
  emscripten_set_wheel_callback_on_thread: _emscripten_set_wheel_callback_on_thread,
  /** @export */
  emscripten_set_window_title: _emscripten_set_window_title,
  /** @export */
  emscripten_sleep: _emscripten_sleep,
  /** @export */
  environ_get: _environ_get,
  /** @export */
  environ_sizes_get: _environ_sizes_get,
  /** @export */
  exit: _exit,
  /** @export */
  fd_close: _fd_close,
  /** @export */
  fd_read: _fd_read,
  /** @export */
  fd_seek: _fd_seek,
  /** @export */
  fd_write: _fd_write,
  /** @export */
  glActiveTexture: _glActiveTexture,
  /** @export */
  glAttachShader: _glAttachShader,
  /** @export */
  glBindBuffer: _glBindBuffer,
  /** @export */
  glBindBufferBase: _glBindBufferBase,
  /** @export */
  glBindFramebuffer: _glBindFramebuffer,
  /** @export */
  glBindRenderbuffer: _glBindRenderbuffer,
  /** @export */
  glBindSampler: _glBindSampler,
  /** @export */
  glBindTexture: _glBindTexture,
  /** @export */
  glBindVertexArray: _glBindVertexArray,
  /** @export */
  glBlendColor: _glBlendColor,
  /** @export */
  glBlendEquationSeparate: _glBlendEquationSeparate,
  /** @export */
  glBlendFuncSeparate: _glBlendFuncSeparate,
  /** @export */
  glBlitFramebuffer: _glBlitFramebuffer,
  /** @export */
  glBufferData: _glBufferData,
  /** @export */
  glBufferSubData: _glBufferSubData,
  /** @export */
  glClearBufferfi: _glClearBufferfi,
  /** @export */
  glClearBufferfv: _glClearBufferfv,
  /** @export */
  glClearBufferiv: _glClearBufferiv,
  /** @export */
  glColorMask: _glColorMask,
  /** @export */
  glCompileShader: _glCompileShader,
  /** @export */
  glCompressedTexImage2D: _glCompressedTexImage2D,
  /** @export */
  glCompressedTexImage3D: _glCompressedTexImage3D,
  /** @export */
  glCreateProgram: _glCreateProgram,
  /** @export */
  glCreateShader: _glCreateShader,
  /** @export */
  glCullFace: _glCullFace,
  /** @export */
  glDeleteBuffers: _glDeleteBuffers,
  /** @export */
  glDeleteFramebuffers: _glDeleteFramebuffers,
  /** @export */
  glDeleteProgram: _glDeleteProgram,
  /** @export */
  glDeleteRenderbuffers: _glDeleteRenderbuffers,
  /** @export */
  glDeleteSamplers: _glDeleteSamplers,
  /** @export */
  glDeleteShader: _glDeleteShader,
  /** @export */
  glDeleteTextures: _glDeleteTextures,
  /** @export */
  glDeleteVertexArrays: _glDeleteVertexArrays,
  /** @export */
  glDepthFunc: _glDepthFunc,
  /** @export */
  glDepthMask: _glDepthMask,
  /** @export */
  glDisable: _glDisable,
  /** @export */
  glDisableVertexAttribArray: _glDisableVertexAttribArray,
  /** @export */
  glDrawArrays: _glDrawArrays,
  /** @export */
  glDrawArraysInstanced: _glDrawArraysInstanced,
  /** @export */
  glDrawElements: _glDrawElements,
  /** @export */
  glDrawElementsInstanced: _glDrawElementsInstanced,
  /** @export */
  glEnable: _glEnable,
  /** @export */
  glEnableVertexAttribArray: _glEnableVertexAttribArray,
  /** @export */
  glFrontFace: _glFrontFace,
  /** @export */
  glGenBuffers: _glGenBuffers,
  /** @export */
  glGenRenderbuffers: _glGenRenderbuffers,
  /** @export */
  glGenSamplers: _glGenSamplers,
  /** @export */
  glGenTextures: _glGenTextures,
  /** @export */
  glGenVertexArrays: _glGenVertexArrays,
  /** @export */
  glGetAttribLocation: _glGetAttribLocation,
  /** @export */
  glGetIntegerv: _glGetIntegerv,
  /** @export */
  glGetProgramInfoLog: _glGetProgramInfoLog,
  /** @export */
  glGetProgramiv: _glGetProgramiv,
  /** @export */
  glGetShaderInfoLog: _glGetShaderInfoLog,
  /** @export */
  glGetShaderiv: _glGetShaderiv,
  /** @export */
  glGetStringi: _glGetStringi,
  /** @export */
  glGetUniformLocation: _glGetUniformLocation,
  /** @export */
  glInvalidateFramebuffer: _glInvalidateFramebuffer,
  /** @export */
  glLinkProgram: _glLinkProgram,
  /** @export */
  glPixelStorei: _glPixelStorei,
  /** @export */
  glPolygonOffset: _glPolygonOffset,
  /** @export */
  glReadBuffer: _glReadBuffer,
  /** @export */
  glReadPixels: _glReadPixels,
  /** @export */
  glRenderbufferStorageMultisample: _glRenderbufferStorageMultisample,
  /** @export */
  glSamplerParameterf: _glSamplerParameterf,
  /** @export */
  glSamplerParameteri: _glSamplerParameteri,
  /** @export */
  glScissor: _glScissor,
  /** @export */
  glShaderSource: _glShaderSource,
  /** @export */
  glStencilFunc: _glStencilFunc,
  /** @export */
  glStencilFuncSeparate: _glStencilFuncSeparate,
  /** @export */
  glStencilMask: _glStencilMask,
  /** @export */
  glStencilOp: _glStencilOp,
  /** @export */
  glStencilOpSeparate: _glStencilOpSeparate,
  /** @export */
  glTexImage2D: _glTexImage2D,
  /** @export */
  glTexImage3D: _glTexImage3D,
  /** @export */
  glTexParameteri: _glTexParameteri,
  /** @export */
  glTexStorage2D: _glTexStorage2D,
  /** @export */
  glTexStorage3D: _glTexStorage3D,
  /** @export */
  glTexSubImage2D: _glTexSubImage2D,
  /** @export */
  glTexSubImage3D: _glTexSubImage3D,
  /** @export */
  glUniform1fv: _glUniform1fv,
  /** @export */
  glUniform1i: _glUniform1i,
  /** @export */
  glUniform1iv: _glUniform1iv,
  /** @export */
  glUniform2fv: _glUniform2fv,
  /** @export */
  glUniform2iv: _glUniform2iv,
  /** @export */
  glUniform3fv: _glUniform3fv,
  /** @export */
  glUniform3iv: _glUniform3iv,
  /** @export */
  glUniform4fv: _glUniform4fv,
  /** @export */
  glUniform4iv: _glUniform4iv,
  /** @export */
  glUniformMatrix4fv: _glUniformMatrix4fv,
  /** @export */
  glUseProgram: _glUseProgram,
  /** @export */
  glVertexAttribDivisor: _glVertexAttribDivisor,
  /** @export */
  glVertexAttribIPointer: _glVertexAttribIPointer,
  /** @export */
  glVertexAttribPointer: _glVertexAttribPointer,
  /** @export */
  glViewport: _glViewport,
  /** @export */
  invoke_vii,
  /** @export */
  random_get: _random_get,
  /** @export */
  slog_js_log
};
var wasmExports = await createWasm();
var ___wasm_call_ctors = wasmExports['__wasm_call_ctors']
var __ZdaPv = Module['__ZdaPv'] = wasmExports['_ZdaPv']
var __ZdlPvm = Module['__ZdlPvm'] = wasmExports['_ZdlPvm']
var __ZdaPvm = Module['__ZdaPvm'] = wasmExports['_ZdaPvm']
var _malloc = wasmExports['malloc']
var _free = wasmExports['free']
var _calloc = Module['_calloc'] = wasmExports['calloc']
var _realloc = Module['_realloc'] = wasmExports['realloc']
var _WebSetFullscreen = Module['_WebSetFullscreen'] = wasmExports['WebSetFullscreen']
var _WebOpenGameMenu = Module['_WebOpenGameMenu'] = wasmExports['WebOpenGameMenu']
var _WebSyncScreenSize = Module['_WebSyncScreenSize'] = wasmExports['WebSyncScreenSize']
var _WebMain = Module['_WebMain'] = wasmExports['WebMain']
var _main = Module['_main'] = wasmExports['__main_argc_argv']
var _ma_device__on_notification_unlocked = Module['_ma_device__on_notification_unlocked'] = wasmExports['ma_device__on_notification_unlocked']
var _ma_malloc_emscripten = Module['_ma_malloc_emscripten'] = wasmExports['ma_malloc_emscripten']
var _ma_free_emscripten = Module['_ma_free_emscripten'] = wasmExports['ma_free_emscripten']
var _ma_device_process_pcm_frames_capture__webaudio = Module['_ma_device_process_pcm_frames_capture__webaudio'] = wasmExports['ma_device_process_pcm_frames_capture__webaudio']
var _ma_device_process_pcm_frames_playback__webaudio = Module['_ma_device_process_pcm_frames_playback__webaudio'] = wasmExports['ma_device_process_pcm_frames_playback__webaudio']
var ___libc_free = Module['___libc_free'] = wasmExports['__libc_free']
var ___libc_malloc = Module['___libc_malloc'] = wasmExports['__libc_malloc']
var _emscripten_builtin_malloc = Module['_emscripten_builtin_malloc'] = wasmExports['emscripten_builtin_malloc']
var _strndup = Module['_strndup'] = wasmExports['strndup']
var __ZdlPv = Module['__ZdlPv'] = wasmExports['_ZdlPv']
var __Znaj = Module['__Znaj'] = wasmExports['_Znaj']
var __ZnajSt11align_val_t = Module['__ZnajSt11align_val_t'] = wasmExports['_ZnajSt11align_val_t']
var __Znwj = Module['__Znwj'] = wasmExports['_Znwj']
var __ZnwjSt11align_val_t = Module['__ZnwjSt11align_val_t'] = wasmExports['_ZnwjSt11align_val_t']
var ___libc_calloc = Module['___libc_calloc'] = wasmExports['__libc_calloc']
var ___libc_realloc = Module['___libc_realloc'] = wasmExports['__libc_realloc']
var _emscripten_builtin_calloc = Module['_emscripten_builtin_calloc'] = wasmExports['emscripten_builtin_calloc']
var _emscripten_builtin_free = Module['_emscripten_builtin_free'] = wasmExports['emscripten_builtin_free']
var _emscripten_builtin_realloc = Module['_emscripten_builtin_realloc'] = wasmExports['emscripten_builtin_realloc']
var _malloc_size = Module['_malloc_size'] = wasmExports['malloc_size']
var _malloc_usable_size = Module['_malloc_usable_size'] = wasmExports['malloc_usable_size']
var _reallocf = Module['_reallocf'] = wasmExports['reallocf']
var _setThrew = wasmExports['setThrew']
var __emscripten_stack_restore = wasmExports['_emscripten_stack_restore']
var __emscripten_stack_alloc = wasmExports['_emscripten_stack_alloc']
var _emscripten_stack_get_current = wasmExports['emscripten_stack_get_current']
var dynCall_viii = Module['dynCall_viii'] = wasmExports['dynCall_viii']
var dynCall_vi = Module['dynCall_vi'] = wasmExports['dynCall_vi']
var dynCall_iii = Module['dynCall_iii'] = wasmExports['dynCall_iii']
var dynCall_ii = Module['dynCall_ii'] = wasmExports['dynCall_ii']
var dynCall_vii = Module['dynCall_vii'] = wasmExports['dynCall_vii']
var dynCall_fi = Module['dynCall_fi'] = wasmExports['dynCall_fi']
var dynCall_fii = Module['dynCall_fii'] = wasmExports['dynCall_fii']
var dynCall_v = Module['dynCall_v'] = wasmExports['dynCall_v']
var dynCall_viifff = Module['dynCall_viifff'] = wasmExports['dynCall_viifff']
var dynCall_viifffii = Module['dynCall_viifffii'] = wasmExports['dynCall_viifffii']
var dynCall_viiiifiiiii = Module['dynCall_viiiifiiiii'] = wasmExports['dynCall_viiiifiiiii']
var dynCall_viiiiiii = Module['dynCall_viiiiiii'] = wasmExports['dynCall_viiiiiii']
var dynCall_iiiiiiiii = Module['dynCall_iiiiiiiii'] = wasmExports['dynCall_iiiiiiiii']
var dynCall_iiiiiii = Module['dynCall_iiiiiii'] = wasmExports['dynCall_iiiiiii']
var dynCall_iiiji = Module['dynCall_iiiji'] = wasmExports['dynCall_iiiji']
var dynCall_iij = Module['dynCall_iij'] = wasmExports['dynCall_iij']
var dynCall_iiiii = Module['dynCall_iiiii'] = wasmExports['dynCall_iiiii']
var dynCall_iiji = Module['dynCall_iiji'] = wasmExports['dynCall_iiji']
var dynCall_i = Module['dynCall_i'] = wasmExports['dynCall_i']
var dynCall_iiii = Module['dynCall_iiii'] = wasmExports['dynCall_iiii']
var dynCall_viiiii = Module['dynCall_viiiii'] = wasmExports['dynCall_viiiii']
var dynCall_viif = Module['dynCall_viif'] = wasmExports['dynCall_viif']
var dynCall_viff = Module['dynCall_viff'] = wasmExports['dynCall_viff']
var dynCall_vif = Module['dynCall_vif'] = wasmExports['dynCall_vif']
var dynCall_viiiiiiiiiii = Module['dynCall_viiiiiiiiiii'] = wasmExports['dynCall_viiiiiiiiiii']
var dynCall_viiiiiiii = Module['dynCall_viiiiiiii'] = wasmExports['dynCall_viiiiiiii']
var dynCall_viiii = Module['dynCall_viiii'] = wasmExports['dynCall_viiii']
var dynCall_viiffi = Module['dynCall_viiffi'] = wasmExports['dynCall_viiffi']
var dynCall_iiiiii = Module['dynCall_iiiiii'] = wasmExports['dynCall_iiiiii']
var dynCall_iiid = Module['dynCall_iiid'] = wasmExports['dynCall_iiid']
var dynCall_jii = Module['dynCall_jii'] = wasmExports['dynCall_jii']
var dynCall_iijii = Module['dynCall_iijii'] = wasmExports['dynCall_iijii']
var dynCall_viiiiii = Module['dynCall_viiiiii'] = wasmExports['dynCall_viiiiii']
var dynCall_diii = Module['dynCall_diii'] = wasmExports['dynCall_diii']
var dynCall_viiid = Module['dynCall_viiid'] = wasmExports['dynCall_viiid']
var dynCall_viiiddd = Module['dynCall_viiiddd'] = wasmExports['dynCall_viiiddd']
var dynCall_vid = Module['dynCall_vid'] = wasmExports['dynCall_vid']
var dynCall_jiji = Module['dynCall_jiji'] = wasmExports['dynCall_jiji']
var dynCall_ji = Module['dynCall_ji'] = wasmExports['dynCall_ji']
var dynCall_vffff = Module['dynCall_vffff'] = wasmExports['dynCall_vffff']
var dynCall_vf = Module['dynCall_vf'] = wasmExports['dynCall_vf']
var dynCall_viiiiiiiii = Module['dynCall_viiiiiiiii'] = wasmExports['dynCall_viiiiiiiii']
var dynCall_vff = Module['dynCall_vff'] = wasmExports['dynCall_vff']
var dynCall_vfi = Module['dynCall_vfi'] = wasmExports['dynCall_vfi']
var dynCall_vifff = Module['dynCall_vifff'] = wasmExports['dynCall_vifff']
var dynCall_viffff = Module['dynCall_viffff'] = wasmExports['dynCall_viffff']
var dynCall_vfff = Module['dynCall_vfff'] = wasmExports['dynCall_vfff']
var dynCall_viiiiiiiiii = Module['dynCall_viiiiiiiiii'] = wasmExports['dynCall_viiiiiiiiii']
var dynCall_viifi = Module['dynCall_viifi'] = wasmExports['dynCall_viifi']
var dynCall_iidiiii = Module['dynCall_iidiiii'] = wasmExports['dynCall_iidiiii']
var _asyncify_start_unwind = wasmExports['asyncify_start_unwind']
var _asyncify_stop_unwind = wasmExports['asyncify_stop_unwind']
var _asyncify_start_rewind = wasmExports['asyncify_start_rewind']
var _asyncify_stop_rewind = wasmExports['asyncify_stop_rewind']

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    dynCall_vii(index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0) throw e;
    _setThrew(1, 0);
  }
}


// include: postamble.js
// === Auto-generated postamble setup entry stuff ===

function callMain(args = []) {

  var entryFunction = _main;

  args.unshift(thisProgram);

  var argc = args.length;
  var argv = stackAlloc((argc + 1) * 4);
  var argv_ptr = argv;
  args.forEach((arg) => {
    HEAPU32[((argv_ptr)>>2)] = stringToUTF8OnStack(arg);
    argv_ptr += 4;
  });
  HEAPU32[((argv_ptr)>>2)] = 0;

  try {

    var ret = entryFunction(argc, argv);

    // if we're not running an evented main loop, it's time to exit
    exitJS(ret, /* implicit = */ true);
    return ret;
  } catch (e) {
    return handleException(e);
  }
}

function run(args = arguments_) {

  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    readyPromiseResolve(Module);
    Module['onRuntimeInitialized']?.();

    var noInitialRun = Module['noInitialRun'] || false;
    if (!noInitialRun) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(() => {
      setTimeout(() => Module['setStatus'](''), 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
}

function preInit() {
  if (Module['preInit']) {
    if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
    while (Module['preInit'].length > 0) {
      Module['preInit'].shift()();
    }
  }
}

preInit();
run();

// end include: postamble.js

// include: postamble_modularize.js
// In MODULARIZE mode we wrap the generated code in a factory function
// and return either the Module itself, or a promise of the module.
//
// We assign to the `moduleRtn` global here and configure closure to see
// this as and extern so it won't get minified.

moduleRtn = readyPromise;

// end include: postamble_modularize.js



  return moduleRtn;
}
);
})();
if (typeof exports === 'object' && typeof module === 'object') {
  module.exports = createEdgeModule;
  // This default export looks redundant, but it allows TS to import this
  // commonjs style module.
  module.exports.default = createEdgeModule;
} else if (typeof define === 'function' && define['amd'])
  define([], () => createEdgeModule);
